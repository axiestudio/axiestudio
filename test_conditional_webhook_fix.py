#!/usr/bin/env python3
"""
üéØ TEST: Conditional Webhook Table Creation
Tests the IF/ELSE logic for webhook_events table creation
"""

import asyncio
import os
import sys

# Simple database test using asyncpg
try:
    import asyncpg
except ImportError:
    print("‚ùå asyncpg not available - installing...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "asyncpg"])
    import asyncpg

# Database URL
DATABASE_URL = os.getenv("AXIESTUDIO_DATABASE_URL")
if not DATABASE_URL:
    print("‚ùå AXIESTUDIO_DATABASE_URL environment variable not set")
    sys.exit(1)

async def test_conditional_webhook_creation():
    """Test the conditional webhook table creation logic."""
    
    print("üéØ TESTING: Conditional Webhook Table Creation (IF/ELSE Logic)")
    print("=" * 70)
    
    try:
        # Connect to database
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ Connected to Neon database")
        
        # Step 1: Check if webhook_events table exists
        print("\nüîç STEP 1: Checking if webhook_events table exists...")
        
        table_exists_query = """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'webhook_events'
            );
        """
        
        table_exists = await conn.fetchval(table_exists_query)
        print(f"üìã webhook_events table exists: {table_exists}")
        
        # Step 2: Implement IF/ELSE logic as requested
        if table_exists:
            print("‚úÖ IF: Table exists ‚Üí SKIPPING creation")
            
            # Check table structure
            columns_query = """
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'webhook_events' 
                ORDER BY ordinal_position;
            """
            
            columns = await conn.fetch(columns_query)
            print("üìã Current table structure:")
            for col in columns:
                print(f"   - {col['column_name']}: {col['data_type']} ({'NULL' if col['is_nullable'] == 'YES' else 'NOT NULL'})")
            
            # Check if event_type column exists
            event_type_exists = any(col['column_name'] == 'event_type' for col in columns)
            
            if event_type_exists:
                print("‚úÖ event_type column exists - table structure is correct")
            else:
                print("‚ùå event_type column missing - adding it...")
                await conn.execute("""
                    ALTER TABLE webhook_events 
                    ADD COLUMN IF NOT EXISTS event_type VARCHAR(100) NOT NULL DEFAULT 'unknown'
                """)
                print("‚úÖ event_type column added successfully")
                
        else:
            print("‚ùå ELSE: Table missing ‚Üí CREATING it...")
            
            # Create the webhook_events table with enterprise schema
            create_table_sql = """
                CREATE TABLE webhook_events (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    stripe_event_id VARCHAR(255) UNIQUE NOT NULL,
                    event_type VARCHAR(100) NOT NULL,
                    status VARCHAR(50) NOT NULL DEFAULT 'processing',
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    processed_at TIMESTAMP WITH TIME ZONE,
                    error_message TEXT,
                    retry_count INTEGER DEFAULT 0,
                    metadata JSONB
                );
            """
            
            await conn.execute(create_table_sql)
            print("‚úÖ webhook_events table created successfully")
            
            # Create performance indexes
            indexes_sql = [
                "CREATE INDEX IF NOT EXISTS idx_webhook_events_stripe_event_id ON webhook_events(stripe_event_id);",
                "CREATE INDEX IF NOT EXISTS idx_webhook_events_status ON webhook_events(status);",
                "CREATE INDEX IF NOT EXISTS idx_webhook_events_event_type ON webhook_events(event_type);",
                "CREATE INDEX IF NOT EXISTS idx_webhook_events_created_at ON webhook_events(created_at);"
            ]
            
            for index_sql in indexes_sql:
                await conn.execute(index_sql)
            
            print("‚úÖ Performance indexes created successfully")
        
        # Step 3: Test webhook functionality
        print("\nüß™ STEP 3: Testing webhook functionality...")
        
        test_event_id = "test_conditional_12345"
        test_event_type = "checkout.session.completed"
        
        # Check if test event exists
        event_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM webhook_events WHERE stripe_event_id = $1
            )
        """, test_event_id)
        
        if event_exists:
            print(f"‚úÖ IF: Test event {test_event_id} exists ‚Üí SKIPPING insertion")
        else:
            print(f"‚ùå ELSE: Test event {test_event_id} missing ‚Üí INSERTING it...")
            
            await conn.execute("""
                INSERT INTO webhook_events (stripe_event_id, event_type, status, created_at) 
                VALUES ($1, $2, 'processing', NOW())
            """, test_event_id, test_event_type)
            
            print("‚úÖ Test webhook event inserted successfully")
        
        # Verify the test event
        test_event = await conn.fetchrow("""
            SELECT stripe_event_id, event_type, status, created_at 
            FROM webhook_events 
            WHERE stripe_event_id = $1
        """, test_event_id)
        
        if test_event:
            print(f"‚úÖ Test verification successful:")
            print(f"   - Event ID: {test_event['stripe_event_id']}")
            print(f"   - Event Type: {test_event['event_type']}")
            print(f"   - Status: {test_event['status']}")
            print(f"   - Created: {test_event['created_at']}")
        else:
            print("‚ùå Test verification failed")
            return False
        
        # Step 4: Test the actual webhook SQL from the application
        print("\nüîß STEP 4: Testing application webhook SQL...")
        
        app_test_event_id = "app_test_67890"
        app_test_event_type = "customer.subscription.created"
        
        # This is the exact SQL used in the application
        app_sql = """
            INSERT INTO webhook_events (stripe_event_id, event_type, status, created_at) 
            VALUES ($1, $2, 'processing', NOW())
            ON CONFLICT (stripe_event_id) DO NOTHING
        """
        
        try:
            await conn.execute(app_sql, app_test_event_id, app_test_event_type)
            print("‚úÖ Application webhook SQL executed successfully")
            
            # Verify
            app_event = await conn.fetchrow("""
                SELECT * FROM webhook_events WHERE stripe_event_id = $1
            """, app_test_event_id)
            
            if app_event:
                print("‚úÖ Application webhook event verified in database")
            else:
                print("‚ùå Application webhook event not found")
                
        except Exception as e:
            print(f"‚ùå Application webhook SQL failed: {e}")
            return False
        
        await conn.close()
        
        print("\n" + "=" * 70)
        print("üéâ CONDITIONAL WEBHOOK CREATION TEST COMPLETED!")
        print("‚úÖ IF table exists ‚Üí SKIP creation ‚úì")
        print("‚úÖ ELSE table missing ‚Üí CREATE table ‚úì")
        print("‚úÖ IF event exists ‚Üí SKIP insertion ‚úì")
        print("‚úÖ ELSE event missing ‚Üí INSERT event ‚úì")
        print("‚úÖ Application webhook SQL working ‚úì")
        print("üöÄ Ready to resolve Alembic multiple heads issue!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_conditional_webhook_creation())
    if success:
        print("\nüéØ SUCCESS: Conditional logic working perfectly!")
        sys.exit(0)
    else:
        print("\nüí• FAILED: Issues detected")
        sys.exit(1)
