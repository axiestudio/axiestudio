Sep 11 11:53:48    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:53:48  [09/11/25 11:53:48] DEBUG    2025-09-11 11:53:48 - DEBUG    subscriptions.py:382
Sep 11 11:53:48                               - subscriptions - üîÑ User                          
Sep 11 11:53:48                               stefan@axiestudio.se                               
Sep 11 11:53:48                               subscription status: trial                         
Sep 11 11:53:48                      DEBUG    2025-09-11 11:53:48 - DEBUG    subscriptions.py:382
Sep 11 11:53:48                               - subscriptions - üîÑ User                          
Sep 11 11:53:48                               stefan@axiestudio.se                               
Sep 11 11:53:48                               subscription status: trial                         
Sep 11 11:54:17  [09/11/25 11:54:17] DEBUG    2025-09-11 11:54:17 - DEBUG    - flows flows.py:579
Sep 11 11:54:17                               - Found 32 flows in starter folder                 
Sep 11 11:54:42  [09/11/25 11:54:42] DEBUG    2025-09-11 11:54:42 - DEBUG  abuse_prevention.py:79
Sep 11 11:54:42                               - abuse_prevention -                               
Sep 11 11:54:42                               Generated device                                   
Sep 11 11:54:42                               fingerprint:                                       
Sep 11 11:54:42                               eee209ea614ec3ce                                   
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO  abuse_prevention.py:244
Sep 11 11:54:42                               - abuse_prevention - Trial                         
Sep 11 11:54:42                               abuse check result:                                
Sep 11 11:54:42                               {'action': 'warn',                                 
Sep 11 11:54:42                               'risk_score': 60,                                  
Sep 11 11:54:42                               'abuse_indicators':                                
Sep 11 11:54:42                               ['device_recently_used_2_ti                        
Sep 11 11:54:42                               mes'], 'message': 'Medium                          
Sep 11 11:54:42                               risk signup detected -                             
Sep 11 11:54:42                               monitoring required.',                             
Sep 11 11:54:42                               'details': {'email_check':                         
Sep 11 11:54:42                               False, 'ip_usage_count': 0,                        
Sep 11 11:54:42                               'device_usage_count': 2,                           
Sep 11 11:54:42                               'cooldown_days': 30}}                              
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1799
Sep 11 11:54:42                               service - EMAIL DEBUG - Attempting                 
Sep 11 11:54:42                               to send email to:                                  
Sep 11 11:54:42                               dsgfdsg37@gmail.com                                
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1800
Sep 11 11:54:42                               service - EMAIL DEBUG - SMTP Host:                 
Sep 11 11:54:42                               smtp.resend.com                                    
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1801
Sep 11 11:54:42                               service - EMAIL DEBUG - SMTP Port:                 
Sep 11 11:54:42                               587                                                
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1802
Sep 11 11:54:42                               service - EMAIL DEBUG - SMTP User:                 
Sep 11 11:54:42                               resend                                             
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1803
Sep 11 11:54:42                               service - EMAIL DEBUG - From Email:                
Sep 11 11:54:42                               noreply@axiestudio.se                              
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1804
Sep 11 11:54:42                               service - EMAIL DEBUG - Email                      
Sep 11 11:54:42                               Enabled: True                                      
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1830
Sep 11 11:54:42                               service - SMTP CONFIG - Host:                      
Sep 11 11:54:42                               smtp.resend.com:587                                
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1831
Sep 11 11:54:42                               service - SMTP CONFIG - User:                      
Sep 11 11:54:42                               resend                                             
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1832
Sep 11 11:54:42                               service - SMTP CONFIG - From:                      
Sep 11 11:54:42                               noreply@axiestudio.se                              
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1833
Sep 11 11:54:42                               service - SMTP CONFIG - To:                        
Sep 11 11:54:42                               dsgfdsg37@gmail.com                                
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1834
Sep 11 11:54:42                               service - EMAIL DEBUG - Connecting                 
Sep 11 11:54:42                               to SMTP server...                                  
Sep 11 11:54:42                      INFO     2025-09-11 11:54:42 - INFO     -    service.py:1836
Sep 11 11:54:42                               service - EMAIL DEBUG - Starting                   
Sep 11 11:54:42                               TLS...                                             
Sep 11 11:54:43  [09/11/25 11:54:43] INFO     2025-09-11 11:54:43 - INFO     -    service.py:1838
Sep 11 11:54:43                               service - EMAIL DEBUG - Logging in                 
Sep 11 11:54:43                               with user: resend                                  
Sep 11 11:54:43                      INFO     2025-09-11 11:54:43 - INFO     -    service.py:1840
Sep 11 11:54:43                               service - EMAIL DEBUG - Sending                    
Sep 11 11:54:43                               message...                                         
Sep 11 11:54:43                      INFO     2025-09-11 11:54:43 - INFO     -    service.py:1842
Sep 11 11:54:43                               service - EMAIL DEBUG - Message                    
Sep 11 11:54:43                               sent to SMTP server successfully                   
Sep 11 11:54:43                      INFO     2025-09-11 11:54:43 - INFO     -    service.py:1844
Sep 11 11:54:43                               service - Email sent successfully                  
Sep 11 11:54:43                               to dsgfdsg37@gmail.com                             
Sep 11 11:54:43                      INFO     2025-09-11 11:54:43 - INFO     -     service.py:236
Sep 11 11:54:43                               service - Verification code email                  
Sep 11 11:54:43                               sent successfully to                               
Sep 11 11:54:43                               dsgfdsg37@gmail.com                                
Sep 11 11:54:43                      INFO     2025-09-11 11:54:43 - INFO  abuse_prevention.py:258
Sep 11 11:54:43                               - abuse_prevention - Signup                        
Sep 11 11:54:43                               attempt logged:                                    
Sep 11 11:54:43                               email=dsgfdsg37@gmail.com,                         
Sep 11 11:54:43                               ip=193.10.214.203,                                 
Sep 11 11:54:43                               fingerprint=eee209ea614ec3c                        
Sep 11 11:54:43                               e, success=True,                                   
Sep 11 11:54:43                               risk_score=60                                      
Sep 11 11:55:18  [09/11/25 11:55:18] INFO     2025-09-11 11:55:18 -     email_verification.py:385
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - üîç                            
Sep 11 11:55:18                               6-digit code verification                          
Sep 11 11:55:18                               attempt for email:                                 
Sep 11 11:55:18                               dsgfdsg37@gmail.com                                
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:400
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - ‚úÖ                            
Sep 11 11:55:18                               Found user for code                                
Sep 11 11:55:18                               verification: atom                                 
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:443
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - üöÄ                            
Sep 11 11:55:18                               ACTIVATING USER ACCOUNT:                           
Sep 11 11:55:18                               atom                                               
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:447
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - ‚úÖ                            
Sep 11 11:55:18                               Set email_verified = True                          
Sep 11 11:55:18                               for atom                                           
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:451
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - üîì                            
Sep 11 11:55:18                               Set is_active = True for                           
Sep 11 11:55:18                               atom                                               
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:457
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - üßπ                            
Sep 11 11:55:18                               Cleared verification                               
Sep 11 11:55:18                               codes for atom                                     
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:473
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - üíæ                            
Sep 11 11:55:18                               COMMITTING account                                 
Sep 11 11:55:18                               activation to database                             
Sep 11 11:55:18                               for atom                                           
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:477
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - üéâ                            
Sep 11 11:55:18                               USER atom SUCCESSFULLY                             
Sep 11 11:55:18                               VERIFIED AND ACTIVATED!                            
Sep 11 11:55:18                      INFO     2025-09-11 11:55:18 -     email_verification.py:491
Sep 11 11:55:18                               INFO     -                                         
Sep 11 11:55:18                               email_verification - üîë                            
Sep 11 11:55:18                               Generated access tokens                            
Sep 11 11:55:18                               for atom                                           
Sep 11 11:55:18  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:55:18          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:55:18  
Sep 11 11:55:18          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:55:18          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:55:18  
Sep 11 11:55:18          For example:
Sep 11 11:55:18  
Sep 11 11:55:18          ```Python
Sep 11 11:55:18          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:55:18          ```
Sep 11 11:55:18  
Sep 11 11:55:18          instead you could use `exec()`:
Sep 11 11:55:18  
Sep 11 11:55:18          ```Python
Sep 11 11:55:18          heroes = await session.exec(select(Hero)).all()
Sep 11 11:55:18          ```
Sep 11 11:55:18          
Sep 11 11:55:18    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:55:18                      DEBUG    2025-09-11 11:55:18 - DEBUG    subscriptions.py:382
Sep 11 11:55:18                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:18                               subscription status: trial                         
Sep 11 11:55:18  [09/11/25 11:55:18] DEBUG    2025-09-11 11:55:18 - DEBUG    subscriptions.py:382
Sep 11 11:55:18                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:18                               subscription status: trial                         
Sep 11 11:55:18                      DEBUG    2025-09-11 11:55:18 - DEBUG    subscriptions.py:382
Sep 11 11:55:18                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:18                               subscription status: trial                         
Sep 11 11:55:20  [09/11/25 11:55:20] INFO     2025-09-11 11:55:20 - INFO     - local  local.py:96
Sep 11 11:55:20                               - Listed 54 files in flow                          
Sep 11 11:55:20                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:55:20                               tures/People.                                      
Sep 11 11:55:20                      DEBUG    2025-09-11 11:55:20 - DEBUG    subscriptions.py:382
Sep 11 11:55:20                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:20                               subscription status: trial                         
Sep 11 11:55:20                      INFO     2025-09-11 11:55:20 - INFO     - local  local.py:96
Sep 11 11:55:20                               - Listed 25 files in flow                          
Sep 11 11:55:20                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:55:20                               tures/Space.                                       
Sep 11 11:55:20                      DEBUG    2025-09-11 11:55:20 - DEBUG    subscriptions.py:382
Sep 11 11:55:20                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:20                               subscription status: trial                         
Sep 11 11:55:20  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:55:20          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:55:20  
Sep 11 11:55:20          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:55:20          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:55:20  
Sep 11 11:55:20          For example:
Sep 11 11:55:20  
Sep 11 11:55:20          ```Python
Sep 11 11:55:20          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:55:20          ```
Sep 11 11:55:20  
Sep 11 11:55:20          instead you could use `exec()`:
Sep 11 11:55:20  
Sep 11 11:55:20          ```Python
Sep 11 11:55:20          heroes = await session.exec(select(Hero)).all()
Sep 11 11:55:20          ```
Sep 11 11:55:20          
Sep 11 11:55:20    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:55:20  [09/11/25 11:55:20] DEBUG    2025-09-11 11:55:20 - DEBUG    subscriptions.py:382
Sep 11 11:55:20                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:20                               subscription status: trial                         
Sep 11 11:55:39  [09/11/25 11:55:39] DEBUG    2025-09-11 11:55:39 - DEBUG    subscriptions.py:382
Sep 11 11:55:39                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:39                               subscription status: trial                         
Sep 11 11:55:39  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:55:39          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:55:39  
Sep 11 11:55:39          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:55:39          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:55:39  
Sep 11 11:55:39          For example:
Sep 11 11:55:39  
Sep 11 11:55:39          ```Python
Sep 11 11:55:39          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:55:39          ```
Sep 11 11:55:39  
Sep 11 11:55:39          instead you could use `exec()`:
Sep 11 11:55:39  
Sep 11 11:55:39          ```Python
Sep 11 11:55:39          heroes = await session.exec(select(Hero)).all()
Sep 11 11:55:39          ```
Sep 11 11:55:39          
Sep 11 11:55:39    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:55:39                      INFO     2025-09-11 11:55:39 - INFO     - local  local.py:96
Sep 11 11:55:39                               - Listed 54 files in flow                          
Sep 11 11:55:39                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:55:39                               tures/People.                                      
Sep 11 11:55:39                      INFO     2025-09-11 11:55:39 - INFO     - local  local.py:96
Sep 11 11:55:39                               - Listed 25 files in flow                          
Sep 11 11:55:39                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:55:39                               tures/Space.                                       
Sep 11 11:55:39                      DEBUG    2025-09-11 11:55:39 - DEBUG    subscriptions.py:382
Sep 11 11:55:39                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:39                               subscription status: trial                         
Sep 11 11:55:44  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:55:44          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:55:44  
Sep 11 11:55:44          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:55:44          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:55:44  
Sep 11 11:55:44          For example:
Sep 11 11:55:44  
Sep 11 11:55:44          ```Python
Sep 11 11:55:44          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:55:44          ```
Sep 11 11:55:44  
Sep 11 11:55:44          instead you could use `exec()`:
Sep 11 11:55:44  
Sep 11 11:55:44          ```Python
Sep 11 11:55:44          heroes = await session.exec(select(Hero)).all()
Sep 11 11:55:44          ```
Sep 11 11:55:44          
Sep 11 11:55:44    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:55:44  [09/11/25 11:55:44] DEBUG    2025-09-11 11:55:44 - DEBUG    subscriptions.py:382
Sep 11 11:55:44                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:44                               subscription status: trial                         
Sep 11 11:55:44                      DEBUG    2025-09-11 11:55:44 - DEBUG    subscriptions.py:382
Sep 11 11:55:44                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:44                               subscription status: trial                         
Sep 11 11:55:44                      DEBUG    2025-09-11 11:55:44 - DEBUG    subscriptions.py:382
Sep 11 11:55:44                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:44                               subscription status: trial                         
Sep 11 11:55:45  [09/11/25 11:55:45] DEBUG    2025-09-11 11:55:45 - DEBUG    subscriptions.py:382
Sep 11 11:55:45                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:45                               subscription status: trial                         
Sep 11 11:55:47  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:55:47          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:55:47  
Sep 11 11:55:47          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:55:47          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:55:47  
Sep 11 11:55:47          For example:
Sep 11 11:55:47  
Sep 11 11:55:47          ```Python
Sep 11 11:55:47          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:55:47          ```
Sep 11 11:55:47  
Sep 11 11:55:47          instead you could use `exec()`:
Sep 11 11:55:47  
Sep 11 11:55:47          ```Python
Sep 11 11:55:47          heroes = await session.exec(select(Hero)).all()
Sep 11 11:55:47          ```
Sep 11 11:55:47          
Sep 11 11:55:47    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:55:47  [09/11/25 11:55:47] DEBUG    2025-09-11 11:55:47 - DEBUG    subscriptions.py:382
Sep 11 11:55:47                               - subscriptions - üîÑ User atom                     
Sep 11 11:55:47                               subscription status: trial                         
Sep 11 11:55:47  [09/11/25 11:55:47] INFO     2025-09-11 11:55:47 - INFO     -      service.py:54
Sep 11 11:55:47                               service - Creating Stripe customer                 
Sep 11 11:55:47                               for email: dsg***@gmail.com                        
Sep 11 11:55:48  [09/11/25 11:55:48] INFO     2025-09-11 11:55:48 - INFO     -      service.py:60
Sep 11 11:55:48                               service - Created Stripe customer:                 
Sep 11 11:55:48                               cus_T2DXGEKLXnZjvB                                 
Sep 11 11:55:48                      INFO     2025-09-11 11:55:48 - INFO     -      service.py:90
Sep 11 11:55:48                               service - Creating checkout with no                
Sep 11 11:55:48                               trial (immediate payment)                          
Sep 11 11:55:48                      INFO     2025-09-11 11:55:48 - INFO     -     service.py:105
Sep 11 11:55:48                               service - Created checkout session:                
Sep 11 11:55:48                               cs_live_b1tiJpgtvVViPO1Okq8bZSTM6dvE               
Sep 11 11:55:48                               ufVATy6F7GfY4StCbjz5ASbGYtk28s                     
Sep 11 11:57:11  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:11          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:11  
Sep 11 11:57:11          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:11          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:11  
Sep 11 11:57:11          For example:
Sep 11 11:57:11  
Sep 11 11:57:11          ```Python
Sep 11 11:57:11          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:11          ```
Sep 11 11:57:11  
Sep 11 11:57:11          instead you could use `exec()`:
Sep 11 11:57:11  
Sep 11 11:57:11          ```Python
Sep 11 11:57:11          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:11          ```
Sep 11 11:57:11          
Sep 11 11:57:11    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:11  [09/11/25 11:57:11] DEBUG    2025-09-11 11:57:11 - DEBUG    subscriptions.py:382
Sep 11 11:57:11                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:11                               subscription status: trial                         
Sep 11 11:57:11  [09/11/25 11:57:11] DEBUG    2025-09-11 11:57:11 - DEBUG    subscriptions.py:382
Sep 11 11:57:11                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:11                               subscription status: trial                         
Sep 11 11:57:11                      DEBUG    2025-09-11 11:57:11 - DEBUG    subscriptions.py:382
Sep 11 11:57:11                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:11                               subscription status: trial                         
Sep 11 11:57:11                      DEBUG    2025-09-11 11:57:11 - DEBUG    subscriptions.py:382
Sep 11 11:57:11                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:11                               subscription status: trial                         
Sep 11 11:57:14  [09/11/25 11:57:14] DEBUG    2025-09-11 11:57:14 - DEBUG    subscriptions.py:382
Sep 11 11:57:14                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:14                               subscription status: trial                         
Sep 11 11:57:14  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:14          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:14  
Sep 11 11:57:14          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:14          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:14  
Sep 11 11:57:14          For example:
Sep 11 11:57:14  
Sep 11 11:57:14          ```Python
Sep 11 11:57:14          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:14          ```
Sep 11 11:57:14  
Sep 11 11:57:14          instead you could use `exec()`:
Sep 11 11:57:14  
Sep 11 11:57:14          ```Python
Sep 11 11:57:14          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:14          ```
Sep 11 11:57:14          
Sep 11 11:57:14    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:14                      DEBUG    2025-09-11 11:57:14 - DEBUG    subscriptions.py:382
Sep 11 11:57:14                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:14                               subscription status: trial                         
Sep 11 11:57:15  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:15          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:15  
Sep 11 11:57:15          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:15          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:15  
Sep 11 11:57:15          For example:
Sep 11 11:57:15  
Sep 11 11:57:15          ```Python
Sep 11 11:57:15          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:15          ```
Sep 11 11:57:15  
Sep 11 11:57:15          instead you could use `exec()`:
Sep 11 11:57:15  
Sep 11 11:57:15          ```Python
Sep 11 11:57:15          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:15          ```
Sep 11 11:57:15          
Sep 11 11:57:15    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:15  [09/11/25 11:57:15] DEBUG    2025-09-11 11:57:15 - DEBUG    subscriptions.py:382
Sep 11 11:57:15                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:15                               subscription status: trial                         
Sep 11 11:57:18  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:18          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:18  
Sep 11 11:57:18          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:18          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:18  
Sep 11 11:57:18          For example:
Sep 11 11:57:18  
Sep 11 11:57:18          ```Python
Sep 11 11:57:18          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:18          ```
Sep 11 11:57:18  
Sep 11 11:57:18          instead you could use `exec()`:
Sep 11 11:57:18  
Sep 11 11:57:18          ```Python
Sep 11 11:57:18          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:18          ```
Sep 11 11:57:18          
Sep 11 11:57:18    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:18  [09/11/25 11:57:18] DEBUG    2025-09-11 11:57:18 - DEBUG    subscriptions.py:382
Sep 11 11:57:18                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:18                               subscription status: trial                         
Sep 11 11:57:21  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:21          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:21  
Sep 11 11:57:21          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:21          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:21  
Sep 11 11:57:21          For example:
Sep 11 11:57:21  
Sep 11 11:57:21          ```Python
Sep 11 11:57:21          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:21          ```
Sep 11 11:57:21  
Sep 11 11:57:21          instead you could use `exec()`:
Sep 11 11:57:21  
Sep 11 11:57:21          ```Python
Sep 11 11:57:21          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:21          ```
Sep 11 11:57:21          
Sep 11 11:57:21    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:21  [09/11/25 11:57:21] DEBUG    2025-09-11 11:57:21 - DEBUG    subscriptions.py:382
Sep 11 11:57:21                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:21                               subscription status: trial                         
Sep 11 11:57:22  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:22          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:22  
Sep 11 11:57:22          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:22          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:22  
Sep 11 11:57:22          For example:
Sep 11 11:57:22  
Sep 11 11:57:22          ```Python
Sep 11 11:57:22          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:22          ```
Sep 11 11:57:22  
Sep 11 11:57:22          instead you could use `exec()`:
Sep 11 11:57:22  
Sep 11 11:57:22          ```Python
Sep 11 11:57:22          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:22          ```
Sep 11 11:57:22          
Sep 11 11:57:22    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:22  [09/11/25 11:57:22] DEBUG    2025-09-11 11:57:22 - DEBUG    subscriptions.py:382
Sep 11 11:57:22                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:22                               subscription status: trial                         
Sep 11 11:57:22                      DEBUG    2025-09-11 11:57:22 - DEBUG    subscriptions.py:382
Sep 11 11:57:22                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:22                               subscription status: trial                         
Sep 11 11:57:22                      DEBUG    2025-09-11 11:57:22 - DEBUG    subscriptions.py:382
Sep 11 11:57:22                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:22                               subscription status: trial                         
Sep 11 11:57:24  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:24          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:24  
Sep 11 11:57:24          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:24          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:24  
Sep 11 11:57:24          For example:
Sep 11 11:57:24  
Sep 11 11:57:24          ```Python
Sep 11 11:57:24          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:24          ```
Sep 11 11:57:24  
Sep 11 11:57:24          instead you could use `exec()`:
Sep 11 11:57:24  
Sep 11 11:57:24          ```Python
Sep 11 11:57:24          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:24          ```
Sep 11 11:57:24          
Sep 11 11:57:24    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:24  [09/11/25 11:57:24] DEBUG    2025-09-11 11:57:24 - DEBUG    subscriptions.py:382
Sep 11 11:57:24                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:24                               subscription status: trial                         
Sep 11 11:57:27  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:27          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:27  
Sep 11 11:57:27          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:27          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:27  
Sep 11 11:57:27          For example:
Sep 11 11:57:27  
Sep 11 11:57:27          ```Python
Sep 11 11:57:27          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:27          ```
Sep 11 11:57:27  
Sep 11 11:57:27          instead you could use `exec()`:
Sep 11 11:57:27  
Sep 11 11:57:27          ```Python
Sep 11 11:57:27          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:27          ```
Sep 11 11:57:27          
Sep 11 11:57:27    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:27  [09/11/25 11:57:27] DEBUG    2025-09-11 11:57:27 - DEBUG    subscriptions.py:382
Sep 11 11:57:27                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:27                               subscription status: trial                         
Sep 11 11:57:30  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:30          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:30  
Sep 11 11:57:30          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:30          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:30  
Sep 11 11:57:30          For example:
Sep 11 11:57:30  
Sep 11 11:57:30          ```Python
Sep 11 11:57:30          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:30          ```
Sep 11 11:57:30  
Sep 11 11:57:30          instead you could use `exec()`:
Sep 11 11:57:30  
Sep 11 11:57:30          ```Python
Sep 11 11:57:30          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:30          ```
Sep 11 11:57:30          
Sep 11 11:57:30    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:30  [09/11/25 11:57:30] DEBUG    2025-09-11 11:57:30 - DEBUG    subscriptions.py:382
Sep 11 11:57:30                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:30                               subscription status: trial                         
Sep 11 11:57:33  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:33          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:33  
Sep 11 11:57:33          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:33          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:33  
Sep 11 11:57:33          For example:
Sep 11 11:57:33  
Sep 11 11:57:33          ```Python
Sep 11 11:57:33          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:33          ```
Sep 11 11:57:33  
Sep 11 11:57:33          instead you could use `exec()`:
Sep 11 11:57:33  
Sep 11 11:57:33          ```Python
Sep 11 11:57:33          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:33          ```
Sep 11 11:57:33          
Sep 11 11:57:33    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:33  [09/11/25 11:57:33] DEBUG    2025-09-11 11:57:33 - DEBUG    subscriptions.py:382
Sep 11 11:57:33                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:33                               subscription status: trial                         
Sep 11 11:57:33  [09/11/25 11:57:33] DEBUG    2025-09-11 11:57:33 - DEBUG    subscriptions.py:382
Sep 11 11:57:33                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:33                               subscription status: trial                         
Sep 11 11:57:33  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:33          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:33  
Sep 11 11:57:33          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:33          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:33  
Sep 11 11:57:33          For example:
Sep 11 11:57:33  
Sep 11 11:57:33          ```Python
Sep 11 11:57:33          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:33          ```
Sep 11 11:57:33  
Sep 11 11:57:33          instead you could use `exec()`:
Sep 11 11:57:33  
Sep 11 11:57:33          ```Python
Sep 11 11:57:33          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:33          ```
Sep 11 11:57:33          
Sep 11 11:57:33    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:33                      DEBUG    2025-09-11 11:57:33 - DEBUG    subscriptions.py:382
Sep 11 11:57:33                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:33                               subscription status: trial                         
Sep 11 11:57:35  [09/11/25 11:57:35] INFO     2025-09-11 11:57:35 - INFO     - local  local.py:96
Sep 11 11:57:35                               - Listed 54 files in flow                          
Sep 11 11:57:35                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:57:35                               tures/People.                                      
Sep 11 11:57:35                      DEBUG    2025-09-11 11:57:35 - DEBUG    subscriptions.py:382
Sep 11 11:57:35                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:35                               subscription status: trial                         
Sep 11 11:57:35                      INFO     2025-09-11 11:57:35 - INFO     - local  local.py:96
Sep 11 11:57:35                               - Listed 25 files in flow                          
Sep 11 11:57:35                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:57:35                               tures/Space.                                       
Sep 11 11:57:35                      DEBUG    2025-09-11 11:57:35 - DEBUG    subscriptions.py:382
Sep 11 11:57:35                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:35                               subscription status: trial                         
Sep 11 11:57:35  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:35          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:35  
Sep 11 11:57:35          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:35          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:35  
Sep 11 11:57:35          For example:
Sep 11 11:57:35  
Sep 11 11:57:35          ```Python
Sep 11 11:57:35          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:35          ```
Sep 11 11:57:35  
Sep 11 11:57:35          instead you could use `exec()`:
Sep 11 11:57:35  
Sep 11 11:57:35          ```Python
Sep 11 11:57:35          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:35          ```
Sep 11 11:57:35          
Sep 11 11:57:35    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:35  [09/11/25 11:57:35] DEBUG    2025-09-11 11:57:35 - DEBUG    subscriptions.py:382
Sep 11 11:57:35                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:35                               subscription status: trial                         
Sep 11 11:57:35  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:35          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:35  
Sep 11 11:57:35          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:35          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:35  
Sep 11 11:57:35          For example:
Sep 11 11:57:35  
Sep 11 11:57:35          ```Python
Sep 11 11:57:35          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:35          ```
Sep 11 11:57:35  
Sep 11 11:57:35          instead you could use `exec()`:
Sep 11 11:57:35  
Sep 11 11:57:35          ```Python
Sep 11 11:57:35          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:35          ```
Sep 11 11:57:35          
Sep 11 11:57:35    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:35                      DEBUG    2025-09-11 11:57:35 - DEBUG    subscriptions.py:382
Sep 11 11:57:35                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:35                               subscription status: trial                         
Sep 11 11:57:38  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:38          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:38  
Sep 11 11:57:38          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:38          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:38  
Sep 11 11:57:38          For example:
Sep 11 11:57:38  
Sep 11 11:57:38          ```Python
Sep 11 11:57:38          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:38          ```
Sep 11 11:57:38  
Sep 11 11:57:38          instead you could use `exec()`:
Sep 11 11:57:38  
Sep 11 11:57:38          ```Python
Sep 11 11:57:38          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:38          ```
Sep 11 11:57:38          
Sep 11 11:57:38    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:38  [09/11/25 11:57:38] DEBUG    2025-09-11 11:57:38 - DEBUG    subscriptions.py:382
Sep 11 11:57:38                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:38                               subscription status: trial                         
Sep 11 11:57:41  [09/11/25 11:57:41] DEBUG    2025-09-11 11:57:41 - DEBUG    subscriptions.py:382
Sep 11 11:57:41                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:41                               subscription status: trial                         
Sep 11 11:57:41  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:41          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:41  
Sep 11 11:57:41          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:41          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:41  
Sep 11 11:57:41          For example:
Sep 11 11:57:41  
Sep 11 11:57:41          ```Python
Sep 11 11:57:41          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:41          ```
Sep 11 11:57:41  
Sep 11 11:57:41          instead you could use `exec()`:
Sep 11 11:57:41  
Sep 11 11:57:41          ```Python
Sep 11 11:57:41          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:41          ```
Sep 11 11:57:41          
Sep 11 11:57:41    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:41                      DEBUG    2025-09-11 11:57:41 - DEBUG    subscriptions.py:382
Sep 11 11:57:41                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:41                               subscription status: trial                         
Sep 11 11:57:44  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:44          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:44  
Sep 11 11:57:44          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:44          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:44  
Sep 11 11:57:44          For example:
Sep 11 11:57:44  
Sep 11 11:57:44          ```Python
Sep 11 11:57:44          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:44          ```
Sep 11 11:57:44  
Sep 11 11:57:44          instead you could use `exec()`:
Sep 11 11:57:44  
Sep 11 11:57:44          ```Python
Sep 11 11:57:44          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:44          ```
Sep 11 11:57:44          
Sep 11 11:57:44    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:44  [09/11/25 11:57:44] DEBUG    2025-09-11 11:57:44 - DEBUG    subscriptions.py:382
Sep 11 11:57:44                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:44                               subscription status: trial                         
Sep 11 11:57:48  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:48          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:48  
Sep 11 11:57:48          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:48          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:48  
Sep 11 11:57:48          For example:
Sep 11 11:57:48  
Sep 11 11:57:48          ```Python
Sep 11 11:57:48          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:48          ```
Sep 11 11:57:48  
Sep 11 11:57:48          instead you could use `exec()`:
Sep 11 11:57:48  
Sep 11 11:57:48          ```Python
Sep 11 11:57:48          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:48          ```
Sep 11 11:57:48          
Sep 11 11:57:48    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:48  [09/11/25 11:57:48] DEBUG    2025-09-11 11:57:48 - DEBUG    subscriptions.py:382
Sep 11 11:57:48                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:48                               subscription status: trial                         
Sep 11 11:57:51  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:51          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:51  
Sep 11 11:57:51          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:51          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:51  
Sep 11 11:57:51          For example:
Sep 11 11:57:51  
Sep 11 11:57:51          ```Python
Sep 11 11:57:51          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:51          ```
Sep 11 11:57:51  
Sep 11 11:57:51          instead you could use `exec()`:
Sep 11 11:57:51  
Sep 11 11:57:51          ```Python
Sep 11 11:57:51          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:51          ```
Sep 11 11:57:51          
Sep 11 11:57:51    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:51  [09/11/25 11:57:51] DEBUG    2025-09-11 11:57:51 - DEBUG    subscriptions.py:382
Sep 11 11:57:51                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:51                               subscription status: trial                         
Sep 11 11:57:54  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:54          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:54  
Sep 11 11:57:54          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:54          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:54  
Sep 11 11:57:54          For example:
Sep 11 11:57:54  
Sep 11 11:57:54          ```Python
Sep 11 11:57:54          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:54          ```
Sep 11 11:57:54  
Sep 11 11:57:54          instead you could use `exec()`:
Sep 11 11:57:54  
Sep 11 11:57:54          ```Python
Sep 11 11:57:54          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:54          ```
Sep 11 11:57:54          
Sep 11 11:57:54    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:54  [09/11/25 11:57:54] DEBUG    2025-09-11 11:57:54 - DEBUG    subscriptions.py:382
Sep 11 11:57:54                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:54                               subscription status: trial                         
Sep 11 11:57:57  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:57:57          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:57:57  
Sep 11 11:57:57          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:57:57          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:57:57  
Sep 11 11:57:57          For example:
Sep 11 11:57:57  
Sep 11 11:57:57          ```Python
Sep 11 11:57:57          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:57:57          ```
Sep 11 11:57:57  
Sep 11 11:57:57          instead you could use `exec()`:
Sep 11 11:57:57  
Sep 11 11:57:57          ```Python
Sep 11 11:57:57          heroes = await session.exec(select(Hero)).all()
Sep 11 11:57:57          ```
Sep 11 11:57:57          
Sep 11 11:57:57    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:57:57  [09/11/25 11:57:57] DEBUG    2025-09-11 11:57:57 - DEBUG    subscriptions.py:382
Sep 11 11:57:57                               - subscriptions - üîÑ User atom                     
Sep 11 11:57:57                               subscription status: trial                         
Sep 11 11:58:00  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:00          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:00  
Sep 11 11:58:00          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:00          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:00  
Sep 11 11:58:00          For example:
Sep 11 11:58:00  
Sep 11 11:58:00          ```Python
Sep 11 11:58:00          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:00          ```
Sep 11 11:58:00  
Sep 11 11:58:00          instead you could use `exec()`:
Sep 11 11:58:00  
Sep 11 11:58:00          ```Python
Sep 11 11:58:00          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:00          ```
Sep 11 11:58:00          
Sep 11 11:58:00    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:00  [09/11/25 11:58:00] DEBUG    2025-09-11 11:58:00 - DEBUG    subscriptions.py:382
Sep 11 11:58:00                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:00                               subscription status: trial                         
Sep 11 11:58:03  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:03          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:03  
Sep 11 11:58:03          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:03          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:03  
Sep 11 11:58:03          For example:
Sep 11 11:58:03  
Sep 11 11:58:03          ```Python
Sep 11 11:58:03          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:03          ```
Sep 11 11:58:03  
Sep 11 11:58:03          instead you could use `exec()`:
Sep 11 11:58:03  
Sep 11 11:58:03          ```Python
Sep 11 11:58:03          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:03          ```
Sep 11 11:58:03          
Sep 11 11:58:03    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:03  [09/11/25 11:58:03] DEBUG    2025-09-11 11:58:03 - DEBUG    subscriptions.py:382
Sep 11 11:58:03                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:03                               subscription status: trial                         
Sep 11 11:58:06  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:06          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:06  
Sep 11 11:58:06          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:06          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:06  
Sep 11 11:58:06          For example:
Sep 11 11:58:06  
Sep 11 11:58:06          ```Python
Sep 11 11:58:06          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:06          ```
Sep 11 11:58:06  
Sep 11 11:58:06          instead you could use `exec()`:
Sep 11 11:58:06  
Sep 11 11:58:06          ```Python
Sep 11 11:58:06          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:06          ```
Sep 11 11:58:06          
Sep 11 11:58:06    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:06  [09/11/25 11:58:06] DEBUG    2025-09-11 11:58:06 - DEBUG    subscriptions.py:382
Sep 11 11:58:06                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:06                               subscription status: trial                         
Sep 11 11:58:09  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:09          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:09  
Sep 11 11:58:09          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:09          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:09  
Sep 11 11:58:09          For example:
Sep 11 11:58:09  
Sep 11 11:58:09          ```Python
Sep 11 11:58:09          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:09          ```
Sep 11 11:58:09  
Sep 11 11:58:09          instead you could use `exec()`:
Sep 11 11:58:09  
Sep 11 11:58:09          ```Python
Sep 11 11:58:09          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:09          ```
Sep 11 11:58:09          
Sep 11 11:58:09    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:09  [09/11/25 11:58:09] DEBUG    2025-09-11 11:58:09 - DEBUG    subscriptions.py:382
Sep 11 11:58:09                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:09                               subscription status: trial                         
Sep 11 11:58:12  [09/11/25 11:58:12] DEBUG    2025-09-11 11:58:12 - DEBUG    subscriptions.py:382
Sep 11 11:58:12                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:12                               subscription status: trial                         
Sep 11 11:58:12  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:12          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:12  
Sep 11 11:58:12          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:12          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:12  
Sep 11 11:58:12          For example:
Sep 11 11:58:12  
Sep 11 11:58:12          ```Python
Sep 11 11:58:12          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:12          ```
Sep 11 11:58:12  
Sep 11 11:58:12          instead you could use `exec()`:
Sep 11 11:58:12  
Sep 11 11:58:12          ```Python
Sep 11 11:58:12          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:12          ```
Sep 11 11:58:12          
Sep 11 11:58:12    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:12  [09/11/25 11:58:12] DEBUG    2025-09-11 11:58:12 - DEBUG    subscriptions.py:382
Sep 11 11:58:12                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:12                               subscription status: trial                         
Sep 11 11:58:15  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:15          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:15  
Sep 11 11:58:15          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:15          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:15  
Sep 11 11:58:15          For example:
Sep 11 11:58:15  
Sep 11 11:58:15          ```Python
Sep 11 11:58:15          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:15          ```
Sep 11 11:58:15  
Sep 11 11:58:15          instead you could use `exec()`:
Sep 11 11:58:15  
Sep 11 11:58:15          ```Python
Sep 11 11:58:15          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:15          ```
Sep 11 11:58:15          
Sep 11 11:58:15    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:15  [09/11/25 11:58:15] DEBUG    2025-09-11 11:58:15 - DEBUG    subscriptions.py:382
Sep 11 11:58:15                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:15                               subscription status: trial                         
Sep 11 11:58:16  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:16          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:16  
Sep 11 11:58:16          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:16          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:16  
Sep 11 11:58:16          For example:
Sep 11 11:58:16  
Sep 11 11:58:16          ```Python
Sep 11 11:58:16          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:16          ```
Sep 11 11:58:16  
Sep 11 11:58:16          instead you could use `exec()`:
Sep 11 11:58:16  
Sep 11 11:58:16          ```Python
Sep 11 11:58:16          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:16          ```
Sep 11 11:58:16          
Sep 11 11:58:16    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:16  [09/11/25 11:58:16] INFO     2025-09-11 11:58:16 - INFO     - local  local.py:96
Sep 11 11:58:16                               - Listed 54 files in flow                          
Sep 11 11:58:16                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:58:16                               tures/People.                                      
Sep 11 11:58:16  [09/11/25 11:58:16] DEBUG    2025-09-11 11:58:16 - DEBUG    subscriptions.py:382
Sep 11 11:58:16                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:16                               subscription status: trial                         
Sep 11 11:58:16                      DEBUG    2025-09-11 11:58:16 - DEBUG    subscriptions.py:382
Sep 11 11:58:16                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:16                               subscription status: trial                         
Sep 11 11:58:16                      INFO     2025-09-11 11:58:16 - INFO     - local  local.py:96
Sep 11 11:58:16                               - Listed 25 files in flow                          
Sep 11 11:58:16                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:58:16                               tures/Space.                                       
Sep 11 11:58:17  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:17          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:17  
Sep 11 11:58:17          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:17          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:17  
Sep 11 11:58:17          For example:
Sep 11 11:58:17  
Sep 11 11:58:17          ```Python
Sep 11 11:58:17          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:17          ```
Sep 11 11:58:17  
Sep 11 11:58:17          instead you could use `exec()`:
Sep 11 11:58:17  
Sep 11 11:58:17          ```Python
Sep 11 11:58:17          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:17          ```
Sep 11 11:58:17          
Sep 11 11:58:17    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:17  [09/11/25 11:58:17] DEBUG    2025-09-11 11:58:17 - DEBUG    subscriptions.py:382
Sep 11 11:58:17                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:17                               subscription status: trial                         
Sep 11 11:58:20  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:20          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:20  
Sep 11 11:58:20          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:20          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:20  
Sep 11 11:58:20          For example:
Sep 11 11:58:20  
Sep 11 11:58:20          ```Python
Sep 11 11:58:20          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:20          ```
Sep 11 11:58:20  
Sep 11 11:58:20          instead you could use `exec()`:
Sep 11 11:58:20  
Sep 11 11:58:20          ```Python
Sep 11 11:58:20          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:20          ```
Sep 11 11:58:20          
Sep 11 11:58:20    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:20  [09/11/25 11:58:20] DEBUG    2025-09-11 11:58:20 - DEBUG    subscriptions.py:382
Sep 11 11:58:20                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:20                               subscription status: trial                         
Sep 11 11:58:24  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:24          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:24  
Sep 11 11:58:24          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:24          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:24  
Sep 11 11:58:24          For example:
Sep 11 11:58:24  
Sep 11 11:58:24          ```Python
Sep 11 11:58:24          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:24          ```
Sep 11 11:58:24  
Sep 11 11:58:24          instead you could use `exec()`:
Sep 11 11:58:24  
Sep 11 11:58:24          ```Python
Sep 11 11:58:24          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:24          ```
Sep 11 11:58:24          
Sep 11 11:58:24    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:24  [09/11/25 11:58:24] DEBUG    2025-09-11 11:58:24 - DEBUG    subscriptions.py:382
Sep 11 11:58:24                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:24                               subscription status: trial                         
Sep 11 11:58:27  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:27          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:27  
Sep 11 11:58:27          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:27          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:27  
Sep 11 11:58:27          For example:
Sep 11 11:58:27  
Sep 11 11:58:27          ```Python
Sep 11 11:58:27          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:27          ```
Sep 11 11:58:27  
Sep 11 11:58:27          instead you could use `exec()`:
Sep 11 11:58:27  
Sep 11 11:58:27          ```Python
Sep 11 11:58:27          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:27          ```
Sep 11 11:58:27          
Sep 11 11:58:27    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:27  [09/11/25 11:58:27] DEBUG    2025-09-11 11:58:27 - DEBUG    subscriptions.py:382
Sep 11 11:58:27                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:27                               subscription status: trial                         
Sep 11 11:58:30  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:30          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:30  
Sep 11 11:58:30          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:30          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:30  
Sep 11 11:58:30          For example:
Sep 11 11:58:30  
Sep 11 11:58:30          ```Python
Sep 11 11:58:30          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:30          ```
Sep 11 11:58:30  
Sep 11 11:58:30          instead you could use `exec()`:
Sep 11 11:58:30  
Sep 11 11:58:30          ```Python
Sep 11 11:58:30          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:30          ```
Sep 11 11:58:30          
Sep 11 11:58:30    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:30  [09/11/25 11:58:30] DEBUG    2025-09-11 11:58:30 - DEBUG    subscriptions.py:382
Sep 11 11:58:30                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:30                               subscription status: trial                         
Sep 11 11:58:33  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:33          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:33  
Sep 11 11:58:33          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:33          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:33  
Sep 11 11:58:33          For example:
Sep 11 11:58:33  
Sep 11 11:58:33          ```Python
Sep 11 11:58:33          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:33          ```
Sep 11 11:58:33  
Sep 11 11:58:33          instead you could use `exec()`:
Sep 11 11:58:33  
Sep 11 11:58:33          ```Python
Sep 11 11:58:33          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:33          ```
Sep 11 11:58:33          
Sep 11 11:58:33    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:33  [09/11/25 11:58:33] DEBUG    2025-09-11 11:58:33 - DEBUG    subscriptions.py:382
Sep 11 11:58:33                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:33                               subscription status: trial                         
Sep 11 11:58:34  [09/11/25 11:58:34] DEBUG    2025-09-11 11:58:34 - DEBUG    subscriptions.py:382
Sep 11 11:58:34                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:34                               subscription status: trial                         
Sep 11 11:58:35  [09/11/25 11:58:35] INFO     2025-09-11 11:58:35 - INFO     - local  local.py:96
Sep 11 11:58:35                               - Listed 54 files in flow                          
Sep 11 11:58:35                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:58:35                               tures/People.                                      
Sep 11 11:58:35  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:35          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:35  
Sep 11 11:58:35          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:35          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:35  
Sep 11 11:58:35          For example:
Sep 11 11:58:35  
Sep 11 11:58:35          ```Python
Sep 11 11:58:35          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:35          ```
Sep 11 11:58:35  
Sep 11 11:58:35          instead you could use `exec()`:
Sep 11 11:58:35  
Sep 11 11:58:35          ```Python
Sep 11 11:58:35          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:35          ```
Sep 11 11:58:35          
Sep 11 11:58:35    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:35                      INFO     2025-09-11 11:58:35 - INFO     - local  local.py:96
Sep 11 11:58:35                               - Listed 25 files in flow                          
Sep 11 11:58:35                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:58:35                               tures/Space.                                       
Sep 11 11:58:35                      DEBUG    2025-09-11 11:58:35 - DEBUG    subscriptions.py:382
Sep 11 11:58:35                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:35                               subscription status: trial                         
Sep 11 11:58:35  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:35          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:35  
Sep 11 11:58:35          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:35          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:35  
Sep 11 11:58:35          For example:
Sep 11 11:58:35  
Sep 11 11:58:35          ```Python
Sep 11 11:58:35          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:35          ```
Sep 11 11:58:35  
Sep 11 11:58:35          instead you could use `exec()`:
Sep 11 11:58:35  
Sep 11 11:58:35          ```Python
Sep 11 11:58:35          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:35          ```
Sep 11 11:58:35          
Sep 11 11:58:35    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:35                      DEBUG    2025-09-11 11:58:35 - DEBUG    subscriptions.py:382
Sep 11 11:58:35                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:35                               subscription status: trial                         
Sep 11 11:58:38  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:38          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:38  
Sep 11 11:58:38          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:38          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:38  
Sep 11 11:58:38          For example:
Sep 11 11:58:38  
Sep 11 11:58:38          ```Python
Sep 11 11:58:38          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:38          ```
Sep 11 11:58:38  
Sep 11 11:58:38          instead you could use `exec()`:
Sep 11 11:58:38  
Sep 11 11:58:38          ```Python
Sep 11 11:58:38          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:38          ```
Sep 11 11:58:38          
Sep 11 11:58:38    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:38  [09/11/25 11:58:38] DEBUG    2025-09-11 11:58:38 - DEBUG    subscriptions.py:382
Sep 11 11:58:38                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:38                               subscription status: trial                         
Sep 11 11:58:41  [09/11/25 11:58:41] DEBUG    2025-09-11 11:58:41 - DEBUG    subscriptions.py:382
Sep 11 11:58:41                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:41                               subscription status: trial                         
Sep 11 11:58:41  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:41          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:41  
Sep 11 11:58:41          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:41          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:41  
Sep 11 11:58:41          For example:
Sep 11 11:58:41  
Sep 11 11:58:41          ```Python
Sep 11 11:58:41          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:41          ```
Sep 11 11:58:41  
Sep 11 11:58:41          instead you could use `exec()`:
Sep 11 11:58:41  
Sep 11 11:58:41          ```Python
Sep 11 11:58:41          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:41          ```
Sep 11 11:58:41          
Sep 11 11:58:41    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:41  [09/11/25 11:58:41] DEBUG    2025-09-11 11:58:41 - DEBUG    subscriptions.py:382
Sep 11 11:58:41                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:41                               subscription status: trial                         
Sep 11 11:58:42  [09/11/25 11:58:42] INFO     2025-09-11 11:58:42 - INFO     subscriptions.py:207
Sep 11 11:58:42                               - subscriptions - Creating                         
Sep 11 11:58:42                               customer portal with                               
Sep 11 11:58:42                               return_url:                                        
Sep 11 11:58:42                               https://flow.axiestudio.se//se                     
Sep 11 11:58:42                               ttings                                             
Sep 11 11:58:42                      DEBUG    2025-09-11 11:58:42 - DEBUG    subscriptions.py:208
Sep 11 11:58:42                               - subscriptions - Environment                      
Sep 11 11:58:42                               variables - FRONTEND_URL:                          
Sep 11 11:58:42                               https://flow.axiestudio.se/,                       
Sep 11 11:58:42                               RAILWAY_PUBLIC_DOMAIN: None                        
Sep 11 11:58:43  [09/11/25 11:58:43] INFO     2025-09-11 11:58:43 - INFO     -     service.py:123
Sep 11 11:58:43                               service - Created customer portal                  
Sep 11 11:58:43                               session:                                           
Sep 11 11:58:43                               bps_1S699CBacFXEnBmNz2qVX6S7                       
Sep 11 11:58:45  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:45          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:45  
Sep 11 11:58:45          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:45          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:45  
Sep 11 11:58:45          For example:
Sep 11 11:58:45  
Sep 11 11:58:45          ```Python
Sep 11 11:58:45          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:45          ```
Sep 11 11:58:45  
Sep 11 11:58:45          instead you could use `exec()`:
Sep 11 11:58:45  
Sep 11 11:58:45          ```Python
Sep 11 11:58:45          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:45          ```
Sep 11 11:58:45          
Sep 11 11:58:45    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:45  [09/11/25 11:58:45] DEBUG    2025-09-11 11:58:45 - DEBUG    subscriptions.py:382
Sep 11 11:58:45                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:45                               subscription status: trial                         
Sep 11 11:58:48  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:48          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:48  
Sep 11 11:58:48          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:48          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:48  
Sep 11 11:58:48          For example:
Sep 11 11:58:48  
Sep 11 11:58:48          ```Python
Sep 11 11:58:48          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:48          ```
Sep 11 11:58:48  
Sep 11 11:58:48          instead you could use `exec()`:
Sep 11 11:58:48  
Sep 11 11:58:48          ```Python
Sep 11 11:58:48          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:48          ```
Sep 11 11:58:48          
Sep 11 11:58:48    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:48  [09/11/25 11:58:48] DEBUG    2025-09-11 11:58:48 - DEBUG    subscriptions.py:382
Sep 11 11:58:48                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:48                               subscription status: trial                         
Sep 11 11:58:51  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:51          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:51  
Sep 11 11:58:51          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:51          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:51  
Sep 11 11:58:51          For example:
Sep 11 11:58:51  
Sep 11 11:58:51          ```Python
Sep 11 11:58:51          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:51          ```
Sep 11 11:58:51  
Sep 11 11:58:51          instead you could use `exec()`:
Sep 11 11:58:51  
Sep 11 11:58:51          ```Python
Sep 11 11:58:51          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:51          ```
Sep 11 11:58:51          
Sep 11 11:58:51    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:51  [09/11/25 11:58:51] DEBUG    2025-09-11 11:58:51 - DEBUG    subscriptions.py:382
Sep 11 11:58:51                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:51                               subscription status: trial                         
Sep 11 11:58:54  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:54          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:54  
Sep 11 11:58:54          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:54          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:54  
Sep 11 11:58:54          For example:
Sep 11 11:58:54  
Sep 11 11:58:54          ```Python
Sep 11 11:58:54          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:54          ```
Sep 11 11:58:54  
Sep 11 11:58:54          instead you could use `exec()`:
Sep 11 11:58:54  
Sep 11 11:58:54          ```Python
Sep 11 11:58:54          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:54          ```
Sep 11 11:58:54          
Sep 11 11:58:54    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:54  [09/11/25 11:58:54] DEBUG    2025-09-11 11:58:54 - DEBUG    subscriptions.py:382
Sep 11 11:58:54                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:54                               subscription status: trial                         
Sep 11 11:58:57  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:57          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:57  
Sep 11 11:58:57          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:57          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:57  
Sep 11 11:58:57          For example:
Sep 11 11:58:57  
Sep 11 11:58:57          ```Python
Sep 11 11:58:57          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:57          ```
Sep 11 11:58:57  
Sep 11 11:58:57          instead you could use `exec()`:
Sep 11 11:58:57  
Sep 11 11:58:57          ```Python
Sep 11 11:58:57          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:57          ```
Sep 11 11:58:57          
Sep 11 11:58:57    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:57  [09/11/25 11:58:57] DEBUG    2025-09-11 11:58:57 - DEBUG    subscriptions.py:382
Sep 11 11:58:57                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:57                               subscription status: trial                         
Sep 11 11:58:59  [09/11/25 11:58:59] DEBUG    2025-09-11 11:58:59 - DEBUG    subscriptions.py:382
Sep 11 11:58:59                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:59                               subscription status: trial                         
Sep 11 11:58:59  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:59          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:59  
Sep 11 11:58:59          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:59          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:59  
Sep 11 11:58:59          For example:
Sep 11 11:58:59  
Sep 11 11:58:59          ```Python
Sep 11 11:58:59          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:59          ```
Sep 11 11:58:59  
Sep 11 11:58:59          instead you could use `exec()`:
Sep 11 11:58:59  
Sep 11 11:58:59          ```Python
Sep 11 11:58:59          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:59          ```
Sep 11 11:58:59          
Sep 11 11:58:59    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:59  [09/11/25 11:58:59] INFO     2025-09-11 11:58:59 - INFO     - local  local.py:96
Sep 11 11:58:59                               - Listed 54 files in flow                          
Sep 11 11:58:59                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:58:59                               tures/People.                                      
Sep 11 11:58:59                      INFO     2025-09-11 11:58:59 - INFO     - local  local.py:96
Sep 11 11:58:59                               - Listed 25 files in flow                          
Sep 11 11:58:59                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:58:59                               tures/Space.                                       
Sep 11 11:58:59                      DEBUG    2025-09-11 11:58:59 - DEBUG    subscriptions.py:382
Sep 11 11:58:59                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:59                               subscription status: trial                         
Sep 11 11:58:59  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:58:59          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:58:59  
Sep 11 11:58:59          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:58:59          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:58:59  
Sep 11 11:58:59          For example:
Sep 11 11:58:59  
Sep 11 11:58:59          ```Python
Sep 11 11:58:59          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:58:59          ```
Sep 11 11:58:59  
Sep 11 11:58:59          instead you could use `exec()`:
Sep 11 11:58:59  
Sep 11 11:58:59          ```Python
Sep 11 11:58:59          heroes = await session.exec(select(Hero)).all()
Sep 11 11:58:59          ```
Sep 11 11:58:59          
Sep 11 11:58:59    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:58:59                      DEBUG    2025-09-11 11:58:59 - DEBUG    subscriptions.py:382
Sep 11 11:58:59                               - subscriptions - üîÑ User atom                     
Sep 11 11:58:59                               subscription status: trial                         
Sep 11 11:59:02  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:59:02          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:59:02  
Sep 11 11:59:02          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:59:02          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:59:02  
Sep 11 11:59:02          For example:
Sep 11 11:59:02  
Sep 11 11:59:02          ```Python
Sep 11 11:59:02          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:59:02          ```
Sep 11 11:59:02  
Sep 11 11:59:02          instead you could use `exec()`:
Sep 11 11:59:02  
Sep 11 11:59:02          ```Python
Sep 11 11:59:02          heroes = await session.exec(select(Hero)).all()
Sep 11 11:59:02          ```
Sep 11 11:59:02          
Sep 11 11:59:02    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:59:02  [09/11/25 11:59:02] DEBUG    2025-09-11 11:59:02 - DEBUG    subscriptions.py:382
Sep 11 11:59:02                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:02                               subscription status: trial                         
Sep 11 11:59:03  [09/11/25 11:59:03] DEBUG    2025-09-11 11:59:03 - DEBUG    subscriptions.py:382
Sep 11 11:59:03                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:03                               subscription status: trial                         
Sep 11 11:59:03  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:59:03          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:59:03  
Sep 11 11:59:03          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:59:03          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:59:03  
Sep 11 11:59:03          For example:
Sep 11 11:59:03  
Sep 11 11:59:03          ```Python
Sep 11 11:59:03          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:59:03          ```
Sep 11 11:59:03  
Sep 11 11:59:03          instead you could use `exec()`:
Sep 11 11:59:03  
Sep 11 11:59:03          ```Python
Sep 11 11:59:03          heroes = await session.exec(select(Hero)).all()
Sep 11 11:59:03          ```
Sep 11 11:59:03          
Sep 11 11:59:03    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:59:03  [09/11/25 11:59:03] DEBUG    2025-09-11 11:59:03 - DEBUG    subscriptions.py:382
Sep 11 11:59:03                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:03                               subscription status: trial                         
Sep 11 11:59:05  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:59:05          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:59:05  
Sep 11 11:59:05          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:59:05          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:59:05  
Sep 11 11:59:05          For example:
Sep 11 11:59:05  
Sep 11 11:59:05          ```Python
Sep 11 11:59:05          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:59:05          ```
Sep 11 11:59:05  
Sep 11 11:59:05          instead you could use `exec()`:
Sep 11 11:59:05  
Sep 11 11:59:05          ```Python
Sep 11 11:59:05          heroes = await session.exec(select(Hero)).all()
Sep 11 11:59:05          ```
Sep 11 11:59:05          
Sep 11 11:59:05    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:59:05  [09/11/25 11:59:05] DEBUG    2025-09-11 11:59:05 - DEBUG    subscriptions.py:382
Sep 11 11:59:05                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:05                               subscription status: trial                         
Sep 11 11:59:07  [09/11/25 11:59:07] DEBUG    2025-09-11 11:59:07 - DEBUG    subscriptions.py:382
Sep 11 11:59:07                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:07                               subscription status: trial                         
Sep 11 11:59:07  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:59:07          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:59:07  
Sep 11 11:59:07          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:59:07          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:59:07  
Sep 11 11:59:07          For example:
Sep 11 11:59:07  
Sep 11 11:59:07          ```Python
Sep 11 11:59:07          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:59:07          ```
Sep 11 11:59:07  
Sep 11 11:59:07          instead you could use `exec()`:
Sep 11 11:59:07  
Sep 11 11:59:07          ```Python
Sep 11 11:59:07          heroes = await session.exec(select(Hero)).all()
Sep 11 11:59:07          ```
Sep 11 11:59:07          
Sep 11 11:59:07    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:59:07                      INFO     2025-09-11 11:59:07 - INFO     - local  local.py:96
Sep 11 11:59:07                               - Listed 54 files in flow                          
Sep 11 11:59:07                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:59:07                               tures/People.                                      
Sep 11 11:59:07                      DEBUG    2025-09-11 11:59:07 - DEBUG    subscriptions.py:382
Sep 11 11:59:07                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:07                               subscription status: trial                         
Sep 11 11:59:07                      INFO     2025-09-11 11:59:07 - INFO     - local  local.py:96
Sep 11 11:59:07                               - Listed 25 files in flow                          
Sep 11 11:59:07                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 11:59:07                               tures/Space.                                       
Sep 11 11:59:08  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:59:08          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:59:08  
Sep 11 11:59:08          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:59:08          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:59:08  
Sep 11 11:59:08          For example:
Sep 11 11:59:08  
Sep 11 11:59:08          ```Python
Sep 11 11:59:08          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:59:08          ```
Sep 11 11:59:08  
Sep 11 11:59:08          instead you could use `exec()`:
Sep 11 11:59:08  
Sep 11 11:59:08          ```Python
Sep 11 11:59:08          heroes = await session.exec(select(Hero)).all()
Sep 11 11:59:08          ```
Sep 11 11:59:08          
Sep 11 11:59:08    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:59:08  [09/11/25 11:59:08] DEBUG    2025-09-11 11:59:08 - DEBUG    subscriptions.py:382
Sep 11 11:59:08                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:08                               subscription status: trial                         
Sep 11 11:59:11  [09/11/25 11:59:11] DEBUG    2025-09-11 11:59:11 - DEBUG    subscriptions.py:382
Sep 11 11:59:11                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:11                               subscription status: trial                         
Sep 11 11:59:11  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 11:59:11          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 11:59:11  
Sep 11 11:59:11          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 11:59:11          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 11:59:11  
Sep 11 11:59:11          For example:
Sep 11 11:59:11  
Sep 11 11:59:11          ```Python
Sep 11 11:59:11          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 11:59:11          ```
Sep 11 11:59:11  
Sep 11 11:59:11          instead you could use `exec()`:
Sep 11 11:59:11  
Sep 11 11:59:11          ```Python
Sep 11 11:59:11          heroes = await session.exec(select(Hero)).all()
Sep 11 11:59:11          ```
Sep 11 11:59:11          
Sep 11 11:59:11    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 11:59:11                      DEBUG    2025-09-11 11:59:11 - DEBUG    subscriptions.py:382
Sep 11 11:59:11                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:11                               subscription status: trial                         
Sep 11 11:59:42  [09/11/25 11:59:42] DEBUG    2025-09-11 11:59:42 - DEBUG    subscriptions.py:382
Sep 11 11:59:42                               - subscriptions - üîÑ User atom                     
Sep 11 11:59:42                               subscription status: trial                         
Sep 11 12:00:12  [09/11/25 12:00:12] DEBUG    2025-09-11 12:00:12 - DEBUG    subscriptions.py:382
Sep 11 12:00:12                               - subscriptions - üîÑ User atom                     
Sep 11 12:00:12                               subscription status: trial                         
Sep 11 12:00:42  [09/11/25 12:00:42] DEBUG    2025-09-11 12:00:42 - DEBUG    subscriptions.py:382
Sep 11 12:00:42                               - subscriptions - üîÑ User atom                     
Sep 11 12:00:42                               subscription status: trial                         
Sep 11 12:01:26  [09/11/25 12:01:26] DEBUG    2025-09-11 12:01:26 - DEBUG    subscriptions.py:382
Sep 11 12:01:26                               - subscriptions - üîÑ User atom                     
Sep 11 12:01:26                               subscription status: trial                         
Sep 11 12:01:26                      INFO     2025-09-11 12:01:26 - INFO     - local  local.py:96
Sep 11 12:01:26                               - Listed 54 files in flow                          
Sep 11 12:01:26                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 12:01:26                               tures/People.                                      
Sep 11 12:01:26  /app/.venv/lib/python3.12/site-packages/axiestudio/api/v1/subscriptions.py:513: DeprecationWarning: 
Sep 11 12:01:26          üö® You probably want to use `session.exec()` instead of `session.execute()`.
Sep 11 12:01:26  
Sep 11 12:01:26          This is the original SQLAlchemy `session.execute()` method that returns objects
Sep 11 12:01:26          of type `Row`, and that you have to call `scalars()` to get the model objects.
Sep 11 12:01:26  
Sep 11 12:01:26          For example:
Sep 11 12:01:26  
Sep 11 12:01:26          ```Python
Sep 11 12:01:26          heroes = await session.execute(select(Hero)).scalars().all()
Sep 11 12:01:26          ```
Sep 11 12:01:26  
Sep 11 12:01:26          instead you could use `exec()`:
Sep 11 12:01:26  
Sep 11 12:01:26          ```Python
Sep 11 12:01:26          heroes = await session.exec(select(Hero)).all()
Sep 11 12:01:26          ```
Sep 11 12:01:26          
Sep 11 12:01:26    await session.execute(text("SELECT 1"))  # Force session sync
Sep 11 12:01:26                      INFO     2025-09-11 12:01:26 - INFO     - local  local.py:96
Sep 11 12:01:26                               - Listed 25 files in flow                          
Sep 11 12:01:26                               /app/data/.cache/axiestudio/profile_pic            
Sep 11 12:01:26                               tures/Space.                                       
Sep 11 12:01:26  [09/11/25 12:01:26] DEBUG    2025-09-11 12:01:26 - DEBUG    subscriptions.py:382
Sep 11 12:01:26                               - subscriptions - üîÑ User atom                     
Sep 11 12:01:26                               subscription status: trial                         
Sep 11 12:01:26                      DEBUG    2025-09-11 12:01:26 - DEBUG    subscriptions.py:382
Sep 11 12:01:26                               - subscriptions - üîÑ User atom                     
Sep 11 12:01:26                               subscription status: trial                         
Sep 11 12:01:42  [09/11/25 12:01:42] DEBUG    2025-09-11 12:01:42 - DEBUG    subscriptions.py:382
Sep 11 12:01:42                               - subscriptions - üîÑ User atom                     
Sep 11 12:01:42                               subscription status: trial                         
Sep 11 12:02:12  [09/11/25 12:02:12] DEBUG    2025-09-11 12:02:12 - DEBUG    subscriptions.py:382
Sep 11 12:02:12                               - subscriptions - üîÑ User atom                     
Sep 11 12:02:12                               subscription status: trial                         