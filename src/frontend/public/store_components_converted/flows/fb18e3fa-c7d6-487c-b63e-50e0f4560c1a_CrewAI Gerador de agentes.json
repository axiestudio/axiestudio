{
  "id": "fb18e3fa-c7d6-487c-b63e-50e0f4560c1a",
  "name": "CrewAI Gerador de agentes",
  "description": "Gere agentes criadores de projetos completos  (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Amaralkarl",
    "first_name": "Claudinei",
    "last_name": "de Carvalho",
    "id": "66be7526-cacc-46ac-a9f3-bcd93344190c",
    "full_name": "Claudinei de Carvalho"
  },
  "store_url": "https://www.langflow.store/store/component/fb18e3fa-c7d6-487c-b63e-50e0f4560c1a",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-03T05:26:29.574Z",
    "updated": "2024-09-03T05:26:29.620Z",
    "downloaded": "2025-08-19T17:50:06.711Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Agent",
        "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "TextInput-B9Rwi",
        "type": "genericNode",
        "position": {
          "x": 547.783633373663,
          "y": 565.4655227361189
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "Gerar SEO otimizado para criar sites de Landing Page. O projeto tem como objetivo buscar páginas web com base em palavras-chave, selecionar os 3 sites mais bem posicionados, obter seus metadados, focar nas principais tags para SEO, utilizar os tópicos e subtópicos recebidos para excluir conteúdo desnecessário e fora de contexto, relacionar esses tópicos e subtópicos ao conteúdo restante, reformular o conteúdo do site adicionando o objetivo da Landing Page, lembrando sempre de enfatizar semanticamente as palavras-chave e tags para SEO, adicionar links internos e validar toda a construção semântica e estrutural do site seguindo um modelo existente.",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Insira aqui o contexto detalhado do projeto. Descreva o contexto, a indústria ou o problema que o projeto pretende abordar. Forneça quaisquer requisitos ou restrições específicas que devem ser considerados.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Context",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "TextInput-B9Rwi"
        },
        "selected": false,
        "width": 384,
        "height": 408,
        "positionAbsolute": {
          "x": 547.783633373663,
          "y": 565.4655227361189
        },
        "dragging": false
      },
      {
        "id": "Prompt-OWymi",
        "type": "genericNode",
        "position": {
          "x": 1329.0604550935268,
          "y": 851.3444030171976
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Você tem a tarefa de projetar um projeto abrangente orientado por IA usando a estrutura CrewAI. O objetivo deste projeto é desenvolver um sistema de IA que pode {OverallGoal}. Este projeto envolverá vários agentes, cada um com funções, histórias e objetivos distintos. O projeto utilizará uma variedade de ferramentas, exigirá colaboração entre agentes e incorporará processos como planejamento, teste e memória.\n\nContexto:\n{Context}\n\nPrincipais requisitos:\nAgentes:\n\nProjete pelo menos três agentes distintos, cada um com funções e objetivos específicos que se alinhem ao contexto.\nForneça histórias e objetivos detalhados para cada agente para garantir que eles trabalhem efetivamente dentro da equipe.\nIntegre recursos de memória para que os agentes relembrem informações importantes ao longo do projeto.\nTarefas:\n\nCrie tarefas que se alinhem às funções dos agentes. Cada tarefa deve ter uma descrição clara e saída esperada.\n{Tasks}\nGaranta que as tarefas sejam bem definidas com saídas esperadas claras e ferramentas associadas.\nFerramentas:\n\nUtilize uma variedade de ferramentas dentro da estrutura CrewAI, incluindo mecanismos de busca, APIs e bancos de dados.\nSe necessário, crie ferramentas personalizadas que os agentes possam usar para executar suas tarefas.\nIntegre ferramentas para tarefas específicas, garantindo que cada ferramenta seja apropriada para a tarefa em questão.\nProcessos:\n\nDefina os processos pelos quais as tarefas serão executadas (por exemplo, sequencial, paralelo, hierárquico).\nInclua etapas para planejamento e teste para garantir saída de qualidade.\nIncorpore ciclos de feedback para melhoria contínua ao longo do processo.\nColaboração:\n\nGaranta que os agentes colaborem efetivamente compartilhando informações e recursos.\nProjete mecanismos para que os agentes se comuniquem e deleguem tarefas uns aos outros.\nInclua uma estratégia de colaboração para integrar a entrada humana durante estágios críticos.\nTreinamento:\n\nInclua uma fase de treinamento para que os agentes ajustem suas habilidades antes de começarem as tarefas principais.\nDefina como os dados de treinamento serão usados ​​para melhorar o desempenho do agente.\nCrie tarefas que simulem cenários do mundo real para testar as capacidades do agente.\nMemória:\n\nImplemente um sistema de memória que permita que os agentes se lembrem de detalhes importantes, interações passadas e decisões.\nUse a memória para permitir que os agentes desenvolvam trabalhos anteriores e evitem redundância.\nGaranta que a memória seja persistente e acessível em todas as tarefas e processos.\nPlanejamento e teste:\n\nProjete uma fase de planejamento onde os agentes mapeiam sua abordagem para tarefas.\nInclua fases de teste onde os agentes validam suas descobertas, protótipos ou relatórios escritos.\nGarantir que o planejamento e o teste sejam iterativos, com oportunidades para os agentes refinarem suas estratégias.\nResultado final:\n\nO resultado final deste projeto CrewAI deve ser {FinalDeliverable}.\nO resultado deve incluir {FinalOutput}.\nO resultado deve ser detalhado, bem organizado e adequado para publicação ou apresentação.\nConsiderações adicionais:\nCertifique-se de que os agentes podem lidar com mudanças inesperadas ou novas informações durante o projeto.\nO sistema deve ser robusto o suficiente para permitir intervenção humana ou entrada em pontos de decisão importantes.\nConsidere como avaliar a eficácia dos agentes e o sucesso geral do projeto.\nResultado final:\n\nO resultado final deve ser uma configuração completa do projeto CrewAI, incluindo todos os agentes, tarefas, ferramentas e processos. O projeto deve estar pronto para ser executado e fornecer o resultado esperado de forma contínua e eficiente.",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "OverallGoal": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "OverallGoal",
                "display_name": "OverallGoal",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "Context": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Context",
                "display_name": "Context",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "Tasks": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Tasks",
                "display_name": "Tasks",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "FinalDeliverable": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "FinalDeliverable",
                "display_name": "FinalDeliverable",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "FinalOutput": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "FinalOutput",
                "display_name": "FinalOutput",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt tamplate that create CrewAIs",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "CrewAI Prompt Generator",
            "documentation": "",
            "custom_fields": {
              "template": [
                "OverallGoal",
                "Context",
                "Tasks",
                "FinalDeliverable",
                "FinalOutput"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "Prompt-OWymi"
        },
        "selected": true,
        "width": 384,
        "height": 726,
        "positionAbsolute": {
          "x": 1329.0604550935268,
          "y": 851.3444030171976
        },
        "dragging": false
      },
      {
        "id": "TextInput-B9MV1",
        "type": "genericNode",
        "position": {
          "x": 544.096793114862,
          "y": 1041.6986574407306
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "- Pesquisar no Google com as palavras-chave inseridas. - Obter os 3 principais links. - Acessar os sites e adquirir informações como metadados relevantes para SEO. - Escanear o site focando no conteúdo das tags mais relevantes para SEO, como as tags h1, h2, h3, h4, h5, h6, p, em, strong, article, main, summary, section, nav, header, footer, aside, a, ol, ul, li, blockquote, q, code. - Dos tópicos e subtópicos recebidos, apagar o que não fizer sentido com seu objetivo e as Palavras-chave. - Relacionar os tópicos e Subtópicos recebidos com o restante do conteúdo. - Reformular o conteúdo do site adicionando o objetivo da Landing Page, lembrando sempre de enfatizar semanticamente as palavras-chave e tags para SEO. - Adicionar links internos recebidos. - Validar manualmente toda a semântica e construção do site seguindo o modelo recebido.",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Insira tarefas específicas aqui. Defina tarefas que sejam diretamente relacionadas ao objetivo e contexto do projeto. Inclua tarefas iniciais de pesquisa, desenvolvimento e relatórios finais.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Tasks",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "TextInput-B9MV1"
        },
        "selected": false,
        "width": 384,
        "height": 380,
        "positionAbsolute": {
          "x": 544.096793114862,
          "y": 1041.6986574407306
        },
        "dragging": false
      },
      {
        "id": "TextInput-SxMEA",
        "type": "genericNode",
        "position": {
          "x": 546.5641273653744,
          "y": 1852.9918393877151
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "O conteúdo finalizado deve estar de acordo com os tópicos e subtópicos informados, seguindo uma estrutura semântica otimizada para SEO, utilizando as palavras-chave informadas e seguindo o modelo enviado. A saída deve ser em Português do Brasil.",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Insira seções ou componentes principais da saída final",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "FinalOutput",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "TextInput-SxMEA"
        },
        "selected": false,
        "width": 384,
        "height": 324,
        "positionAbsolute": {
          "x": 546.5641273653744,
          "y": 1852.9918393877151
        },
        "dragging": false
      },
      {
        "id": "TextInput-9k0yl",
        "type": "genericNode",
        "position": {
          "x": 541.8531330873527,
          "y": 1490.4821892355867
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "Um site HTML semanticamente estruturado seguindo um modelo proposto.",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Inserir entrega final",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "FinalDeliverable",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "TextInput-9k0yl"
        },
        "selected": false,
        "width": 384,
        "height": 296,
        "positionAbsolute": {
          "x": 541.8531330873527,
          "y": 1490.4821892355867
        },
        "dragging": false
      },
      {
        "id": "TextInput-HhoN9",
        "type": "genericNode",
        "position": {
          "x": 552.1852212685643,
          "y": 221.99024812940775
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "Gerar SEO otimizado",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Insira aqui o objetivo geral do projeto",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "OverallGoal",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "TextInput-HhoN9"
        },
        "selected": false,
        "width": 384,
        "height": 296,
        "positionAbsolute": {
          "x": 552.1852212685643,
          "y": 221.99024812940775
        },
        "dragging": false
      },
      {
        "id": "TextOutput-bpETT",
        "type": "genericNode",
        "position": {
          "x": 2493.704279911267,
          "y": 1041.9446583655845
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "TextOutput-bpETT"
        },
        "selected": false,
        "width": 384,
        "height": 296,
        "positionAbsolute": {
          "x": 2493.704279911267,
          "y": 1041.9446583655845
        },
        "dragging": false
      },
      {
        "id": "GroqModel-LzXc3",
        "type": "genericNode",
        "position": {
          "x": 1871.747571130315,
          "y": 982.1490181479762
        },
        "data": {
          "type": "GroqModel",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\nfrom typing import List\nfrom langchain_groq import ChatGroq\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n    name = \"GroqModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        SecretStrInput(\n            name=\"groq_api_key\",\n            display_name=\"Groq API Key\",\n            info=\"API key for the Groq API.\",\n        ),\n        MessageTextInput(\n            name=\"groq_api_base\",\n            display_name=\"Groq API Base\",\n            info=\"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n            advanced=True,\n            value=\"https://api.groq.com\",\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            value=0.1,\n        ),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[],\n            refresh_button=True,\n        ),\n    ]\n\n    def get_models(self) -> List[str]:\n        api_key = self.groq_api_key\n        base_url = self.groq_api_base or \"https://api.groq.com\"\n        url = f\"{base_url}/openai/v1/models\"\n\n        headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            model_list = response.json()\n            return [model[\"id\"] for model in model_list.get(\"data\", [])]\n        except requests.RequestException as e:\n            self.status = f\"Error fetching models: {str(e)}\"\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"groq_api_key\" or field_name == \"groq_api_base\" or field_name == \"model_name\":\n            models = self.get_models()\n            build_config[\"model_name\"][\"options\"] = models\n        return build_config\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        groq_api_key = self.groq_api_key\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        groq_api_base = self.groq_api_base\n        n = self.n\n        stream = self.stream\n\n        output = ChatGroq(  # type: ignore\n            model=model_name,\n            max_tokens=max_tokens or None,\n            temperature=temperature,\n            base_url=groq_api_base,\n            n=n or 1,\n            api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "groq_api_base": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "groq_api_base",
                "value": "https://api.groq.com",
                "display_name": "Groq API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Base URL path for API requests, leave blank if not using a proxy or service emulator.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "groq_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "groq_api_key",
                "value": "",
                "display_name": "Groq API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "API key for the Groq API.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Output Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "mixtral-8x7b-32768",
                  "llama3-8b-8192",
                  "distil-whisper-large-v3-en",
                  "llama3-70b-8192",
                  "llama3-groq-70b-8192-tool-use-preview",
                  "whisper-large-v3",
                  "gemma-7b-it",
                  "llama-guard-3-8b",
                  "llama-3.1-70b-versatile",
                  "gemma2-9b-it",
                  "llama-3.1-8b-instant",
                  "llama3-groq-8b-8192-tool-use-preview"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "mixtral-8x7b-32768",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "The name of the model to use.",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n",
                "value": "",
                "display_name": "N",
                "advanced": true,
                "dynamic": false,
                "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generate text using Groq.",
            "icon": "Groq",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Groq",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "groq_api_key",
              "groq_api_base",
              "max_tokens",
              "temperature",
              "n",
              "model_name"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "GroqModel-LzXc3"
        },
        "selected": false,
        "width": 384,
        "height": 613,
        "positionAbsolute": {
          "x": 1871.747571130315,
          "y": 982.1490181479762
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "TextInput-HhoN9",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HhoN9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-OWymi",
        "targetHandle": "{œfieldNameœ:œOverallGoalœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "OverallGoal",
            "id": "Prompt-OWymi",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-HhoN9",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-HhoN9{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HhoN9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œOverallGoalœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-B9Rwi",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9Rwiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-OWymi",
        "targetHandle": "{œfieldNameœ:œContextœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Context",
            "id": "Prompt-OWymi",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-B9Rwi",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-B9Rwi{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9Rwiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œContextœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-B9MV1",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9MV1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-OWymi",
        "targetHandle": "{œfieldNameœ:œTasksœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Tasks",
            "id": "Prompt-OWymi",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-B9MV1",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-B9MV1{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9MV1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œTasksœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-9k0yl",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-9k0ylœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-OWymi",
        "targetHandle": "{œfieldNameœ:œFinalDeliverableœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "FinalDeliverable",
            "id": "Prompt-OWymi",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-9k0yl",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-9k0yl{œdataTypeœ:œTextInputœ,œidœ:œTextInput-9k0ylœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œFinalDeliverableœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-SxMEA",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-SxMEAœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-OWymi",
        "targetHandle": "{œfieldNameœ:œFinalOutputœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "FinalOutput",
            "id": "Prompt-OWymi",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-SxMEA",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-SxMEA{œdataTypeœ:œTextInputœ,œidœ:œTextInput-SxMEAœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œFinalOutputœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Prompt-OWymi",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-OWymiœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "GroqModel-LzXc3",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-LzXc3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "GroqModel-LzXc3",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-OWymi",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-OWymi{œdataTypeœ:œPromptœ,œidœ:œPrompt-OWymiœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GroqModel-LzXc3{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-LzXc3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "GroqModel-LzXc3",
        "sourceHandle": "{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-LzXc3œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextOutput-bpETT",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-bpETTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-bpETT",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroqModel",
            "id": "GroqModel-LzXc3",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-GroqModel-LzXc3{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-LzXc3œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-bpETT{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-bpETTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 229.01239427951828,
      "y": -259.2821188197736,
      "zoom": 0.5000000000000024
    }
  },
  "metadata": {
    "TextInput": {
      "count": 5
    },
    "Prompt": {
      "count": 1
    },
    "TextOutput": {
      "count": 1
    },
    "GroqModel": {
      "count": 1
    },
    "total": 8
  },
  "original": {
    "id": "fb18e3fa-c7d6-487c-b63e-50e0f4560c1a",
    "name": "CrewAI Gerador de agentes",
    "description": "Gere agentes criadores de projetos completos ",
    "is_component": false,
    "liked_by_count": "17",
    "downloads_count": "199",
    "metadata": {
      "TextInput": {
        "count": 5
      },
      "Prompt": {
        "count": 1
      },
      "TextOutput": {
        "count": 1
      },
      "GroqModel": {
        "count": 1
      },
      "total": 8
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "TextInput-B9Rwi",
          "type": "genericNode",
          "position": {
            "x": 547.783633373663,
            "y": 565.4655227361189
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "Gerar SEO otimizado para criar sites de Landing Page. O projeto tem como objetivo buscar páginas web com base em palavras-chave, selecionar os 3 sites mais bem posicionados, obter seus metadados, focar nas principais tags para SEO, utilizar os tópicos e subtópicos recebidos para excluir conteúdo desnecessário e fora de contexto, relacionar esses tópicos e subtópicos ao conteúdo restante, reformular o conteúdo do site adicionando o objetivo da Landing Page, lembrando sempre de enfatizar semanticamente as palavras-chave e tags para SEO, adicionar links internos e validar toda a construção semântica e estrutural do site seguindo um modelo existente.",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Insira aqui o contexto detalhado do projeto. Descreva o contexto, a indústria ou o problema que o projeto pretende abordar. Forneça quaisquer requisitos ou restrições específicas que devem ser considerados.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Context",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "TextInput-B9Rwi"
          },
          "selected": false,
          "width": 384,
          "height": 408,
          "positionAbsolute": {
            "x": 547.783633373663,
            "y": 565.4655227361189
          },
          "dragging": false
        },
        {
          "id": "Prompt-OWymi",
          "type": "genericNode",
          "position": {
            "x": 1329.0604550935268,
            "y": 851.3444030171976
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "Você tem a tarefa de projetar um projeto abrangente orientado por IA usando a estrutura CrewAI. O objetivo deste projeto é desenvolver um sistema de IA que pode {OverallGoal}. Este projeto envolverá vários agentes, cada um com funções, histórias e objetivos distintos. O projeto utilizará uma variedade de ferramentas, exigirá colaboração entre agentes e incorporará processos como planejamento, teste e memória.\n\nContexto:\n{Context}\n\nPrincipais requisitos:\nAgentes:\n\nProjete pelo menos três agentes distintos, cada um com funções e objetivos específicos que se alinhem ao contexto.\nForneça histórias e objetivos detalhados para cada agente para garantir que eles trabalhem efetivamente dentro da equipe.\nIntegre recursos de memória para que os agentes relembrem informações importantes ao longo do projeto.\nTarefas:\n\nCrie tarefas que se alinhem às funções dos agentes. Cada tarefa deve ter uma descrição clara e saída esperada.\n{Tasks}\nGaranta que as tarefas sejam bem definidas com saídas esperadas claras e ferramentas associadas.\nFerramentas:\n\nUtilize uma variedade de ferramentas dentro da estrutura CrewAI, incluindo mecanismos de busca, APIs e bancos de dados.\nSe necessário, crie ferramentas personalizadas que os agentes possam usar para executar suas tarefas.\nIntegre ferramentas para tarefas específicas, garantindo que cada ferramenta seja apropriada para a tarefa em questão.\nProcessos:\n\nDefina os processos pelos quais as tarefas serão executadas (por exemplo, sequencial, paralelo, hierárquico).\nInclua etapas para planejamento e teste para garantir saída de qualidade.\nIncorpore ciclos de feedback para melhoria contínua ao longo do processo.\nColaboração:\n\nGaranta que os agentes colaborem efetivamente compartilhando informações e recursos.\nProjete mecanismos para que os agentes se comuniquem e deleguem tarefas uns aos outros.\nInclua uma estratégia de colaboração para integrar a entrada humana durante estágios críticos.\nTreinamento:\n\nInclua uma fase de treinamento para que os agentes ajustem suas habilidades antes de começarem as tarefas principais.\nDefina como os dados de treinamento serão usados ​​para melhorar o desempenho do agente.\nCrie tarefas que simulem cenários do mundo real para testar as capacidades do agente.\nMemória:\n\nImplemente um sistema de memória que permita que os agentes se lembrem de detalhes importantes, interações passadas e decisões.\nUse a memória para permitir que os agentes desenvolvam trabalhos anteriores e evitem redundância.\nGaranta que a memória seja persistente e acessível em todas as tarefas e processos.\nPlanejamento e teste:\n\nProjete uma fase de planejamento onde os agentes mapeiam sua abordagem para tarefas.\nInclua fases de teste onde os agentes validam suas descobertas, protótipos ou relatórios escritos.\nGarantir que o planejamento e o teste sejam iterativos, com oportunidades para os agentes refinarem suas estratégias.\nResultado final:\n\nO resultado final deste projeto CrewAI deve ser {FinalDeliverable}.\nO resultado deve incluir {FinalOutput}.\nO resultado deve ser detalhado, bem organizado e adequado para publicação ou apresentação.\nConsiderações adicionais:\nCertifique-se de que os agentes podem lidar com mudanças inesperadas ou novas informações durante o projeto.\nO sistema deve ser robusto o suficiente para permitir intervenção humana ou entrada em pontos de decisão importantes.\nConsidere como avaliar a eficácia dos agentes e o sucesso geral do projeto.\nResultado final:\n\nO resultado final deve ser uma configuração completa do projeto CrewAI, incluindo todos os agentes, tarefas, ferramentas e processos. O projeto deve estar pronto para ser executado e fornecer o resultado esperado de forma contínua e eficiente.",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                },
                "OverallGoal": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "OverallGoal",
                  "display_name": "OverallGoal",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "Context": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Context",
                  "display_name": "Context",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "Tasks": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Tasks",
                  "display_name": "Tasks",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "FinalDeliverable": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "FinalDeliverable",
                  "display_name": "FinalDeliverable",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "FinalOutput": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "FinalOutput",
                  "display_name": "FinalOutput",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt tamplate that create CrewAIs",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "CrewAI Prompt Generator",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "OverallGoal",
                  "Context",
                  "Tasks",
                  "FinalDeliverable",
                  "FinalOutput"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "Prompt-OWymi"
          },
          "selected": true,
          "width": 384,
          "height": 726,
          "positionAbsolute": {
            "x": 1329.0604550935268,
            "y": 851.3444030171976
          },
          "dragging": false
        },
        {
          "id": "TextInput-B9MV1",
          "type": "genericNode",
          "position": {
            "x": 544.096793114862,
            "y": 1041.6986574407306
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "- Pesquisar no Google com as palavras-chave inseridas. - Obter os 3 principais links. - Acessar os sites e adquirir informações como metadados relevantes para SEO. - Escanear o site focando no conteúdo das tags mais relevantes para SEO, como as tags h1, h2, h3, h4, h5, h6, p, em, strong, article, main, summary, section, nav, header, footer, aside, a, ol, ul, li, blockquote, q, code. - Dos tópicos e subtópicos recebidos, apagar o que não fizer sentido com seu objetivo e as Palavras-chave. - Relacionar os tópicos e Subtópicos recebidos com o restante do conteúdo. - Reformular o conteúdo do site adicionando o objetivo da Landing Page, lembrando sempre de enfatizar semanticamente as palavras-chave e tags para SEO. - Adicionar links internos recebidos. - Validar manualmente toda a semântica e construção do site seguindo o modelo recebido.",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Insira tarefas específicas aqui. Defina tarefas que sejam diretamente relacionadas ao objetivo e contexto do projeto. Inclua tarefas iniciais de pesquisa, desenvolvimento e relatórios finais.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Tasks",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "TextInput-B9MV1"
          },
          "selected": false,
          "width": 384,
          "height": 380,
          "positionAbsolute": {
            "x": 544.096793114862,
            "y": 1041.6986574407306
          },
          "dragging": false
        },
        {
          "id": "TextInput-SxMEA",
          "type": "genericNode",
          "position": {
            "x": 546.5641273653744,
            "y": 1852.9918393877151
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "O conteúdo finalizado deve estar de acordo com os tópicos e subtópicos informados, seguindo uma estrutura semântica otimizada para SEO, utilizando as palavras-chave informadas e seguindo o modelo enviado. A saída deve ser em Português do Brasil.",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Insira seções ou componentes principais da saída final",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "FinalOutput",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "TextInput-SxMEA"
          },
          "selected": false,
          "width": 384,
          "height": 324,
          "positionAbsolute": {
            "x": 546.5641273653744,
            "y": 1852.9918393877151
          },
          "dragging": false
        },
        {
          "id": "TextInput-9k0yl",
          "type": "genericNode",
          "position": {
            "x": 541.8531330873527,
            "y": 1490.4821892355867
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "Um site HTML semanticamente estruturado seguindo um modelo proposto.",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Inserir entrega final",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "FinalDeliverable",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "TextInput-9k0yl"
          },
          "selected": false,
          "width": 384,
          "height": 296,
          "positionAbsolute": {
            "x": 541.8531330873527,
            "y": 1490.4821892355867
          },
          "dragging": false
        },
        {
          "id": "TextInput-HhoN9",
          "type": "genericNode",
          "position": {
            "x": 552.1852212685643,
            "y": 221.99024812940775
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "Gerar SEO otimizado",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Insira aqui o objetivo geral do projeto",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "OverallGoal",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "TextInput-HhoN9"
          },
          "selected": false,
          "width": 384,
          "height": 296,
          "positionAbsolute": {
            "x": 552.1852212685643,
            "y": 221.99024812940775
          },
          "dragging": false
        },
        {
          "id": "TextOutput-bpETT",
          "type": "genericNode",
          "position": {
            "x": 2493.704279911267,
            "y": 1041.9446583655845
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "TextOutput-bpETT"
          },
          "selected": false,
          "width": 384,
          "height": 296,
          "positionAbsolute": {
            "x": 2493.704279911267,
            "y": 1041.9446583655845
          },
          "dragging": false
        },
        {
          "id": "GroqModel-LzXc3",
          "type": "genericNode",
          "position": {
            "x": 1871.747571130315,
            "y": 982.1490181479762
          },
          "data": {
            "type": "GroqModel",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\nfrom typing import List\nfrom langchain_groq import ChatGroq\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n    name = \"GroqModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        SecretStrInput(\n            name=\"groq_api_key\",\n            display_name=\"Groq API Key\",\n            info=\"API key for the Groq API.\",\n        ),\n        MessageTextInput(\n            name=\"groq_api_base\",\n            display_name=\"Groq API Base\",\n            info=\"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n            advanced=True,\n            value=\"https://api.groq.com\",\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            value=0.1,\n        ),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[],\n            refresh_button=True,\n        ),\n    ]\n\n    def get_models(self) -> List[str]:\n        api_key = self.groq_api_key\n        base_url = self.groq_api_base or \"https://api.groq.com\"\n        url = f\"{base_url}/openai/v1/models\"\n\n        headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            model_list = response.json()\n            return [model[\"id\"] for model in model_list.get(\"data\", [])]\n        except requests.RequestException as e:\n            self.status = f\"Error fetching models: {str(e)}\"\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"groq_api_key\" or field_name == \"groq_api_base\" or field_name == \"model_name\":\n            models = self.get_models()\n            build_config[\"model_name\"][\"options\"] = models\n        return build_config\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        groq_api_key = self.groq_api_key\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        groq_api_base = self.groq_api_base\n        n = self.n\n        stream = self.stream\n\n        output = ChatGroq(  # type: ignore\n            model=model_name,\n            max_tokens=max_tokens or None,\n            temperature=temperature,\n            base_url=groq_api_base,\n            n=n or 1,\n            api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n\n        return output  # type: ignore\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "groq_api_base": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "groq_api_base",
                  "value": "https://api.groq.com",
                  "display_name": "Groq API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Base URL path for API requests, leave blank if not using a proxy or service emulator.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "groq_api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "groq_api_key",
                  "value": "",
                  "display_name": "Groq API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "API key for the Groq API.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Output Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "mixtral-8x7b-32768",
                    "llama3-8b-8192",
                    "distil-whisper-large-v3-en",
                    "llama3-70b-8192",
                    "llama3-groq-70b-8192-tool-use-preview",
                    "whisper-large-v3",
                    "gemma-7b-it",
                    "llama-guard-3-8b",
                    "llama-3.1-70b-versatile",
                    "gemma2-9b-it",
                    "llama-3.1-8b-instant",
                    "llama3-groq-8b-8192-tool-use-preview"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "mixtral-8x7b-32768",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The name of the model to use.",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "n": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "n",
                  "value": "",
                  "display_name": "N",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generate text using Groq.",
              "icon": "Groq",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Groq",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "groq_api_key",
                "groq_api_base",
                "max_tokens",
                "temperature",
                "n",
                "model_name"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "GroqModel-LzXc3"
          },
          "selected": false,
          "width": 384,
          "height": 613,
          "positionAbsolute": {
            "x": 1871.747571130315,
            "y": 982.1490181479762
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "TextInput-HhoN9",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HhoN9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-OWymi",
          "targetHandle": "{œfieldNameœ:œOverallGoalœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "OverallGoal",
              "id": "Prompt-OWymi",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-HhoN9",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-HhoN9{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HhoN9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œOverallGoalœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-B9Rwi",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9Rwiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-OWymi",
          "targetHandle": "{œfieldNameœ:œContextœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "Context",
              "id": "Prompt-OWymi",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-B9Rwi",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-B9Rwi{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9Rwiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œContextœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-B9MV1",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9MV1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-OWymi",
          "targetHandle": "{œfieldNameœ:œTasksœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "Tasks",
              "id": "Prompt-OWymi",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-B9MV1",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-B9MV1{œdataTypeœ:œTextInputœ,œidœ:œTextInput-B9MV1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œTasksœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-9k0yl",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-9k0ylœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-OWymi",
          "targetHandle": "{œfieldNameœ:œFinalDeliverableœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "FinalDeliverable",
              "id": "Prompt-OWymi",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-9k0yl",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-9k0yl{œdataTypeœ:œTextInputœ,œidœ:œTextInput-9k0ylœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œFinalDeliverableœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-SxMEA",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-SxMEAœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-OWymi",
          "targetHandle": "{œfieldNameœ:œFinalOutputœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "FinalOutput",
              "id": "Prompt-OWymi",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-SxMEA",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-SxMEA{œdataTypeœ:œTextInputœ,œidœ:œTextInput-SxMEAœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OWymi{œfieldNameœ:œFinalOutputœ,œidœ:œPrompt-OWymiœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Prompt-OWymi",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-OWymiœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "GroqModel-LzXc3",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-LzXc3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "GroqModel-LzXc3",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-OWymi",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-OWymi{œdataTypeœ:œPromptœ,œidœ:œPrompt-OWymiœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GroqModel-LzXc3{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-LzXc3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "GroqModel-LzXc3",
          "sourceHandle": "{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-LzXc3œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "TextOutput-bpETT",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-bpETTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-bpETT",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroqModel",
              "id": "GroqModel-LzXc3",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-GroqModel-LzXc3{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-LzXc3œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-bpETT{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-bpETTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 229.01239427951828,
        "y": -259.2821188197736,
        "zoom": 0.5000000000000024
      }
    },
    "date_created": "2024-09-03T05:26:29.574Z",
    "date_updated": "2024-09-03T05:26:29.620Z",
    "status": "Public",
    "sort": null,
    "user_updated": "66be7526-cacc-46ac-a9f3-bcd93344190c",
    "user_created": {
      "username": "Amaralkarl",
      "first_name": "Claudinei",
      "last_name": "de Carvalho",
      "id": "66be7526-cacc-46ac-a9f3-bcd93344190c"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Agent",
          "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:08.392Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 54,
    "converter_version": "1.0.0"
  }
}