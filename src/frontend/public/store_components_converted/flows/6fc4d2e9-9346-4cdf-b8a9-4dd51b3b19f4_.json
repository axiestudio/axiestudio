{
  "id": "6fc4d2e9-9346-4cdf-b8a9-4dd51b3b19f4",
  "name": "种草文案生成器",
  "description": "基于蝉选商品链接和内容链接生成短视频脚本文案。 (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "haipro",
    "first_name": "hai",
    "last_name": "pro",
    "id": "68fc6db4-50c1-424c-ac52-6dd2fa4e1c0a",
    "full_name": "hai pro"
  },
  "store_url": "https://www.langflow.store/store/component/6fc4d2e9-9346-4cdf-b8a9-4dd51b3b19f4",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-02T17:40:29.909Z",
    "updated": "2024-05-02T17:41:14.278Z",
    "downloaded": "2025-08-19T17:50:05.098Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a29",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Prompt-e09le",
        "type": "genericNode",
        "position": {
          "x": -277.9395964301812,
          "y": 67.9087560526595
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\nfrom axiestudio.interface.custom.custom_component import CustomComponent\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "<::content::>\n{page_content}\n<::/content::>\n<::product::>\n{product_info}\n<::/product::>\n\n<::Rule::>\n- 文章开头：\n1. 内容前面需要根据黄金 3 秒准则来生成短视频文案，要求黄金 3 秒的文案精炼直击要害。\n2. 读者并不了解<::content::>中的事件内容，你需要先简单口语化主观科普一下这件事。\n\n- 文章中间插入软广信息：你需要在内容后半部分插入一段 100 字左右的带货文案，需要结合上下文植入软广。我已经将软广信息通过<::product::>标记并提供给你，你需要根据产品的卖点，人群画像等信息，以及文章中你要插入的部分的上下文做衔接结合：\n1. 用前文内容（A）中的某个细节作为勾子，来将产品带货文案(B)结合到内容里面去。\n2. 插入一段 100 字左右的带货文案(B)：你需要在内容合适的地方插入软广，在准备开始引入软广的时候，使用《#产品链接占位符:开始#》标记符来标记软广开始部分，以及使用《#产品链接占位符:结束#》来标记结束部分，以便我可以将商品宣传视频放到占位符处。\n3. 讲完带货文案(B)之后又能够用带货文案中的例子(B)作为勾子，B 结束之后的文案(C)最好也能基于广告(B)的内容然后绕回去（A），需要稍微再提一下商品（B），来引出下文(C)继续讲回之前的内容（A）。\n\n- 文章结尾（一句祝福语），基于<::content::>中的事件内容中传���出来的信息，往积极正面的方面，祝福观看视频前的你（读者），能够/早日/也能吃上心上人的爱心便当/有情人终成眷属/两情相悦等等……我只是举个例子，请你创新写一句话，只需要一句话就好。\n<::/Rule::>\n\n<::Task::>\n<::content::> 标签标记为文章素材。请根据<::Rule::>中提到的语言风格要求,结合素材内容,输出一段400字左右的全新内容，内容需要口语化，娱乐化。最后用<::output::>标签将生成的内容括起来。\n<::/Task::>\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "page_content": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "page_content",
                "display_name": "page_content",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "product_info": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "product_info",
                "display_name": "product_info",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "page_content",
                "product_info"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-e09le",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 477,
        "positionAbsolute": {
          "x": -277.9395964301812,
          "y": 67.9087560526595
        },
        "dragging": false
      },
      {
        "id": "TextInput-ySmOC",
        "type": "genericNode",
        "position": {
          "x": -1266.563502869617,
          "y": 14.404728194290186
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "https://xueqiu.com/2645961584/284378938",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Interaction Panel.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "文章内容",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-ySmOC"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": -1266.563502869617,
          "y": 14.404728194290186
        },
        "dragging": false
      },
      {
        "id": "TextInput-e5QZx",
        "type": "genericNode",
        "position": {
          "x": -1272.1248811781984,
          "y": 386.506868599431
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "https://www.chanxuan.com/goods/detail/_PQ5PRaoi2mrIcEELAKm6o8ZZOVS4kyX?trackIndex=1008&match_id=&request_id=551d3cf031d002e034b4a2a908675a9b&reportKeyword=%25E5%2586%2585%25E8%25A3%25A4&source_position=3&topicId=&result_num=0&page=1&indexInList=0",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Interaction Panel.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "蝉选商品信息",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-e5QZx"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": -1272.1248811781984,
          "y": 386.506868599431
        },
        "dragging": false
      },
      {
        "id": "ChatOpenAISpecs-uAdgt",
        "type": "genericNode",
        "position": {
          "x": -261.27906654653873,
          "y": 684.1236616131049
        },
        "data": {
          "type": "ChatOpenAISpecs",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.field_typing import BaseLanguageModel\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.interface.custom.custom_component import CustomComponent\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n    icon = \"OpenAI\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> BaseLanguageModel:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "2048",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-turbo-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "https://api.rcouyi.com/v1"
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "icon": "OpenAI",
            "base_classes": [
              "BaseLanguageModel",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOpenAISpecs-uAdgt"
        },
        "selected": false,
        "width": 384,
        "height": 649,
        "positionAbsolute": {
          "x": -261.27906654653873,
          "y": 684.1236616131049
        },
        "dragging": false
      },
      {
        "id": "TextOutput-HiiLt",
        "type": "genericNode",
        "position": {
          "x": 915.5218121967575,
          "y": 397.1125098872778
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Interaction Panel.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Output",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-HiiLt"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 915.5218121967575,
          "y": 397.1125098872778
        },
        "dragging": false
      },
      {
        "id": "LLMChain-if8Dx",
        "type": "genericNode",
        "position": {
          "x": 355.09149843541354,
          "y": 339.071524968018
        },
        "data": {
          "type": "LLMChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain.chains.llm import LLMChain\n\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Text\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom langchain_core.prompts import PromptTemplate\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n        }\n\n    def build(\n        self,\n        template: Text,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Text:\n        prompt = PromptTemplate.from_template(template)\n        runnable = LLMChain(prompt=prompt, llm=llm, memory=memory)\n        result_dict = runnable.invoke({})\n        output_key = runnable.output_key\n        result = result_dict[output_key]\n        self.status = result\n        return result\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Chain to run queries against LLMs",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "LLMChain",
            "documentation": "",
            "custom_fields": {
              "template": null,
              "llm": null,
              "memory": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "LLMChain-if8Dx"
        },
        "selected": false,
        "width": 384,
        "height": 385,
        "positionAbsolute": {
          "x": 355.09149843541354,
          "y": 339.071524968018
        },
        "dragging": false
      },
      {
        "id": "URL-fyC45",
        "type": "genericNode",
        "position": {
          "x": -766.0474309891935,
          "y": 33.40232461433615
        },
        "data": {
          "type": "URL",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass URLComponent(CustomComponent):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"urls\": {\"display_name\": \"URL\"},\n        }\n\n    def build(\n        self,\n        urls: list[str],\n    ) -> list[Record]:\n        loader = WebBaseLoader(web_paths=urls)\n        docs = loader.load()\n        records = self.to_records(docs)\n        self.status = records\n        return records\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "urls",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Fetch content from one or more URLs.",
            "icon": "layout-template",
            "base_classes": [
              "Record"
            ],
            "display_name": "URL",
            "documentation": "",
            "custom_fields": {
              "urls": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "URL-fyC45"
        },
        "selected": false,
        "width": 384,
        "height": 281,
        "positionAbsolute": {
          "x": -766.0474309891935,
          "y": 33.40232461433615
        },
        "dragging": false
      },
      {
        "id": "URL-Fy8lq",
        "type": "genericNode",
        "position": {
          "x": -763.7123180280944,
          "y": 387.5611237143193
        },
        "data": {
          "type": "URL",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass URLComponent(CustomComponent):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"urls\": {\"display_name\": \"URL\"},\n        }\n\n    def build(\n        self,\n        urls: list[str],\n    ) -> list[Record]:\n        loader = WebBaseLoader(web_paths=urls)\n        docs = loader.load()\n        records = self.to_records(docs)\n        self.status = records\n        return records\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "urls",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Fetch content from one or more URLs.",
            "icon": "layout-template",
            "base_classes": [
              "Record"
            ],
            "display_name": "URL",
            "documentation": "",
            "custom_fields": {
              "urls": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "URL-Fy8lq"
        },
        "selected": false,
        "width": 384,
        "height": 281,
        "positionAbsolute": {
          "x": -763.7123180280944,
          "y": 387.5611237143193
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ChatOpenAISpecs-uAdgt",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-uAdgtœ}",
        "target": "LLMChain-if8Dx",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "LLMChain-if8Dx",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable"
            ],
            "dataType": "ChatOpenAISpecs",
            "id": "ChatOpenAISpecs-uAdgt"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-ChatOpenAISpecs-uAdgt{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-uAdgtœ}-LLMChain-if8Dx{œfieldNameœ:œllmœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "Prompt-e09le",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-e09leœ}",
        "target": "LLMChain-if8Dx",
        "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "template",
            "id": "LLMChain-if8Dx",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-e09le"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-e09le{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-e09leœ}-LLMChain-if8Dx{œfieldNameœ:œtemplateœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "LLMChain-if8Dx",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-if8Dxœ}",
        "target": "TextOutput-HiiLt",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-HiiLtœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-HiiLt",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "LLMChain",
            "id": "LLMChain-if8Dx"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-LLMChain-if8Dx{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-if8Dxœ}-TextOutput-HiiLt{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-HiiLtœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "TextInput-ySmOC",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-ySmOCœ}",
        "target": "URL-fyC45",
        "targetHandle": "{œfieldNameœ:œurlsœ,œidœ:œURL-fyC45œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "urls",
            "id": "URL-fyC45",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-ySmOC"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-TextInput-ySmOC{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-ySmOCœ}-URL-fyC45{œfieldNameœ:œurlsœ,œidœ:œURL-fyC45œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "URL-fyC45",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-fyC45œ}",
        "target": "Prompt-e09le",
        "targetHandle": "{œfieldNameœ:œpage_contentœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "page_content",
            "id": "Prompt-e09le",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "URL",
            "id": "URL-fyC45"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-URL-fyC45{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-fyC45œ}-Prompt-e09le{œfieldNameœ:œpage_contentœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "TextInput-e5QZx",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-e5QZxœ}",
        "target": "URL-Fy8lq",
        "targetHandle": "{œfieldNameœ:œurlsœ,œidœ:œURL-Fy8lqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "urls",
            "id": "URL-Fy8lq",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-e5QZx"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-TextInput-e5QZx{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-e5QZxœ}-URL-Fy8lq{œfieldNameœ:œurlsœ,œidœ:œURL-Fy8lqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "URL-Fy8lq",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-Fy8lqœ}",
        "target": "Prompt-e09le",
        "targetHandle": "{œfieldNameœ:œproduct_infoœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "product_info",
            "id": "Prompt-e09le",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "URL",
            "id": "URL-Fy8lq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-URL-Fy8lq{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-Fy8lqœ}-Prompt-e09le{œfieldNameœ:œproduct_infoœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 817.334489282598,
      "y": -64.14647440142983,
      "zoom": 0.5721189339668241
    }
  },
  "metadata": {
    "Prompt": {
      "count": 1
    },
    "TextInput": {
      "count": 2
    },
    "ChatOpenAISpecs": {
      "count": 1
    },
    "TextOutput": {
      "count": 1
    },
    "LLMChain": {
      "count": 1
    },
    "URL": {
      "count": 2
    },
    "total": 8
  },
  "original": {
    "id": "6fc4d2e9-9346-4cdf-b8a9-4dd51b3b19f4",
    "name": "种草文案生成器",
    "description": "基于蝉选商品链接和内容链接生成短视频脚本文案。",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "Prompt": {
        "count": 1
      },
      "TextInput": {
        "count": 2
      },
      "ChatOpenAISpecs": {
        "count": 1
      },
      "TextOutput": {
        "count": 1
      },
      "LLMChain": {
        "count": 1
      },
      "URL": {
        "count": 2
      },
      "total": 8
    },
    "last_tested_version": "1.0.0a29",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "Prompt-e09le",
          "type": "genericNode",
          "position": {
            "x": -277.9395964301812,
            "y": 67.9087560526595
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\nfrom axiestudio.interface.custom.custom_component import CustomComponent\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "<::content::>\n{page_content}\n<::/content::>\n<::product::>\n{product_info}\n<::/product::>\n\n<::Rule::>\n- 文章开头：\n1. 内容前面需要根据黄金 3 秒准则来生成短视频文案，要求黄金 3 秒的文案精炼直击要害。\n2. 读者并不了解<::content::>中的事件内容，你需要先简单口语化主观科普一下这件事。\n\n- 文章中间插入软广信息：你需要在内容后半部分插入一段 100 字左右的带货文案，需要结合上下文植入软广。我已经将软广信息通过<::product::>标记并提供给你，你需要根据产品的卖点，人群画像等信息，以及文章中你要插入的部分的上下文做衔接结合：\n1. 用前文内容（A）中的某个细节作为勾子，来将产品带货文案(B)结合到内容里面去。\n2. 插入一段 100 字左右的带货文案(B)：你需要在内容合适的地方插入软广，在准备开始引入软广的时候，使用《#产品链接占位符:开始#》标记符来标记软广开始部分，以及使用《#产品链接占位符:结束#》来标记结束部分，以便我可以将商品宣传视频放到占位符处。\n3. 讲完带货文案(B)之后又能够用带货文案中的例子(B)作为勾子，B 结束之后的文案(C)最好也能基于广告(B)的内容然后绕回去（A），需要稍微再提一下商品（B），来引出下文(C)继续讲回之前的内容（A）。\n\n- 文章结尾（一句祝福语），基于<::content::>中的事件内容中传���出来的信息，往积极正面的方面，祝福观看视频前的你（读者），能够/早日/也能吃上心上人的爱心便当/有情人终成眷属/两情相悦等等……我只是举个例子，请你创新写一句话，只需要一句话就好。\n<::/Rule::>\n\n<::Task::>\n<::content::> 标签标记为文章素材。请根据<::Rule::>中提到的语言风格要求,结合素材内容,输出一段400字左右的全新内容，内容需要口语化，娱乐化。最后用<::output::>标签将生成的内容括起来。\n<::/Task::>\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "page_content": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "page_content",
                  "display_name": "page_content",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "product_info": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "product_info",
                  "display_name": "product_info",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "page_content",
                  "product_info"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-e09le",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 477,
          "positionAbsolute": {
            "x": -277.9395964301812,
            "y": 67.9087560526595
          },
          "dragging": false
        },
        {
          "id": "TextInput-ySmOC",
          "type": "genericNode",
          "position": {
            "x": -1266.563502869617,
            "y": 14.404728194290186
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "https://xueqiu.com/2645961584/284378938",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Interaction Panel.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "文章内容",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-ySmOC"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": -1266.563502869617,
            "y": 14.404728194290186
          },
          "dragging": false
        },
        {
          "id": "TextInput-e5QZx",
          "type": "genericNode",
          "position": {
            "x": -1272.1248811781984,
            "y": 386.506868599431
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "https://www.chanxuan.com/goods/detail/_PQ5PRaoi2mrIcEELAKm6o8ZZOVS4kyX?trackIndex=1008&match_id=&request_id=551d3cf031d002e034b4a2a908675a9b&reportKeyword=%25E5%2586%2585%25E8%25A3%25A4&source_position=3&topicId=&result_num=0&page=1&indexInList=0",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Interaction Panel.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "蝉选商品信息",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-e5QZx"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": -1272.1248811781984,
            "y": 386.506868599431
          },
          "dragging": false
        },
        {
          "id": "ChatOpenAISpecs-uAdgt",
          "type": "genericNode",
          "position": {
            "x": -261.27906654653873,
            "y": 684.1236616131049
          },
          "data": {
            "type": "ChatOpenAISpecs",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.field_typing import BaseLanguageModel\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.interface.custom.custom_component import CustomComponent\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n    icon = \"OpenAI\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> BaseLanguageModel:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "2048",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-turbo-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "https://api.rcouyi.com/v1"
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "icon": "OpenAI",
              "base_classes": [
                "BaseLanguageModel",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOpenAISpecs-uAdgt"
          },
          "selected": false,
          "width": 384,
          "height": 649,
          "positionAbsolute": {
            "x": -261.27906654653873,
            "y": 684.1236616131049
          },
          "dragging": false
        },
        {
          "id": "TextOutput-HiiLt",
          "type": "genericNode",
          "position": {
            "x": 915.5218121967575,
            "y": 397.1125098872778
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Interaction Panel.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Output",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-HiiLt"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 915.5218121967575,
            "y": 397.1125098872778
          },
          "dragging": false
        },
        {
          "id": "LLMChain-if8Dx",
          "type": "genericNode",
          "position": {
            "x": 355.09149843541354,
            "y": 339.071524968018
          },
          "data": {
            "type": "LLMChain",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain.chains.llm import LLMChain\n\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Text\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom langchain_core.prompts import PromptTemplate\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n        }\n\n    def build(\n        self,\n        template: Text,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Text:\n        prompt = PromptTemplate.from_template(template)\n        runnable = LLMChain(prompt=prompt, llm=llm, memory=memory)\n        result_dict = runnable.invoke({})\n        output_key = runnable.output_key\n        result = result_dict[output_key]\n        self.status = result\n        return result\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Chain to run queries against LLMs",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "LLMChain",
              "documentation": "",
              "custom_fields": {
                "template": null,
                "llm": null,
                "memory": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "LLMChain-if8Dx"
          },
          "selected": false,
          "width": 384,
          "height": 385,
          "positionAbsolute": {
            "x": 355.09149843541354,
            "y": 339.071524968018
          },
          "dragging": false
        },
        {
          "id": "URL-fyC45",
          "type": "genericNode",
          "position": {
            "x": -766.0474309891935,
            "y": 33.40232461433615
          },
          "data": {
            "type": "URL",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Dict\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass URLComponent(CustomComponent):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"urls\": {\"display_name\": \"URL\"},\n        }\n\n    def build(\n        self,\n        urls: list[str],\n    ) -> list[Record]:\n        loader = WebBaseLoader(web_paths=urls)\n        docs = loader.load()\n        records = self.to_records(docs)\n        self.status = records\n        return records\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "urls",
                  "display_name": "URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Fetch content from one or more URLs.",
              "icon": "layout-template",
              "base_classes": [
                "Record"
              ],
              "display_name": "URL",
              "documentation": "",
              "custom_fields": {
                "urls": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "URL-fyC45"
          },
          "selected": false,
          "width": 384,
          "height": 281,
          "positionAbsolute": {
            "x": -766.0474309891935,
            "y": 33.40232461433615
          },
          "dragging": false
        },
        {
          "id": "URL-Fy8lq",
          "type": "genericNode",
          "position": {
            "x": -763.7123180280944,
            "y": 387.5611237143193
          },
          "data": {
            "type": "URL",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Dict\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass URLComponent(CustomComponent):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"urls\": {\"display_name\": \"URL\"},\n        }\n\n    def build(\n        self,\n        urls: list[str],\n    ) -> list[Record]:\n        loader = WebBaseLoader(web_paths=urls)\n        docs = loader.load()\n        records = self.to_records(docs)\n        self.status = records\n        return records\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "urls",
                  "display_name": "URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Fetch content from one or more URLs.",
              "icon": "layout-template",
              "base_classes": [
                "Record"
              ],
              "display_name": "URL",
              "documentation": "",
              "custom_fields": {
                "urls": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "URL-Fy8lq"
          },
          "selected": false,
          "width": 384,
          "height": 281,
          "positionAbsolute": {
            "x": -763.7123180280944,
            "y": 387.5611237143193
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "ChatOpenAISpecs-uAdgt",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-uAdgtœ}",
          "target": "LLMChain-if8Dx",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "LLMChain-if8Dx",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable"
              ],
              "dataType": "ChatOpenAISpecs",
              "id": "ChatOpenAISpecs-uAdgt"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-ChatOpenAISpecs-uAdgt{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-uAdgtœ}-LLMChain-if8Dx{œfieldNameœ:œllmœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "Prompt-e09le",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-e09leœ}",
          "target": "LLMChain-if8Dx",
          "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "template",
              "id": "LLMChain-if8Dx",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-e09le"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-e09le{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-e09leœ}-LLMChain-if8Dx{œfieldNameœ:œtemplateœ,œidœ:œLLMChain-if8Dxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "LLMChain-if8Dx",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-if8Dxœ}",
          "target": "TextOutput-HiiLt",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-HiiLtœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-HiiLt",
              "inputTypes": [
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "LLMChain",
              "id": "LLMChain-if8Dx"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-LLMChain-if8Dx{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-if8Dxœ}-TextOutput-HiiLt{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-HiiLtœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "TextInput-ySmOC",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-ySmOCœ}",
          "target": "URL-fyC45",
          "targetHandle": "{œfieldNameœ:œurlsœ,œidœ:œURL-fyC45œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "urls",
              "id": "URL-fyC45",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-ySmOC"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-TextInput-ySmOC{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-ySmOCœ}-URL-fyC45{œfieldNameœ:œurlsœ,œidœ:œURL-fyC45œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "URL-fyC45",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-fyC45œ}",
          "target": "Prompt-e09le",
          "targetHandle": "{œfieldNameœ:œpage_contentœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "page_content",
              "id": "Prompt-e09le",
              "inputTypes": [
                "Document",
                "BaseOutputParser",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "URL",
              "id": "URL-fyC45"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-URL-fyC45{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-fyC45œ}-Prompt-e09le{œfieldNameœ:œpage_contentœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "TextInput-e5QZx",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-e5QZxœ}",
          "target": "URL-Fy8lq",
          "targetHandle": "{œfieldNameœ:œurlsœ,œidœ:œURL-Fy8lqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "urls",
              "id": "URL-Fy8lq",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-e5QZx"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-TextInput-e5QZx{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-e5QZxœ}-URL-Fy8lq{œfieldNameœ:œurlsœ,œidœ:œURL-Fy8lqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "URL-Fy8lq",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-Fy8lqœ}",
          "target": "Prompt-e09le",
          "targetHandle": "{œfieldNameœ:œproduct_infoœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "product_info",
              "id": "Prompt-e09le",
              "inputTypes": [
                "Document",
                "BaseOutputParser",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "URL",
              "id": "URL-Fy8lq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-URL-Fy8lq{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-Fy8lqœ}-Prompt-e09le{œfieldNameœ:œproduct_infoœ,œidœ:œPrompt-e09leœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 817.334489282598,
        "y": -64.14647440142983,
        "zoom": 0.5721189339668241
      }
    },
    "date_created": "2024-05-02T17:40:29.909Z",
    "date_updated": "2024-05-02T17:41:14.278Z",
    "status": "Public",
    "sort": null,
    "user_updated": "68fc6db4-50c1-424c-ac52-6dd2fa4e1c0a",
    "user_created": {
      "username": "haipro",
      "first_name": "hai",
      "last_name": "pro",
      "id": "68fc6db4-50c1-424c-ac52-6dd2fa4e1c0a"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:59.831Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 36,
    "converter_version": "1.0.0"
  }
}