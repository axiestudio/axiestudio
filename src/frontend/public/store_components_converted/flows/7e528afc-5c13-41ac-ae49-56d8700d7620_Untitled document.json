{
  "id": "7e528afc-5c13-41ac-ae49-56d8700d7620",
  "name": "Untitled document",
  "description": "Language Models, Unleashed. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "rogcesar",
    "first_name": "Rogerio",
    "last_name": "Cesar",
    "id": "5a495b47-86de-4dea-89c4-b310e4721b0a",
    "full_name": "Rogerio Cesar"
  },
  "store_url": "https://www.langflow.store/store/component/7e528afc-5c13-41ac-ae49-56d8700d7620",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-10-05T19:27:40.966Z",
    "updated": "2024-10-05T19:27:40.998Z",
    "downloaded": "2025-08-19T17:50:07.442Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "TextInput-pYr8c",
        "type": "genericNode",
        "position": {
          "x": -201.16835275001347,
          "y": 34.48137912511103
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "https://www.estadao.com.br/economia/",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "TextInput-pYr8c"
        },
        "selected": false,
        "width": 384,
        "height": 302,
        "positionAbsolute": {
          "x": -201.16835275001347,
          "y": 34.48137912511103
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-YTvVO",
        "type": "genericNode",
        "position": {
          "x": 54.987746990243835,
          "y": 616.516540665104
        },
        "data": {
          "type": "NewsCrawlerComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nfrom newspaper import Article, Config, Source\r\nfrom datetime import datetime\r\nimport requests\r\n\r\nclass NewsCrawlerComponent(Component):\r\n    display_name = \"News Crawler\"\r\n    description = \"Crawls news articles from provided URLs and outputs title, URL, and publish date.\"\r\n    icon = \"news-icon\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"urls\",\r\n            display_name=\"News URLs\",\r\n            info=\"List of URLs to scrape news articles from. Provide one URL per line.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Articles Data\", name=\"articles_data\", method=\"crawl_news\"),\r\n    ]\r\n\r\n    # Configurações de scraping\r\n    config = Config()\r\n    config.browser_user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n\r\n    def validate_url(self, url):\r\n        \"\"\"Valida a URL para garantir que ela é acessível\"\"\"\r\n        try:\r\n            response = requests.head(url, timeout=5)\r\n            # Apenas URLs com status 200 são válidas\r\n            return response.status_code == 200\r\n        except Exception as e:\r\n            print(f\"URL inválida ou inacessível: {url} - Erro: {e}\")\r\n            return False\r\n\r\n    def extract_article_info(self, article_url):\r\n        \"\"\"Extrai o título, URL e data de publicação de um artigo\"\"\"\r\n        article = Article(article_url, config=self.config)\r\n        try:\r\n            article.download()\r\n            article.parse()\r\n            publish_date = article.publish_date\r\n\r\n            if publish_date is None:\r\n                # Usar a data atual se a data de publicação não estiver disponível\r\n                publish_date = datetime.now().strftime('%Y-%m-%d')\r\n            else:\r\n                publish_date = publish_date.strftime('%Y-%m-%d')\r\n\r\n            return {\"title\": article.title, \"url\": article.url, \"publish_date\": publish_date}\r\n        except Exception as e:\r\n            print(f\"Erro ao processar o artigo: {article_url} - {e}\")\r\n            return None\r\n\r\n    def crawl_news(self) -> Data:\r\n        \"\"\"Realiza o scraping das notícias e retorna os dados coletados\"\"\"\r\n        urls_input = self.urls.split('\\n')\r\n        \r\n        # Lista para armazenar dados dos artigos\r\n        articles_data = []\r\n        \r\n        # Processar URLs\r\n        for url in urls_input:\r\n            url = url.strip()  # Remove espaços em branco desnecessários\r\n            if self.validate_url(url):  # Validar URL antes de tentar acessar\r\n                try:\r\n                    # Usar o objeto Source para pegar todos os artigos da página principal\r\n                    source = Source(url, config=self.config)\r\n                    source.build()\r\n\r\n                    # Para cada artigo encontrado na página\r\n                    for article_url in source.article_urls():\r\n                        info = self.extract_article_info(article_url)\r\n                        if info:\r\n                            articles_data.append(info)\r\n                except Exception as e:\r\n                    print(f\"Erro ao processar a URL: {url} - {e}\")\r\n            else:\r\n                print(f\"URL inválida ou inacessível: {url}\")\r\n\r\n        # Retornar os dados dos artigos\r\n        return Data(data={\"articles\": articles_data})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "urls",
                "value": "https://www.poder360.com.br/",
                "display_name": "News URLs",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "List of URLs to scrape news articles from. Provide one URL per line.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Crawls news articles from provided URLs and outputs title, URL, and publish date.",
            "icon": "news-icon",
            "base_classes": [
              "Data"
            ],
            "display_name": "News Crawler",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "articles_data",
                "display_name": "Articles Data",
                "method": "crawl_news",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "urls"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "CustomComponent-YTvVO"
        },
        "selected": false,
        "width": 384,
        "height": 330,
        "dragging": false
      },
      {
        "id": "postgresql_query-k23eA",
        "type": "genericNode",
        "position": {
          "x": 996.1180623193011,
          "y": 223.11780483492686
        },
        "data": {
          "type": "postgresql_insert",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, List, Dict\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\nimport psycopg2  # PostgreSQL connect lib\r\n\r\n\r\nclass PostgreSQLInsertComponent(LCToolComponent):\r\n    display_name: str = \"PostgreSQL Insert\"\r\n    description: str = \"Insert scraped news articles into a PostgreSQL database table.\"\r\n    name = \"postgresql_insert\"\r\n    icon = \"database\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"host\",\r\n            display_name=\"Host\",\r\n            info=\"PostgreSQL server address\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user\",\r\n            display_name=\"User\",\r\n            info=\"Username for authentication\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"password\",\r\n            display_name=\"Password\",\r\n            info=\"Password for authentication\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"database\",\r\n            display_name=\"Database\",\r\n            info=\"Database name\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"table\",\r\n            display_name=\"Table\",\r\n            info=\"Table where the news articles will be inserted\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"news_data\",\r\n            display_name=\"News Data\",\r\n            info=\"The news articles data to insert (connected from News Crawler output)\",\r\n        ),\r\n    ]\r\n\r\n    class PostgreSQLInsertSchema(BaseModel):\r\n        host: str = Field(..., description=\"PostgreSQL server address\")\r\n        user: str = Field(..., description=\"Username for authentication\")\r\n        password: str = Field(..., description=\"Password for authentication\")\r\n        database: str = Field(..., description=\"Database name\")\r\n        table: str = Field(..., description=\"Table where the news articles will be inserted\")\r\n        news_data: List[Dict[str, str]] = Field(..., description=\"The news articles data to insert\")\r\n\r\n    def run_model(self) -> str:\r\n        # Coletando os inputs\r\n        input_dict = {input_obj.name: input_obj.value for input_obj in self.inputs}\r\n\r\n        host = input_dict.get(\"host\")\r\n        user = input_dict.get(\"user\")\r\n        password = input_dict.get(\"password\")\r\n        database = input_dict.get(\"database\")\r\n        table = input_dict.get(\"table\")\r\n        news_data = input_dict.get(\"news_data\")  # Dados do output do News Crawler\r\n\r\n        # Conectando ao banco de dados PostgreSQL\r\n        try:\r\n            connection = psycopg2.connect(\r\n                host=host,\r\n                user=user,\r\n                password=password,\r\n                database=database\r\n            )\r\n            cursor = connection.cursor()\r\n\r\n            # Montar a query de inserção\r\n            insert_query = f\"INSERT INTO {table} (title, url, publish_date) VALUES (%s, %s, %s)\"\r\n            \r\n            # Iterar sobre os dados do News Crawler e inserir no banco de dados\r\n            for article in news_data:\r\n                cursor.execute(insert_query, (article[\"title\"], article[\"url\"], article[\"publish_date\"]))\r\n\r\n            # Confirmar as inserções\r\n            connection.commit()\r\n\r\n            cursor.close()\r\n            connection.close()\r\n            \r\n            self.status = f\"{len(news_data)} artigos inseridos com sucesso na tabela {table}.\"\r\n            return self.status\r\n\r\n        except Exception as e:\r\n            if connection:\r\n                connection.close()  # Garantir que a conexão seja fechada em caso de erro\r\n            self.status = f\"Error inserting data: {str(e)}\"\r\n            return f\"Error inserting data: {str(e)}\"\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"postgresql_insert\",\r\n            description=\"Inserts scraped news articles into a PostgreSQL database table. Inputs include 'host', 'user', 'password', 'database', 'table', and 'news_data'.\",\r\n            func=self._execute_insert,\r\n            args_schema=self.PostgreSQLInsertSchema,\r\n        )\r\n\r\n    def _execute_insert(self, host: str, user: str, password: str, database: str, table: str, news_data: List[Dict[str, str]]) -> str:\r\n        try:\r\n            connection = psycopg2.connect(\r\n                host=host,\r\n                user=user,\r\n                password=password,\r\n                database=database\r\n            )\r\n            cursor = connection.cursor()\r\n\r\n            # Montar a query de inserção\r\n            insert_query = f\"INSERT INTO {table} (title, url, publish_date) VALUES (%s, %s, %s)\"\r\n            \r\n            # Iterar sobre os dados do News Crawler e inserir no banco de dados\r\n            for article in news_data:\r\n                cursor.execute(insert_query, (article[\"title\"], article[\"url\"], article[\"publish_date\"]))\r\n\r\n            # Confirmar as inserções\r\n            connection.commit()\r\n\r\n            cursor.close()\r\n            connection.close()\r\n            \r\n            return f\"{len(news_data)} artigos inseridos com sucesso na tabela {table}.\"\r\n\r\n        except Exception as e:\r\n            if connection:\r\n                connection.close()\r\n            return f\"Error inserting data: {str(e)}\"\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "database",
                "value": "axiestudio",
                "display_name": "Database",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Database name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "host": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "host",
                "value": "dify_axiestudio-db",
                "display_name": "Host",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "PostgreSQL server address",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "news_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "news_data",
                "value": "",
                "display_name": "News Data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The news articles data to insert (connected from News Crawler output)",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "password": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "password",
                "value": "",
                "display_name": "Password",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Password for authentication",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "table": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "table",
                "value": "articles",
                "display_name": "Table",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Table where the news articles will be inserted",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "user",
                "value": "postgres",
                "display_name": "User",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Username for authentication",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Insert scraped news articles into a PostgreSQL database table.",
            "icon": "database",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "PostgreSQL Query",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "host",
              "user",
              "password",
              "database",
              "table",
              "news_data"
            ],
            "beta": false,
            "edited": true
          },
          "id": "postgresql_query-k23eA"
        },
        "selected": true,
        "width": 384,
        "height": 805,
        "positionAbsolute": {
          "x": 996.1180623193011,
          "y": 223.11780483492686
        },
        "dragging": false
      }
    ],
    "edges": [],
    "viewport": {
      "x": 376.54884720317256,
      "y": 11.974588972400056,
      "zoom": 0.792995916624135
    }
  },
  "metadata": {
    "TextInput": {
      "count": 1
    },
    "CustomComponent": {
      "count": 1
    },
    "postgresql_query": {
      "count": 1
    },
    "total": 3
  },
  "original": {
    "id": "7e528afc-5c13-41ac-ae49-56d8700d7620",
    "name": "Untitled document",
    "description": "Language Models, Unleashed.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "3",
    "metadata": {
      "TextInput": {
        "count": 1
      },
      "CustomComponent": {
        "count": 1
      },
      "postgresql_query": {
        "count": 1
      },
      "total": 3
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "TextInput-pYr8c",
          "type": "genericNode",
          "position": {
            "x": -201.16835275001347,
            "y": 34.48137912511103
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "https://www.estadao.com.br/economia/",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "TextInput-pYr8c"
          },
          "selected": false,
          "width": 384,
          "height": 302,
          "positionAbsolute": {
            "x": -201.16835275001347,
            "y": 34.48137912511103
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-YTvVO",
          "type": "genericNode",
          "position": {
            "x": 54.987746990243835,
            "y": 616.516540665104
          },
          "data": {
            "type": "NewsCrawlerComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nfrom newspaper import Article, Config, Source\r\nfrom datetime import datetime\r\nimport requests\r\n\r\nclass NewsCrawlerComponent(Component):\r\n    display_name = \"News Crawler\"\r\n    description = \"Crawls news articles from provided URLs and outputs title, URL, and publish date.\"\r\n    icon = \"news-icon\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"urls\",\r\n            display_name=\"News URLs\",\r\n            info=\"List of URLs to scrape news articles from. Provide one URL per line.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Articles Data\", name=\"articles_data\", method=\"crawl_news\"),\r\n    ]\r\n\r\n    # Configurações de scraping\r\n    config = Config()\r\n    config.browser_user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n\r\n    def validate_url(self, url):\r\n        \"\"\"Valida a URL para garantir que ela é acessível\"\"\"\r\n        try:\r\n            response = requests.head(url, timeout=5)\r\n            # Apenas URLs com status 200 são válidas\r\n            return response.status_code == 200\r\n        except Exception as e:\r\n            print(f\"URL inválida ou inacessível: {url} - Erro: {e}\")\r\n            return False\r\n\r\n    def extract_article_info(self, article_url):\r\n        \"\"\"Extrai o título, URL e data de publicação de um artigo\"\"\"\r\n        article = Article(article_url, config=self.config)\r\n        try:\r\n            article.download()\r\n            article.parse()\r\n            publish_date = article.publish_date\r\n\r\n            if publish_date is None:\r\n                # Usar a data atual se a data de publicação não estiver disponível\r\n                publish_date = datetime.now().strftime('%Y-%m-%d')\r\n            else:\r\n                publish_date = publish_date.strftime('%Y-%m-%d')\r\n\r\n            return {\"title\": article.title, \"url\": article.url, \"publish_date\": publish_date}\r\n        except Exception as e:\r\n            print(f\"Erro ao processar o artigo: {article_url} - {e}\")\r\n            return None\r\n\r\n    def crawl_news(self) -> Data:\r\n        \"\"\"Realiza o scraping das notícias e retorna os dados coletados\"\"\"\r\n        urls_input = self.urls.split('\\n')\r\n        \r\n        # Lista para armazenar dados dos artigos\r\n        articles_data = []\r\n        \r\n        # Processar URLs\r\n        for url in urls_input:\r\n            url = url.strip()  # Remove espaços em branco desnecessários\r\n            if self.validate_url(url):  # Validar URL antes de tentar acessar\r\n                try:\r\n                    # Usar o objeto Source para pegar todos os artigos da página principal\r\n                    source = Source(url, config=self.config)\r\n                    source.build()\r\n\r\n                    # Para cada artigo encontrado na página\r\n                    for article_url in source.article_urls():\r\n                        info = self.extract_article_info(article_url)\r\n                        if info:\r\n                            articles_data.append(info)\r\n                except Exception as e:\r\n                    print(f\"Erro ao processar a URL: {url} - {e}\")\r\n            else:\r\n                print(f\"URL inválida ou inacessível: {url}\")\r\n\r\n        # Retornar os dados dos artigos\r\n        return Data(data={\"articles\": articles_data})\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "urls",
                  "value": "https://www.poder360.com.br/",
                  "display_name": "News URLs",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "List of URLs to scrape news articles from. Provide one URL per line.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Crawls news articles from provided URLs and outputs title, URL, and publish date.",
              "icon": "news-icon",
              "base_classes": [
                "Data"
              ],
              "display_name": "News Crawler",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "articles_data",
                  "display_name": "Articles Data",
                  "method": "crawl_news",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "urls"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "CustomComponent-YTvVO"
          },
          "selected": false,
          "width": 384,
          "height": 330,
          "dragging": false
        },
        {
          "id": "postgresql_query-k23eA",
          "type": "genericNode",
          "position": {
            "x": 996.1180623193011,
            "y": 223.11780483492686
          },
          "data": {
            "type": "postgresql_insert",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, List, Dict\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\nimport psycopg2  # PostgreSQL connect lib\r\n\r\n\r\nclass PostgreSQLInsertComponent(LCToolComponent):\r\n    display_name: str = \"PostgreSQL Insert\"\r\n    description: str = \"Insert scraped news articles into a PostgreSQL database table.\"\r\n    name = \"postgresql_insert\"\r\n    icon = \"database\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"host\",\r\n            display_name=\"Host\",\r\n            info=\"PostgreSQL server address\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user\",\r\n            display_name=\"User\",\r\n            info=\"Username for authentication\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"password\",\r\n            display_name=\"Password\",\r\n            info=\"Password for authentication\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"database\",\r\n            display_name=\"Database\",\r\n            info=\"Database name\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"table\",\r\n            display_name=\"Table\",\r\n            info=\"Table where the news articles will be inserted\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"news_data\",\r\n            display_name=\"News Data\",\r\n            info=\"The news articles data to insert (connected from News Crawler output)\",\r\n        ),\r\n    ]\r\n\r\n    class PostgreSQLInsertSchema(BaseModel):\r\n        host: str = Field(..., description=\"PostgreSQL server address\")\r\n        user: str = Field(..., description=\"Username for authentication\")\r\n        password: str = Field(..., description=\"Password for authentication\")\r\n        database: str = Field(..., description=\"Database name\")\r\n        table: str = Field(..., description=\"Table where the news articles will be inserted\")\r\n        news_data: List[Dict[str, str]] = Field(..., description=\"The news articles data to insert\")\r\n\r\n    def run_model(self) -> str:\r\n        # Coletando os inputs\r\n        input_dict = {input_obj.name: input_obj.value for input_obj in self.inputs}\r\n\r\n        host = input_dict.get(\"host\")\r\n        user = input_dict.get(\"user\")\r\n        password = input_dict.get(\"password\")\r\n        database = input_dict.get(\"database\")\r\n        table = input_dict.get(\"table\")\r\n        news_data = input_dict.get(\"news_data\")  # Dados do output do News Crawler\r\n\r\n        # Conectando ao banco de dados PostgreSQL\r\n        try:\r\n            connection = psycopg2.connect(\r\n                host=host,\r\n                user=user,\r\n                password=password,\r\n                database=database\r\n            )\r\n            cursor = connection.cursor()\r\n\r\n            # Montar a query de inserção\r\n            insert_query = f\"INSERT INTO {table} (title, url, publish_date) VALUES (%s, %s, %s)\"\r\n            \r\n            # Iterar sobre os dados do News Crawler e inserir no banco de dados\r\n            for article in news_data:\r\n                cursor.execute(insert_query, (article[\"title\"], article[\"url\"], article[\"publish_date\"]))\r\n\r\n            # Confirmar as inserções\r\n            connection.commit()\r\n\r\n            cursor.close()\r\n            connection.close()\r\n            \r\n            self.status = f\"{len(news_data)} artigos inseridos com sucesso na tabela {table}.\"\r\n            return self.status\r\n\r\n        except Exception as e:\r\n            if connection:\r\n                connection.close()  # Garantir que a conexão seja fechada em caso de erro\r\n            self.status = f\"Error inserting data: {str(e)}\"\r\n            return f\"Error inserting data: {str(e)}\"\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"postgresql_insert\",\r\n            description=\"Inserts scraped news articles into a PostgreSQL database table. Inputs include 'host', 'user', 'password', 'database', 'table', and 'news_data'.\",\r\n            func=self._execute_insert,\r\n            args_schema=self.PostgreSQLInsertSchema,\r\n        )\r\n\r\n    def _execute_insert(self, host: str, user: str, password: str, database: str, table: str, news_data: List[Dict[str, str]]) -> str:\r\n        try:\r\n            connection = psycopg2.connect(\r\n                host=host,\r\n                user=user,\r\n                password=password,\r\n                database=database\r\n            )\r\n            cursor = connection.cursor()\r\n\r\n            # Montar a query de inserção\r\n            insert_query = f\"INSERT INTO {table} (title, url, publish_date) VALUES (%s, %s, %s)\"\r\n            \r\n            # Iterar sobre os dados do News Crawler e inserir no banco de dados\r\n            for article in news_data:\r\n                cursor.execute(insert_query, (article[\"title\"], article[\"url\"], article[\"publish_date\"]))\r\n\r\n            # Confirmar as inserções\r\n            connection.commit()\r\n\r\n            cursor.close()\r\n            connection.close()\r\n            \r\n            return f\"{len(news_data)} artigos inseridos com sucesso na tabela {table}.\"\r\n\r\n        except Exception as e:\r\n            if connection:\r\n                connection.close()\r\n            return f\"Error inserting data: {str(e)}\"\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "database",
                  "value": "axiestudio",
                  "display_name": "Database",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Database name",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "host": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "host",
                  "value": "dify_axiestudio-db",
                  "display_name": "Host",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "PostgreSQL server address",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "news_data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "news_data",
                  "value": "",
                  "display_name": "News Data",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The news articles data to insert (connected from News Crawler output)",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "password": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "password",
                  "value": "",
                  "display_name": "Password",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Password for authentication",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "table": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "table",
                  "value": "articles",
                  "display_name": "Table",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Table where the news articles will be inserted",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "user": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "user",
                  "value": "postgres",
                  "display_name": "User",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Username for authentication",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Insert scraped news articles into a PostgreSQL database table.",
              "icon": "database",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "PostgreSQL Query",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "host",
                "user",
                "password",
                "database",
                "table",
                "news_data"
              ],
              "beta": false,
              "edited": true
            },
            "id": "postgresql_query-k23eA"
          },
          "selected": true,
          "width": 384,
          "height": 805,
          "positionAbsolute": {
            "x": 996.1180623193011,
            "y": 223.11780483492686
          },
          "dragging": false
        }
      ],
      "edges": [],
      "viewport": {
        "x": 376.54884720317256,
        "y": 11.974588972400056,
        "zoom": 0.792995916624135
      }
    },
    "date_created": "2024-10-05T19:27:40.966Z",
    "date_updated": "2024-10-05T19:27:40.998Z",
    "status": "Public",
    "sort": null,
    "user_updated": "5a495b47-86de-4dea-89c4-b310e4721b0a",
    "user_created": {
      "username": "rogcesar",
      "first_name": "Rogerio",
      "last_name": "Cesar",
      "id": "5a495b47-86de-4dea-89c4-b310e4721b0a"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:00.800Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 26,
    "converter_version": "1.0.0"
  }
}