{
  "id": "25e74e5b-a5fc-4fb5-9754-a6c3d711d57f",
  "name": "Desafio 3 - CREW_ToolAgent",
  "description": "Crafting Conversations, One Node at a Time. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Victor",
    "first_name": "VICTOR",
    "last_name": "GOMES",
    "id": "3e203c77-c087-4ccf-a0c6-07c619d760f1",
    "full_name": "VICTOR GOMES"
  },
  "store_url": "https://www.langflow.store/store/component/25e74e5b-a5fc-4fb5-9754-a6c3d711d57f",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-08T12:13:32.907Z",
    "updated": "2024-08-08T12:13:32.942Z",
    "downloaded": "2025-08-19T17:50:06.739Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ToolCallingAgent-WGSZr",
        "type": "genericNode",
        "position": {
          "x": 852.3269426882011,
          "y": -687.2508207441994
        },
        "data": {
          "type": "ToolCallingAgent",
          "node": {
            "template": {
              "_type": "Component",
              "chat_history": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chat_history",
                "display_name": "Chat History",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "llm",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tools",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool",
                  "BaseTool"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, List\n\nfrom langchain.agents import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import MultilineInput\nfrom axiestudio.inputs.inputs import HandleInput, DataInput\nfrom axiestudio.schema import Data\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"Tool Calling Agent\"\n    description: str = \"Agent that uses tools\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"ToolCallingAgent\"\n\n    inputs = LCToolsAgentComponent._base_inputs + [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> Optional[List[Data]]:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_tool_calling_agent(self.llm, self.tools, prompt)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "handle_parsing_errors",
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "15",
                "name": "max_iterations",
                "display_name": "Max Iterations",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "system_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_prompt",
                "display_name": "System Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System prompt for the agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "user_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{input}",
                "name": "user_prompt",
                "display_name": "Prompt",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "This prompt must contain 'input' key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Agent that uses tools",
            "icon": "LangChain",
            "base_classes": [
              "AgentExecutor",
              "Message"
            ],
            "display_name": "Tool Calling Agent",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "AgentExecutor"
                ],
                "selected": "AgentExecutor",
                "name": "agent",
                "display_name": "Agent",
                "method": "build_agent",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "tools",
              "llm",
              "system_prompt",
              "user_prompt",
              "chat_history"
            ],
            "beta": true,
            "edited": false,
            "lf_version": "1.0.14"
          },
          "id": "ToolCallingAgent-WGSZr"
        },
        "selected": false,
        "width": 384,
        "height": 665,
        "positionAbsolute": {
          "x": 852.3269426882011,
          "y": -687.2508207441994
        },
        "dragging": false
      },
      {
        "id": "ChatInput-1zst5",
        "type": "genericNode",
        "position": {
          "x": -489.2556480454878,
          "y": -464.69612277425284
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.14"
          },
          "id": "ChatInput-1zst5"
        },
        "selected": false,
        "width": 384,
        "height": 317,
        "positionAbsolute": {
          "x": -489.2556480454878,
          "y": -464.69612277425284
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-npENG",
        "type": "genericNode",
        "position": {
          "x": 1554.131014501705,
          "y": -293.3944410479404
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.14"
          },
          "id": "ChatOutput-npENG"
        },
        "selected": false,
        "width": 384,
        "height": 317,
        "positionAbsolute": {
          "x": 1554.131014501705,
          "y": -293.3944410479404
        },
        "dragging": false
      },
      {
        "id": "Prompt-i2niC",
        "type": "genericNode",
        "position": {
          "x": 190.79662466769742,
          "y": -179.64632864008033
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "You are a highly skilled Langflow agent.\n\nCapabilities:\n\nYou can search and scrape web pages for the most accurate and up-to-date information.\nYou provide detailed, technical, and precise information directly related to the user’s queries.\nPrimary Sources for Documentation:\n\nOfficial Langflow Documentation: Langflow Docs: https://docs.axiestudio.org/\nGitHub Repository: Langflow GitHub: https://github.com/axiestudio-ai/axiestudio\nCustom Components Guide: Langflow Custom Components: https://docs.axiestudio.org/components-custom-components.\n\nGuidelines:\n\nAccuracy and Verification:\n\nAlways double-check information in more than one source before responding.\nUse available tools to provide the most accurate and current information to the user.\nDo not provide information you are not certain about without consulting the documentation.\n\nScraping and Searching:\n\nCheck the official documentation and GitHub repository first.\nScrape relevant web pages and nested links within those sites to gather comprehensive information.\n\nResponsiveness:\n\nDirectly address the user's query with relevant and precise information.\nBe technical and detailed in your responses.\n\nTools Usage:\n\nUtilize all available tools to gather and verify information.\nYou are allowed to call multiple functions simultaneously to enhance the accuracy and detail of your responses.\n\nReminder:\n\nAll questions are related to Langflow. Use the documentation and code to help the user.\nIf unsure, state that you do not know rather than providing inaccurate information.\nFocus solely on what the user is asking without diverging into unrelated topics.\nExample Interaction:\nUser: \"How do I create a custom component in Langflow?\"\n\nLangflow Agent:\n\nCheck the Langflow Custom Components Guide: https://docs.axiestudio.org/components-custom-components.\nVerify the process on the Langflow GitHub Repository: https://github.com/axiestudio-ai/axiestudio\n\nDetailed Steps:\n\nAccess the Custom Components Guide.\nFollow the documented steps to create and integrate a custom component.\nProvide any additional tips or common pitfalls highlighted in the GitHub repository.",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": []
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-i2niC"
        },
        "selected": false,
        "width": 384,
        "height": 337,
        "positionAbsolute": {
          "x": 190.79662466769742,
          "y": -179.64632864008033
        },
        "dragging": false
      },
      {
        "id": "firecrawl_scrape_api-3H6Yg",
        "type": "genericNode",
        "position": {
          "x": -521.817274464891,
          "y": -82.89927242773072
        },
        "data": {
          "type": "firecrawl_scrape_api",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The API key to use Firecrawl API.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, IntInput, DictInput, SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass FirecrawlScrapeApiComponent(LCToolComponent):\r\n    display_name: str = \"Firecrawl Scrape API\"\r\n    description: str = \"Scrape web content using Firecrawl API.\"\r\n    name = \"firecrawl_scrape_api\"\r\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\r\n    icon = \"FirecrawlCrawlApi\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"The API key to use Firecrawl API.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"The URL to scrape.\",\r\n        ),\r\n        IntInput(\r\n            name=\"timeout\",\r\n            display_name=\"Timeout\",\r\n            info=\"Timeout in milliseconds for the request.\",\r\n            value=10000,\r\n        ),\r\n        DictInput(\r\n            name=\"pageOptions\",\r\n            display_name=\"Page Options\",\r\n            info=\"The page options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n        DictInput(\r\n            name=\"extractorOptions\",\r\n            display_name=\"Extractor Options\",\r\n            info=\"The extractor options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    class FirecrawlScrapeApiSchema(BaseModel):\r\n        url: str = Field(..., description=\"The URL to scrape\")\r\n        timeout: int = Field(default=10000, description=\"Timeout in milliseconds for the request\")\r\n        pageOptions: Optional[dict] = Field(default=None, description=\"The page options to send with the request\")\r\n        extractorOptions: Optional[dict] = Field(default=None, description=\"The extractor options to send with the request\")\r\n\r\n    def run_model(self) -> Data:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            self.url,\r\n            {\r\n                \"timeout\": str(self.timeout),\r\n                \"extractorOptions\": self.extractorOptions or {},\r\n                \"pageOptions\": self.pageOptions or {},\r\n            },\r\n        )\r\n\r\n        data = Data(data=results)\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"firecrawl_scrape_api\",\r\n            description=\"Scrape web content using Firecrawl API. Input should be a dictionary with 'url' and optional 'timeout', 'pageOptions', and 'extractorOptions'.\",\r\n            func=self._scrape_url,\r\n            args_schema=self.FirecrawlScrapeApiSchema,\r\n        )\r\n\r\n    def _scrape_url(self, url: str, timeout: int = 10000, pageOptions: Optional[dict] = None, extractorOptions: Optional[dict] = None) -> dict:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            url,\r\n            {\r\n                \"timeout\": str(timeout),\r\n                \"extractorOptions\": extractorOptions or {},\r\n                \"pageOptions\": pageOptions or {},\r\n            },\r\n        )\r\n\r\n        return results",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "extractorOptions": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "extractorOptions",
                "display_name": "Extractor Options",
                "advanced": true,
                "dynamic": false,
                "info": "The extractor options to send with the request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "pageOptions": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "pageOptions",
                "display_name": "Page Options",
                "advanced": true,
                "dynamic": false,
                "info": "The page options to send with the request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 10000,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "Timeout in milliseconds for the request.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "https://docs.axiestudio.org",
                "name": "url",
                "display_name": "URL",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The URL to scrape.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Scrape web content using Firecrawl API.",
            "icon": "FirecrawlCrawlApi",
            "base_classes": [
              "Data",
              "list",
              "Tool"
            ],
            "display_name": "FirecrawlScrape Tool",
            "documentation": "https://docs.firecrawl.dev/api-reference/endpoint/scrape",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data",
                  "list"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "api_key",
              "url",
              "timeout",
              "pageOptions",
              "extractorOptions"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.14"
          },
          "id": "firecrawl_scrape_api-3H6Yg"
        },
        "selected": false,
        "width": 384,
        "height": 549,
        "positionAbsolute": {
          "x": -521.817274464891,
          "y": -82.89927242773072
        },
        "dragging": false
      },
      {
        "id": "LangWatchEvaluatorComponent-LpQGM",
        "type": "genericNode",
        "position": {
          "x": 2090.8872727761745,
          "y": -796.5930659151666
        },
        "data": {
          "type": "LangWatchEvaluatorComponent",
          "node": {
            "template": {
              "_type": "Component",
              "answer": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "answer",
                "display_name": "Chat Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The generated answer to be evaluated.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput, DataInput\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nimport langwatch\r\nimport os\r\n\r\nclass LangWatchEvaluatorComponent(Component):\r\n    display_name = \"LangWatch Evaluator\"\r\n    description = \"Evaluates a question-answer pair using LangWatch and provides a trace URL.\"\r\n    icon = \"view\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"question\",\r\n            display_name=\"Chat Input\",\r\n            info=\"The question to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"answer\",\r\n            display_name=\"Chat Output\",\r\n            info=\"The generated answer to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"ground_truth\",\r\n            display_name=\"Resposta Correta\",\r\n            info=\"The expected correct answer.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_email\",\r\n            display_name=\"User Email\",\r\n            info=\"The user ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_name\",\r\n            display_name=\"Participant Name\",\r\n            info=\"Full name for identification in the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_cpf\",\r\n            display_name=\"Participant CPF\",\r\n            info=\"CPF for identification in for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"question_id\",\r\n            display_name=\"Question ID\",\r\n            info=\"The question ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Trace\", name=\"trace_url\", method=\"evaluate\"),\r\n    ]\r\n\r\n    async def evaluate(self) -> Data:\r\n        question = self.question\r\n        answer = self.answer\r\n        ground_truth = self.ground_truth\r\n        user_email = self.user_email if self.user_email else \"\"\r\n        question_id = self.question_id if self.question_id else \"\"\r\n        user_name = self.user_name if self.user_name else \"\"\r\n        user_cpf = self.user_cpf if self.user_cpf else \"\"\r\n\r\n        # Validate email if provided\r\n        if user_email and not self.validate_email(user_email):\r\n            raise ValueError(f\"Invalid email address: {user_email}\")\r\n\r\n        # Validate CPF if provided\r\n        if user_cpf and not self.validate_cpf(user_cpf):\r\n            raise ValueError(f\"Invalid CPF: {user_cpf}\")\r\n        \r\n        flow_trace_id =  \"\"\r\n        if hasattr(self, 'tracing_service'):\r\n            langwatch_tracer = self.tracing_service._tracers['langwatch']\r\n            if langwatch_tracer:\r\n                current_trace = langwatch_tracer.trace\r\n                trace_id = current_trace.trace_id if current_trace else None\r\n                logger.debug(f\"LANGWATCH FLOW TRACE ID: {trace_id}\")\r\n                flow_trace_id = trace_id\r\n                \r\n        langwatch.api_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lc3RhbXAiOjE3MjExNTE2NTY3MDQsInJhbmQiOjAuNjgzNzI5NDExMTcyMzYsImlhdCI6MTcyMTE1MTY1Nn0.IHNSVO1N2uaUjl5y2j_E0AwvuvFOwo5y56dpNg4QNBo'\r\n\r\n        trace = langwatch.trace(\r\n            metadata={\r\n                \"user_id\": user_email,\r\n                \"question_id\": question_id,\r\n                \"user_name\": user_name,\r\n                \"user_cpf\": user_cpf\r\n            },\r\n            expected_output=ground_truth\r\n        )\r\n        \r\n        rag_span = trace.span(type=\"rag\", name=\"LangWatch Evaluator\", input=question, output=answer)\r\n        rag_span.end()\r\n\r\n        trace.send_spans()\r\n\r\n        public_url = trace.share()\r\n        \r\n        langwatch_data = Data(flow_trace_id=flow_trace_id, eval_url=public_url)\r\n        self.status = langwatch_data\r\n        return langwatch_data\r\n        \r\n    def validate_email(self, email):\r\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\r\n        return re.match(pattern, email) is not None\r\n\r\n    def validate_cpf(self, cpf):\r\n        if not re.match(r'^(?!(\\d)\\1{10})\\d{9}[\\d]{2}$', cpf):\r\n            return False\r\n\r\n        total = sum(int(cpf[i]) * (10 - i) for i in range(9))\r\n        check1 = (total * 10 % 11) % 10\r\n\r\n        total = sum(int(cpf[i]) * (11 - i) for i in range(10))\r\n        check2 = (total * 10 % 11) % 10\r\n\r\n        return cpf[-2:] == f\"{check1}{check2}\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "ground_truth": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ground_truth",
                "display_name": "Resposta Correta",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The expected correct answer.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "question": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "question",
                "display_name": "Chat Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The question to be evaluated.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "question_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "question_id",
                "display_name": "Question ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The question ID for the trace metadata.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_cpf": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "user_cpf",
                "display_name": "Participant CPF",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "CPF for identification in for the trace metadata.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_email": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "user_email",
                "display_name": "User Email",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The user ID for the trace metadata.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "user_name",
                "display_name": "Participant Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Full name for identification in the trace metadata.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Evaluates a question-answer pair using LangWatch and provides a trace URL.",
            "icon": "view",
            "base_classes": [
              "Data"
            ],
            "display_name": "Langwatch Evaluator - Agent",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "trace_url",
                "display_name": "Trace",
                "method": "evaluate",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "question",
              "answer",
              "ground_truth",
              "user_email",
              "user_name",
              "user_cpf",
              "question_id"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.14"
          },
          "id": "LangWatchEvaluatorComponent-LpQGM"
        },
        "selected": false,
        "width": 384,
        "height": 533,
        "positionAbsolute": {
          "x": 2090.8872727761745,
          "y": -796.5930659151666
        },
        "dragging": false
      },
      {
        "id": "GoogleSerperAPI-3HfsI",
        "type": "genericNode",
        "position": {
          "x": -188.94311991758968,
          "y": -1112.755279457544
        },
        "data": {
          "type": "GoogleSerperAPI",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Union\r\n\r\nfrom langchain_community.utilities.google_serper import GoogleSerperAPIWrapper\r\n\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, MultilineInput, MessageTextInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\n\r\n\r\nclass GoogleSerperAPIComponent(LCToolComponent):\r\n    display_name = \"Google Serper API\"\r\n    description = \"Call the Serper.dev Google Search API.\"\r\n    name = \"GoogleSerperAPI\"\r\n\r\n    inputs = [\r\n        SecretStrInput(name=\"serper_api_key\", display_name=\"Serper API Key\", required=True),\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"k\",\r\n            display_name=\"Number of results\",\r\n            info=\"Specify the number of search results to retrieve.\",\r\n        ),\r\n    ]\r\n\r\n    def run_model(self) -> Union[Data, list[Data]]:\r\n        # Convert the number of results to an integer\r\n        try:\r\n            num_results = int(self.k)\r\n        except ValueError:\r\n            self.status = \"Invalid number of results. Please provide an integer.\"\r\n            return []\r\n\r\n        wrapper = self._build_wrapper(num_results)\r\n        results = wrapper.results(query=self.input_value)\r\n        list_results = results.get(\"organic\", [])\r\n        data = [Data(data=result, text=result[\"snippet\"]) for result in list_results]\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        wrapper = self._build_wrapper()\r\n        return Tool(\r\n            name=\"google_search\",\r\n            description=\"Search Google for recent results. Input should be a single string strictly in the following JSON format: {}\",\r\n            func=wrapper.run,\r\n        )\r\n\r\n    def _build_wrapper(self, k: int = 4):\r\n        return GoogleSerperAPIWrapper(serper_api_key=self.serper_api_key, k=k)\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "k": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "k",
                "display_name": "Number of results",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Specify the number of search results to retrieve.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "serper_api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "serper_api_key",
                "display_name": "Serper API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              }
            },
            "description": "Call the Serper.dev Google Search API.",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "Google Serper API",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "serper_api_key",
              "input_value",
              "k"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "GoogleSerperAPI-3HfsI"
        },
        "selected": false,
        "width": 384,
        "height": 561,
        "dragging": false,
        "positionAbsolute": {
          "x": -188.94311991758968,
          "y": -1112.755279457544
        }
      },
      {
        "id": "GroqModel-Bf8fA",
        "type": "genericNode",
        "position": {
          "x": -915.4953704956723,
          "y": -1182.440286091066
        },
        "data": {
          "type": "GroqModel",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\nfrom typing import List\nfrom langchain_groq import ChatGroq\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n    name = \"GroqModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        SecretStrInput(\n            name=\"groq_api_key\",\n            display_name=\"Groq API Key\",\n            info=\"API key for the Groq API.\",\n        ),\n        MessageTextInput(\n            name=\"groq_api_base\",\n            display_name=\"Groq API Base\",\n            info=\"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n            advanced=True,\n            value=\"https://api.groq.com\",\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            value=0.1,\n        ),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[],\n            refresh_button=True,\n        ),\n    ]\n\n    def get_models(self) -> List[str]:\n        api_key = self.groq_api_key\n        base_url = self.groq_api_base or \"https://api.groq.com\"\n        url = f\"{base_url}/openai/v1/models\"\n\n        headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            model_list = response.json()\n            return [model[\"id\"] for model in model_list.get(\"data\", [])]\n        except requests.RequestException as e:\n            self.status = f\"Error fetching models: {str(e)}\"\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"groq_api_key\" or field_name == \"groq_api_base\" or field_name == \"model_name\":\n            models = self.get_models()\n            build_config[\"model_name\"][\"options\"] = models\n        return build_config\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        groq_api_key = self.groq_api_key\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        groq_api_base = self.groq_api_base\n        n = self.n\n        stream = self.stream\n\n        output = ChatGroq(  # type: ignore\n            model=model_name,\n            max_tokens=max_tokens or None,\n            temperature=temperature,\n            base_url=groq_api_base,\n            n=n or 1,\n            api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "groq_api_base": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "https://api.groq.com",
                "name": "groq_api_base",
                "display_name": "Groq API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Base URL path for API requests, leave blank if not using a proxy or service emulator.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "groq_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "groq_api_key",
                "display_name": "Groq API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "API key for the Groq API.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "max_tokens",
                "display_name": "Max Output Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gemma2-9b-it",
                  "gemma-7b-it",
                  "llama-3.1-70b-versatile",
                  "llama-3.1-8b-instant",
                  "llama3-70b-8192",
                  "llama3-8b-8192",
                  "llama3-groq-70b-8192-tool-use-preview",
                  "llama3-groq-8b-8192-tool-use-preview",
                  "llama-guard-3-8b",
                  "mixtral-8x7b-32768",
                  "whisper-large-v3"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "llama-3.1-8b-instant",
                "name": "model_name",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "The name of the model to use.",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "n",
                "display_name": "N",
                "advanced": true,
                "dynamic": false,
                "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generate text using Groq.",
            "icon": "Groq",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Groq",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "groq_api_key",
              "groq_api_base",
              "max_tokens",
              "temperature",
              "n",
              "model_name"
            ],
            "beta": false,
            "edited": false
          },
          "id": "GroqModel-Bf8fA"
        },
        "selected": false,
        "width": 384,
        "height": 655
      },
      {
        "id": "FileCSVComponent-PwYna",
        "type": "genericNode",
        "position": {
          "x": -1078.878250014717,
          "y": -433.16299646523345
        },
        "data": {
          "type": "FileCSVComponent",
          "node": {
            "template": {
              "_type": "Component",
              "csv_file": {
                "trace_as_metadata": true,
                "file_path": "0a63aa41-94db-4a54-b5d7-0e644c17ada6\\agent_questions.csv",
                "fileTypes": [
                  "csv"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "csv_file",
                "display_name": "CSV File",
                "advanced": false,
                "dynamic": false,
                "info": "Upload a CSV file with 'id', 'question', and 'ground_truth' columns",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import FileInput, MessageTextInput\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES\r\nimport csv\r\nfrom pathlib import Path\r\n\r\nclass FileCSVComponent(Component):\r\n    display_name = \"CSV Question Extractor\"\r\n    description = \"Load a CSV file with questions and ground truths, and extract based on ID\"\r\n    icon = \"file-spreadsheet\"\r\n\r\n    inputs = [\r\n        FileInput( \r\n            name=\"csv_file\",\r\n            display_name=\"CSV File\",\r\n            file_types=[\"csv\"],\r\n            info=\"Upload a CSV file with 'id', 'question', and 'ground_truth' columns\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"id\",\r\n            display_name=\"ID\",\r\n            info=\"Enter the ID to extract the corresponding question and ground truth\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"question\", display_name=\"Question\", method=\"extract_question\"),\r\n    ]\r\n\r\n    def load_csv(self):\r\n        if not self.csv_file:\r\n            raise ValueError(\"Please upload a CSV file to use this component.\")\r\n\r\n        resolved_path = self.resolve_path(self.csv_file)\r\n        file_path = Path(resolved_path)\r\n\r\n        if file_path.suffix.lower() != '.csv':\r\n            raise ValueError(\"The uploaded file must be a CSV file.\")\r\n\r\n        data = {}\r\n        with open(file_path, 'r', newline='', encoding='utf-8') as csvfile:\r\n            csv_reader = csv.DictReader(csvfile)\r\n            for row in csv_reader:\r\n                if 'id' not in row or 'question' not in row:\r\n                    raise ValueError(\"CSV must contain 'id' and 'question'columns.\")\r\n                data[row['id']] = {'question': row['question']}\r\n\r\n        return data\r\n\r\n    def extract_question(self) -> Message:\r\n        try:\r\n            data = self.load_csv()\r\n            if self.id not in data:\r\n                raise ValueError(f\"ID '{self.id}' not found in the CSV file.\")\r\n            \r\n            question = data[self.id]['question']\r\n            question_message = Message(text=question)\r\n            self.status = question_message\r\n            return question_message\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n            \r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "1",
                "name": "id",
                "display_name": "ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the ID to extract the corresponding question and ground truth",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Load a CSV file with questions and ground truths, and extract based on ID",
            "icon": "file-spreadsheet",
            "base_classes": [
              "Message"
            ],
            "display_name": "CSV Question Extractor",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "question",
                "display_name": "Question",
                "method": "extract_question",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "csv_file",
              "id"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "FileCSVComponent-PwYna"
        },
        "selected": true,
        "width": 384,
        "height": 431,
        "positionAbsolute": {
          "x": -1078.878250014717,
          "y": -433.16299646523345
        },
        "dragging": true
      }
    ],
    "edges": [
      {
        "source": "Prompt-i2niC",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-i2niCœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ToolCallingAgent-WGSZr",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "ToolCallingAgent-WGSZr",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-i2niC",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-i2niC{œdataTypeœ:œPromptœ,œidœ:œPrompt-i2niCœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œsystem_promptœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-1zst5",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ToolCallingAgent-WGSZr",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ToolCallingAgent-WGSZr",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-1zst5",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-1zst5{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "ToolCallingAgent-WGSZr",
        "sourceHandle": "{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-WGSZrœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-npENG",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-npENGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-npENG",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ToolCallingAgent",
            "id": "ToolCallingAgent-WGSZr",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ToolCallingAgent-WGSZr{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-WGSZrœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-npENG{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-npENGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatOutput-npENG",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-npENGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "LangWatchEvaluatorComponent-LpQGM",
        "targetHandle": "{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "answer",
            "id": "LangWatchEvaluatorComponent-LpQGM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-npENG",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatOutput-npENG{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-npENGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-LpQGM{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-1zst5",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "LangWatchEvaluatorComponent-LpQGM",
        "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "question",
            "id": "LangWatchEvaluatorComponent-LpQGM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-1zst5",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-1zst5{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-LpQGM{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "GoogleSerperAPI-3HfsI",
        "sourceHandle": "{œdataTypeœ:œGoogleSerperAPIœ,œidœ:œGoogleSerperAPI-3HfsIœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "ToolCallingAgent-WGSZr",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "ToolCallingAgent-WGSZr",
            "inputTypes": [
              "Tool",
              "BaseTool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "GoogleSerperAPI",
            "id": "GoogleSerperAPI-3HfsI",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-GoogleSerperAPI-3HfsI{œdataTypeœ:œGoogleSerperAPIœ,œidœ:œGoogleSerperAPI-3HfsIœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "firecrawl_scrape_api-3H6Yg",
        "sourceHandle": "{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-3H6Ygœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "ToolCallingAgent-WGSZr",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "ToolCallingAgent-WGSZr",
            "inputTypes": [
              "Tool",
              "BaseTool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "firecrawl_scrape_api",
            "id": "firecrawl_scrape_api-3H6Yg",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-firecrawl_scrape_api-3H6Yg{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-3H6Ygœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "GroqModel-Bf8fA",
        "sourceHandle": "{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-Bf8fAœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "ToolCallingAgent-WGSZr",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ToolCallingAgent-WGSZr",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "GroqModel",
            "id": "GroqModel-Bf8fA",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-GroqModel-Bf8fA{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-Bf8fAœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
      },
      {
        "source": "FileCSVComponent-PwYna",
        "sourceHandle": "{œdataTypeœ:œFileCSVComponentœ,œidœ:œFileCSVComponent-PwYnaœ,œnameœ:œquestionœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatInput-1zst5",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-1zst5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatInput-1zst5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "FileCSVComponent",
            "id": "FileCSVComponent-PwYna",
            "name": "question",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-FileCSVComponent-PwYna{œdataTypeœ:œFileCSVComponentœ,œidœ:œFileCSVComponent-PwYnaœ,œnameœ:œquestionœ,œoutput_typesœ:[œMessageœ]}-ChatInput-1zst5{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-1zst5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 809.7941928276196,
      "y": 651.1403752449842,
      "zoom": 0.659753955386449
    }
  },
  "metadata": {
    "ToolCallingAgent": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "Prompt": {
      "count": 1
    },
    "firecrawl_scrape_api": {
      "count": 1
    },
    "LangWatchEvaluatorComponent": {
      "count": 1
    },
    "GoogleSerperAPI": {
      "count": 1
    },
    "GroqModel": {
      "count": 1
    },
    "FileCSVComponent": {
      "count": 1
    },
    "total": 9
  },
  "original": {
    "id": "25e74e5b-a5fc-4fb5-9754-a6c3d711d57f",
    "name": "Desafio 3 - CREW_ToolAgent",
    "description": "Crafting Conversations, One Node at a Time.",
    "is_component": false,
    "liked_by_count": "5",
    "downloads_count": "47",
    "metadata": {
      "ToolCallingAgent": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "Prompt": {
        "count": 1
      },
      "firecrawl_scrape_api": {
        "count": 1
      },
      "LangWatchEvaluatorComponent": {
        "count": 1
      },
      "GoogleSerperAPI": {
        "count": 1
      },
      "GroqModel": {
        "count": 1
      },
      "FileCSVComponent": {
        "count": 1
      },
      "total": 9
    },
    "last_tested_version": "1.0.14",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ToolCallingAgent-WGSZr",
          "type": "genericNode",
          "position": {
            "x": 852.3269426882011,
            "y": -687.2508207441994
          },
          "data": {
            "type": "ToolCallingAgent",
            "node": {
              "template": {
                "_type": "Component",
                "chat_history": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chat_history",
                  "display_name": "Chat History",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "llm",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "tools",
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool",
                    "BaseTool"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, List\n\nfrom langchain.agents import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import MultilineInput\nfrom axiestudio.inputs.inputs import HandleInput, DataInput\nfrom axiestudio.schema import Data\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"Tool Calling Agent\"\n    description: str = \"Agent that uses tools\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"ToolCallingAgent\"\n\n    inputs = LCToolsAgentComponent._base_inputs + [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> Optional[List[Data]]:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_tool_calling_agent(self.llm, self.tools, prompt)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "handle_parsing_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "handle_parsing_errors",
                  "display_name": "Handle Parse Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "max_iterations": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "15",
                  "name": "max_iterations",
                  "display_name": "Max Iterations",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "system_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_prompt",
                  "display_name": "System Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System prompt for the agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "user_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{input}",
                  "name": "user_prompt",
                  "display_name": "Prompt",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "This prompt must contain 'input' key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "verbose",
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Agent that uses tools",
              "icon": "LangChain",
              "base_classes": [
                "AgentExecutor",
                "Message"
              ],
              "display_name": "Tool Calling Agent",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "AgentExecutor"
                  ],
                  "selected": "AgentExecutor",
                  "name": "agent",
                  "display_name": "Agent",
                  "method": "build_agent",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "response",
                  "display_name": "Response",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "handle_parsing_errors",
                "verbose",
                "max_iterations",
                "tools",
                "llm",
                "system_prompt",
                "user_prompt",
                "chat_history"
              ],
              "beta": true,
              "edited": false,
              "lf_version": "1.0.14"
            },
            "id": "ToolCallingAgent-WGSZr"
          },
          "selected": false,
          "width": 384,
          "height": 665,
          "positionAbsolute": {
            "x": 852.3269426882011,
            "y": -687.2508207441994
          },
          "dragging": false
        },
        {
          "id": "ChatInput-1zst5",
          "type": "genericNode",
          "position": {
            "x": -489.2556480454878,
            "y": -464.69612277425284
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.14"
            },
            "id": "ChatInput-1zst5"
          },
          "selected": false,
          "width": 384,
          "height": 317,
          "positionAbsolute": {
            "x": -489.2556480454878,
            "y": -464.69612277425284
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-npENG",
          "type": "genericNode",
          "position": {
            "x": 1554.131014501705,
            "y": -293.3944410479404
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "data_template",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "AI",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.14"
            },
            "id": "ChatOutput-npENG"
          },
          "selected": false,
          "width": 384,
          "height": 317,
          "positionAbsolute": {
            "x": 1554.131014501705,
            "y": -293.3944410479404
          },
          "dragging": false
        },
        {
          "id": "Prompt-i2niC",
          "type": "genericNode",
          "position": {
            "x": 190.79662466769742,
            "y": -179.64632864008033
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "You are a highly skilled Langflow agent.\n\nCapabilities:\n\nYou can search and scrape web pages for the most accurate and up-to-date information.\nYou provide detailed, technical, and precise information directly related to the user’s queries.\nPrimary Sources for Documentation:\n\nOfficial Langflow Documentation: Langflow Docs: https://docs.axiestudio.org/\nGitHub Repository: Langflow GitHub: https://github.com/axiestudio-ai/axiestudio\nCustom Components Guide: Langflow Custom Components: https://docs.axiestudio.org/components-custom-components.\n\nGuidelines:\n\nAccuracy and Verification:\n\nAlways double-check information in more than one source before responding.\nUse available tools to provide the most accurate and current information to the user.\nDo not provide information you are not certain about without consulting the documentation.\n\nScraping and Searching:\n\nCheck the official documentation and GitHub repository first.\nScrape relevant web pages and nested links within those sites to gather comprehensive information.\n\nResponsiveness:\n\nDirectly address the user's query with relevant and precise information.\nBe technical and detailed in your responses.\n\nTools Usage:\n\nUtilize all available tools to gather and verify information.\nYou are allowed to call multiple functions simultaneously to enhance the accuracy and detail of your responses.\n\nReminder:\n\nAll questions are related to Langflow. Use the documentation and code to help the user.\nIf unsure, state that you do not know rather than providing inaccurate information.\nFocus solely on what the user is asking without diverging into unrelated topics.\nExample Interaction:\nUser: \"How do I create a custom component in Langflow?\"\n\nLangflow Agent:\n\nCheck the Langflow Custom Components Guide: https://docs.axiestudio.org/components-custom-components.\nVerify the process on the Langflow GitHub Repository: https://github.com/axiestudio-ai/axiestudio\n\nDetailed Steps:\n\nAccess the Custom Components Guide.\nFollow the documented steps to create and integrate a custom component.\nProvide any additional tips or common pitfalls highlighted in the GitHub repository.",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": []
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false
            },
            "id": "Prompt-i2niC"
          },
          "selected": false,
          "width": 384,
          "height": 337,
          "positionAbsolute": {
            "x": 190.79662466769742,
            "y": -179.64632864008033
          },
          "dragging": false
        },
        {
          "id": "firecrawl_scrape_api-3H6Yg",
          "type": "genericNode",
          "position": {
            "x": -521.817274464891,
            "y": -82.89927242773072
          },
          "data": {
            "type": "firecrawl_scrape_api",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The API key to use Firecrawl API.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, IntInput, DictInput, SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass FirecrawlScrapeApiComponent(LCToolComponent):\r\n    display_name: str = \"Firecrawl Scrape API\"\r\n    description: str = \"Scrape web content using Firecrawl API.\"\r\n    name = \"firecrawl_scrape_api\"\r\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\r\n    icon = \"FirecrawlCrawlApi\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"The API key to use Firecrawl API.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"The URL to scrape.\",\r\n        ),\r\n        IntInput(\r\n            name=\"timeout\",\r\n            display_name=\"Timeout\",\r\n            info=\"Timeout in milliseconds for the request.\",\r\n            value=10000,\r\n        ),\r\n        DictInput(\r\n            name=\"pageOptions\",\r\n            display_name=\"Page Options\",\r\n            info=\"The page options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n        DictInput(\r\n            name=\"extractorOptions\",\r\n            display_name=\"Extractor Options\",\r\n            info=\"The extractor options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    class FirecrawlScrapeApiSchema(BaseModel):\r\n        url: str = Field(..., description=\"The URL to scrape\")\r\n        timeout: int = Field(default=10000, description=\"Timeout in milliseconds for the request\")\r\n        pageOptions: Optional[dict] = Field(default=None, description=\"The page options to send with the request\")\r\n        extractorOptions: Optional[dict] = Field(default=None, description=\"The extractor options to send with the request\")\r\n\r\n    def run_model(self) -> Data:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            self.url,\r\n            {\r\n                \"timeout\": str(self.timeout),\r\n                \"extractorOptions\": self.extractorOptions or {},\r\n                \"pageOptions\": self.pageOptions or {},\r\n            },\r\n        )\r\n\r\n        data = Data(data=results)\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"firecrawl_scrape_api\",\r\n            description=\"Scrape web content using Firecrawl API. Input should be a dictionary with 'url' and optional 'timeout', 'pageOptions', and 'extractorOptions'.\",\r\n            func=self._scrape_url,\r\n            args_schema=self.FirecrawlScrapeApiSchema,\r\n        )\r\n\r\n    def _scrape_url(self, url: str, timeout: int = 10000, pageOptions: Optional[dict] = None, extractorOptions: Optional[dict] = None) -> dict:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            url,\r\n            {\r\n                \"timeout\": str(timeout),\r\n                \"extractorOptions\": extractorOptions or {},\r\n                \"pageOptions\": pageOptions or {},\r\n            },\r\n        )\r\n\r\n        return results",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "extractorOptions": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "extractorOptions",
                  "display_name": "Extractor Options",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The extractor options to send with the request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "pageOptions": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "pageOptions",
                  "display_name": "Page Options",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The page options to send with the request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 10000,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Timeout in milliseconds for the request.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "url": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "https://docs.axiestudio.org",
                  "name": "url",
                  "display_name": "URL",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The URL to scrape.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Scrape web content using Firecrawl API.",
              "icon": "FirecrawlCrawlApi",
              "base_classes": [
                "Data",
                "list",
                "Tool"
              ],
              "display_name": "FirecrawlScrape Tool",
              "documentation": "https://docs.firecrawl.dev/api-reference/endpoint/scrape",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "list"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "api_key",
                "url",
                "timeout",
                "pageOptions",
                "extractorOptions"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.14"
            },
            "id": "firecrawl_scrape_api-3H6Yg"
          },
          "selected": false,
          "width": 384,
          "height": 549,
          "positionAbsolute": {
            "x": -521.817274464891,
            "y": -82.89927242773072
          },
          "dragging": false
        },
        {
          "id": "LangWatchEvaluatorComponent-LpQGM",
          "type": "genericNode",
          "position": {
            "x": 2090.8872727761745,
            "y": -796.5930659151666
          },
          "data": {
            "type": "LangWatchEvaluatorComponent",
            "node": {
              "template": {
                "_type": "Component",
                "answer": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "answer",
                  "display_name": "Chat Output",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The generated answer to be evaluated.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import re\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput, DataInput\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nimport langwatch\r\nimport os\r\n\r\nclass LangWatchEvaluatorComponent(Component):\r\n    display_name = \"LangWatch Evaluator\"\r\n    description = \"Evaluates a question-answer pair using LangWatch and provides a trace URL.\"\r\n    icon = \"view\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"question\",\r\n            display_name=\"Chat Input\",\r\n            info=\"The question to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"answer\",\r\n            display_name=\"Chat Output\",\r\n            info=\"The generated answer to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"ground_truth\",\r\n            display_name=\"Resposta Correta\",\r\n            info=\"The expected correct answer.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_email\",\r\n            display_name=\"User Email\",\r\n            info=\"The user ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_name\",\r\n            display_name=\"Participant Name\",\r\n            info=\"Full name for identification in the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_cpf\",\r\n            display_name=\"Participant CPF\",\r\n            info=\"CPF for identification in for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"question_id\",\r\n            display_name=\"Question ID\",\r\n            info=\"The question ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Trace\", name=\"trace_url\", method=\"evaluate\"),\r\n    ]\r\n\r\n    async def evaluate(self) -> Data:\r\n        question = self.question\r\n        answer = self.answer\r\n        ground_truth = self.ground_truth\r\n        user_email = self.user_email if self.user_email else \"\"\r\n        question_id = self.question_id if self.question_id else \"\"\r\n        user_name = self.user_name if self.user_name else \"\"\r\n        user_cpf = self.user_cpf if self.user_cpf else \"\"\r\n\r\n        # Validate email if provided\r\n        if user_email and not self.validate_email(user_email):\r\n            raise ValueError(f\"Invalid email address: {user_email}\")\r\n\r\n        # Validate CPF if provided\r\n        if user_cpf and not self.validate_cpf(user_cpf):\r\n            raise ValueError(f\"Invalid CPF: {user_cpf}\")\r\n        \r\n        flow_trace_id =  \"\"\r\n        if hasattr(self, 'tracing_service'):\r\n            langwatch_tracer = self.tracing_service._tracers['langwatch']\r\n            if langwatch_tracer:\r\n                current_trace = langwatch_tracer.trace\r\n                trace_id = current_trace.trace_id if current_trace else None\r\n                logger.debug(f\"LANGWATCH FLOW TRACE ID: {trace_id}\")\r\n                flow_trace_id = trace_id\r\n                \r\n        langwatch.api_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lc3RhbXAiOjE3MjExNTE2NTY3MDQsInJhbmQiOjAuNjgzNzI5NDExMTcyMzYsImlhdCI6MTcyMTE1MTY1Nn0.IHNSVO1N2uaUjl5y2j_E0AwvuvFOwo5y56dpNg4QNBo'\r\n\r\n        trace = langwatch.trace(\r\n            metadata={\r\n                \"user_id\": user_email,\r\n                \"question_id\": question_id,\r\n                \"user_name\": user_name,\r\n                \"user_cpf\": user_cpf\r\n            },\r\n            expected_output=ground_truth\r\n        )\r\n        \r\n        rag_span = trace.span(type=\"rag\", name=\"LangWatch Evaluator\", input=question, output=answer)\r\n        rag_span.end()\r\n\r\n        trace.send_spans()\r\n\r\n        public_url = trace.share()\r\n        \r\n        langwatch_data = Data(flow_trace_id=flow_trace_id, eval_url=public_url)\r\n        self.status = langwatch_data\r\n        return langwatch_data\r\n        \r\n    def validate_email(self, email):\r\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\r\n        return re.match(pattern, email) is not None\r\n\r\n    def validate_cpf(self, cpf):\r\n        if not re.match(r'^(?!(\\d)\\1{10})\\d{9}[\\d]{2}$', cpf):\r\n            return False\r\n\r\n        total = sum(int(cpf[i]) * (10 - i) for i in range(9))\r\n        check1 = (total * 10 % 11) % 10\r\n\r\n        total = sum(int(cpf[i]) * (11 - i) for i in range(10))\r\n        check2 = (total * 10 % 11) % 10\r\n\r\n        return cpf[-2:] == f\"{check1}{check2}\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "ground_truth": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ground_truth",
                  "display_name": "Resposta Correta",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The expected correct answer.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "question": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "question",
                  "display_name": "Chat Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The question to be evaluated.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "question_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "question_id",
                  "display_name": "Question ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The question ID for the trace metadata.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "user_cpf": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "user_cpf",
                  "display_name": "Participant CPF",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "CPF for identification in for the trace metadata.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "user_email": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "user_email",
                  "display_name": "User Email",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The user ID for the trace metadata.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "user_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "user_name",
                  "display_name": "Participant Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Full name for identification in the trace metadata.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Evaluates a question-answer pair using LangWatch and provides a trace URL.",
              "icon": "view",
              "base_classes": [
                "Data"
              ],
              "display_name": "Langwatch Evaluator - Agent",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "trace_url",
                  "display_name": "Trace",
                  "method": "evaluate",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "question",
                "answer",
                "ground_truth",
                "user_email",
                "user_name",
                "user_cpf",
                "question_id"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.14"
            },
            "id": "LangWatchEvaluatorComponent-LpQGM"
          },
          "selected": false,
          "width": 384,
          "height": 533,
          "positionAbsolute": {
            "x": 2090.8872727761745,
            "y": -796.5930659151666
          },
          "dragging": false
        },
        {
          "id": "GoogleSerperAPI-3HfsI",
          "type": "genericNode",
          "position": {
            "x": -188.94311991758968,
            "y": -1112.755279457544
          },
          "data": {
            "type": "GoogleSerperAPI",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Union\r\n\r\nfrom langchain_community.utilities.google_serper import GoogleSerperAPIWrapper\r\n\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, MultilineInput, MessageTextInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\n\r\n\r\nclass GoogleSerperAPIComponent(LCToolComponent):\r\n    display_name = \"Google Serper API\"\r\n    description = \"Call the Serper.dev Google Search API.\"\r\n    name = \"GoogleSerperAPI\"\r\n\r\n    inputs = [\r\n        SecretStrInput(name=\"serper_api_key\", display_name=\"Serper API Key\", required=True),\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"k\",\r\n            display_name=\"Number of results\",\r\n            info=\"Specify the number of search results to retrieve.\",\r\n        ),\r\n    ]\r\n\r\n    def run_model(self) -> Union[Data, list[Data]]:\r\n        # Convert the number of results to an integer\r\n        try:\r\n            num_results = int(self.k)\r\n        except ValueError:\r\n            self.status = \"Invalid number of results. Please provide an integer.\"\r\n            return []\r\n\r\n        wrapper = self._build_wrapper(num_results)\r\n        results = wrapper.results(query=self.input_value)\r\n        list_results = results.get(\"organic\", [])\r\n        data = [Data(data=result, text=result[\"snippet\"]) for result in list_results]\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        wrapper = self._build_wrapper()\r\n        return Tool(\r\n            name=\"google_search\",\r\n            description=\"Search Google for recent results. Input should be a single string strictly in the following JSON format: {}\",\r\n            func=wrapper.run,\r\n        )\r\n\r\n    def _build_wrapper(self, k: int = 4):\r\n        return GoogleSerperAPIWrapper(serper_api_key=self.serper_api_key, k=k)\r\n\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "k": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "k",
                  "display_name": "Number of results",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Specify the number of search results to retrieve.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "serper_api_key": {
                  "load_from_db": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "serper_api_key",
                  "display_name": "Serper API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                }
              },
              "description": "Call the Serper.dev Google Search API.",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "Google Serper API",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "serper_api_key",
                "input_value",
                "k"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "GoogleSerperAPI-3HfsI"
          },
          "selected": false,
          "width": 384,
          "height": 561,
          "dragging": false,
          "positionAbsolute": {
            "x": -188.94311991758968,
            "y": -1112.755279457544
          }
        },
        {
          "id": "GroqModel-Bf8fA",
          "type": "genericNode",
          "position": {
            "x": -915.4953704956723,
            "y": -1182.440286091066
          },
          "data": {
            "type": "GroqModel",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\nfrom typing import List\nfrom langchain_groq import ChatGroq\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n    name = \"GroqModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        SecretStrInput(\n            name=\"groq_api_key\",\n            display_name=\"Groq API Key\",\n            info=\"API key for the Groq API.\",\n        ),\n        MessageTextInput(\n            name=\"groq_api_base\",\n            display_name=\"Groq API Base\",\n            info=\"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n            advanced=True,\n            value=\"https://api.groq.com\",\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            value=0.1,\n        ),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[],\n            refresh_button=True,\n        ),\n    ]\n\n    def get_models(self) -> List[str]:\n        api_key = self.groq_api_key\n        base_url = self.groq_api_base or \"https://api.groq.com\"\n        url = f\"{base_url}/openai/v1/models\"\n\n        headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            model_list = response.json()\n            return [model[\"id\"] for model in model_list.get(\"data\", [])]\n        except requests.RequestException as e:\n            self.status = f\"Error fetching models: {str(e)}\"\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"groq_api_key\" or field_name == \"groq_api_base\" or field_name == \"model_name\":\n            models = self.get_models()\n            build_config[\"model_name\"][\"options\"] = models\n        return build_config\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        groq_api_key = self.groq_api_key\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        groq_api_base = self.groq_api_base\n        n = self.n\n        stream = self.stream\n\n        output = ChatGroq(  # type: ignore\n            model=model_name,\n            max_tokens=max_tokens or None,\n            temperature=temperature,\n            base_url=groq_api_base,\n            n=n or 1,\n            api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n\n        return output  # type: ignore\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "groq_api_base": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "https://api.groq.com",
                  "name": "groq_api_base",
                  "display_name": "Groq API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Base URL path for API requests, leave blank if not using a proxy or service emulator.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "groq_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "groq_api_key",
                  "display_name": "Groq API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "API key for the Groq API.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "max_tokens",
                  "display_name": "Max Output Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gemma2-9b-it",
                    "gemma-7b-it",
                    "llama-3.1-70b-versatile",
                    "llama-3.1-8b-instant",
                    "llama3-70b-8192",
                    "llama3-8b-8192",
                    "llama3-groq-70b-8192-tool-use-preview",
                    "llama3-groq-8b-8192-tool-use-preview",
                    "llama-guard-3-8b",
                    "mixtral-8x7b-32768",
                    "whisper-large-v3"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "llama-3.1-8b-instant",
                  "name": "model_name",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The name of the model to use.",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "n": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "n",
                  "display_name": "N",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "0",
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generate text using Groq.",
              "icon": "Groq",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Groq",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "groq_api_key",
                "groq_api_base",
                "max_tokens",
                "temperature",
                "n",
                "model_name"
              ],
              "beta": false,
              "edited": false
            },
            "id": "GroqModel-Bf8fA"
          },
          "selected": false,
          "width": 384,
          "height": 655
        },
        {
          "id": "FileCSVComponent-PwYna",
          "type": "genericNode",
          "position": {
            "x": -1078.878250014717,
            "y": -433.16299646523345
          },
          "data": {
            "type": "FileCSVComponent",
            "node": {
              "template": {
                "_type": "Component",
                "csv_file": {
                  "trace_as_metadata": true,
                  "file_path": "0a63aa41-94db-4a54-b5d7-0e644c17ada6\\agent_questions.csv",
                  "fileTypes": [
                    "csv"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "csv_file",
                  "display_name": "CSV File",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Upload a CSV file with 'id', 'question', and 'ground_truth' columns",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import FileInput, MessageTextInput\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES\r\nimport csv\r\nfrom pathlib import Path\r\n\r\nclass FileCSVComponent(Component):\r\n    display_name = \"CSV Question Extractor\"\r\n    description = \"Load a CSV file with questions and ground truths, and extract based on ID\"\r\n    icon = \"file-spreadsheet\"\r\n\r\n    inputs = [\r\n        FileInput( \r\n            name=\"csv_file\",\r\n            display_name=\"CSV File\",\r\n            file_types=[\"csv\"],\r\n            info=\"Upload a CSV file with 'id', 'question', and 'ground_truth' columns\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"id\",\r\n            display_name=\"ID\",\r\n            info=\"Enter the ID to extract the corresponding question and ground truth\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"question\", display_name=\"Question\", method=\"extract_question\"),\r\n    ]\r\n\r\n    def load_csv(self):\r\n        if not self.csv_file:\r\n            raise ValueError(\"Please upload a CSV file to use this component.\")\r\n\r\n        resolved_path = self.resolve_path(self.csv_file)\r\n        file_path = Path(resolved_path)\r\n\r\n        if file_path.suffix.lower() != '.csv':\r\n            raise ValueError(\"The uploaded file must be a CSV file.\")\r\n\r\n        data = {}\r\n        with open(file_path, 'r', newline='', encoding='utf-8') as csvfile:\r\n            csv_reader = csv.DictReader(csvfile)\r\n            for row in csv_reader:\r\n                if 'id' not in row or 'question' not in row:\r\n                    raise ValueError(\"CSV must contain 'id' and 'question'columns.\")\r\n                data[row['id']] = {'question': row['question']}\r\n\r\n        return data\r\n\r\n    def extract_question(self) -> Message:\r\n        try:\r\n            data = self.load_csv()\r\n            if self.id not in data:\r\n                raise ValueError(f\"ID '{self.id}' not found in the CSV file.\")\r\n            \r\n            question = data[self.id]['question']\r\n            question_message = Message(text=question)\r\n            self.status = question_message\r\n            return question_message\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n            \r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "1",
                  "name": "id",
                  "display_name": "ID",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the ID to extract the corresponding question and ground truth",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Load a CSV file with questions and ground truths, and extract based on ID",
              "icon": "file-spreadsheet",
              "base_classes": [
                "Message"
              ],
              "display_name": "CSV Question Extractor",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "question",
                  "display_name": "Question",
                  "method": "extract_question",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "csv_file",
                "id"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "FileCSVComponent-PwYna"
          },
          "selected": true,
          "width": 384,
          "height": 431,
          "positionAbsolute": {
            "x": -1078.878250014717,
            "y": -433.16299646523345
          },
          "dragging": true
        }
      ],
      "edges": [
        {
          "source": "Prompt-i2niC",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-i2niCœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ToolCallingAgent-WGSZr",
          "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "system_prompt",
              "id": "ToolCallingAgent-WGSZr",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-i2niC",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-i2niC{œdataTypeœ:œPromptœ,œidœ:œPrompt-i2niCœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œsystem_promptœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-1zst5",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ToolCallingAgent-WGSZr",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ToolCallingAgent-WGSZr",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-1zst5",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-1zst5{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "ToolCallingAgent-WGSZr",
          "sourceHandle": "{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-WGSZrœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-npENG",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-npENGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-npENG",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ToolCallingAgent",
              "id": "ToolCallingAgent-WGSZr",
              "name": "response",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ToolCallingAgent-WGSZr{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-WGSZrœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-npENG{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-npENGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatOutput-npENG",
          "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-npENGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "LangWatchEvaluatorComponent-LpQGM",
          "targetHandle": "{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "answer",
              "id": "LangWatchEvaluatorComponent-LpQGM",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatOutput",
              "id": "ChatOutput-npENG",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatOutput-npENG{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-npENGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-LpQGM{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-1zst5",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "LangWatchEvaluatorComponent-LpQGM",
          "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "question",
              "id": "LangWatchEvaluatorComponent-LpQGM",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-1zst5",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-1zst5{œdataTypeœ:œChatInputœ,œidœ:œChatInput-1zst5œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-LpQGM{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-LpQGMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "GoogleSerperAPI-3HfsI",
          "sourceHandle": "{œdataTypeœ:œGoogleSerperAPIœ,œidœ:œGoogleSerperAPI-3HfsIœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "ToolCallingAgent-WGSZr",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "ToolCallingAgent-WGSZr",
              "inputTypes": [
                "Tool",
                "BaseTool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "GoogleSerperAPI",
              "id": "GoogleSerperAPI-3HfsI",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-GoogleSerperAPI-3HfsI{œdataTypeœ:œGoogleSerperAPIœ,œidœ:œGoogleSerperAPI-3HfsIœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "firecrawl_scrape_api-3H6Yg",
          "sourceHandle": "{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-3H6Ygœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "ToolCallingAgent-WGSZr",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "ToolCallingAgent-WGSZr",
              "inputTypes": [
                "Tool",
                "BaseTool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "firecrawl_scrape_api",
              "id": "firecrawl_scrape_api-3H6Yg",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-firecrawl_scrape_api-3H6Yg{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-3H6Ygœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "GroqModel-Bf8fA",
          "sourceHandle": "{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-Bf8fAœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "ToolCallingAgent-WGSZr",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "ToolCallingAgent-WGSZr",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "GroqModel",
              "id": "GroqModel-Bf8fA",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-GroqModel-Bf8fA{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-Bf8fAœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-WGSZr{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-WGSZrœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
        },
        {
          "source": "FileCSVComponent-PwYna",
          "sourceHandle": "{œdataTypeœ:œFileCSVComponentœ,œidœ:œFileCSVComponent-PwYnaœ,œnameœ:œquestionœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatInput-1zst5",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-1zst5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatInput-1zst5",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "FileCSVComponent",
              "id": "FileCSVComponent-PwYna",
              "name": "question",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-FileCSVComponent-PwYna{œdataTypeœ:œFileCSVComponentœ,œidœ:œFileCSVComponent-PwYnaœ,œnameœ:œquestionœ,œoutput_typesœ:[œMessageœ]}-ChatInput-1zst5{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-1zst5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 809.7941928276196,
        "y": 651.1403752449842,
        "zoom": 0.659753955386449
      }
    },
    "date_created": "2024-08-08T12:13:32.907Z",
    "date_updated": "2024-08-08T12:13:32.942Z",
    "status": "Public",
    "sort": null,
    "user_updated": "3e203c77-c087-4ccf-a0c6-07c619d760f1",
    "user_created": {
      "username": "Victor",
      "first_name": "VICTOR",
      "last_name": "GOMES",
      "id": "3e203c77-c087-4ccf-a0c6-07c619d760f1"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:55.400Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 102,
    "converter_version": "1.0.0"
  }
}