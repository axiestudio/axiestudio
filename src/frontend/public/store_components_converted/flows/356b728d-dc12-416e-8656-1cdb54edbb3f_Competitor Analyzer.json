{
  "id": "356b728d-dc12-416e-8656-1cdb54edbb3f",
  "name": "Competitor Analyzer",
  "description": "Empowering Language Engineering. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "dhanabalmani",
    "first_name": "Dhanabal",
    "last_name": "Mani",
    "id": "7b33ec4b-4aad-4ba9-a8b0-bb7c1db4861f",
    "full_name": "Dhanabal Mani"
  },
  "store_url": "https://www.langflow.store/store/component/356b728d-dc12-416e-8656-1cdb54edbb3f",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-13T13:03:35.012Z",
    "updated": "2024-09-13T13:03:35.044Z",
    "downloaded": "2025-08-19T17:50:06.190Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "File-Xz3nA",
        "type": "genericNode",
        "position": {
          "x": 58,
          "y": 191.40625
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "_type": "Component",
              "path": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "path",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "silent_errors",
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_file",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "silent_errors"
            ],
            "beta": false,
            "edited": false
          },
          "id": "File-Xz3nA"
        },
        "selected": false,
        "width": 384,
        "height": 309
      },
      {
        "id": "ParseData-xCgPh",
        "type": "genericNode",
        "position": {
          "x": 530,
          "y": 162.40625
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-xCgPh"
        },
        "selected": false,
        "width": 384,
        "height": 401,
        "dragging": false
      },
      {
        "id": "TextInput-5oXIT",
        "type": "genericNode",
        "position": {
          "x": 60,
          "y": 517.40625
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false
          },
          "id": "TextInput-5oXIT"
        },
        "selected": false,
        "width": 384,
        "height": 317,
        "positionAbsolute": {
          "x": 60,
          "y": 517.40625
        },
        "dragging": false
      },
      {
        "id": "TextInput-VYK5D",
        "type": "genericNode",
        "position": {
          "x": 458.585058169371,
          "y": 783.7830289563905
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": " {   \"Competitor_name\": \"[provided by the user]\",   \"Report\": {     \"Key_Message_Approach\": {       \"Strategy\": \"Mention the details from the source, if not found mention NA, do not hallucinate provide only from the attached sources\",       \"Vision\": \"Mention the details from the source,if not found mention NA, do not hallucinate provide only from the attached sources\",       \"Approach\": \"Mention the details from the source, if not found mention NA, do not hallucinate provide only from the attached sources\",       \"Methodology/Framework\": \"Mention the details from the source, if not found mention NA, do not hallucinate provide only from the attached sources\",     },     \"Capabilities\": {       \"FTE_or_resource_allocation\": \"mention the number of FTE if not found mention NA\",       \"Geographic presence_Delivery_footprint/centres\": \"Mention the details of its geographic presence,delivery footprint its regions, if not found mention NA, do not hallucinate provide information only from the attached sources\",       \"Number_of_clients\": \"mention the number, if not found mention NA\",        \"Centres_of_excellence\": \"Mention the details of CoEs, if not found mention NA, do not hallucinate provide information only from the attached sources\",       \"Investments_and_innovation centres\": \"Mention the details of investments/innovation hubs/innovation centres if not found mention NA, do not hallucinate provide information only from the attached sources\",           \"Design_studios and Labs\": \"Mention the details of any design studios or labs if not found mention NA, do not hallucinate provide information only from the attached sources\",            \"Key_industry_clients\": \"Mention the details if not found mention NA, do not hallucinate provide information only from the attached sources\"     },     \"Key_Solutions\": [         \"[All solutions/proprietary solutions/offerings/IPs  names,detailed description of each solution in 3 lines along with its benefits. Do not miss even a single solution/offerings/IP name from the source, it should capture all the solutions even if its more than 50 without missing any]\"  ],     \"Case_Studies\": {       \"BFSI\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Healthcare\": [   \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Manufacturing_Energy_utilities\": [   \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],            \"Logistics\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Travel_and_Hospitality\": [   \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Lifesciences\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Consumer_Goods\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Communication_and_Media\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\"  ],       \"Construction\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Public_Services\":  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ], ]     },     \"Partnerships\": [             [“ provide all the partnerships names under the partnerships/key partnerships segment from the attached sources alone in a single line. Do not miss even a single partner name, it should capture all the names even if its more than 50”] ],     \"Acquisitions\": [  \"[All acquired company names], [reason for acquisition], [year of acquisition]\" ],     \"Strengths\": {       \"[Sub_heading 1]\": \"[detailed strengths reason as it is from the attached source file in 3 lines each]\",       \"[Sub_heading 2]\": \"\",       \"[Sub_heading 3]\": \"\",       \"[Sub_heading 4]\": \"\"     },     \"Weaknesses\": {       \"[Sub_heading 1]\": \"[detailed strengths reason as it is from the attached source file in 3 lines each]\",       \"[Sub_heading 2]\": \"\",       \"[Sub_heading 3]\": \"\",       \"[Sub_heading 4]\": \"\"     },     \"Key_Recognitions\": []   },   \"Follow_Up_Question\": \"Are there any additional URLs or documents that you would like to include for the research?\" }",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false
          },
          "id": "TextInput-VYK5D"
        },
        "selected": false,
        "width": 384,
        "height": 317,
        "positionAbsolute": {
          "x": 458.585058169371,
          "y": 783.7830289563905
        },
        "dragging": false
      },
      {
        "id": "Prompt-NQ3Ou",
        "type": "genericNode",
        "position": {
          "x": 1049.7058770133299,
          "y": 159.46825332396406
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "You are a competitor analyzer\n\nInput Files: Any Analyst Pdf \n\nPrompt: \n\nCompetitor name: {competitor_name} \n\nProvide a detailed report on Company's strategies, capabilities, investments, key solutions, partnerships, acquisitions, client references, strengths, and weaknesses, all extracted from the given input source. \n\nAsk a follow-up question to the user, asking for any additional urls that need to be added for the research  and provide that also in the below format after providing the below answers from the pdf document. \n\nIf two or more pdfs/documents are attached, include & merge the information from both documents in the below mentioned format. \n\n \n\nKey Message/Approach: Provide the company's overall strategy, vision, approach, methodology, and framework. Make sure to give it in bullet points with sub-headings like strategy/vision/approach/methodology/framework \n\n \n\nCapabilities: Provide the FTE or resource allocation, delivery footprint, number of clients, geographic presence, delivery centres, centres of excellence, investments and innovation/innovation centres, design studios, labs, and key industry clients.  \n\nProvide all the points with numbers/quantifiable data, with side-headings and in a readable sentence format for this section and strictly follow this instruction. \n\n \n\nKey Solutions: Give a detailed list of all the solutions, capabilities, IPs (intellectual property), proprietary solutions, and offerings from the pdf or link with a detailed description in 3-4 lines, even if there are more than 50 solutions. \n\nDo not miss any solution at any cost.  \n\n \n\nCase Studies: Provide all the case studies with quantifiable results in a 4 sentences and group them all in the following industry segments: BFSI, Healthcare, Manufacturing, Energy, Utilities, Logistics, Travel and Hospitality, Retail, Consumer Goods, Communication and Media, Construction, and Public Services. \n\nFormat: \"Industry name\" : \"EPAM\" collaborated/partnered/teamed up with/joined forces with/allied with + partners/customers/clients + (address the challenge and solutions with benefits produced or impact provided). \n\n \n\nPartnerships: Give the list of all the partners, even if its more than 50, as mentioned in the pdf/attached link without any descriptions in a single line without bullet points. Do not miss any partner names. \n\n \n\nAcquisitions: Provide the list of all the acquisitions with a line of description and acquired year. Note: Only the acquisitions. \n\n \n\nStrengths: Give at least 4 strengths in a 3-line description with side headings. Use information as it is from the pdf and do not be generic. Keep the tone suggestive. \n\n \n\nWeaknesses: Give at least 4 weaknesses in a 3-line description with side headings. Use information as it is from the pdf. It should not contradict strengths and should not be stated as a suggestion or an area of improvement.  \n\nUse words like lacks, poor, weak, low, inadequate, limited, not suitable, deficient, insufficient, inferior, subpar, scant, sparse, meager, restricted, substandard, absent and on similar terms to clearly highlight the deficiencies/shortcoming/weakness/gap while framing the weakness sentences.  \n\nStrictly do not use words like might, can, may, would, need to, should, could in the description of the weakness. \n\n \n\nKey recognitions: Any analyst awards and recognition. Analyst reports for this section include Everest, IDC, Avasant, Nelson, IDC, Gartner, HFS \n\n \n\nUse formal tone and provide factual information. Use information only from the attached pdf and links. Provide authentic information, don't hallucinate \n\nInput File\n{input_file}\n\nExample Json\n{example_json}\n\nAnswer:\n ",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "competitor_name": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "competitor_name",
                "display_name": "competitor_name",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "example_json": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "example_json",
                "display_name": "example_json",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "input_file": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_file",
                "display_name": "input_file",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "competitor_name",
                "input_file",
                "example_json"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-NQ3Ou"
        },
        "selected": false,
        "width": 384,
        "height": 619,
        "positionAbsolute": {
          "x": 1049.7058770133299,
          "y": 159.46825332396406
        },
        "dragging": true
      }
    ],
    "edges": [
      {
        "source": "File-Xz3nA",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-Xz3nAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-xCgPh",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-xCgPhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-xCgPh",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "File",
            "id": "File-Xz3nA",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-File-Xz3nA{œdataTypeœ:œFileœ,œidœ:œFile-Xz3nAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-xCgPh{œfieldNameœ:œdataœ,œidœ:œParseData-xCgPhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "TextInput-5oXIT",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-5oXITœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-NQ3Ou",
        "targetHandle": "{œfieldNameœ:œcompetitor_nameœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "competitor_name",
            "id": "Prompt-NQ3Ou",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-5oXIT",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-5oXIT{œdataTypeœ:œTextInputœ,œidœ:œTextInput-5oXITœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-NQ3Ou{œfieldNameœ:œcompetitor_nameœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-VYK5D",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-VYK5Dœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-NQ3Ou",
        "targetHandle": "{œfieldNameœ:œexample_jsonœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "example_json",
            "id": "Prompt-NQ3Ou",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-VYK5D",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-VYK5D{œdataTypeœ:œTextInputœ,œidœ:œTextInput-VYK5Dœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-NQ3Ou{œfieldNameœ:œexample_jsonœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 23.369020768643168,
      "y": 79.09397238410361,
      "zoom": 0.6807359641735452
    }
  },
  "metadata": {
    "File": {
      "count": 1
    },
    "ParseData": {
      "count": 1
    },
    "TextInput": {
      "count": 2
    },
    "Prompt": {
      "count": 1
    },
    "total": 5
  },
  "original": {
    "id": "356b728d-dc12-416e-8656-1cdb54edbb3f",
    "name": "Competitor Analyzer",
    "description": "Empowering Language Engineering.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "File": {
        "count": 1
      },
      "ParseData": {
        "count": 1
      },
      "TextInput": {
        "count": 2
      },
      "Prompt": {
        "count": 1
      },
      "total": 5
    },
    "last_tested_version": "1.0.14",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "File-Xz3nA",
          "type": "genericNode",
          "position": {
            "x": 58,
            "y": 191.40625
          },
          "data": {
            "type": "File",
            "node": {
              "template": {
                "_type": "Component",
                "path": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "path",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "silent_errors",
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "A generic file loader.",
              "icon": "file-text",
              "base_classes": [
                "Data"
              ],
              "display_name": "File",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "load_file",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "path",
                "silent_errors"
              ],
              "beta": false,
              "edited": false
            },
            "id": "File-Xz3nA"
          },
          "selected": false,
          "width": 384,
          "height": 309
        },
        {
          "id": "ParseData-xCgPh",
          "type": "genericNode",
          "position": {
            "x": 530,
            "y": 162.40625
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "data",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "\n",
                  "name": "sep",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Convert Data into plain text following a specified template.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ParseData-xCgPh"
          },
          "selected": false,
          "width": 384,
          "height": 401,
          "dragging": false
        },
        {
          "id": "TextInput-5oXIT",
          "type": "genericNode",
          "position": {
            "x": 60,
            "y": 517.40625
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false
            },
            "id": "TextInput-5oXIT"
          },
          "selected": false,
          "width": 384,
          "height": 317,
          "positionAbsolute": {
            "x": 60,
            "y": 517.40625
          },
          "dragging": false
        },
        {
          "id": "TextInput-VYK5D",
          "type": "genericNode",
          "position": {
            "x": 458.585058169371,
            "y": 783.7830289563905
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": " {   \"Competitor_name\": \"[provided by the user]\",   \"Report\": {     \"Key_Message_Approach\": {       \"Strategy\": \"Mention the details from the source, if not found mention NA, do not hallucinate provide only from the attached sources\",       \"Vision\": \"Mention the details from the source,if not found mention NA, do not hallucinate provide only from the attached sources\",       \"Approach\": \"Mention the details from the source, if not found mention NA, do not hallucinate provide only from the attached sources\",       \"Methodology/Framework\": \"Mention the details from the source, if not found mention NA, do not hallucinate provide only from the attached sources\",     },     \"Capabilities\": {       \"FTE_or_resource_allocation\": \"mention the number of FTE if not found mention NA\",       \"Geographic presence_Delivery_footprint/centres\": \"Mention the details of its geographic presence,delivery footprint its regions, if not found mention NA, do not hallucinate provide information only from the attached sources\",       \"Number_of_clients\": \"mention the number, if not found mention NA\",        \"Centres_of_excellence\": \"Mention the details of CoEs, if not found mention NA, do not hallucinate provide information only from the attached sources\",       \"Investments_and_innovation centres\": \"Mention the details of investments/innovation hubs/innovation centres if not found mention NA, do not hallucinate provide information only from the attached sources\",           \"Design_studios and Labs\": \"Mention the details of any design studios or labs if not found mention NA, do not hallucinate provide information only from the attached sources\",            \"Key_industry_clients\": \"Mention the details if not found mention NA, do not hallucinate provide information only from the attached sources\"     },     \"Key_Solutions\": [         \"[All solutions/proprietary solutions/offerings/IPs  names,detailed description of each solution in 3 lines along with its benefits. Do not miss even a single solution/offerings/IP name from the source, it should capture all the solutions even if its more than 50 without missing any]\"  ],     \"Case_Studies\": {       \"BFSI\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Healthcare\": [   \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Manufacturing_Energy_utilities\": [   \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],            \"Logistics\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Travel_and_Hospitality\": [   \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Lifesciences\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Consumer_Goods\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Communication_and_Media\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\"  ],       \"Construction\": [  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ],       \"Public_Services\":  \"[partnered company name,challenges addressed,Solution implemented, Benefits]\" ], ]     },     \"Partnerships\": [             [“ provide all the partnerships names under the partnerships/key partnerships segment from the attached sources alone in a single line. Do not miss even a single partner name, it should capture all the names even if its more than 50”] ],     \"Acquisitions\": [  \"[All acquired company names], [reason for acquisition], [year of acquisition]\" ],     \"Strengths\": {       \"[Sub_heading 1]\": \"[detailed strengths reason as it is from the attached source file in 3 lines each]\",       \"[Sub_heading 2]\": \"\",       \"[Sub_heading 3]\": \"\",       \"[Sub_heading 4]\": \"\"     },     \"Weaknesses\": {       \"[Sub_heading 1]\": \"[detailed strengths reason as it is from the attached source file in 3 lines each]\",       \"[Sub_heading 2]\": \"\",       \"[Sub_heading 3]\": \"\",       \"[Sub_heading 4]\": \"\"     },     \"Key_Recognitions\": []   },   \"Follow_Up_Question\": \"Are there any additional URLs or documents that you would like to include for the research?\" }",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false
            },
            "id": "TextInput-VYK5D"
          },
          "selected": false,
          "width": 384,
          "height": 317,
          "positionAbsolute": {
            "x": 458.585058169371,
            "y": 783.7830289563905
          },
          "dragging": false
        },
        {
          "id": "Prompt-NQ3Ou",
          "type": "genericNode",
          "position": {
            "x": 1049.7058770133299,
            "y": 159.46825332396406
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "You are a competitor analyzer\n\nInput Files: Any Analyst Pdf \n\nPrompt: \n\nCompetitor name: {competitor_name} \n\nProvide a detailed report on Company's strategies, capabilities, investments, key solutions, partnerships, acquisitions, client references, strengths, and weaknesses, all extracted from the given input source. \n\nAsk a follow-up question to the user, asking for any additional urls that need to be added for the research  and provide that also in the below format after providing the below answers from the pdf document. \n\nIf two or more pdfs/documents are attached, include & merge the information from both documents in the below mentioned format. \n\n \n\nKey Message/Approach: Provide the company's overall strategy, vision, approach, methodology, and framework. Make sure to give it in bullet points with sub-headings like strategy/vision/approach/methodology/framework \n\n \n\nCapabilities: Provide the FTE or resource allocation, delivery footprint, number of clients, geographic presence, delivery centres, centres of excellence, investments and innovation/innovation centres, design studios, labs, and key industry clients.  \n\nProvide all the points with numbers/quantifiable data, with side-headings and in a readable sentence format for this section and strictly follow this instruction. \n\n \n\nKey Solutions: Give a detailed list of all the solutions, capabilities, IPs (intellectual property), proprietary solutions, and offerings from the pdf or link with a detailed description in 3-4 lines, even if there are more than 50 solutions. \n\nDo not miss any solution at any cost.  \n\n \n\nCase Studies: Provide all the case studies with quantifiable results in a 4 sentences and group them all in the following industry segments: BFSI, Healthcare, Manufacturing, Energy, Utilities, Logistics, Travel and Hospitality, Retail, Consumer Goods, Communication and Media, Construction, and Public Services. \n\nFormat: \"Industry name\" : \"EPAM\" collaborated/partnered/teamed up with/joined forces with/allied with + partners/customers/clients + (address the challenge and solutions with benefits produced or impact provided). \n\n \n\nPartnerships: Give the list of all the partners, even if its more than 50, as mentioned in the pdf/attached link without any descriptions in a single line without bullet points. Do not miss any partner names. \n\n \n\nAcquisitions: Provide the list of all the acquisitions with a line of description and acquired year. Note: Only the acquisitions. \n\n \n\nStrengths: Give at least 4 strengths in a 3-line description with side headings. Use information as it is from the pdf and do not be generic. Keep the tone suggestive. \n\n \n\nWeaknesses: Give at least 4 weaknesses in a 3-line description with side headings. Use information as it is from the pdf. It should not contradict strengths and should not be stated as a suggestion or an area of improvement.  \n\nUse words like lacks, poor, weak, low, inadequate, limited, not suitable, deficient, insufficient, inferior, subpar, scant, sparse, meager, restricted, substandard, absent and on similar terms to clearly highlight the deficiencies/shortcoming/weakness/gap while framing the weakness sentences.  \n\nStrictly do not use words like might, can, may, would, need to, should, could in the description of the weakness. \n\n \n\nKey recognitions: Any analyst awards and recognition. Analyst reports for this section include Everest, IDC, Avasant, Nelson, IDC, Gartner, HFS \n\n \n\nUse formal tone and provide factual information. Use information only from the attached pdf and links. Provide authentic information, don't hallucinate \n\nInput File\n{input_file}\n\nExample Json\n{example_json}\n\nAnswer:\n ",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                },
                "competitor_name": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "competitor_name",
                  "display_name": "competitor_name",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "example_json": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "example_json",
                  "display_name": "example_json",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "input_file": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_file",
                  "display_name": "input_file",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "competitor_name",
                  "input_file",
                  "example_json"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false
            },
            "id": "Prompt-NQ3Ou"
          },
          "selected": false,
          "width": 384,
          "height": 619,
          "positionAbsolute": {
            "x": 1049.7058770133299,
            "y": 159.46825332396406
          },
          "dragging": true
        }
      ],
      "edges": [
        {
          "source": "File-Xz3nA",
          "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-Xz3nAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-xCgPh",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-xCgPhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-xCgPh",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "File",
              "id": "File-Xz3nA",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-File-Xz3nA{œdataTypeœ:œFileœ,œidœ:œFile-Xz3nAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-xCgPh{œfieldNameœ:œdataœ,œidœ:œParseData-xCgPhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "TextInput-5oXIT",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-5oXITœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-NQ3Ou",
          "targetHandle": "{œfieldNameœ:œcompetitor_nameœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "competitor_name",
              "id": "Prompt-NQ3Ou",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-5oXIT",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-5oXIT{œdataTypeœ:œTextInputœ,œidœ:œTextInput-5oXITœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-NQ3Ou{œfieldNameœ:œcompetitor_nameœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-VYK5D",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-VYK5Dœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-NQ3Ou",
          "targetHandle": "{œfieldNameœ:œexample_jsonœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "example_json",
              "id": "Prompt-NQ3Ou",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-VYK5D",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-VYK5D{œdataTypeœ:œTextInputœ,œidœ:œTextInput-VYK5Dœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-NQ3Ou{œfieldNameœ:œexample_jsonœ,œidœ:œPrompt-NQ3Ouœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 23.369020768643168,
        "y": 79.09397238410361,
        "zoom": 0.6807359641735452
      }
    },
    "date_created": "2024-09-13T13:03:35.012Z",
    "date_updated": "2024-09-13T13:03:35.044Z",
    "status": "Public",
    "sort": null,
    "user_updated": "7b33ec4b-4aad-4ba9-a8b0-bb7c1db4861f",
    "user_created": {
      "username": "dhanabalmani",
      "first_name": "Dhanabal",
      "last_name": "Mani",
      "id": "7b33ec4b-4aad-4ba9-a8b0-bb7c1db4861f"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:56.174Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 38,
    "converter_version": "1.0.0"
  }
}