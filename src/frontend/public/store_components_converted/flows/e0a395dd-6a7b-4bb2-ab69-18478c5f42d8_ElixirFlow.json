{
  "id": "e0a395dd-6a7b-4bb2-ab69-18478c5f42d8",
  "name": "ElixirFlow",
  "description": "LLM chain (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "ghostmz26",
    "first_name": "Mufaddal",
    "last_name": "Zaranwala",
    "id": "5713f1d4-e1d5-4f96-ac6c-d3f652ec6c1b",
    "full_name": "Mufaddal Zaranwala"
  },
  "store_url": "https://www.langflow.store/store/component/e0a395dd-6a7b-4bb2-ab69-18478c5f42d8",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-07T16:41:36.853Z",
    "updated": "2024-05-07T16:41:36.887Z",
    "downloaded": "2025-08-19T17:50:05.243Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "PyPDFLoader-FVYI7",
        "type": "genericNode",
        "position": {
          "x": 76.31713610006022,
          "y": 497.08251326114583
        },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [
                  ".pdf"
                ],
                "file_path": "C:\\Users\\mufad\\AppData\\Local\\axiestudio\\axiestudio\\Cache\\39cb1363-5fce-4ad6-9c58-89cbcf92d082\\9d7bce04059321142b34500805d740bafb81d51672ef2613f586ca35e12ff7b2.pdf",
                "password": false,
                "name": "file_path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": [
                  {
                    "": ""
                  }
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": [
              "Document"
            ],
            "display_name": "PyPDFLoader",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "PyPDFLoader-FVYI7"
        },
        "selected": false,
        "width": 384,
        "height": 366,
        "dragging": false,
        "positionAbsolute": {
          "x": 76.31713610006022,
          "y": 497.08251326114583
        }
      },
      {
        "id": "CharacterTextSplitter-tHoxl",
        "type": "genericNode",
        "position": {
          "x": 601.2792206135784,
          "y": 102.39362610078953
        },
        "data": {
          "type": "CharacterTextSplitter",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_overlap": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "100",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "500",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "separator": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "\\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CharacterTextSplitter"
            },
            "description": "Splitting text that looks at characters.",
            "base_classes": [
              "Document"
            ],
            "display_name": "CharacterTextSplitter",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "CharacterTextSplitter-tHoxl"
        },
        "selected": false,
        "width": 384,
        "height": 507,
        "positionAbsolute": {
          "x": 601.2792206135784,
          "y": 102.39362610078953
        },
        "dragging": false
      },
      {
        "id": "RetrievalQA-Ifsg6",
        "type": "genericNode",
        "position": {
          "x": 1681.4366118503567,
          "y": 452.11292261361757
        },
        "data": {
          "type": "RetrievalQA",
          "node": {
            "template": {
              "combine_documents_chain": {
                "type": "BaseCombineDocumentsChain",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "combine_documents_chain",
                "display_name": "Combine Documents Chain",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, Optional, Union\r\n\r\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\r\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import BaseMemory, BaseRetriever\r\n\r\n\r\nclass RetrievalQAComponent(CustomComponent):\r\n    display_name = \"RetrievalQA\"\r\n    description = \"Chain for question-answering against an index.\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\r\n            \"retriever\": {\"display_name\": \"Retriever\"},\r\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\r\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\r\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\r\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        combine_documents_chain: BaseCombineDocumentsChain,\r\n        retriever: BaseRetriever,\r\n        memory: Optional[BaseMemory] = None,\r\n        input_key: str = \"query\",\r\n        output_key: str = \"result\",\r\n        return_source_documents: bool = True,\r\n    ) -> Union[BaseRetrievalQA, Callable]:\r\n        return RetrievalQA(\r\n            combine_documents_chain=combine_documents_chain,\r\n            retriever=retriever,\r\n            memory=memory,\r\n            input_key=input_key.encode('utf-8'),  # Ensure encoding with UTF-8\r\n            output_key=output_key.encode('utf-8'),  # Ensure encoding with UTF-8\r\n            return_source_documents=return_source_documents,\r\n        )\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "query",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "result",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "display_name": "Output Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_source_documents": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_source_documents",
                "display_name": "Return Source Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Chain for question-answering against an index.",
            "base_classes": [
              "Chain",
              "BaseRetrievalQA",
              "Callable"
            ],
            "display_name": "RetrievalQA",
            "documentation": "",
            "custom_fields": {
              "combine_documents_chain": null,
              "retriever": null,
              "memory": null,
              "input_key": null,
              "output_key": null,
              "return_source_documents": null
            },
            "output_types": [
              "BaseRetrievalQA",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "RetrievalQA-Ifsg6",
          "description": "Chain for question-answering against an index.",
          "display_name": "RetrievalQA"
        },
        "selected": false,
        "width": 384,
        "height": 500,
        "positionAbsolute": {
          "x": 1681.4366118503567,
          "y": 452.11292261361757
        },
        "dragging": false
      },
      {
        "id": "CombineDocsChain-YALBD",
        "type": "genericNode",
        "position": {
          "x": 625.593505761352,
          "y": 1193.1723592359172
        },
        "data": {
          "type": "CombineDocsChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chain_type": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "stuff",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "stuff",
                  "map_reduce",
                  "map_rerank",
                  "refine"
                ],
                "name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "load_qa_chain"
            },
            "description": "Load question answering chain.",
            "base_classes": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "display_name": "CombineDocsChain",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "CombineDocsChain-YALBD"
        },
        "selected": false,
        "width": 384,
        "height": 332,
        "dragging": false,
        "positionAbsolute": {
          "x": 625.593505761352,
          "y": 1193.1723592359172
        }
      },
      {
        "id": "HuggingFaceHub-g6Kbt",
        "type": "genericNode",
        "position": {
          "x": 77.11309832875224,
          "y": 1000.8358293793634
        },
        "data": {
          "type": "HuggingFaceHub",
          "node": {
            "template": {
              "cache": {
                "type": "BaseCache",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "cache",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "callbacks": {
                "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "huggingfacehub_api_token": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": true,
                "name": "huggingfacehub_api_token",
                "display_name": "HuggingFace Hub API Token",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "model_kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "repo_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "repo_id",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2"
              },
              "tags": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "task": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-generation",
                "fileTypes": [],
                "password": false,
                "options": [
                  "text-generation",
                  "text2text-generation",
                  "summarization"
                ],
                "name": "task",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "verbose": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "verbose",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "HuggingFaceHub"
            },
            "description": "[*Deprecated*] HuggingFaceHub  models.",
            "base_classes": [
              "BaseLanguageModel",
              "HuggingFaceHub",
              "BaseLLM",
              "LLM"
            ],
            "display_name": "HuggingFaceHub",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/huggingface_hub",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "HuggingFaceHub-g6Kbt"
        },
        "selected": false,
        "width": 384,
        "height": 382,
        "positionAbsolute": {
          "x": 77.11309832875224,
          "y": 1000.8358293793634
        },
        "dragging": false
      },
      {
        "id": "VectorStoreToolkit-6Sb7P",
        "type": "genericNode",
        "position": {
          "x": 1682.8303255006774,
          "y": 1049.5357333365416
        },
        "data": {
          "type": "VectorStoreToolkit",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "vectorstore_info": {
                "type": "VectorStoreInfo",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectorstore_info",
                "display_name": "Vector Store Info",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreToolkit\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n)\nfrom axiestudio.field_typing import (\n    Tool,\n)\nfrom typing import Union\n\n\nclass VectorStoreToolkitComponent(CustomComponent):\n    display_name = \"VectorStoreToolkit\"\n    description = \"Toolkit for interacting with a Vector Store.\"\n\n    def build_config(self):\n        return {\n            \"vectorstore_info\": {\"display_name\": \"Vector Store Info\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n        }\n\n    def build(\n        self,\n        vectorstore_info: VectorStoreInfo,\n        llm: BaseLanguageModel,\n    ) -> Union[Tool, VectorStoreToolkit]:\n        return VectorStoreToolkit(vectorstore_info=vectorstore_info, llm=llm)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Toolkit for interacting with a Vector Store.",
            "base_classes": [
              "BaseTool",
              "Tool",
              "BaseToolkit",
              "VectorStoreToolkit"
            ],
            "display_name": "VectorStoreToolkit",
            "documentation": "",
            "custom_fields": {
              "vectorstore_info": null,
              "llm": null
            },
            "output_types": [
              "Tool",
              "VectorStoreToolkit"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "VectorStoreToolkit-6Sb7P",
          "description": "Toolkit for interacting with a Vector Store.",
          "display_name": "VectorStoreToolkit"
        },
        "selected": false,
        "width": 384,
        "height": 376,
        "dragging": false,
        "positionAbsolute": {
          "x": 1682.8303255006774,
          "y": 1049.5357333365416
        }
      },
      {
        "id": "VectorStoreInfo-z4pcf",
        "type": "genericNode",
        "position": {
          "x": 1134.9009488184186,
          "y": 1359.2361293052397
        },
        "data": {
          "type": "VectorStoreInfo",
          "node": {
            "template": {
              "vectorstore": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectorstore",
                "display_name": "VectorStore",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, Union\n\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo\nfrom langchain_community.vectorstores import VectorStore\n\nfrom axiestudio import CustomComponent\n\n\nclass VectorStoreInfoComponent(CustomComponent):\n    display_name = \"VectorStoreInfo\"\n    description = \"Information about a VectorStore\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"VectorStore\"},\n            \"description\": {\"display_name\": \"Description\", \"multiline\": True},\n            \"name\": {\"display_name\": \"Name\"},\n        }\n\n    def build(\n        self,\n        vectorstore: VectorStore,\n        description: str,\n        name: str,\n    ) -> Union[VectorStoreInfo, Callable]:\n        return VectorStoreInfo(vectorstore=vectorstore, description=description, name=name)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "You are a chatbot helper for alnoor enterprise ready to help customers with questions regarding products in their catalogue\n"
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "display_name": "Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Elixir"
              },
              "_type": "CustomComponent"
            },
            "description": "Information about a VectorStore",
            "base_classes": [
              "VectorStoreInfo",
              "Callable"
            ],
            "display_name": "VectorStoreInfo",
            "documentation": "",
            "custom_fields": {
              "vectorstore": null,
              "description": null,
              "name": null
            },
            "output_types": [
              "VectorStoreInfo",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "VectorStoreInfo-z4pcf",
          "description": "Information about a VectorStore",
          "display_name": "VectorStoreInfo"
        },
        "selected": false,
        "width": 384,
        "height": 507,
        "positionAbsolute": {
          "x": 1134.9009488184186,
          "y": 1359.2361293052397
        },
        "dragging": false
      },
      {
        "id": "HuggingFaceEmbeddings-7V27Y",
        "type": "genericNode",
        "position": {
          "x": 614.7055289767877,
          "y": 713.0561145219101
        },
        "data": {
          "type": "HuggingFaceEmbeddings",
          "node": {
            "template": {
              "cache_folder": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "cache_folder",
                "display_name": "Cache Folder",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom typing import Optional, Dict\nfrom langchain_community.embeddings.huggingface import HuggingFaceEmbeddings\n\n\nclass HuggingFaceEmbeddingsComponent(CustomComponent):\n    display_name = \"HuggingFaceEmbeddings\"\n    description = \"HuggingFace sentence_transformers embedding models.\"\n    documentation = (\n        \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers\"\n    )\n\n    def build_config(self):\n        return {\n            \"cache_folder\": {\"display_name\": \"Cache Folder\", \"advanced\": True},\n            \"encode_kwargs\": {\"display_name\": \"Encode Kwargs\", \"advanced\": True, \"field_type\": \"dict\"},\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"field_type\": \"dict\", \"advanced\": True},\n            \"model_name\": {\"display_name\": \"Model Name\"},\n            \"multi_process\": {\"display_name\": \"Multi Process\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        cache_folder: Optional[str] = None,\n        encode_kwargs: Optional[Dict] = {},\n        model_kwargs: Optional[Dict] = {},\n        model_name: str = \"sentence-transformers/all-mpnet-base-v2\",\n        multi_process: bool = False,\n    ) -> HuggingFaceEmbeddings:\n        return HuggingFaceEmbeddings(\n            cache_folder=cache_folder,\n            encode_kwargs=encode_kwargs,\n            model_kwargs=model_kwargs,\n            model_name=model_name,\n            multi_process=multi_process,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "encode_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "encode_kwargs",
                "display_name": "Encode Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "sentence-transformers/all-mpnet-base-v2",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "multi_process": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "multi_process",
                "display_name": "Multi Process",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "HuggingFace sentence_transformers embedding models.",
            "base_classes": [
              "Embeddings",
              "HuggingFaceEmbeddings"
            ],
            "display_name": "HuggingFaceEmbeddings",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers",
            "custom_fields": {
              "cache_folder": null,
              "encode_kwargs": null,
              "model_kwargs": null,
              "model_name": null,
              "multi_process": null
            },
            "output_types": [
              "HuggingFaceEmbeddings"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "HuggingFaceEmbeddings-7V27Y",
          "description": "HuggingFace sentence_transformers embedding models.",
          "display_name": "HuggingFaceEmbeddings"
        },
        "selected": false,
        "width": 384,
        "height": 394,
        "positionAbsolute": {
          "x": 614.7055289767877,
          "y": 713.0561145219101
        },
        "dragging": false
      },
      {
        "id": "ConversationBufferMemory-jvDIX",
        "type": "genericNode",
        "position": {
          "x": 1123.4369078916777,
          "y": 710.597974173385
        },
        "data": {
          "type": "ConversationBufferMemory",
          "node": {
            "template": {
              "chat_memory": {
                "type": "BaseChatMessageHistory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "chat_memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "ai_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "password": false,
                "name": "ai_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "human_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "Human",
                "fileTypes": [],
                "password": false,
                "name": "human_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "title_case": true
              },
              "memory_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "fileTypes": [],
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "title_case": true
              },
              "return_messages": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "ConversationBufferMemory"
            },
            "description": "Buffer for storing conversation memory.",
            "base_classes": [
              "BaseChatMemory",
              "BaseMemory",
              "ConversationBufferMemory"
            ],
            "display_name": "ConversationBufferMemory",
            "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "ConversationBufferMemory-jvDIX"
        },
        "selected": false,
        "width": 384,
        "height": 599,
        "positionAbsolute": {
          "x": 1123.4369078916777,
          "y": 710.597974173385
        },
        "dragging": false
      },
      {
        "id": "Chroma-TOfAq",
        "type": "genericNode",
        "position": {
          "x": 1109.2718112877167,
          "y": 96.69110997372974
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_cors_allow_origins": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_grpc_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_host": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_ssl_enabled": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Elixir",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist_directory": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {
              "collection_name": null,
              "persist": null,
              "embedding": null,
              "chroma_server_ssl_enabled": null,
              "persist_directory": null,
              "documents": null,
              "chroma_server_cors_allow_origins": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_grpc_port": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Chroma-TOfAq"
        },
        "selected": false,
        "width": 384,
        "height": 553,
        "positionAbsolute": {
          "x": 1109.2718112877167,
          "y": 96.69110997372974
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "PyPDFLoader-FVYI7",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-FVYI7œ}",
        "target": "CharacterTextSplitter-tHoxl",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-tHoxlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "CharacterTextSplitter-tHoxl",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-FVYI7"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PyPDFLoader-FVYI7{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-FVYI7œ}-CharacterTextSplitter-tHoxl{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-tHoxlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "CombineDocsChain-YALBD",
        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-YALBDœ}",
        "target": "RetrievalQA-Ifsg6",
        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
        "data": {
          "targetHandle": {
            "fieldName": "combine_documents_chain",
            "id": "RetrievalQA-Ifsg6",
            "inputTypes": null,
            "type": "BaseCombineDocumentsChain"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "dataType": "CombineDocsChain",
            "id": "CombineDocsChain-YALBD"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CombineDocsChain-YALBD{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-YALBDœ}-RetrievalQA-Ifsg6{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
      },
      {
        "source": "HuggingFaceHub-g6Kbt",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}",
        "target": "CombineDocsChain-YALBD",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-YALBDœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CombineDocsChain-YALBD",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "HuggingFaceHub",
              "BaseLLM",
              "LLM"
            ],
            "dataType": "HuggingFaceHub",
            "id": "HuggingFaceHub-g6Kbt"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HuggingFaceHub-g6Kbt{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}-CombineDocsChain-YALBD{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-YALBDœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "HuggingFaceHub-g6Kbt",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}",
        "target": "VectorStoreToolkit-6Sb7P",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "VectorStoreToolkit-6Sb7P",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "HuggingFaceHub",
              "BaseLLM",
              "LLM"
            ],
            "dataType": "HuggingFaceHub",
            "id": "HuggingFaceHub-g6Kbt"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HuggingFaceHub-g6Kbt{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}-VectorStoreToolkit-6Sb7P{œfieldNameœ:œllmœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "VectorStoreInfo-z4pcf",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreInfoœ,œCallableœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-z4pcfœ}",
        "target": "VectorStoreToolkit-6Sb7P",
        "targetHandle": "{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vectorstore_info",
            "id": "VectorStoreToolkit-6Sb7P",
            "inputTypes": null,
            "type": "VectorStoreInfo"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStoreInfo",
              "Callable"
            ],
            "dataType": "VectorStoreInfo",
            "id": "VectorStoreInfo-z4pcf"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-VectorStoreInfo-z4pcf{œbaseClassesœ:[œVectorStoreInfoœ,œCallableœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-z4pcfœ}-VectorStoreToolkit-6Sb7P{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}"
      },
      {
        "source": "ConversationBufferMemory-jvDIX",
        "sourceHandle": "{œbaseClassesœ:[œBaseChatMemoryœ,œBaseMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-jvDIXœ}",
        "target": "RetrievalQA-Ifsg6",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "RetrievalQA-Ifsg6",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseChatMemory",
              "BaseMemory",
              "ConversationBufferMemory"
            ],
            "dataType": "ConversationBufferMemory",
            "id": "ConversationBufferMemory-jvDIX"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationBufferMemory-jvDIX{œbaseClassesœ:[œBaseChatMemoryœ,œBaseMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-jvDIXœ}-RetrievalQA-Ifsg6{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      },
      {
        "source": "CharacterTextSplitter-tHoxl",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-tHoxlœ}",
        "target": "Chroma-TOfAq",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-TOfAq",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "CharacterTextSplitter",
            "id": "CharacterTextSplitter-tHoxl"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CharacterTextSplitter-tHoxl{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-tHoxlœ}-Chroma-TOfAq{œfieldNameœ:œdocumentsœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "HuggingFaceEmbeddings-7V27Y",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-7V27Yœ}",
        "target": "Chroma-TOfAq",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-TOfAq",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "HuggingFaceEmbeddings"
            ],
            "dataType": "HuggingFaceEmbeddings",
            "id": "HuggingFaceEmbeddings-7V27Y"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HuggingFaceEmbeddings-7V27Y{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-7V27Yœ}-Chroma-TOfAq{œfieldNameœ:œembeddingœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "Chroma-TOfAq",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}",
        "target": "RetrievalQA-Ifsg6",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQA-Ifsg6",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Chroma",
            "id": "Chroma-TOfAq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-TOfAq{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}-RetrievalQA-Ifsg6{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "Chroma-TOfAq",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}",
        "target": "VectorStoreInfo-z4pcf",
        "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-z4pcfœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vectorstore",
            "id": "VectorStoreInfo-z4pcf",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Chroma",
            "id": "Chroma-TOfAq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-TOfAq{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}-VectorStoreInfo-z4pcf{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-z4pcfœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
      }
    ],
    "viewport": {
      "x": 347.9140053569661,
      "y": 25.27216101745387,
      "zoom": 0.41002892090880705
    }
  },
  "metadata": {
    "PyPDFLoader": {
      "count": 1
    },
    "CharacterTextSplitter": {
      "count": 1
    },
    "RetrievalQA": {
      "count": 1
    },
    "CombineDocsChain": {
      "count": 1
    },
    "HuggingFaceHub": {
      "count": 1
    },
    "VectorStoreToolkit": {
      "count": 1
    },
    "VectorStoreInfo": {
      "count": 1
    },
    "HuggingFaceEmbeddings": {
      "count": 1
    },
    "ConversationBufferMemory": {
      "count": 1
    },
    "Chroma": {
      "count": 1
    },
    "total": 10
  },
  "original": {
    "id": "e0a395dd-6a7b-4bb2-ab69-18478c5f42d8",
    "name": "ElixirFlow",
    "description": "LLM chain",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "PyPDFLoader": {
        "count": 1
      },
      "CharacterTextSplitter": {
        "count": 1
      },
      "RetrievalQA": {
        "count": 1
      },
      "CombineDocsChain": {
        "count": 1
      },
      "HuggingFaceHub": {
        "count": 1
      },
      "VectorStoreToolkit": {
        "count": 1
      },
      "VectorStoreInfo": {
        "count": 1
      },
      "HuggingFaceEmbeddings": {
        "count": 1
      },
      "ConversationBufferMemory": {
        "count": 1
      },
      "Chroma": {
        "count": 1
      },
      "total": 10
    },
    "last_tested_version": "0.6.18",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "PyPDFLoader-FVYI7",
          "type": "genericNode",
          "position": {
            "x": 76.31713610006022,
            "y": 497.08251326114583
          },
          "data": {
            "type": "PyPDFLoader",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [
                    ".pdf"
                  ],
                  "file_path": "C:\\Users\\mufad\\AppData\\Local\\axiestudio\\axiestudio\\Cache\\39cb1363-5fce-4ad6-9c58-89cbcf92d082\\9d7bce04059321142b34500805d740bafb81d51672ef2613f586ca35e12ff7b2.pdf",
                  "password": false,
                  "name": "file_path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": [
                    {
                      "": ""
                    }
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PyPDFLoader"
              },
              "description": "Load PDF using pypdf into list of documents.",
              "base_classes": [
                "Document"
              ],
              "display_name": "PyPDFLoader",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "PyPDFLoader-FVYI7"
          },
          "selected": false,
          "width": 384,
          "height": 366,
          "dragging": false,
          "positionAbsolute": {
            "x": 76.31713610006022,
            "y": 497.08251326114583
          }
        },
        {
          "id": "CharacterTextSplitter-tHoxl",
          "type": "genericNode",
          "position": {
            "x": 601.2792206135784,
            "y": 102.39362610078953
          },
          "data": {
            "type": "CharacterTextSplitter",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "100",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "500",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "separator": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "\\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CharacterTextSplitter"
              },
              "description": "Splitting text that looks at characters.",
              "base_classes": [
                "Document"
              ],
              "display_name": "CharacterTextSplitter",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "CharacterTextSplitter-tHoxl"
          },
          "selected": false,
          "width": 384,
          "height": 507,
          "positionAbsolute": {
            "x": 601.2792206135784,
            "y": 102.39362610078953
          },
          "dragging": false
        },
        {
          "id": "RetrievalQA-Ifsg6",
          "type": "genericNode",
          "position": {
            "x": 1681.4366118503567,
            "y": 452.11292261361757
          },
          "data": {
            "type": "RetrievalQA",
            "node": {
              "template": {
                "combine_documents_chain": {
                  "type": "BaseCombineDocumentsChain",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "combine_documents_chain",
                  "display_name": "Combine Documents Chain",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "Retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Callable, Optional, Union\r\n\r\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\r\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import BaseMemory, BaseRetriever\r\n\r\n\r\nclass RetrievalQAComponent(CustomComponent):\r\n    display_name = \"RetrievalQA\"\r\n    description = \"Chain for question-answering against an index.\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\r\n            \"retriever\": {\"display_name\": \"Retriever\"},\r\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\r\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\r\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\r\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        combine_documents_chain: BaseCombineDocumentsChain,\r\n        retriever: BaseRetriever,\r\n        memory: Optional[BaseMemory] = None,\r\n        input_key: str = \"query\",\r\n        output_key: str = \"result\",\r\n        return_source_documents: bool = True,\r\n    ) -> Union[BaseRetrievalQA, Callable]:\r\n        return RetrievalQA(\r\n            combine_documents_chain=combine_documents_chain,\r\n            retriever=retriever,\r\n            memory=memory,\r\n            input_key=input_key.encode('utf-8'),  # Ensure encoding with UTF-8\r\n            output_key=output_key.encode('utf-8'),  # Ensure encoding with UTF-8\r\n            return_source_documents=return_source_documents,\r\n        )\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "query",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_key",
                  "display_name": "Input Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "output_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "result",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "output_key",
                  "display_name": "Output Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_source_documents": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_source_documents",
                  "display_name": "Return Source Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Chain for question-answering against an index.",
              "base_classes": [
                "Chain",
                "BaseRetrievalQA",
                "Callable"
              ],
              "display_name": "RetrievalQA",
              "documentation": "",
              "custom_fields": {
                "combine_documents_chain": null,
                "retriever": null,
                "memory": null,
                "input_key": null,
                "output_key": null,
                "return_source_documents": null
              },
              "output_types": [
                "BaseRetrievalQA",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "RetrievalQA-Ifsg6",
            "description": "Chain for question-answering against an index.",
            "display_name": "RetrievalQA"
          },
          "selected": false,
          "width": 384,
          "height": 500,
          "positionAbsolute": {
            "x": 1681.4366118503567,
            "y": 452.11292261361757
          },
          "dragging": false
        },
        {
          "id": "CombineDocsChain-YALBD",
          "type": "genericNode",
          "position": {
            "x": 625.593505761352,
            "y": 1193.1723592359172
          },
          "data": {
            "type": "CombineDocsChain",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chain_type": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "stuff",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "stuff",
                    "map_reduce",
                    "map_rerank",
                    "refine"
                  ],
                  "name": "chain_type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "load_qa_chain"
              },
              "description": "Load question answering chain.",
              "base_classes": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "display_name": "CombineDocsChain",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "CombineDocsChain-YALBD"
          },
          "selected": false,
          "width": 384,
          "height": 332,
          "dragging": false,
          "positionAbsolute": {
            "x": 625.593505761352,
            "y": 1193.1723592359172
          }
        },
        {
          "id": "HuggingFaceHub-g6Kbt",
          "type": "genericNode",
          "position": {
            "x": 77.11309832875224,
            "y": 1000.8358293793634
          },
          "data": {
            "type": "HuggingFaceHub",
            "node": {
              "template": {
                "cache": {
                  "type": "BaseCache",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "cache",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "callbacks": {
                  "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "callbacks",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "client",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "huggingfacehub_api_token": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": true,
                  "name": "huggingfacehub_api_token",
                  "display_name": "HuggingFace Hub API Token",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "model_kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "repo_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "repo_id",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2"
                },
                "tags": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "tags",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "task": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-generation",
                  "fileTypes": [],
                  "password": false,
                  "options": [
                    "text-generation",
                    "text2text-generation",
                    "summarization"
                  ],
                  "name": "task",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "verbose": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "verbose",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "HuggingFaceHub"
              },
              "description": "[*Deprecated*] HuggingFaceHub  models.",
              "base_classes": [
                "BaseLanguageModel",
                "HuggingFaceHub",
                "BaseLLM",
                "LLM"
              ],
              "display_name": "HuggingFaceHub",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/huggingface_hub",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "HuggingFaceHub-g6Kbt"
          },
          "selected": false,
          "width": 384,
          "height": 382,
          "positionAbsolute": {
            "x": 77.11309832875224,
            "y": 1000.8358293793634
          },
          "dragging": false
        },
        {
          "id": "VectorStoreToolkit-6Sb7P",
          "type": "genericNode",
          "position": {
            "x": 1682.8303255006774,
            "y": 1049.5357333365416
          },
          "data": {
            "type": "VectorStoreToolkit",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "vectorstore_info": {
                  "type": "VectorStoreInfo",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectorstore_info",
                  "display_name": "Vector Store Info",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreToolkit\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n)\nfrom axiestudio.field_typing import (\n    Tool,\n)\nfrom typing import Union\n\n\nclass VectorStoreToolkitComponent(CustomComponent):\n    display_name = \"VectorStoreToolkit\"\n    description = \"Toolkit for interacting with a Vector Store.\"\n\n    def build_config(self):\n        return {\n            \"vectorstore_info\": {\"display_name\": \"Vector Store Info\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n        }\n\n    def build(\n        self,\n        vectorstore_info: VectorStoreInfo,\n        llm: BaseLanguageModel,\n    ) -> Union[Tool, VectorStoreToolkit]:\n        return VectorStoreToolkit(vectorstore_info=vectorstore_info, llm=llm)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Toolkit for interacting with a Vector Store.",
              "base_classes": [
                "BaseTool",
                "Tool",
                "BaseToolkit",
                "VectorStoreToolkit"
              ],
              "display_name": "VectorStoreToolkit",
              "documentation": "",
              "custom_fields": {
                "vectorstore_info": null,
                "llm": null
              },
              "output_types": [
                "Tool",
                "VectorStoreToolkit"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "VectorStoreToolkit-6Sb7P",
            "description": "Toolkit for interacting with a Vector Store.",
            "display_name": "VectorStoreToolkit"
          },
          "selected": false,
          "width": 384,
          "height": 376,
          "dragging": false,
          "positionAbsolute": {
            "x": 1682.8303255006774,
            "y": 1049.5357333365416
          }
        },
        {
          "id": "VectorStoreInfo-z4pcf",
          "type": "genericNode",
          "position": {
            "x": 1134.9009488184186,
            "y": 1359.2361293052397
          },
          "data": {
            "type": "VectorStoreInfo",
            "node": {
              "template": {
                "vectorstore": {
                  "type": "VectorStore",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectorstore",
                  "display_name": "VectorStore",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Callable, Union\n\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo\nfrom langchain_community.vectorstores import VectorStore\n\nfrom axiestudio import CustomComponent\n\n\nclass VectorStoreInfoComponent(CustomComponent):\n    display_name = \"VectorStoreInfo\"\n    description = \"Information about a VectorStore\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"VectorStore\"},\n            \"description\": {\"display_name\": \"Description\", \"multiline\": True},\n            \"name\": {\"display_name\": \"Name\"},\n        }\n\n    def build(\n        self,\n        vectorstore: VectorStore,\n        description: str,\n        name: str,\n    ) -> Union[VectorStoreInfo, Callable]:\n        return VectorStoreInfo(vectorstore=vectorstore, description=description, name=name)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "display_name": "Description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "You are a chatbot helper for alnoor enterprise ready to help customers with questions regarding products in their catalogue\n"
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "display_name": "Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Elixir"
                },
                "_type": "CustomComponent"
              },
              "description": "Information about a VectorStore",
              "base_classes": [
                "VectorStoreInfo",
                "Callable"
              ],
              "display_name": "VectorStoreInfo",
              "documentation": "",
              "custom_fields": {
                "vectorstore": null,
                "description": null,
                "name": null
              },
              "output_types": [
                "VectorStoreInfo",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "VectorStoreInfo-z4pcf",
            "description": "Information about a VectorStore",
            "display_name": "VectorStoreInfo"
          },
          "selected": false,
          "width": 384,
          "height": 507,
          "positionAbsolute": {
            "x": 1134.9009488184186,
            "y": 1359.2361293052397
          },
          "dragging": false
        },
        {
          "id": "HuggingFaceEmbeddings-7V27Y",
          "type": "genericNode",
          "position": {
            "x": 614.7055289767877,
            "y": 713.0561145219101
          },
          "data": {
            "type": "HuggingFaceEmbeddings",
            "node": {
              "template": {
                "cache_folder": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "cache_folder",
                  "display_name": "Cache Folder",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom typing import Optional, Dict\nfrom langchain_community.embeddings.huggingface import HuggingFaceEmbeddings\n\n\nclass HuggingFaceEmbeddingsComponent(CustomComponent):\n    display_name = \"HuggingFaceEmbeddings\"\n    description = \"HuggingFace sentence_transformers embedding models.\"\n    documentation = (\n        \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers\"\n    )\n\n    def build_config(self):\n        return {\n            \"cache_folder\": {\"display_name\": \"Cache Folder\", \"advanced\": True},\n            \"encode_kwargs\": {\"display_name\": \"Encode Kwargs\", \"advanced\": True, \"field_type\": \"dict\"},\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"field_type\": \"dict\", \"advanced\": True},\n            \"model_name\": {\"display_name\": \"Model Name\"},\n            \"multi_process\": {\"display_name\": \"Multi Process\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        cache_folder: Optional[str] = None,\n        encode_kwargs: Optional[Dict] = {},\n        model_kwargs: Optional[Dict] = {},\n        model_name: str = \"sentence-transformers/all-mpnet-base-v2\",\n        multi_process: bool = False,\n    ) -> HuggingFaceEmbeddings:\n        return HuggingFaceEmbeddings(\n            cache_folder=cache_folder,\n            encode_kwargs=encode_kwargs,\n            model_kwargs=model_kwargs,\n            model_name=model_name,\n            multi_process=multi_process,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "encode_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "encode_kwargs",
                  "display_name": "Encode Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "sentence-transformers/all-mpnet-base-v2",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "multi_process": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "multi_process",
                  "display_name": "Multi Process",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "HuggingFace sentence_transformers embedding models.",
              "base_classes": [
                "Embeddings",
                "HuggingFaceEmbeddings"
              ],
              "display_name": "HuggingFaceEmbeddings",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers",
              "custom_fields": {
                "cache_folder": null,
                "encode_kwargs": null,
                "model_kwargs": null,
                "model_name": null,
                "multi_process": null
              },
              "output_types": [
                "HuggingFaceEmbeddings"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "HuggingFaceEmbeddings-7V27Y",
            "description": "HuggingFace sentence_transformers embedding models.",
            "display_name": "HuggingFaceEmbeddings"
          },
          "selected": false,
          "width": 384,
          "height": 394,
          "positionAbsolute": {
            "x": 614.7055289767877,
            "y": 713.0561145219101
          },
          "dragging": false
        },
        {
          "id": "ConversationBufferMemory-jvDIX",
          "type": "genericNode",
          "position": {
            "x": 1123.4369078916777,
            "y": 710.597974173385
          },
          "data": {
            "type": "ConversationBufferMemory",
            "node": {
              "template": {
                "chat_memory": {
                  "type": "BaseChatMessageHistory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "chat_memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "ai_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "password": false,
                  "name": "ai_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "human_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "Human",
                  "fileTypes": [],
                  "password": false,
                  "name": "human_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "input_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Input when more than one variable is available.",
                  "title_case": true
                },
                "memory_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "chat_history",
                  "fileTypes": [],
                  "password": false,
                  "name": "memory_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "output_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "output_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                  "title_case": true
                },
                "return_messages": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "ConversationBufferMemory"
              },
              "description": "Buffer for storing conversation memory.",
              "base_classes": [
                "BaseChatMemory",
                "BaseMemory",
                "ConversationBufferMemory"
              ],
              "display_name": "ConversationBufferMemory",
              "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "ConversationBufferMemory-jvDIX"
          },
          "selected": false,
          "width": 384,
          "height": 599,
          "positionAbsolute": {
            "x": 1123.4369078916777,
            "y": 710.597974173385
          },
          "dragging": false
        },
        {
          "id": "Chroma-TOfAq",
          "type": "genericNode",
          "position": {
            "x": 1109.2718112877167,
            "y": 96.69110997372974
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_cors_allow_origins": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_grpc_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_host": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_ssl_enabled": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Elixir",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist",
                  "display_name": "Persist",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist_directory": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Chroma",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Chroma",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {
                "collection_name": null,
                "persist": null,
                "embedding": null,
                "chroma_server_ssl_enabled": null,
                "persist_directory": null,
                "documents": null,
                "chroma_server_cors_allow_origins": null,
                "chroma_server_host": null,
                "chroma_server_port": null,
                "chroma_server_grpc_port": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Chroma-TOfAq"
          },
          "selected": false,
          "width": 384,
          "height": 553,
          "positionAbsolute": {
            "x": 1109.2718112877167,
            "y": 96.69110997372974
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "PyPDFLoader-FVYI7",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-FVYI7œ}",
          "target": "CharacterTextSplitter-tHoxl",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-tHoxlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "CharacterTextSplitter-tHoxl",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "PyPDFLoader",
              "id": "PyPDFLoader-FVYI7"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-PyPDFLoader-FVYI7{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-FVYI7œ}-CharacterTextSplitter-tHoxl{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-tHoxlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "CombineDocsChain-YALBD",
          "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-YALBDœ}",
          "target": "RetrievalQA-Ifsg6",
          "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
          "data": {
            "targetHandle": {
              "fieldName": "combine_documents_chain",
              "id": "RetrievalQA-Ifsg6",
              "inputTypes": null,
              "type": "BaseCombineDocumentsChain"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "dataType": "CombineDocsChain",
              "id": "CombineDocsChain-YALBD"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CombineDocsChain-YALBD{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-YALBDœ}-RetrievalQA-Ifsg6{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
        },
        {
          "source": "HuggingFaceHub-g6Kbt",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}",
          "target": "CombineDocsChain-YALBD",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-YALBDœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CombineDocsChain-YALBD",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "HuggingFaceHub",
                "BaseLLM",
                "LLM"
              ],
              "dataType": "HuggingFaceHub",
              "id": "HuggingFaceHub-g6Kbt"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-HuggingFaceHub-g6Kbt{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}-CombineDocsChain-YALBD{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-YALBDœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "HuggingFaceHub-g6Kbt",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}",
          "target": "VectorStoreToolkit-6Sb7P",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "VectorStoreToolkit-6Sb7P",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "HuggingFaceHub",
                "BaseLLM",
                "LLM"
              ],
              "dataType": "HuggingFaceHub",
              "id": "HuggingFaceHub-g6Kbt"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-HuggingFaceHub-g6Kbt{œbaseClassesœ:[œBaseLanguageModelœ,œHuggingFaceHubœ,œBaseLLMœ,œLLMœ],œdataTypeœ:œHuggingFaceHubœ,œidœ:œHuggingFaceHub-g6Kbtœ}-VectorStoreToolkit-6Sb7P{œfieldNameœ:œllmœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "VectorStoreInfo-z4pcf",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreInfoœ,œCallableœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-z4pcfœ}",
          "target": "VectorStoreToolkit-6Sb7P",
          "targetHandle": "{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vectorstore_info",
              "id": "VectorStoreToolkit-6Sb7P",
              "inputTypes": null,
              "type": "VectorStoreInfo"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStoreInfo",
                "Callable"
              ],
              "dataType": "VectorStoreInfo",
              "id": "VectorStoreInfo-z4pcf"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-VectorStoreInfo-z4pcf{œbaseClassesœ:[œVectorStoreInfoœ,œCallableœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-z4pcfœ}-VectorStoreToolkit-6Sb7P{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-6Sb7Pœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}"
        },
        {
          "source": "ConversationBufferMemory-jvDIX",
          "sourceHandle": "{œbaseClassesœ:[œBaseChatMemoryœ,œBaseMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-jvDIXœ}",
          "target": "RetrievalQA-Ifsg6",
          "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
          "data": {
            "targetHandle": {
              "fieldName": "memory",
              "id": "RetrievalQA-Ifsg6",
              "inputTypes": null,
              "type": "BaseMemory"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseChatMemory",
                "BaseMemory",
                "ConversationBufferMemory"
              ],
              "dataType": "ConversationBufferMemory",
              "id": "ConversationBufferMemory-jvDIX"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ConversationBufferMemory-jvDIX{œbaseClassesœ:[œBaseChatMemoryœ,œBaseMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-jvDIXœ}-RetrievalQA-Ifsg6{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
        },
        {
          "source": "CharacterTextSplitter-tHoxl",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-tHoxlœ}",
          "target": "Chroma-TOfAq",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Chroma-TOfAq",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "CharacterTextSplitter",
              "id": "CharacterTextSplitter-tHoxl"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CharacterTextSplitter-tHoxl{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-tHoxlœ}-Chroma-TOfAq{œfieldNameœ:œdocumentsœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "HuggingFaceEmbeddings-7V27Y",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-7V27Yœ}",
          "target": "Chroma-TOfAq",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-TOfAq",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "HuggingFaceEmbeddings"
              ],
              "dataType": "HuggingFaceEmbeddings",
              "id": "HuggingFaceEmbeddings-7V27Y"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-HuggingFaceEmbeddings-7V27Y{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-7V27Yœ}-Chroma-TOfAq{œfieldNameœ:œembeddingœ,œidœ:œChroma-TOfAqœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        },
        {
          "source": "Chroma-TOfAq",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}",
          "target": "RetrievalQA-Ifsg6",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "RetrievalQA-Ifsg6",
              "inputTypes": null,
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Chroma",
              "id": "Chroma-TOfAq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Chroma-TOfAq{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}-RetrievalQA-Ifsg6{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Ifsg6œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
        },
        {
          "source": "Chroma-TOfAq",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}",
          "target": "VectorStoreInfo-z4pcf",
          "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-z4pcfœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vectorstore",
              "id": "VectorStoreInfo-z4pcf",
              "inputTypes": null,
              "type": "VectorStore"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Chroma",
              "id": "Chroma-TOfAq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Chroma-TOfAq{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-TOfAqœ}-VectorStoreInfo-z4pcf{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-z4pcfœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
        }
      ],
      "viewport": {
        "x": 347.9140053569661,
        "y": 25.27216101745387,
        "zoom": 0.41002892090880705
      }
    },
    "date_created": "2024-05-07T16:41:36.853Z",
    "date_updated": "2024-05-07T16:41:36.887Z",
    "status": "Public",
    "sort": null,
    "user_updated": "5713f1d4-e1d5-4f96-ac6c-d3f652ec6c1b",
    "user_created": {
      "username": "ghostmz26",
      "first_name": "Mufaddal",
      "last_name": "Zaranwala",
      "id": "5713f1d4-e1d5-4f96-ac6c-d3f652ec6c1b"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:06.949Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 22,
    "converter_version": "1.0.0"
  }
}