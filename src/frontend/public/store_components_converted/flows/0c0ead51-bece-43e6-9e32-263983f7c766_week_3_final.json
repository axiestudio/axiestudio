{
  "id": "0c0ead51-bece-43e6-9e32-263983f7c766",
  "name": "week_3_final",
  "description": "Crafting Conversations, One Node at a Time. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "dragnboy",
    "first_name": "draggon",
    "last_name": "boy",
    "id": "d5b0563c-0a44-4468-b5e8-66ec983def2f",
    "full_name": "draggon boy"
  },
  "store_url": "https://www.langflow.store/store/component/0c0ead51-bece-43e6-9e32-263983f7c766",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-11-19T17:04:02.703Z",
    "updated": "2024-11-19T17:04:02.815Z",
    "downloaded": "2025-08-19T17:50:06.908Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatInput-Mhy7E",
        "type": "genericNode",
        "position": {
          "x": -1036.5663488513655,
          "y": 1908.8651633995632
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ChatInput-Mhy7E"
        },
        "selected": false,
        "width": 384,
        "height": 302,
        "positionAbsolute": {
          "x": -1036.5663488513655,
          "y": 1908.8651633995632
        },
        "dragging": false
      },
      {
        "id": "LangWatchEvaluatorComponent-gPZln",
        "type": "genericNode",
        "position": {
          "x": 238.5308642732698,
          "y": 2418.799178507102
        },
        "data": {
          "type": "LangWatchEvaluatorComponent",
          "node": {
            "template": {
              "_type": "Component",
              "context_data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "context_data",
                "value": "",
                "display_name": "RAG Search Results (optional)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to be used as context for evaluation.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "answer": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "answer",
                "value": "",
                "display_name": "Answer",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The generated answer to be evaluated.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput, DataInput\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nimport langwatch\r\n\r\nclass LangWatchEvaluatorComponent(Component):\r\n    display_name = \"LangWatch Evaluator\"\r\n    description = \"Evaluates a question-answer pair using LangWatch and provides a trace URL.\"\r\n    icon = \"view\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"question\",\r\n            display_name=\"Question\",\r\n            info=\"The question to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"answer\",\r\n            display_name=\"Answer\",\r\n            info=\"The generated answer to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"ground_truth\",\r\n            display_name=\"Correct Answer\",\r\n            info=\"The expected correct answer.\",\r\n        ),\r\n        DataInput(\r\n            name=\"context_data\",\r\n            display_name=\"RAG Search Results (optional)\",\r\n            info=\"The data to be used as context for evaluation.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_email\",\r\n            display_name=\"User Email\",\r\n            info=\"The user email for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_name\",\r\n            display_name=\"Participant Name\",\r\n            info=\"Full name for identification in the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"question_id\",\r\n            display_name=\"Question ID\",\r\n            info=\"The question ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Trace URL\", name=\"trace_url\", method=\"evaluate\"),\r\n    ]\r\n\r\n    async def evaluate(self) -> Data:\r\n        question = self.question\r\n        answer = self.answer\r\n        ground_truth = self.ground_truth\r\n        context_data = self.context_data\r\n        user_email = self.user_email if self.user_email else \"\"\r\n        question_id = self.question_id if self.question_id else \"\"\r\n        user_name = self.user_name if self.user_name else \"\"\r\n\r\n        # Validate email if provided\r\n        if user_email and not self.validate_email(user_email):\r\n            raise ValueError(f\"Invalid email address: {user_email}\")\r\n\r\n        langwatch.api_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lc3RhbXAiOjE3MjY2Njk3NTkyMjcsInJhbmQiOjAuMjg5OTc4Mjk4NzU2MzIzOTcsImlhdCI6MTcyNjY2OTc1OX0._ow7WQ5RSTlYE-HjdcouHUCoXf9nRnWHk4u9nfq4LIw'\r\n\r\n        trace = langwatch.trace(\r\n            metadata={\r\n                \"user_email\": user_email,\r\n                \"question_id\": question_id,\r\n                \"user_name\": user_name,\r\n            },\r\n            expected_output=ground_truth\r\n        )\r\n        \r\n        contexts = [item.text.replace(\"\\t\", \" \").replace(\"\\n\", \" \") for item in context_data[:5]] if context_data else []\r\n        rag_span = trace.span(type=\"rag\", name=\"LangWatch Evaluator\", input=question, contexts=contexts, output=answer)\r\n        rag_span.end()\r\n\r\n        trace.send_spans()\r\n\r\n        public_url = trace.share()\r\n        self.log(f\"See the trace at: {public_url}\")\r\n\r\n        self.status = Data(data={\"trace_url\": public_url})\r\n        return Data(data={\"trace_url\": public_url})\r\n        \r\n    def validate_email(self, email):\r\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\r\n        return re.match(pattern, email) is not None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "ground_truth": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ground_truth",
                "value": "",
                "display_name": "Correct Answer",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The expected correct answer.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "question": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "question",
                "value": "",
                "display_name": "Question",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The question to be evaluated.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "question_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "question_id",
                "value": "",
                "display_name": "Question ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The question ID for the trace metadata.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_email": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "user_email",
                "value": "",
                "display_name": "User Email",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The user email for the trace metadata.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "user_name",
                "value": "",
                "display_name": "Participant Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Full name for identification in the trace metadata.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Evaluates a question-answer pair using LangWatch and provides a trace URL.",
            "icon": "view",
            "base_classes": [
              "Data"
            ],
            "display_name": "Langwatch Evaluator",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "trace_url",
                "display_name": "Trace URL",
                "method": "evaluate",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "question",
              "answer",
              "ground_truth",
              "context_data",
              "user_email",
              "user_name",
              "question_id"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "LangWatchEvaluatorComponent-gPZln",
          "description": "Evaluates a question-answer pair using LangWatch and provides a trace URL.",
          "display_name": "Langwatch Evaluator"
        },
        "selected": false,
        "width": 384,
        "height": 550,
        "positionAbsolute": {
          "x": 238.5308642732698,
          "y": 2418.799178507102
        },
        "dragging": false
      },
      {
        "id": "ComposioAPI-eVVDu",
        "type": "genericNode",
        "position": {
          "x": -1708.1287716834595,
          "y": 1905.6582548691897
        },
        "data": {
          "type": "ComposioAPI",
          "node": {
            "template": {
              "_type": "Component",
              "action_names": {
                "trace_as_metadata": true,
                "options": [
                  "GITHUB_ACCEPT_A_REPOSITORY_INVITATION",
                  "GITHUB_ACTIVITY_LIST_STARGAZERS_FOR_REPO",
                  "GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER",
                  "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE",
                  "GITHUB_ADD_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION",
                  "GITHUB_ADD_A_SECURITY_MANAGER_TEAM",
                  "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET",
                  "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_ADD_LABELS_TO_AN_ISSUE",
                  "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS",
                  "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY",
                  "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS",
                  "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY",
                  "GITHUB_ADD_PROJECT_COLLABORATOR",
                  "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS",
                  "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                  "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET",
                  "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_STATUS_CHECK_CONTEXTS",
                  "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_ADD_TEAM_MEMBER_LEGACY",
                  "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                  "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_ADD_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST",
                  "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM",
                  "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER",
                  "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST",
                  "GITHUB_BLOCK_A_USER",
                  "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION",
                  "GITHUB_CANCEL_AN_IMPORT",
                  "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION",
                  "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_CANCEL_A_WORKFLOW_RUN",
                  "GITHUB_CHECK_A_TOKEN",
                  "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY",
                  "GITHUB_CHECK_IF_A_GIST_IS_STARRED",
                  "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED",
                  "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED",
                  "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE",
                  "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER",
                  "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION",
                  "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY",
                  "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS",
                  "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY",
                  "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY",
                  "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS",
                  "GITHUB_COMPARE_TWO_COMMITS",
                  "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG",
                  "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR",
                  "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_CREATE_AN_ISSUE",
                  "GITHUB_CREATE_AN_ISSUE_COMMENT",
                  "GITHUB_CREATE_AN_ORGANIZATION_INVITATION",
                  "GITHUB_CREATE_AN_ORGANIZATION_PROJECT",
                  "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY",
                  "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_CREATE_A_BLOB",
                  "GITHUB_CREATE_A_CHECK_RUN",
                  "GITHUB_CREATE_A_CHECK_SUITE",
                  "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY",
                  "GITHUB_CREATE_A_COMMIT",
                  "GITHUB_CREATE_A_COMMIT_COMMENT",
                  "GITHUB_CREATE_A_COMMIT_STATUS",
                  "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT",
                  "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_CREATE_A_DEPLOYMENT",
                  "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_CREATE_A_DEPLOYMENT_STATUS",
                  "GITHUB_CREATE_A_DEPLOY_KEY",
                  "GITHUB_CREATE_A_DISCUSSION",
                  "GITHUB_CREATE_A_DISCUSSION_COMMENT",
                  "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_CREATE_A_DISCUSSION_LEGACY",
                  "GITHUB_CREATE_A_FORK",
                  "GITHUB_CREATE_A_GIST",
                  "GITHUB_CREATE_A_GIST_COMMENT",
                  "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST",
                  "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_CREATE_A_GITHUB_PAGES_SITE",
                  "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_LABEL",
                  "GITHUB_CREATE_A_MILESTONE",
                  "GITHUB_CREATE_A_PROJECT_CARD",
                  "GITHUB_CREATE_A_PROJECT_COLUMN",
                  "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_REFERENCE",
                  "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_RELEASE",
                  "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT",
                  "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT",
                  "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE",
                  "GITHUB_CREATE_A_REPOSITORY_PROJECT",
                  "GITHUB_CREATE_A_REPOSITORY_RULESET",
                  "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
                  "GITHUB_CREATE_A_REPOSITORY_VARIABLE",
                  "GITHUB_CREATE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN",
                  "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_TAG_OBJECT",
                  "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_TEAM",
                  "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK",
                  "GITHUB_CREATE_A_TREE",
                  "GITHUB_CREATE_A_USER_PROJECT",
                  "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT",
                  "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT",
                  "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET",
                  "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET",
                  "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET",
                  "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS",
                  "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE",
                  "GITHUB_CREATE_REACTION_FOR_AN_ISSUE",
                  "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT",
                  "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT",
                  "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                  "GITHUB_CREATE_REACTION_FOR_A_RELEASE",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY",
                  "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM",
                  "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER",
                  "GITHUB_DECLINE_A_REPOSITORY_INVITATION",
                  "GITHUB_DELETE_ACCESS_RESTRICTIONS",
                  "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_DELETE_AN_APP_AUTHORIZATION",
                  "GITHUB_DELETE_AN_APP_TOKEN",
                  "GITHUB_DELETE_AN_ARTIFACT",
                  "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY",
                  "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_AN_ENVIRONMENT",
                  "GITHUB_DELETE_AN_ENVIRONMENT_SECRET",
                  "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_DELETE_AN_ISSUE_COMMENT",
                  "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION",
                  "GITHUB_DELETE_AN_ISSUE_REACTION",
                  "GITHUB_DELETE_AN_ORGANIZATION",
                  "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                  "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_DELETE_AN_ORGANIZATION_SECRET",
                  "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION",
                  "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY",
                  "GITHUB_DELETE_A_COMMIT_COMMENT",
                  "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION",
                  "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_DELETE_A_DEPLOYMENT",
                  "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_DELETE_A_DEPLOY_KEY",
                  "GITHUB_DELETE_A_DISCUSSION",
                  "GITHUB_DELETE_A_DISCUSSION_COMMENT",
                  "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_DELETE_A_DISCUSSION_LEGACY",
                  "GITHUB_DELETE_A_FILE",
                  "GITHUB_DELETE_A_GIST",
                  "GITHUB_DELETE_A_GIST_COMMENT",
                  "GITHUB_DELETE_A_GITHUB_PAGES_SITE",
                  "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_LABEL",
                  "GITHUB_DELETE_A_MILESTONE",
                  "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_PACKAGE_FOR_A_USER",
                  "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_DELETE_A_PROJECT",
                  "GITHUB_DELETE_A_PROJECT_CARD",
                  "GITHUB_DELETE_A_PROJECT_COLUMN",
                  "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION",
                  "GITHUB_DELETE_A_REFERENCE",
                  "GITHUB_DELETE_A_RELEASE",
                  "GITHUB_DELETE_A_RELEASE_ASSET",
                  "GITHUB_DELETE_A_RELEASE_REACTION",
                  "GITHUB_DELETE_A_REPOSITORY",
                  "GITHUB_DELETE_A_REPOSITORY_INVITATION",
                  "GITHUB_DELETE_A_REPOSITORY_RULESET",
                  "GITHUB_DELETE_A_REPOSITORY_SECRET",
                  "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_DELETE_A_REPOSITORY_VARIABLE",
                  "GITHUB_DELETE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY",
                  "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_A_TEAM",
                  "GITHUB_DELETE_A_TEAM_LEGACY",
                  "GITHUB_DELETE_A_THREAD_SUBSCRIPTION",
                  "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE",
                  "GITHUB_DELETE_A_WORKFLOW_RUN",
                  "GITHUB_DELETE_BRANCH_PROTECTION",
                  "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME",
                  "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID",
                  "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME",
                  "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION",
                  "GITHUB_DELETE_TEAM_DISCUSSION_REACTION",
                  "GITHUB_DELETE_WORKFLOW_RUN_LOGS",
                  "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES",
                  "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT",
                  "GITHUB_DISABLE_A_WORKFLOW",
                  "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                  "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG",
                  "GITHUB_DISABLE_VULNERABILITY_ALERTS",
                  "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_DOWNLOAD_AN_ARTIFACT",
                  "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                  "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR",
                  "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP",
                  "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE",
                  "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS",
                  "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS",
                  "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES",
                  "GITHUB_ENABLE_A_WORKFLOW",
                  "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES",
                  "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION",
                  "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                  "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS",
                  "GITHUB_ENABLE_VULNERABILITY_ALERTS",
                  "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET",
                  "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET",
                  "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY",
                  "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY",
                  "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                  "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION",
                  "GITHUB_FOLLOW_A_USER",
                  "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN",
                  "GITHUB_FORK_A_GIST",
                  "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE",
                  "GITHUB_GET_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                  "GITHUB_GET_ALL_API_VERSIONS",
                  "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY",
                  "GITHUB_GET_ALL_CODES_OF_CONDUCT",
                  "GITHUB_GET_ALL_COMMONLY_USED_LICENSES",
                  "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY",
                  "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                  "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT",
                  "GITHUB_GET_ALL_GITIGNORE_TEMPLATES",
                  "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS",
                  "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_ALL_REPOSITORY_RULESETS",
                  "GITHUB_GET_ALL_REPOSITORY_TOPICS",
                  "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS",
                  "GITHUB_GET_AN_APP",
                  "GITHUB_GET_AN_ARTIFACT",
                  "GITHUB_GET_AN_ASSIGNMENT",
                  "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY",
                  "GITHUB_GET_AN_ENVIRONMENT",
                  "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY",
                  "GITHUB_GET_AN_ENVIRONMENT_SECRET",
                  "GITHUB_GET_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_GET_AN_IMPORT_STATUS",
                  "GITHUB_GET_AN_ISSUE",
                  "GITHUB_GET_AN_ISSUE_COMMENT",
                  "GITHUB_GET_AN_ISSUE_EVENT",
                  "GITHUB_GET_AN_ORGANIZATION",
                  "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS",
                  "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY",
                  "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_GET_AN_ORGANIZATION_ROLE",
                  "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE",
                  "GITHUB_GET_AN_ORGANIZATION_SECRET",
                  "GITHUB_GET_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_GET_ASSIGNMENT_GRADES",
                  "GITHUB_GET_A_BLOB",
                  "GITHUB_GET_A_BRANCH",
                  "GITHUB_GET_A_CHECK_RUN",
                  "GITHUB_GET_A_CHECK_SUITE",
                  "GITHUB_GET_A_CLASSROOM",
                  "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_CODE_OF_CONDUCT",
                  "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_CODE_SCANNING_ALERT",
                  "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                  "GITHUB_GET_A_COMMIT",
                  "GITHUB_GET_A_COMMIT_COMMENT",
                  "GITHUB_GET_A_COMMIT_OBJECT",
                  "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE",
                  "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_GET_A_DEPENDABOT_ALERT",
                  "GITHUB_GET_A_DEPLOYMENT",
                  "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_GET_A_DEPLOYMENT_STATUS",
                  "GITHUB_GET_A_DEPLOY_KEY",
                  "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS",
                  "GITHUB_GET_A_DISCUSSION",
                  "GITHUB_GET_A_DISCUSSION_COMMENT",
                  "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_GET_A_DISCUSSION_LEGACY",
                  "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES",
                  "GITHUB_GET_A_GIST",
                  "GITHUB_GET_A_GIST_COMMENT",
                  "GITHUB_GET_A_GIST_REVISION",
                  "GITHUB_GET_A_GITHUB_PAGES_SITE",
                  "GITHUB_GET_A_GITIGNORE_TEMPLATE",
                  "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY",
                  "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN",
                  "GITHUB_GET_A_LABEL",
                  "GITHUB_GET_A_LICENSE",
                  "GITHUB_GET_A_MILESTONE",
                  "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_A_PACKAGE_FOR_A_USER",
                  "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_PROJECT",
                  "GITHUB_GET_A_PROJECT_CARD",
                  "GITHUB_GET_A_PROJECT_COLUMN",
                  "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_PULL_REQUEST",
                  "GITHUB_GET_A_REFERENCE",
                  "GITHUB_GET_A_RELEASE",
                  "GITHUB_GET_A_RELEASE_ASSET",
                  "GITHUB_GET_A_RELEASE_BY_TAG_NAME",
                  "GITHUB_GET_A_REPOSITORY",
                  "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY",
                  "GITHUB_GET_A_REPOSITORY_README",
                  "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY",
                  "GITHUB_GET_A_REPOSITORY_RULESET",
                  "GITHUB_GET_A_REPOSITORY_RULE_SUITE",
                  "GITHUB_GET_A_REPOSITORY_SECRET",
                  "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_GET_A_REPOSITORY_VARIABLE",
                  "GITHUB_GET_A_REPOSITORY_WEBHOOK",
                  "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_SECRET_SCANNING_ALERT",
                  "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_TAG",
                  "GITHUB_GET_A_TEAM_BY_NAME",
                  "GITHUB_GET_A_TEAM_LEGACY",
                  "GITHUB_GET_A_THREAD",
                  "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_TREE",
                  "GITHUB_GET_A_USER",
                  "GITHUB_GET_A_USER_MIGRATION_STATUS",
                  "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_GET_A_WORKFLOW",
                  "GITHUB_GET_A_WORKFLOW_RUN",
                  "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT",
                  "GITHUB_GET_BRANCH_PROTECTION",
                  "GITHUB_GET_COMMIT_AUTHORS",
                  "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_GET_COMMUNITY_PROFILE_METRICS",
                  "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER",
                  "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER",
                  "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE",
                  "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT",
                  "GITHUB_GET_EMOJIS",
                  "GITHUB_GET_FEEDS",
                  "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER",
                  "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY",
                  "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_GITHUB_META_INFORMATION",
                  "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER",
                  "GITHUB_GET_GITHUB_PAGES_BUILD",
                  "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_GET_LARGE_FILES",
                  "GITHUB_GET_LATEST_PAGES_BUILD",
                  "GITHUB_GET_OCTOCAT",
                  "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY",
                  "GITHUB_GET_PAGE_VIEWS",
                  "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER",
                  "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                  "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_REPOSITORY_CLONES",
                  "GITHUB_GET_REPOSITORY_CONTENT",
                  "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER",
                  "GITHUB_GET_REPOSITORY_SECRET_SECURELY",
                  "GITHUB_GET_REPO_DEV_ENV_SECRET",
                  "GITHUB_GET_RULES_FOR_A_BRANCH",
                  "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER",
                  "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION",
                  "GITHUB_GET_STATUS_CHECKS_PROTECTION",
                  "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_GET_TEAM_MEMBER_LEGACY",
                  "GITHUB_GET_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE",
                  "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY",
                  "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY",
                  "GITHUB_GET_THE_LATEST_RELEASE",
                  "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                  "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY",
                  "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN",
                  "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY",
                  "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT",
                  "GITHUB_GET_THE_ZEN_OF_GITHUB",
                  "GITHUB_GET_TOP_REFERRAL_PATHS",
                  "GITHUB_GET_TOP_REFERRAL_SOURCES",
                  "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_GET_WORKFLOW_RUN_USAGE",
                  "GITHUB_GET_WORKFLOW_USAGE",
                  "GITHUB_GITHUB_API_ROOT",
                  "GITHUB_ISSUES_LIST_FOR_REPO",
                  "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT",
                  "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                  "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ASSIGNEES",
                  "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM",
                  "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_BRANCHES",
                  "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT",
                  "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE",
                  "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE",
                  "GITHUB_LIST_CHECK_RUN_ANNOTATIONS",
                  "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE",
                  "GITHUB_LIST_CHILD_TEAMS",
                  "GITHUB_LIST_CHILD_TEAMS_LEGACY",
                  "GITHUB_LIST_CLASSROOMS",
                  "GITHUB_LIST_CODEOWNERS_ERRORS",
                  "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION",
                  "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION",
                  "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW",
                  "GITHUB_LIST_COMMITS",
                  "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST",
                  "GITHUB_LIST_COMMIT_COMMENTS",
                  "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE",
                  "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES",
                  "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_DEPLOYMENTS",
                  "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES",
                  "GITHUB_LIST_DEPLOYMENT_STATUSES",
                  "GITHUB_LIST_DEPLOY_KEYS",
                  "GITHUB_LIST_DISCUSSIONS",
                  "GITHUB_LIST_DISCUSSIONS_LEGACY",
                  "GITHUB_LIST_DISCUSSION_COMMENTS",
                  "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY",
                  "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS",
                  "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ENVIRONMENTS",
                  "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES",
                  "GITHUB_LIST_ENVIRONMENT_SECRETS",
                  "GITHUB_LIST_ENVIRONMENT_VARIABLES",
                  "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS",
                  "GITHUB_LIST_FOLLOWERS_OF_A_USER",
                  "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_FORKS",
                  "GITHUB_LIST_GISTS_FOR_A_USER",
                  "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_GIST_COMMENTS",
                  "GITHUB_LIST_GIST_COMMITS",
                  "GITHUB_LIST_GIST_FORKS",
                  "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_GITHUB_PAGES_BUILDS",
                  "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES",
                  "GITHUB_LIST_GPG_KEYS_FOR_A_USER",
                  "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP",
                  "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT",
                  "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ISSUE_COMMENTS",
                  "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ISSUE_EVENTS",
                  "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT",
                  "GITHUB_LIST_LABELS_FOR_AN_ISSUE",
                  "GITHUB_LIST_LABELS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE",
                  "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT",
                  "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE",
                  "GITHUB_LIST_MATCHING_REFERENCES",
                  "GITHUB_LIST_MILESTONES",
                  "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORGANIZATIONS",
                  "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER",
                  "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS",
                  "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORGANIZATION_MEMBERS",
                  "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORGANIZATION_MIGRATIONS",
                  "GITHUB_LIST_ORGANIZATION_PROJECTS",
                  "GITHUB_LIST_ORGANIZATION_REPOSITORIES",
                  "GITHUB_LIST_ORGANIZATION_RULE_SUITES",
                  "GITHUB_LIST_ORGANIZATION_SECRETS",
                  "GITHUB_LIST_ORGANIZATION_VARIABLES",
                  "GITHUB_LIST_ORGANIZATION_WEBHOOKS",
                  "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS",
                  "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED",
                  "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS",
                  "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS",
                  "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES",
                  "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_OWNED_PACKAGE_VERSIONS",
                  "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_PACKAGES_FOR_A_USER",
                  "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE",
                  "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION",
                  "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER",
                  "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS",
                  "GITHUB_LIST_PENDING_TEAM_INVITATIONS",
                  "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY",
                  "GITHUB_LIST_PROJECT_CARDS",
                  "GITHUB_LIST_PROJECT_COLLABORATORS",
                  "GITHUB_LIST_PROJECT_COLUMNS",
                  "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PUBLIC_EVENTS",
                  "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES",
                  "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER",
                  "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER",
                  "GITHUB_LIST_PUBLIC_GISTS",
                  "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER",
                  "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS",
                  "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS",
                  "GITHUB_LIST_PUBLIC_REPOSITORIES",
                  "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PULL_REQUESTS",
                  "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT",
                  "GITHUB_LIST_PULL_REQUESTS_FILES",
                  "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE",
                  "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT",
                  "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT",
                  "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                  "GITHUB_LIST_REACTIONS_FOR_A_RELEASE",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY",
                  "GITHUB_LIST_RELEASES",
                  "GITHUB_LIST_RELEASE_ASSETS",
                  "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION",
                  "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                  "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
                  "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION",
                  "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION",
                  "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER",
                  "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER",
                  "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_REPOSITORY_ACTIVITIES",
                  "GITHUB_LIST_REPOSITORY_COLLABORATORS",
                  "GITHUB_LIST_REPOSITORY_CONTRIBUTORS",
                  "GITHUB_LIST_REPOSITORY_EVENTS",
                  "GITHUB_LIST_REPOSITORY_INVITATIONS",
                  "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_REPOSITORY_ISSUES",
                  "GITHUB_LIST_REPOSITORY_LANGUAGES",
                  "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS",
                  "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES",
                  "GITHUB_LIST_REPOSITORY_PROJECTS",
                  "GITHUB_LIST_REPOSITORY_RULE_SUITES",
                  "GITHUB_LIST_REPOSITORY_SECRETS",
                  "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING",
                  "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES",
                  "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_TAGS",
                  "GITHUB_LIST_REPOSITORY_TEAMS",
                  "GITHUB_LIST_REPOSITORY_VARIABLES",
                  "GITHUB_LIST_REPOSITORY_WEBHOOKS",
                  "GITHUB_LIST_REPOSITORY_WORKFLOWS",
                  "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE",
                  "GITHUB_LIST_REPO_ACCESS_BY_TOKEN",
                  "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER",
                  "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES",
                  "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST",
                  "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY",
                  "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST",
                  "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_SECURITY_MANAGER_TEAMS",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                  "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS",
                  "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER",
                  "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER",
                  "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_STARGAZERS",
                  "GITHUB_LIST_STARRED_GISTS",
                  "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED",
                  "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_TEAMS",
                  "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                  "GITHUB_LIST_TEAM_MEMBERS",
                  "GITHUB_LIST_TEAM_MEMBERS_LEGACY",
                  "GITHUB_LIST_TEAM_PROJECTS",
                  "GITHUB_LIST_TEAM_PROJECTS_LEGACY",
                  "GITHUB_LIST_TEAM_REPOSITORIES",
                  "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY",
                  "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS",
                  "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS",
                  "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE",
                  "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES",
                  "GITHUB_LIST_USERS",
                  "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION",
                  "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                  "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_USER_MIGRATIONS",
                  "GITHUB_LIST_USER_PROJECTS",
                  "GITHUB_LIST_WATCHERS",
                  "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW",
                  "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS",
                  "GITHUB_LOCK_AN_ISSUE",
                  "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES",
                  "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS",
                  "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS",
                  "GITHUB_MAP_A_COMMIT_AUTHOR",
                  "GITHUB_MARK_A_THREAD_AS_DONE",
                  "GITHUB_MARK_A_THREAD_AS_READ",
                  "GITHUB_MARK_NOTIFICATIONS_AS_READ",
                  "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ",
                  "GITHUB_MERGE_A_BRANCH",
                  "GITHUB_MERGE_A_PULL_REQUEST",
                  "GITHUB_META_ROOT",
                  "GITHUB_MOVE_A_PROJECT_CARD",
                  "GITHUB_MOVE_A_PROJECT_COLUMN",
                  "GITHUB_PING_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_PING_A_REPOSITORY_WEBHOOK",
                  "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY",
                  "GITHUB_PULLS_CREATE",
                  "GITHUB_PULLS_CREATE_REVIEW",
                  "GITHUB_PULLS_CREATE_REVIEW_COMMENT",
                  "GITHUB_PULLS_LIST",
                  "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE",
                  "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM",
                  "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER",
                  "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER",
                  "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM",
                  "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER",
                  "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE",
                  "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE",
                  "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM",
                  "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY",
                  "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY",
                  "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM",
                  "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET",
                  "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER",
                  "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER",
                  "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME",
                  "GITHUB_REMOVE_ORG_SECRET_BY_NAME",
                  "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION",
                  "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP",
                  "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET",
                  "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                  "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST",
                  "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET",
                  "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS",
                  "GITHUB_REMOVE_STATUS_CHECK_PROTECTION",
                  "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_REMOVE_TEAM_MEMBER_LEGACY",
                  "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                  "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_REMOVE_USER_AS_A_COLLABORATOR",
                  "GITHUB_RENAME_A_BRANCH",
                  "GITHUB_RENDER_A_MARKDOWN_DOCUMENT",
                  "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS",
                  "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED",
                  "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET",
                  "GITHUB_REPO_S_CREATE_FOR_AUTHENTICATED_USER",
                  "GITHUB_REPO_S_GET_COMMIT",
                  "GITHUB_REPO_S_GET_CONTENT",
                  "GITHUB_REPO_S_LIST_FOR_ORG",
                  "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD",
                  "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST",
                  "GITHUB_REREQUEST_A_CHECK_RUN",
                  "GITHUB_REREQUEST_A_CHECK_SUITE",
                  "GITHUB_RESET_A_TOKEN",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION",
                  "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN",
                  "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN",
                  "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS",
                  "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN",
                  "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN",
                  "GITHUB_RE_RUN_A_WORKFLOW",
                  "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN",
                  "GITHUB_SEARCH_CODE",
                  "GITHUB_SEARCH_COMMITS",
                  "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS",
                  "GITHUB_SEARCH_LABELS",
                  "GITHUB_SEARCH_REPOSITORIES",
                  "GITHUB_SEARCH_REPO_S",
                  "GITHUB_SEARCH_TOPICS",
                  "GITHUB_SEARCH_USERS",
                  "GITHUB_SET_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                  "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                  "GITHUB_SET_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_SET_A_THREAD_SUBSCRIPTION",
                  "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_SET_LABELS_FOR_AN_ISSUE",
                  "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                  "GITHUB_SET_STATUS_CHECK_CONTEXTS",
                  "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                  "GITHUB_SET_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_START_AN_IMPORT",
                  "GITHUB_START_AN_ORGANIZATION_MIGRATION",
                  "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_START_A_USER_MIGRATION",
                  "GITHUB_STAR_A_GIST",
                  "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER",
                  "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY",
                  "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK",
                  "GITHUB_TRANSFER_A_REPOSITORY",
                  "GITHUB_UNBLOCK_A_USER",
                  "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION",
                  "GITHUB_UNFOLLOW_A_USER",
                  "GITHUB_UNLOCK_AN_ISSUE",
                  "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY",
                  "GITHUB_UNLOCK_A_USER_REPOSITORY",
                  "GITHUB_UNSTAR_A_GIST",
                  "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD",
                  "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN",
                  "GITHUB_UPDATE_AN_IMPORT",
                  "GITHUB_UPDATE_AN_ISSUE",
                  "GITHUB_UPDATE_AN_ISSUE_COMMENT",
                  "GITHUB_UPDATE_AN_ORGANIZATION",
                  "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_UPDATE_A_CHECK_RUN",
                  "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_A_CODE_SCANNING_ALERT",
                  "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                  "GITHUB_UPDATE_A_COMMIT_COMMENT",
                  "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_UPDATE_A_DEPENDABOT_ALERT",
                  "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_UPDATE_A_DISCUSSION",
                  "GITHUB_UPDATE_A_DISCUSSION_COMMENT",
                  "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_UPDATE_A_DISCUSSION_LEGACY",
                  "GITHUB_UPDATE_A_GIST",
                  "GITHUB_UPDATE_A_GIST_COMMENT",
                  "GITHUB_UPDATE_A_LABEL",
                  "GITHUB_UPDATE_A_MILESTONE",
                  "GITHUB_UPDATE_A_PROJECT",
                  "GITHUB_UPDATE_A_PULL_REQUEST",
                  "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH",
                  "GITHUB_UPDATE_A_REFERENCE",
                  "GITHUB_UPDATE_A_RELEASE",
                  "GITHUB_UPDATE_A_RELEASE_ASSET",
                  "GITHUB_UPDATE_A_REPOSITORY",
                  "GITHUB_UPDATE_A_REPOSITORY_INVITATION",
                  "GITHUB_UPDATE_A_REPOSITORY_RULESET",
                  "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_UPDATE_A_REPOSITORY_VARIABLE",
                  "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT",
                  "GITHUB_UPDATE_A_TEAM",
                  "GITHUB_UPDATE_A_TEAM_LEGACY",
                  "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                  "GITHUB_UPDATE_BRANCH_PROTECTION",
                  "GITHUB_UPDATE_GIT_LFS_PREFERENCE",
                  "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE",
                  "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES",
                  "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS",
                  "GITHUB_UPDATE_STATUS_CHECK_PROTECTION",
                  "GITHUB_UPDATE_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_TOKEN_ORG_ACCESS",
                  "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA",
                  "GITHUB_USERS_GET_AUTHENTICATED",
                  "GITHUB_USERS_GET_BY_USERNAME",
                  "GITHUB_USERS_LIST_PUBLIC_EMAILS_FOR_AUTHENTICATED_USER",
                  "GITHUB_USERS_LIST_SOCIAL_ACCOUNTS_FOR_USER",
                  "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED"
                ],
                "combobox": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "action_names",
                "value": [
                  "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS"
                ],
                "display_name": "Actions to use",
                "advanced": false,
                "dynamic": false,
                "info": "The actions to pass to agent to execute",
                "title_case": false,
                "type": "str",
                "_input_type": "MultiselectInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key",
                "refresh_button": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "app_names": {
                "trace_as_metadata": true,
                "options": [
                  "APALEO",
                  "APIFY",
                  "ASANA",
                  "ATTIO",
                  "BITBUCKET",
                  "BREVO",
                  "BROWSERBASE_TOOL",
                  "BROWSER_TOOL",
                  "CLICKUP",
                  "CODEINTERPRETER",
                  "CODE_FORMAT_TOOL",
                  "CODE_GREP_TOOL",
                  "CODE_INDEX_TOOL",
                  "CODE_MAP_TOOL",
                  "COMPOSIO",
                  "DISCORD",
                  "DROPBOX",
                  "ELEVENLABS",
                  "EMBED_TOOL",
                  "EXA",
                  "FIGMA",
                  "FILETOOL",
                  "FIRECRAWL",
                  "GIT",
                  "GITHUB",
                  "GITLAB",
                  "GMAIL",
                  "GOOGLECALENDAR",
                  "GOOGLEDOCS",
                  "GOOGLEDRIVE",
                  "GOOGLEMEET",
                  "GOOGLESHEETS",
                  "GOOGLETASKS",
                  "GREPTILE",
                  "HACKERNEWS",
                  "HEROKU",
                  "HISTORY_FETCHER",
                  "HUBSPOT",
                  "IMAGE_ANALYSER",
                  "INDUCED_AI",
                  "JIRA",
                  "KLAVIYO",
                  "LINEAR",
                  "LISTENNOTES",
                  "MATHEMATICAL",
                  "MULTIONAI",
                  "NASA",
                  "NOTION",
                  "OKTA",
                  "PAGERDUTY",
                  "PERPLEXITYAI",
                  "PIPEDRIVE",
                  "POSTHOG",
                  "RAGTOOL",
                  "SCHEDULER",
                  "SERPAPI",
                  "SHELLTOOL",
                  "SLACK",
                  "SLACKBOT",
                  "SNOWFLAKE",
                  "SOUNDCLOUD",
                  "SPIDERTOOL",
                  "SPLITWISE",
                  "SPOTIFY",
                  "SQLTOOL",
                  "STRAVA",
                  "TASKADE",
                  "TAVILY",
                  "TRELLO",
                  "TWILIO",
                  "TWITTER",
                  "TYPEFORM",
                  "WEATHERMAP",
                  "WEBTOOL",
                  "WHATSAPP",
                  "WORKABLE",
                  "WORKSPACE_TOOL",
                  "YOUSEARCH",
                  "YOUTUBE",
                  "ZENDESK",
                  "ZEPTOOL",
                  "ZOOM"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "app_names",
                "value": "GITHUB",
                "display_name": "App Name",
                "advanced": false,
                "dynamic": false,
                "info": "The app name to use. Please refresh after selecting app name",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "auth_status_config": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "auth_status_config",
                "value": "GITHUB CONNECTED",
                "display_name": "Auth status",
                "advanced": false,
                "dynamic": false,
                "info": "Open link or enter api key. Then refresh button",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "entity_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "entity_id",
                "value": "default",
                "display_name": "Entity ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Use Composio toolset to run actions with your agent",
            "icon": "Composio",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "Composio Tools",
            "documentation": "https://docs.composio.dev",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "entity_id",
              "api_key",
              "app_names",
              "action_names",
              "auth_status_config"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ComposioAPI-eVVDu"
        },
        "selected": false,
        "width": 384,
        "height": 633,
        "positionAbsolute": {
          "x": -1708.1287716834595,
          "y": 1905.6582548691897
        },
        "dragging": false
      },
      {
        "id": "OpenAIEmbeddings-lPBSd",
        "type": "genericNode",
        "position": {
          "x": -3542.2793722220995,
          "y": 1152.3593439974807
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "client": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "client",
                "value": "",
                "display_name": "Client",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_headers": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_headers",
                "value": {},
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "default_query": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_query",
                "value": {},
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "deployment": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "deployment",
                "value": "",
                "display_name": "Deployment",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "dimensions": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "dimensions",
                "value": "",
                "display_name": "Dimensions",
                "advanced": true,
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "embedding_ctx_length": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_ctx_length",
                "value": 1536,
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 3,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "text-embedding-3-small",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "openai_api_base": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_type": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_type",
                "value": "",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_version": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_version",
                "value": "",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_organization": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_organization",
                "value": "",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_proxy": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_proxy",
                "value": "",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "request_timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "request_timeout",
                "value": "",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "show_progress_bar": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "show_progress_bar",
                "value": false,
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "skip_empty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "skip_empty",
                "value": false,
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_enable": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_enable",
                "value": true,
                "display_name": "TikToken Enable",
                "advanced": true,
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_model_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_model_name",
                "value": "",
                "display_name": "TikToken Model Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Generate embeddings using OpenAI models.",
            "icon": "OpenAI",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "default_headers",
              "default_query",
              "chunk_size",
              "client",
              "deployment",
              "embedding_ctx_length",
              "max_retries",
              "model",
              "model_kwargs",
              "openai_api_base",
              "openai_api_key",
              "openai_api_type",
              "openai_api_version",
              "openai_organization",
              "openai_proxy",
              "request_timeout",
              "show_progress_bar",
              "skip_empty",
              "tiktoken_model_name",
              "tiktoken_enable",
              "dimensions"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "OpenAIEmbeddings-lPBSd"
        },
        "selected": false,
        "width": 384,
        "height": 388,
        "dragging": false,
        "positionAbsolute": {
          "x": -3542.2793722220995,
          "y": 1152.3593439974807
        }
      },
      {
        "id": "Directory-IVxiV",
        "type": "genericNode",
        "position": {
          "x": -3547.5184323158346,
          "y": 1562.553098166891
        },
        "data": {
          "type": "Directory",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\nimport os\nimport logging  \nfrom axiestudio.base.data.utils import parallel_load_data, parse_text_file_to_data, retrieve_file_paths\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, IntInput, MessageTextInput\nfrom axiestudio.schema import Data\nfrom axiestudio.template import Output\n\n\nclass DirectoryComponent(Component):\n    display_name = \"Directory\"\n    description = \"Recursively load files from a directory.\"\n    icon = \"folder\"\n    name = \"Directory\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"path\",\n            display_name=\"Path\",\n            info=\"Path to the directory to load files from.\",\n        ),\n        MessageTextInput(\n            name=\"types\",\n            display_name=\"Types\",\n            info=\"File types to load. Leave empty to load all types.\",\n            is_list=True,\n        ),\n        IntInput(\n            name=\"depth\",\n            display_name=\"Depth\",\n            info=\"Depth to search for files.\",\n            value=0,\n        ),\n        IntInput(\n            name=\"max_concurrency\",\n            display_name=\"Max Concurrency\",\n            advanced=True,\n            info=\"Maximum concurrency for loading files.\",\n            value=2,\n        ),\n        BoolInput(\n            name=\"load_hidden\",\n            display_name=\"Load Hidden\",\n            advanced=True,\n            info=\"If true, hidden files will be loaded.\",\n        ),\n        BoolInput(\n            name=\"recursive\",\n            display_name=\"Recursive\",\n            advanced=True,\n            info=\"If true, the search will be recursive.\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"Use Multithreading\",\n            advanced=True,\n            info=\"If true, multithreading will be used.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_directory\"),\n    ]\n\n    def load_directory(self) -> List[Data]:\n        path = self.path\n        types = self.types or []  # self.types is already a list due to is_list=True\n        depth = self.depth\n        max_concurrency = self.max_concurrency\n        load_hidden = self.load_hidden\n        recursive = self.recursive\n        silent_errors = self.silent_errors\n        use_multithreading = self.use_multithreading\n\n        resolved_path = self.resolve_path(path)\n        file_paths = retrieve_file_paths(resolved_path, load_hidden, recursive, depth)\n\n        if types:\n            file_paths = [fp for fp in file_paths if any(fp.endswith(ext) for ext in types)]\n\n        loaded_data = []\n\n        if use_multithreading:\n            loaded_data = parallel_load_data(file_paths, silent_errors, max_concurrency)\n        else:\n            loaded_data = [self.process_markdown_file(file_path) for file_path in file_paths]\n        loaded_data = self._docs_to_data(loaded_data) #list(filter(None, loaded_data))\n        self.status = loaded_data\n        return loaded_data  # type: ignore\n        \n    def process_markdown_file(self, file_path: str) -> dict:\n            logging.info(f\"Processing file: {file_path}\")\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    content = file.read()\n                \n                title = os.path.basename(file_path).rsplit('.', 1)[0]\n                \n                logging.info(f\"Successfully processed {title}\")\n                return {\n                    \"title\": title,\n                    \"content\": content\n                }\n            except IOError as e:\n                logging.error(f\"Error processing file {file_path}: {str(e)}\")\n                return None\n                \n    def _docs_to_data(self, docs):\n        return [Data(text=doc[\"content\"], data={\"title\": doc[\"title\"]}) for doc in docs]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "depth": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "depth",
                "value": 0,
                "display_name": "Depth",
                "advanced": false,
                "dynamic": false,
                "info": "Depth to search for files.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "load_hidden": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "load_hidden",
                "value": false,
                "display_name": "Load Hidden",
                "advanced": true,
                "dynamic": false,
                "info": "If true, hidden files will be loaded.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_concurrency": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_concurrency",
                "value": 2,
                "display_name": "Max Concurrency",
                "advanced": true,
                "dynamic": false,
                "info": "Maximum concurrency for loading files.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "path": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "path",
                "value": "/Users/mohammed.ahmed/Documents/Langflow/Challenge-1/docs",
                "display_name": "Path",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Path to the directory to load files from.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "recursive": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "recursive",
                "value": false,
                "display_name": "Recursive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the search will be recursive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "types": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "types",
                "value": [
                  ""
                ],
                "display_name": "Types",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "File types to load. Leave empty to load all types.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "use_multithreading": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "use_multithreading",
                "value": false,
                "display_name": "Use Multithreading",
                "advanced": true,
                "dynamic": false,
                "info": "If true, multithreading will be used.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Recursively load files from a directory.",
            "icon": "folder",
            "base_classes": [
              "Data"
            ],
            "display_name": "Directory",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_directory",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "types",
              "depth",
              "max_concurrency",
              "load_hidden",
              "recursive",
              "silent_errors",
              "use_multithreading"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "Directory-IVxiV"
        },
        "selected": false,
        "width": 384,
        "height": 474,
        "dragging": false,
        "positionAbsolute": {
          "x": -3547.5184323158346,
          "y": 1562.553098166891
        }
      },
      {
        "id": "ComposioAPI-aSkKs",
        "type": "genericNode",
        "position": {
          "x": -1690.7431711579475,
          "y": 3183.1580001215657
        },
        "data": {
          "type": "ComposioAPI",
          "node": {
            "template": {
              "_type": "Component",
              "action_names": {
                "trace_as_metadata": true,
                "options": [
                  "FIRECRAWL_CHECK_CRAWL_STATUS",
                  "FIRECRAWL_CRAWL",
                  "FIRECRAWL_EXTRACT",
                  "FIRECRAWL_SCRAPE",
                  "FIRECRAWL_SEARCH"
                ],
                "combobox": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "action_names",
                "value": [
                  "FIRECRAWL_SCRAPE"
                ],
                "display_name": "Actions to use",
                "advanced": false,
                "dynamic": false,
                "info": "The actions to pass to agent to execute",
                "title_case": false,
                "type": "str",
                "_input_type": "MultiselectInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key",
                "refresh_button": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "app_names": {
                "trace_as_metadata": true,
                "options": [
                  "APALEO",
                  "APIFY",
                  "ASANA",
                  "ATTIO",
                  "BITBUCKET",
                  "BREVO",
                  "BROWSERBASE_TOOL",
                  "BROWSER_TOOL",
                  "CLICKUP",
                  "CODEINTERPRETER",
                  "CODE_FORMAT_TOOL",
                  "CODE_GREP_TOOL",
                  "CODE_INDEX_TOOL",
                  "CODE_MAP_TOOL",
                  "COMPOSIO",
                  "DISCORD",
                  "DROPBOX",
                  "ELEVENLABS",
                  "EMBED_TOOL",
                  "EXA",
                  "FIGMA",
                  "FILETOOL",
                  "FIRECRAWL",
                  "GIT",
                  "GITHUB",
                  "GITLAB",
                  "GMAIL",
                  "GOOGLECALENDAR",
                  "GOOGLEDOCS",
                  "GOOGLEDRIVE",
                  "GOOGLEMEET",
                  "GOOGLESHEETS",
                  "GOOGLETASKS",
                  "GREPTILE",
                  "HACKERNEWS",
                  "HEROKU",
                  "HISTORY_FETCHER",
                  "HUBSPOT",
                  "IMAGE_ANALYSER",
                  "INDUCED_AI",
                  "JIRA",
                  "KLAVIYO",
                  "LINEAR",
                  "LISTENNOTES",
                  "MATHEMATICAL",
                  "MULTIONAI",
                  "NASA",
                  "NOTION",
                  "OKTA",
                  "PAGERDUTY",
                  "PERPLEXITYAI",
                  "PIPEDRIVE",
                  "POSTHOG",
                  "RAGTOOL",
                  "SCHEDULER",
                  "SERPAPI",
                  "SHELLTOOL",
                  "SLACK",
                  "SLACKBOT",
                  "SNOWFLAKE",
                  "SOUNDCLOUD",
                  "SPIDERTOOL",
                  "SPLITWISE",
                  "SPOTIFY",
                  "SQLTOOL",
                  "STRAVA",
                  "TASKADE",
                  "TAVILY",
                  "TRELLO",
                  "TWILIO",
                  "TWITTER",
                  "TYPEFORM",
                  "WEATHERMAP",
                  "WEBTOOL",
                  "WHATSAPP",
                  "WORKABLE",
                  "WORKSPACE_TOOL",
                  "YOUSEARCH",
                  "YOUTUBE",
                  "ZENDESK",
                  "ZEPTOOL",
                  "ZOOM"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "app_names",
                "value": "FIRECRAWL",
                "display_name": "App Name",
                "advanced": false,
                "dynamic": false,
                "info": "The app name to use. Please refresh after selecting app name",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "auth_status_config": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "auth_status_config",
                "value": "FIRECRAWL CONNECTED",
                "display_name": "Auth status",
                "advanced": false,
                "dynamic": false,
                "info": "Open link or enter api key. Then refresh button",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "entity_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "entity_id",
                "value": "default",
                "display_name": "Entity ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Use Composio toolset to run actions with your agent",
            "icon": "Composio",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "Composio Tools",
            "documentation": "https://docs.composio.dev",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "entity_id",
              "api_key",
              "app_names",
              "action_names",
              "auth_status_config"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ComposioAPI-aSkKs"
        },
        "selected": false,
        "width": 384,
        "height": 633,
        "positionAbsolute": {
          "x": -1690.7431711579475,
          "y": 3183.1580001215657
        },
        "dragging": false
      },
      {
        "id": "CrewAIWithCustomSearchComponent-08mqQ",
        "type": "genericNode",
        "position": {
          "x": -787.3639903392773,
          "y": 2439.817091363844
        },
        "data": {
          "type": "CrewAIWithCustomSearchComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "Language model that will run the agent.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": [],
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "Tools at agent's disposal",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from crewai import Agent, Task, Crew, Process\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, HandleInput, SecretStrInput, IntInput\nfrom typing import Any, List\nimport traceback\nfrom axiestudio.base.agents.crewai.crew import BaseCrewComponent\n\nclass CrewAIWithCustomSearchComponent(BaseCrewComponent):\n    display_name = \"CrewAI Workflow with Custom Search\"\n    description = \"Executes a CrewAI workflow with a custom search capability.\"\n    documentation = \"https://docs.crewai.com/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MessageTextInput(name=\"goal\", display_name=\"Goal\"),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agent's disposal\",\n            value=[],\n        ),\n    ]\n\n    def build_agents(self) -> tuple[Agent, Agent, Agent]:\n        # Initialize agents with concise yet informative backstories and goals\n        document_specialist = Agent(\n            role=\"Documentation Specialist\",\n            goal=\"Extract and summarize the most relevant documentation sections related to the user's query.\",\n            backstory=\"\"\"You are skilled at navigating and summarizing technical documentation to assist users effectively.\"\"\",\n            llm=self.llm,\n            verbose=True,\n            allow_delegation=False\n        )\n\n        web_researcher = Agent(\n            role=\"Web & GitHub Researcher\",\n            goal=\"Find and summarize key information from web sources and GitHub related to the user's query.\",\n            backstory=\"\"\"Your expertise lies in efficiently gathering and summarizing information from web and GitHub sources.\"\"\",\n            llm=self.llm,\n            verbose=True,\n            allow_delegation=False\n        )\n\n        writer = Agent(\n            role=\"Langflow Support Synthesizer\",\n            goal=\"Compose a detailed and well-reasoned response to the user's query, integrating information from the other agents.\",\n            backstory=\"\"\"You excel at synthesizing information from various sources to provide comprehensive answers.\"\"\",\n            llm=self.llm,\n            verbose=True,\n            allow_delegation=False\n        )\n\n        return document_specialist, web_researcher, writer\n\n    def build_tasks(self, document_specialist: Agent, web_researcher: Agent, writer: Agent) -> List[Task]:\n        if not self.tools:\n            raise ValueError(\"No tools available. The tools list is empty.\")\n\n        tools_dict = {tool.name: tool for tool in self.tools}\n\n        # Retrieve necessary tools\n        pinecone_tool = tools_dict.get(\"PINECONE_SEARCH\")\n        tavily_tool = tools_dict.get(\"TAVILY_TAVILY_SEARCH\")\n\n        # Ensure necessary tools are available\n        if not pinecone_tool:\n            raise ValueError(\"PINECONE_SEARCH tool is missing.\")\n        if not tavily_tool:\n            raise ValueError(\"TAVILY_TAVILY_SEARCH tool is missing.\")\n\n        # Document Task\n        document_task = Task(\n            description=(\n                f\"\"\"Search and summarize the most relevant sections from Langflow's documentation for the query: '{self.goal}'.\n                \n                IMPORTANT:\n                - You can make only **one successful call** to the PINECONE_SEARCH tool.\n                - If you encounter an error, you may retry, but do not make multiple successful calls.\n                - Focus on providing key insights, relevant code examples, and direct answers to the query.\n                \"\"\"\n            ),\n            agent=document_specialist,\n            expected_output=\"\"\"\n            Documentation Summary:\n            - **Section Title**: [Brief summary of how it relates to the query]\n               - **Key Points**:\n                 - [Point 1]\n                 - [Point 2]\n               - **Code Example (if applicable)**:\n                 ```python\n                 [Relevant code snippet]\n                 ```\n            \"\"\",\n            tools=[pinecone_tool],\n            async_execution=True,\n        )\n\n        # Web Research Task\n        web_task = Task(\n            description=(\n                f\"\"\"Perform targeted web searches to find the most relevant online discussions, articles, or GitHub issues related to the query: '{self.goal}'.\n                \n                IMPORTANT:\n                - You can make **up to two successful calls** to the TAVILY_TAVILY_SEARCH tool.\n                    1. First, perform a general search with the user's query.\n                    2. Second, perform a search specifically targeting GitHub issues and discussions related to the query.\n                - For each call, if you encounter an error, you may retry, but do not make multiple successful calls beyond the two allowed.\n                - Summarize the key findings from both searches.\n                \"\"\"\n            ),\n            agent=web_researcher,\n            expected_output=\"\"\"\n            Web and GitHub Findings:\n            - **Source Title**: [Title and URL]\n               - **Summary**: [Brief summary of content and relevance]\n            \"\"\",\n            tools=[tavily_tool],\n            async_execution=True,\n        )\n\n        # Writer Task\n        writer_task = Task(\n            description=(\n                f\"\"\"Using the outputs from the Documentation Specialist and Web & GitHub Researcher, compose a detailed and comprehensive response to the query: '{self.goal}'.\n\n                **Guidelines**:\n                - Thoroughly analyze the summaries provided by the other agents.\n                - Integrate key insights, code examples, and recommendations into your response.\n                - Provide clear explanations and reasoning to address the user's query, ensuring accuracy.\n                - If discussing specific implementations or systems (like the \"tweaks\" or \"global variables\" system), ensure your explanation reflects how it actually works (e.g., use of global variables and passing them with API call parameters or in soome function provided by axiestudio).\n                - If the discussion pertains to a specific query, focus solely on that topic. For example, if the question relates to the usage of a custom component, provide information exclusively about the custom component. If the question is about a custom tool, limit the response to details regarding the custom tool.\n                - When discussing prompt components, illustrate the creation of dynamic variables by enclosing them in curly braces within the template. If the user requests code, provide the relevant code; otherwise, stick to a general explanation.                \n                - Structure the response with appropriate headings and formatting for clarity.\n                - Ensure the final answer is self-contained and does not refer back to the agents' outputs as separate entities.\n                - Avoid including unnecessary or redundant information to keep token usage efficient.\n                \"\"\"\n            ),\n            expected_output=f\"\"\"\n                \n                [Provide a detailed answer to the user's query, integrating information from both the documentation and web findings.]\n                \n                **Explanation**:\n                \n                [Offer in-depth explanations, including how you arrived at the answer, important considerations, and any relevant technical details.]\n                \n                **Code Examples (if applicable)**:\n                \n                ```python\n                [Include any relevant code snippets that help illustrate the solution.]\n                ```\n                \n                **Additional Resources**:\n                \n                - [List any additional documentation links, articles, or GitHub issues that may help the user.]\n                \"\"\",\n            agent=writer,\n            context=[document_task, web_task],\n            async_execution=False,\n        )\n\n        return [document_task, web_task, writer_task]\n\n    def build_crew(self) -> Crew:\n        try:\n            document_specialist, web_researcher, writer = self.build_agents()\n            tasks = self.build_tasks(document_specialist, web_researcher, writer)\n\n            crew = Crew(\n                agents=[document_specialist, web_researcher, writer],\n                tasks=tasks,\n                process=Process.sequential,\n                verbose=2\n            )\n            return crew\n\n        except Exception as e:\n            error_message = f\"An error occurred during CrewAI execution: {str(e)}\\nTraceback: {traceback.format_exc()}\"\n            print(error_message)\n            self.status = error_message\n            return error_message",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "goal": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "goal",
                "value": "",
                "display_name": "Goal",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Executes a CrewAI workflow with a custom search capability.",
            "icon": "CrewAI",
            "base_classes": [
              "Message"
            ],
            "display_name": "Multi Agent Crew",
            "documentation": "https://docs.crewai.com/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "goal",
              "llm",
              "tools"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "CrewAIWithCustomSearchComponent-08mqQ"
        },
        "selected": false,
        "width": 384,
        "height": 422,
        "dragging": false,
        "positionAbsolute": {
          "x": -787.3639903392773,
          "y": 2439.817091363844
        }
      },
      {
        "id": "Pinecone-RXZA9",
        "type": "genericNode",
        "position": {
          "x": -3035.8475745719534,
          "y": 1210.0842886710668
        },
        "data": {
          "type": "Pinecone",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "distance_strategy": {
                "trace_as_metadata": true,
                "options": [
                  "Cosine",
                  "Euclidean",
                  "Dot Product"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "distance_strategy",
                "value": "Cosine",
                "display_name": "Distance Strategy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "index_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "index_name",
                "value": "agents",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "namespace": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "namespace",
                "value": "ns1",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "Namespace for the index.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 4,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pinecone_api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "pinecone_api_key",
                "value": "",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "text_key": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "text",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "Key in the record to use as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Pinecone Vector Store with search capabilities",
            "icon": "Pinecone",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Pinecone",
            "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "text_key",
              "search_query",
              "ingest_data",
              "embedding",
              "number_of_results"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "Pinecone-RXZA9"
        },
        "selected": false,
        "width": 384,
        "height": 746,
        "dragging": false,
        "positionAbsolute": {
          "x": -3035.8475745719534,
          "y": 1210.0842886710668
        }
      },
      {
        "id": "OpenAIEmbeddings-1EeZ4",
        "type": "genericNode",
        "position": {
          "x": -2238.942213602306,
          "y": 1247.2869225017737
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "client": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "client",
                "value": "",
                "display_name": "Client",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_headers": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_headers",
                "value": {},
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "default_query": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_query",
                "value": {},
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "deployment": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "deployment",
                "value": "",
                "display_name": "Deployment",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "dimensions": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "dimensions",
                "value": "",
                "display_name": "Dimensions",
                "advanced": true,
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "embedding_ctx_length": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_ctx_length",
                "value": 1536,
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 3,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "text-embedding-3-small",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "openai_api_base": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_type": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_type",
                "value": "",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_version": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_version",
                "value": "",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_organization": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_organization",
                "value": "",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_proxy": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_proxy",
                "value": "",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "request_timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "request_timeout",
                "value": "",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "show_progress_bar": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "show_progress_bar",
                "value": false,
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "skip_empty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "skip_empty",
                "value": false,
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_enable": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_enable",
                "value": true,
                "display_name": "TikToken Enable",
                "advanced": true,
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_model_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_model_name",
                "value": "",
                "display_name": "TikToken Model Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Generate embeddings using OpenAI models.",
            "icon": "OpenAI",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "default_headers",
              "default_query",
              "chunk_size",
              "client",
              "deployment",
              "embedding_ctx_length",
              "max_retries",
              "model",
              "model_kwargs",
              "openai_api_base",
              "openai_api_key",
              "openai_api_type",
              "openai_api_version",
              "openai_organization",
              "openai_proxy",
              "request_timeout",
              "show_progress_bar",
              "skip_empty",
              "tiktoken_model_name",
              "tiktoken_enable",
              "dimensions"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "OpenAIEmbeddings-1EeZ4"
        },
        "selected": false,
        "width": 384,
        "height": 388,
        "positionAbsolute": {
          "x": -2238.942213602306,
          "y": 1247.2869225017737
        },
        "dragging": false
      },
      {
        "id": "PineconeSearch-GGDNf",
        "type": "genericNode",
        "position": {
          "x": -1714.8606280985805,
          "y": 1040.5954340362732
        },
        "data": {
          "type": "PineconeSearch",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional\nfrom pydantic import BaseModel, Field\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import SecretStrInput, MessageTextInput, DropdownInput, IntInput\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Tool\nfrom langchain.tools import StructuredTool\nfrom langchain_pinecone.vectorstores import Pinecone\nfrom axiestudio.helpers.data import docs_to_data\n\nclass PineconeSearchToolComponent(LCToolComponent):\n    display_name = \"Pinecone Search\"\n    description = \"Perform similarity search using Pinecone vector database.\"\n    icon = \"Pinecone\"\n    name = \"PineconeSearch\"\n    documentation = \"https://docs.pinecone.io/docs/overview\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"pinecone_api_key\",\n            display_name=\"Pinecone API Key\",\n            required=True,\n            info=\"Your Pinecone API Key.\",\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        MessageTextInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            required=True,\n            info=\"The name of your Pinecone index.\",\n            value=\"agents\",\n        ),\n        MessageTextInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"The namespace to use in the Pinecone index.\",\n            value=\"ns1\",\n        ),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            info=\"The distance strategy for similarity search.\",\n            options=[\"cosine\", \"euclidean\", \"dot_product\"],\n            value=\"cosine\",\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"The number of search results to return.\",\n            value=3,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"The search query for similarity search.\",\n        ),\n    ]\n\n    class PineconeSearchSchema(BaseModel):\n        query: str = Field(..., description=\"The search query for similarity search.\")\n        number_of_results: int = Field(3, description=\"The number of search results to return.\")\n\n    def run_model(self) -> List[Data]:\n        return self._pinecone_search(\n            self.query,\n            self.number_of_results,\n        )\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"PINECONE_SEARCH\",\n            description=\"Perform a similarity search using the Pinecone vector database.\",\n            func=self._pinecone_search,\n            args_schema=self.PineconeSearchSchema,\n        )\n\n    def _pinecone_search(\n        self,\n        query: str,\n        number_of_results: int = 3,\n    ) -> List[Data]:\n        try:\n            vector_store = Pinecone(\n                index_name=self.index_name,\n                embedding=self.embedding,\n                namespace=self.namespace,\n                distance_strategy=self.distance_strategy,\n                pinecone_api_key=self.pinecone_api_key,\n            )\n\n            if query and isinstance(query, str) and query.strip():\n                docs = vector_store.similarity_search(\n                    query=query,\n                    k=number_of_results,\n                )\n                data = docs_to_data(docs)\n                self.status = data\n                return data\n            else:\n                error_message = \"Invalid query for Pinecone search.\"\n                self.status = error_message\n                return [Data(data={\"error\": error_message})]\n\n        except Exception as e:\n            error_message = f\"Unexpected error: {str(e)}\"\n            self.status = error_message\n            return [Data(data={\"error\": error_message})]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "distance_strategy": {
                "trace_as_metadata": true,
                "options": [
                  "cosine",
                  "euclidean",
                  "dot_product"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "distance_strategy",
                "value": "cosine",
                "display_name": "Distance Strategy",
                "advanced": false,
                "dynamic": false,
                "info": "The distance strategy for similarity search.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "index_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "index_name",
                "value": "agents",
                "display_name": "Index Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The name of your Pinecone index.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "namespace": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "namespace",
                "value": "ns1",
                "display_name": "Namespace",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The namespace to use in the Pinecone index.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 3,
                "display_name": "Number of Results",
                "advanced": false,
                "dynamic": false,
                "info": "The number of search results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pinecone_api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "pinecone_api_key",
                "value": "",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your Pinecone API Key.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "query": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The search query for similarity search.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Perform similarity search using Pinecone vector database.",
            "icon": "Pinecone",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "Pinecone Vector Search",
            "documentation": "https://docs.pinecone.io/docs/overview",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pinecone_api_key",
              "embedding",
              "index_name",
              "namespace",
              "distance_strategy",
              "number_of_results",
              "query"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "PineconeSearch-GGDNf"
        },
        "selected": false,
        "width": 384,
        "height": 853,
        "positionAbsolute": {
          "x": -1714.8606280985805,
          "y": 1040.5954340362732
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-d8Szd",
        "type": "genericNode",
        "position": {
          "x": -826.0503755950391,
          "y": 3004.681039271254
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\r\nfrom functools import reduce\r\n\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\r\nfrom axiestudio.field_typing import LanguageModel\r\nfrom axiestudio.inputs import (\r\n    BoolInput,\r\n    DictInput,\r\n    DropdownInput,\r\n    FloatInput,\r\n    IntInput,\r\n    MessageInput,\r\n    SecretStrInput,\r\n    StrInput,\r\n)\r\n\r\nclass OpenAIModelComponent(LCModelComponent):\r\n    display_name = \"OpenAI\"\r\n    description = \"Generates text using OpenAI LLMs.\"\r\n    icon = \"OpenAI\"\r\n    name = \"OpenAIModel\"\r\n\r\n    inputs = [\r\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\r\n        IntInput(\r\n            name=\"max_tokens\",\r\n            display_name=\"Max Tokens\",\r\n            advanced=True,\r\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\r\n        ),\r\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\r\n        BoolInput(\r\n            name=\"json_mode\",\r\n            display_name=\"JSON Mode\",\r\n            advanced=True,\r\n            info=\"If True, it will output JSON regardless of passing a schema.\",\r\n        ),\r\n        DictInput(\r\n            name=\"output_schema\",\r\n            is_list=True,\r\n            display_name=\"Schema\",\r\n            advanced=True,\r\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=[\"gpt-4o-mini\"], value=\"gpt-4o-mini\"\r\n        ),\r\n        StrInput(\r\n            name=\"openai_api_base\",\r\n            display_name=\"OpenAI API Base\",\r\n            advanced=True,\r\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"OpenAI API Key\",\r\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\r\n            advanced=False,\r\n            value=\"OPENAI_API_KEY\",\r\n        ),\r\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\r\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\r\n        StrInput(\r\n            name=\"system_message\",\r\n            display_name=\"System Message\",\r\n            info=\"System message to pass to the model.\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"seed\",\r\n            display_name=\"Seed\",\r\n            info=\"The seed controls the reproducibility of the job.\",\r\n            advanced=True,\r\n            value=1,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\r\n        # self.output_schema is a list of dictionaries\r\n        # let's convert it to a dictionary\r\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\r\n        openai_api_key = self.api_key\r\n        temperature = self.temperature\r\n        model_name: str = self.model_name\r\n        max_tokens = self.max_tokens\r\n        model_kwargs = self.model_kwargs or {}\r\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\r\n        json_mode = bool(output_schema_dict) or self.json_mode\r\n        seed = self.seed\r\n\r\n        if openai_api_key:\r\n            api_key = SecretStr(openai_api_key)\r\n        else:\r\n            api_key = None\r\n        output = ChatOpenAI(\r\n            max_tokens=max_tokens or None,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=api_key,\r\n            temperature=temperature or 0.1,\r\n            seed=seed,\r\n        )\r\n        if json_mode:\r\n            if output_schema_dict:\r\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\r\n            else:\r\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\r\n\r\n        return output  # type: ignore\r\n\r\n    def _get_exception_message(self, e: Exception):\r\n        \"\"\"\r\n        Get a message from an OpenAI exception.\r\n\r\n        Args:\r\n            exception (Exception): The exception to get the message from.\r\n\r\n        Returns:\r\n            str: The message from the exception.\r\n        \"\"\"\r\n\r\n        try:\r\n            from openai import BadRequestError\r\n        except ImportError:\r\n            return\r\n        if isinstance(e, BadRequestError):\r\n            message = e.body.get(\"message\")  # type: ignore\r\n            if message:\r\n                return message\r\n        return",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "json_mode",
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "gpt-4o-mini",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "load_from_db": false
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "output_schema",
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 1,
                "name": "seed",
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool"
              },
              "system_message": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.1,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "stream",
              "system_message",
              "seed"
            ],
            "beta": false,
            "edited": true,
            "official": false,
            "lf_version": "1.0.18"
          },
          "id": "OpenAIModel-d8Szd"
        },
        "selected": false,
        "width": 384,
        "height": 605,
        "positionAbsolute": {
          "x": -826.0503755950391,
          "y": 3004.681039271254
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-iA7yc",
        "type": "genericNode",
        "position": {
          "x": -317.44473120523435,
          "y": 2529.968272948814
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ChatOutput-iA7yc"
        },
        "selected": false,
        "width": 384,
        "height": 302,
        "positionAbsolute": {
          "x": -317.44473120523435,
          "y": 2529.968272948814
        },
        "dragging": false
      },
      {
        "id": "ComposioAPI-3S15k",
        "type": "genericNode",
        "position": {
          "x": -1701.425314809219,
          "y": 2547.6292171864307
        },
        "data": {
          "type": "ComposioAPI",
          "node": {
            "template": {
              "_type": "Component",
              "action_names": {
                "trace_as_metadata": true,
                "options": [
                  "TAVILY_TAVILY_SEARCH"
                ],
                "combobox": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "action_names",
                "value": [
                  "TAVILY_TAVILY_SEARCH"
                ],
                "display_name": "Actions to use",
                "advanced": false,
                "dynamic": false,
                "info": "The actions to pass to agent to execute",
                "title_case": false,
                "type": "str",
                "_input_type": "MultiselectInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key",
                "refresh_button": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "app_names": {
                "trace_as_metadata": true,
                "options": [
                  "APALEO",
                  "APIFY",
                  "ASANA",
                  "ATTIO",
                  "BITBUCKET",
                  "BREVO",
                  "BROWSERBASE_TOOL",
                  "BROWSER_TOOL",
                  "CLICKUP",
                  "CODEINTERPRETER",
                  "CODE_FORMAT_TOOL",
                  "CODE_GREP_TOOL",
                  "CODE_INDEX_TOOL",
                  "CODE_MAP_TOOL",
                  "COMPOSIO",
                  "DISCORD",
                  "DROPBOX",
                  "ELEVENLABS",
                  "EMBED_TOOL",
                  "EXA",
                  "FIGMA",
                  "FILETOOL",
                  "FIRECRAWL",
                  "GIT",
                  "GITHUB",
                  "GITLAB",
                  "GMAIL",
                  "GOOGLECALENDAR",
                  "GOOGLEDOCS",
                  "GOOGLEDRIVE",
                  "GOOGLEMEET",
                  "GOOGLESHEETS",
                  "GOOGLETASKS",
                  "GREPTILE",
                  "HACKERNEWS",
                  "HEROKU",
                  "HISTORY_FETCHER",
                  "HUBSPOT",
                  "IMAGE_ANALYSER",
                  "INDUCED_AI",
                  "JIRA",
                  "KLAVIYO",
                  "LINEAR",
                  "LISTENNOTES",
                  "MATHEMATICAL",
                  "MULTIONAI",
                  "NASA",
                  "NOTION",
                  "OKTA",
                  "PAGERDUTY",
                  "PERPLEXITYAI",
                  "PIPEDRIVE",
                  "POSTHOG",
                  "RAGTOOL",
                  "SCHEDULER",
                  "SERPAPI",
                  "SHELLTOOL",
                  "SLACK",
                  "SLACKBOT",
                  "SNOWFLAKE",
                  "SOUNDCLOUD",
                  "SPIDERTOOL",
                  "SPLITWISE",
                  "SPOTIFY",
                  "SQLTOOL",
                  "STRAVA",
                  "TASKADE",
                  "TAVILY",
                  "TRELLO",
                  "TWILIO",
                  "TWITTER",
                  "TYPEFORM",
                  "WEATHERMAP",
                  "WEBTOOL",
                  "WHATSAPP",
                  "WORKABLE",
                  "WORKSPACE_TOOL",
                  "YOUSEARCH",
                  "YOUTUBE",
                  "ZENDESK",
                  "ZEPTOOL",
                  "ZOOM"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "app_names",
                "value": "TAVILY",
                "display_name": "App Name",
                "advanced": false,
                "dynamic": false,
                "info": "The app name to use. Please refresh after selecting app name",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "auth_status_config": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "auth_status_config",
                "value": "TAVILY CONNECTED",
                "display_name": "Auth status",
                "advanced": false,
                "dynamic": false,
                "info": "Open link or enter api key. Then refresh button",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "entity_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "entity_id",
                "value": "default",
                "display_name": "Entity ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Use Composio toolset to run actions with your agent",
            "icon": "Composio",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "Composio Tools",
            "documentation": "https://docs.composio.dev",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "entity_id",
              "api_key",
              "app_names",
              "action_names",
              "auth_status_config"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ComposioAPI-3S15k"
        },
        "selected": false,
        "width": 384,
        "height": 633,
        "positionAbsolute": {
          "x": -1701.425314809219,
          "y": 2547.6292171864307
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Directory-IVxiV",
        "sourceHandle": "{œdataTypeœ:œDirectoryœ,œidœ:œDirectory-IVxiVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "Pinecone-RXZA9",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "Pinecone-RXZA9",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Directory",
            "id": "Directory-IVxiV",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-Directory-IVxiV{œdataTypeœ:œDirectoryœ,œidœ:œDirectory-IVxiVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-Pinecone-RXZA9{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-lPBSd",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-lPBSdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Pinecone-RXZA9",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Pinecone-RXZA9",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-lPBSd",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-lPBSd{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-lPBSdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-RXZA9{œfieldNameœ:œembeddingœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-1EeZ4",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1EeZ4œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "PineconeSearch-GGDNf",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-GGDNfœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "PineconeSearch-GGDNf",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-1EeZ4",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-1EeZ4{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1EeZ4œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-PineconeSearch-GGDNf{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-GGDNfœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "PineconeSearch-GGDNf",
        "sourceHandle": "{œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-GGDNfœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CrewAIWithCustomSearchComponent-08mqQ",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CrewAIWithCustomSearchComponent-08mqQ",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PineconeSearch",
            "id": "PineconeSearch-GGDNf",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-PineconeSearch-GGDNf{œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-GGDNfœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ComposioAPI-aSkKs",
        "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-aSkKsœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CrewAIWithCustomSearchComponent-08mqQ",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CrewAIWithCustomSearchComponent-08mqQ",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ComposioAPI",
            "id": "ComposioAPI-aSkKs",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-ComposioAPI-aSkKs{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-aSkKsœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ChatInput-Mhy7E",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CrewAIWithCustomSearchComponent-08mqQ",
        "targetHandle": "{œfieldNameœ:œgoalœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "goal",
            "id": "CrewAIWithCustomSearchComponent-08mqQ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-Mhy7E",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-Mhy7E{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œgoalœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ComposioAPI-eVVDu",
        "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-eVVDuœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CrewAIWithCustomSearchComponent-08mqQ",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CrewAIWithCustomSearchComponent-08mqQ",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ComposioAPI",
            "id": "ComposioAPI-eVVDu",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-ComposioAPI-eVVDu{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-eVVDuœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-d8Szd",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-d8Szdœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "CrewAIWithCustomSearchComponent-08mqQ",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CrewAIWithCustomSearchComponent-08mqQ",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-d8Szd",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-d8Szd{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-d8Szdœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œllmœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "CrewAIWithCustomSearchComponent-08mqQ",
        "sourceHandle": "{œdataTypeœ:œCrewAIWithCustomSearchComponentœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-iA7yc",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-iA7ycœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-iA7yc",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CrewAIWithCustomSearchComponent",
            "id": "CrewAIWithCustomSearchComponent-08mqQ",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CrewAIWithCustomSearchComponent-08mqQ{œdataTypeœ:œCrewAIWithCustomSearchComponentœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-iA7yc{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-iA7ycœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatOutput-iA7yc",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-iA7ycœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "LangWatchEvaluatorComponent-gPZln",
        "targetHandle": "{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "answer",
            "id": "LangWatchEvaluatorComponent-gPZln",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-iA7yc",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatOutput-iA7yc{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-iA7ycœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-gPZln{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-Mhy7E",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "LangWatchEvaluatorComponent-gPZln",
        "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "question",
            "id": "LangWatchEvaluatorComponent-gPZln",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-Mhy7E",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-Mhy7E{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-gPZln{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ComposioAPI-3S15k",
        "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-3S15kœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CrewAIWithCustomSearchComponent-08mqQ",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CrewAIWithCustomSearchComponent-08mqQ",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ComposioAPI",
            "id": "ComposioAPI-3S15k",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-ComposioAPI-3S15k{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-3S15kœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 1419.278259194885,
      "y": -1064.7276693633594,
      "zoom": 0.5850570982355469
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "LangWatchEvaluatorComponent": {
      "count": 1
    },
    "ComposioAPI": {
      "count": 3
    },
    "OpenAIEmbeddings": {
      "count": 2
    },
    "Directory": {
      "count": 1
    },
    "CrewAIWithCustomSearchComponent": {
      "count": 1
    },
    "Pinecone": {
      "count": 1
    },
    "PineconeSearch": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 13
  },
  "original": {
    "id": "0c0ead51-bece-43e6-9e32-263983f7c766",
    "name": "week_3_final",
    "description": "Crafting Conversations, One Node at a Time.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "LangWatchEvaluatorComponent": {
        "count": 1
      },
      "ComposioAPI": {
        "count": 3
      },
      "OpenAIEmbeddings": {
        "count": 2
      },
      "Directory": {
        "count": 1
      },
      "CrewAIWithCustomSearchComponent": {
        "count": 1
      },
      "Pinecone": {
        "count": 1
      },
      "PineconeSearch": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 13
    },
    "last_tested_version": "1.0.18",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "ChatInput-Mhy7E",
          "type": "genericNode",
          "position": {
            "x": -1036.5663488513655,
            "y": 1908.8651633995632
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ChatInput-Mhy7E"
          },
          "selected": false,
          "width": 384,
          "height": 302,
          "positionAbsolute": {
            "x": -1036.5663488513655,
            "y": 1908.8651633995632
          },
          "dragging": false
        },
        {
          "id": "LangWatchEvaluatorComponent-gPZln",
          "type": "genericNode",
          "position": {
            "x": 238.5308642732698,
            "y": 2418.799178507102
          },
          "data": {
            "type": "LangWatchEvaluatorComponent",
            "node": {
              "template": {
                "_type": "Component",
                "context_data": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "context_data",
                  "value": "",
                  "display_name": "RAG Search Results (optional)",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to be used as context for evaluation.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "answer": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "answer",
                  "value": "",
                  "display_name": "Answer",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The generated answer to be evaluated.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import re\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput, DataInput\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nimport langwatch\r\n\r\nclass LangWatchEvaluatorComponent(Component):\r\n    display_name = \"LangWatch Evaluator\"\r\n    description = \"Evaluates a question-answer pair using LangWatch and provides a trace URL.\"\r\n    icon = \"view\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"question\",\r\n            display_name=\"Question\",\r\n            info=\"The question to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"answer\",\r\n            display_name=\"Answer\",\r\n            info=\"The generated answer to be evaluated.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"ground_truth\",\r\n            display_name=\"Correct Answer\",\r\n            info=\"The expected correct answer.\",\r\n        ),\r\n        DataInput(\r\n            name=\"context_data\",\r\n            display_name=\"RAG Search Results (optional)\",\r\n            info=\"The data to be used as context for evaluation.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_email\",\r\n            display_name=\"User Email\",\r\n            info=\"The user email for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_name\",\r\n            display_name=\"Participant Name\",\r\n            info=\"Full name for identification in the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"question_id\",\r\n            display_name=\"Question ID\",\r\n            info=\"The question ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Trace URL\", name=\"trace_url\", method=\"evaluate\"),\r\n    ]\r\n\r\n    async def evaluate(self) -> Data:\r\n        question = self.question\r\n        answer = self.answer\r\n        ground_truth = self.ground_truth\r\n        context_data = self.context_data\r\n        user_email = self.user_email if self.user_email else \"\"\r\n        question_id = self.question_id if self.question_id else \"\"\r\n        user_name = self.user_name if self.user_name else \"\"\r\n\r\n        # Validate email if provided\r\n        if user_email and not self.validate_email(user_email):\r\n            raise ValueError(f\"Invalid email address: {user_email}\")\r\n\r\n        langwatch.api_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lc3RhbXAiOjE3MjY2Njk3NTkyMjcsInJhbmQiOjAuMjg5OTc4Mjk4NzU2MzIzOTcsImlhdCI6MTcyNjY2OTc1OX0._ow7WQ5RSTlYE-HjdcouHUCoXf9nRnWHk4u9nfq4LIw'\r\n\r\n        trace = langwatch.trace(\r\n            metadata={\r\n                \"user_email\": user_email,\r\n                \"question_id\": question_id,\r\n                \"user_name\": user_name,\r\n            },\r\n            expected_output=ground_truth\r\n        )\r\n        \r\n        contexts = [item.text.replace(\"\\t\", \" \").replace(\"\\n\", \" \") for item in context_data[:5]] if context_data else []\r\n        rag_span = trace.span(type=\"rag\", name=\"LangWatch Evaluator\", input=question, contexts=contexts, output=answer)\r\n        rag_span.end()\r\n\r\n        trace.send_spans()\r\n\r\n        public_url = trace.share()\r\n        self.log(f\"See the trace at: {public_url}\")\r\n\r\n        self.status = Data(data={\"trace_url\": public_url})\r\n        return Data(data={\"trace_url\": public_url})\r\n        \r\n    def validate_email(self, email):\r\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\r\n        return re.match(pattern, email) is not None",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "ground_truth": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ground_truth",
                  "value": "",
                  "display_name": "Correct Answer",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The expected correct answer.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "question": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "question",
                  "value": "",
                  "display_name": "Question",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The question to be evaluated.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "question_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "question_id",
                  "value": "",
                  "display_name": "Question ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The question ID for the trace metadata.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "user_email": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "user_email",
                  "value": "",
                  "display_name": "User Email",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The user email for the trace metadata.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "user_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "user_name",
                  "value": "",
                  "display_name": "Participant Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Full name for identification in the trace metadata.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Evaluates a question-answer pair using LangWatch and provides a trace URL.",
              "icon": "view",
              "base_classes": [
                "Data"
              ],
              "display_name": "Langwatch Evaluator",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "trace_url",
                  "display_name": "Trace URL",
                  "method": "evaluate",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "question",
                "answer",
                "ground_truth",
                "context_data",
                "user_email",
                "user_name",
                "question_id"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "LangWatchEvaluatorComponent-gPZln",
            "description": "Evaluates a question-answer pair using LangWatch and provides a trace URL.",
            "display_name": "Langwatch Evaluator"
          },
          "selected": false,
          "width": 384,
          "height": 550,
          "positionAbsolute": {
            "x": 238.5308642732698,
            "y": 2418.799178507102
          },
          "dragging": false
        },
        {
          "id": "ComposioAPI-eVVDu",
          "type": "genericNode",
          "position": {
            "x": -1708.1287716834595,
            "y": 1905.6582548691897
          },
          "data": {
            "type": "ComposioAPI",
            "node": {
              "template": {
                "_type": "Component",
                "action_names": {
                  "trace_as_metadata": true,
                  "options": [
                    "GITHUB_ACCEPT_A_REPOSITORY_INVITATION",
                    "GITHUB_ACTIVITY_LIST_STARGAZERS_FOR_REPO",
                    "GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER",
                    "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_ADD_APP_ACCESS_RESTRICTIONS",
                    "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE",
                    "GITHUB_ADD_A_REPOSITORY_COLLABORATOR",
                    "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION",
                    "GITHUB_ADD_A_SECURITY_MANAGER_TEAM",
                    "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET",
                    "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                    "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                    "GITHUB_ADD_LABELS_TO_AN_ISSUE",
                    "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                    "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS",
                    "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY",
                    "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS",
                    "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY",
                    "GITHUB_ADD_PROJECT_COLLABORATOR",
                    "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS",
                    "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                    "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET",
                    "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_ADD_STATUS_CHECK_CONTEXTS",
                    "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                    "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS",
                    "GITHUB_ADD_TEAM_MEMBER_LEGACY",
                    "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                    "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                    "GITHUB_ADD_USER_ACCESS_RESTRICTIONS",
                    "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST",
                    "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM",
                    "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER",
                    "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST",
                    "GITHUB_BLOCK_A_USER",
                    "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION",
                    "GITHUB_CANCEL_AN_IMPORT",
                    "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION",
                    "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT",
                    "GITHUB_CANCEL_A_WORKFLOW_RUN",
                    "GITHUB_CHECK_A_TOKEN",
                    "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY",
                    "GITHUB_CHECK_IF_A_GIST_IS_STARRED",
                    "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER",
                    "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED",
                    "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER",
                    "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED",
                    "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE",
                    "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER",
                    "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR",
                    "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION",
                    "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                    "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY",
                    "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS",
                    "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT",
                    "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY",
                    "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY",
                    "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY",
                    "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY",
                    "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS",
                    "GITHUB_COMPARE_TWO_COMMITS",
                    "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG",
                    "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE",
                    "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR",
                    "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY",
                    "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE",
                    "GITHUB_CREATE_AN_ISSUE",
                    "GITHUB_CREATE_AN_ISSUE_COMMENT",
                    "GITHUB_CREATE_AN_ORGANIZATION_INVITATION",
                    "GITHUB_CREATE_AN_ORGANIZATION_PROJECT",
                    "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY",
                    "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                    "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_CREATE_A_BLOB",
                    "GITHUB_CREATE_A_CHECK_RUN",
                    "GITHUB_CREATE_A_CHECK_SUITE",
                    "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST",
                    "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY",
                    "GITHUB_CREATE_A_COMMIT",
                    "GITHUB_CREATE_A_COMMIT_COMMENT",
                    "GITHUB_CREATE_A_COMMIT_STATUS",
                    "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT",
                    "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE",
                    "GITHUB_CREATE_A_DEPLOYMENT",
                    "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY",
                    "GITHUB_CREATE_A_DEPLOYMENT_STATUS",
                    "GITHUB_CREATE_A_DEPLOY_KEY",
                    "GITHUB_CREATE_A_DISCUSSION",
                    "GITHUB_CREATE_A_DISCUSSION_COMMENT",
                    "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY",
                    "GITHUB_CREATE_A_DISCUSSION_LEGACY",
                    "GITHUB_CREATE_A_FORK",
                    "GITHUB_CREATE_A_GIST",
                    "GITHUB_CREATE_A_GIST_COMMENT",
                    "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST",
                    "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT",
                    "GITHUB_CREATE_A_GITHUB_PAGES_SITE",
                    "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_CREATE_A_LABEL",
                    "GITHUB_CREATE_A_MILESTONE",
                    "GITHUB_CREATE_A_PROJECT_CARD",
                    "GITHUB_CREATE_A_PROJECT_COLUMN",
                    "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_CREATE_A_PULL_REQUEST",
                    "GITHUB_CREATE_A_REFERENCE",
                    "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION",
                    "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY",
                    "GITHUB_CREATE_A_RELEASE",
                    "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION",
                    "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY",
                    "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT",
                    "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT",
                    "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE",
                    "GITHUB_CREATE_A_REPOSITORY_PROJECT",
                    "GITHUB_CREATE_A_REPOSITORY_RULESET",
                    "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY",
                    "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
                    "GITHUB_CREATE_A_REPOSITORY_VARIABLE",
                    "GITHUB_CREATE_A_REPOSITORY_WEBHOOK",
                    "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                    "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST",
                    "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN",
                    "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY",
                    "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_CREATE_A_TAG_OBJECT",
                    "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                    "GITHUB_CREATE_A_TEAM",
                    "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK",
                    "GITHUB_CREATE_A_TREE",
                    "GITHUB_CREATE_A_USER_PROJECT",
                    "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT",
                    "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION",
                    "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY",
                    "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT",
                    "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET",
                    "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET",
                    "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                    "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET",
                    "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                    "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                    "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS",
                    "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE",
                    "GITHUB_CREATE_REACTION_FOR_AN_ISSUE",
                    "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT",
                    "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT",
                    "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                    "GITHUB_CREATE_REACTION_FOR_A_RELEASE",
                    "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION",
                    "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT",
                    "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                    "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY",
                    "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM",
                    "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE",
                    "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE",
                    "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER",
                    "GITHUB_DECLINE_A_REPOSITORY_INVITATION",
                    "GITHUB_DELETE_ACCESS_RESTRICTIONS",
                    "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION",
                    "GITHUB_DELETE_AN_APP_AUTHORIZATION",
                    "GITHUB_DELETE_AN_APP_TOKEN",
                    "GITHUB_DELETE_AN_ARTIFACT",
                    "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY",
                    "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_AN_ENVIRONMENT",
                    "GITHUB_DELETE_AN_ENVIRONMENT_SECRET",
                    "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE",
                    "GITHUB_DELETE_AN_ISSUE_COMMENT",
                    "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION",
                    "GITHUB_DELETE_AN_ISSUE_REACTION",
                    "GITHUB_DELETE_AN_ORGANIZATION",
                    "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                    "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET",
                    "GITHUB_DELETE_AN_ORGANIZATION_SECRET",
                    "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION",
                    "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY",
                    "GITHUB_DELETE_A_COMMIT_COMMENT",
                    "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION",
                    "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE",
                    "GITHUB_DELETE_A_DEPLOYMENT",
                    "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY",
                    "GITHUB_DELETE_A_DEPLOY_KEY",
                    "GITHUB_DELETE_A_DISCUSSION",
                    "GITHUB_DELETE_A_DISCUSSION_COMMENT",
                    "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY",
                    "GITHUB_DELETE_A_DISCUSSION_LEGACY",
                    "GITHUB_DELETE_A_FILE",
                    "GITHUB_DELETE_A_GIST",
                    "GITHUB_DELETE_A_GIST_COMMENT",
                    "GITHUB_DELETE_A_GITHUB_PAGES_SITE",
                    "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_A_LABEL",
                    "GITHUB_DELETE_A_MILESTONE",
                    "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION",
                    "GITHUB_DELETE_A_PACKAGE_FOR_A_USER",
                    "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST",
                    "GITHUB_DELETE_A_PROJECT",
                    "GITHUB_DELETE_A_PROJECT_CARD",
                    "GITHUB_DELETE_A_PROJECT_COLUMN",
                    "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION",
                    "GITHUB_DELETE_A_REFERENCE",
                    "GITHUB_DELETE_A_RELEASE",
                    "GITHUB_DELETE_A_RELEASE_ASSET",
                    "GITHUB_DELETE_A_RELEASE_REACTION",
                    "GITHUB_DELETE_A_REPOSITORY",
                    "GITHUB_DELETE_A_REPOSITORY_INVITATION",
                    "GITHUB_DELETE_A_REPOSITORY_RULESET",
                    "GITHUB_DELETE_A_REPOSITORY_SECRET",
                    "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION",
                    "GITHUB_DELETE_A_REPOSITORY_VARIABLE",
                    "GITHUB_DELETE_A_REPOSITORY_WEBHOOK",
                    "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                    "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION",
                    "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY",
                    "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                    "GITHUB_DELETE_A_TEAM",
                    "GITHUB_DELETE_A_TEAM_LEGACY",
                    "GITHUB_DELETE_A_THREAD_SUBSCRIPTION",
                    "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE",
                    "GITHUB_DELETE_A_WORKFLOW_RUN",
                    "GITHUB_DELETE_BRANCH_PROTECTION",
                    "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION",
                    "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME",
                    "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID",
                    "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                    "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER",
                    "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION",
                    "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME",
                    "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION",
                    "GITHUB_DELETE_TEAM_DISCUSSION_REACTION",
                    "GITHUB_DELETE_WORKFLOW_RUN_LOGS",
                    "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES",
                    "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT",
                    "GITHUB_DISABLE_A_WORKFLOW",
                    "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                    "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG",
                    "GITHUB_DISABLE_VULNERABILITY_ALERTS",
                    "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST",
                    "GITHUB_DOWNLOAD_AN_ARTIFACT",
                    "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                    "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR",
                    "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP",
                    "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE",
                    "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN",
                    "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS",
                    "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS",
                    "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES",
                    "GITHUB_ENABLE_A_WORKFLOW",
                    "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES",
                    "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION",
                    "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                    "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS",
                    "GITHUB_ENABLE_VULNERABILITY_ALERTS",
                    "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET",
                    "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET",
                    "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY",
                    "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY",
                    "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                    "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION",
                    "GITHUB_FOLLOW_A_USER",
                    "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN",
                    "GITHUB_FORK_A_GIST",
                    "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE",
                    "GITHUB_GET_ACCESS_RESTRICTIONS",
                    "GITHUB_GET_ADMIN_BRANCH_PROTECTION",
                    "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                    "GITHUB_GET_ALL_API_VERSIONS",
                    "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY",
                    "GITHUB_GET_ALL_CODES_OF_CONDUCT",
                    "GITHUB_GET_ALL_COMMONLY_USED_LICENSES",
                    "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY",
                    "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                    "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT",
                    "GITHUB_GET_ALL_GITIGNORE_TEMPLATES",
                    "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS",
                    "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_ALL_REPOSITORY_RULESETS",
                    "GITHUB_GET_ALL_REPOSITORY_TOPICS",
                    "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST",
                    "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS",
                    "GITHUB_GET_AN_APP",
                    "GITHUB_GET_AN_ARTIFACT",
                    "GITHUB_GET_AN_ASSIGNMENT",
                    "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY",
                    "GITHUB_GET_AN_ENVIRONMENT",
                    "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY",
                    "GITHUB_GET_AN_ENVIRONMENT_SECRET",
                    "GITHUB_GET_AN_ENVIRONMENT_VARIABLE",
                    "GITHUB_GET_AN_IMPORT_STATUS",
                    "GITHUB_GET_AN_ISSUE",
                    "GITHUB_GET_AN_ISSUE_COMMENT",
                    "GITHUB_GET_AN_ISSUE_EVENT",
                    "GITHUB_GET_AN_ORGANIZATION",
                    "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS",
                    "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY",
                    "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET",
                    "GITHUB_GET_AN_ORGANIZATION_ROLE",
                    "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE",
                    "GITHUB_GET_AN_ORGANIZATION_SECRET",
                    "GITHUB_GET_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_GET_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                    "GITHUB_GET_ASSIGNMENT_GRADES",
                    "GITHUB_GET_A_BLOB",
                    "GITHUB_GET_A_BRANCH",
                    "GITHUB_GET_A_CHECK_RUN",
                    "GITHUB_GET_A_CHECK_SUITE",
                    "GITHUB_GET_A_CLASSROOM",
                    "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_A_CODE_OF_CONDUCT",
                    "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY",
                    "GITHUB_GET_A_CODE_SCANNING_ALERT",
                    "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY",
                    "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                    "GITHUB_GET_A_COMMIT",
                    "GITHUB_GET_A_COMMIT_COMMENT",
                    "GITHUB_GET_A_COMMIT_OBJECT",
                    "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE",
                    "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                    "GITHUB_GET_A_DEPENDABOT_ALERT",
                    "GITHUB_GET_A_DEPLOYMENT",
                    "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY",
                    "GITHUB_GET_A_DEPLOYMENT_STATUS",
                    "GITHUB_GET_A_DEPLOY_KEY",
                    "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS",
                    "GITHUB_GET_A_DISCUSSION",
                    "GITHUB_GET_A_DISCUSSION_COMMENT",
                    "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY",
                    "GITHUB_GET_A_DISCUSSION_LEGACY",
                    "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES",
                    "GITHUB_GET_A_GIST",
                    "GITHUB_GET_A_GIST_COMMENT",
                    "GITHUB_GET_A_GIST_REVISION",
                    "GITHUB_GET_A_GITHUB_PAGES_SITE",
                    "GITHUB_GET_A_GITIGNORE_TEMPLATE",
                    "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY",
                    "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN",
                    "GITHUB_GET_A_LABEL",
                    "GITHUB_GET_A_LICENSE",
                    "GITHUB_GET_A_MILESTONE",
                    "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_A_PACKAGE_FOR_A_USER",
                    "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER",
                    "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_A_PROJECT",
                    "GITHUB_GET_A_PROJECT_CARD",
                    "GITHUB_GET_A_PROJECT_COLUMN",
                    "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_A_PULL_REQUEST",
                    "GITHUB_GET_A_REFERENCE",
                    "GITHUB_GET_A_RELEASE",
                    "GITHUB_GET_A_RELEASE_ASSET",
                    "GITHUB_GET_A_RELEASE_BY_TAG_NAME",
                    "GITHUB_GET_A_REPOSITORY",
                    "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY",
                    "GITHUB_GET_A_REPOSITORY_README",
                    "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY",
                    "GITHUB_GET_A_REPOSITORY_RULESET",
                    "GITHUB_GET_A_REPOSITORY_RULE_SUITE",
                    "GITHUB_GET_A_REPOSITORY_SECRET",
                    "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY",
                    "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION",
                    "GITHUB_GET_A_REPOSITORY_VARIABLE",
                    "GITHUB_GET_A_REPOSITORY_WEBHOOK",
                    "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                    "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST",
                    "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_A_SECRET_SCANNING_ALERT",
                    "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                    "GITHUB_GET_A_TAG",
                    "GITHUB_GET_A_TEAM_BY_NAME",
                    "GITHUB_GET_A_TEAM_LEGACY",
                    "GITHUB_GET_A_THREAD",
                    "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_A_TREE",
                    "GITHUB_GET_A_USER",
                    "GITHUB_GET_A_USER_MIGRATION_STATUS",
                    "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                    "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_GET_A_WORKFLOW",
                    "GITHUB_GET_A_WORKFLOW_RUN",
                    "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT",
                    "GITHUB_GET_BRANCH_PROTECTION",
                    "GITHUB_GET_COMMIT_AUTHORS",
                    "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION",
                    "GITHUB_GET_COMMUNITY_PROFILE_METRICS",
                    "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER",
                    "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER",
                    "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE",
                    "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                    "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT",
                    "GITHUB_GET_EMOJIS",
                    "GITHUB_GET_FEEDS",
                    "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER",
                    "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY",
                    "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                    "GITHUB_GET_GITHUB_META_INFORMATION",
                    "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER",
                    "GITHUB_GET_GITHUB_PAGES_BUILD",
                    "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD",
                    "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                    "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                    "GITHUB_GET_LARGE_FILES",
                    "GITHUB_GET_LATEST_PAGES_BUILD",
                    "GITHUB_GET_OCTOCAT",
                    "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY",
                    "GITHUB_GET_PAGE_VIEWS",
                    "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                    "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER",
                    "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                    "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION",
                    "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_REPOSITORY_CLONES",
                    "GITHUB_GET_REPOSITORY_CONTENT",
                    "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER",
                    "GITHUB_GET_REPOSITORY_SECRET_SECURELY",
                    "GITHUB_GET_REPO_DEV_ENV_SECRET",
                    "GITHUB_GET_RULES_FOR_A_BRANCH",
                    "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION",
                    "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER",
                    "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION",
                    "GITHUB_GET_STATUS_CHECKS_PROTECTION",
                    "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                    "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                    "GITHUB_GET_TEAM_MEMBER_LEGACY",
                    "GITHUB_GET_THE_AUTHENTICATED_USER",
                    "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE",
                    "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY",
                    "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY",
                    "GITHUB_GET_THE_LATEST_RELEASE",
                    "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                    "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY",
                    "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN",
                    "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT",
                    "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY",
                    "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT",
                    "GITHUB_GET_THE_ZEN_OF_GITHUB",
                    "GITHUB_GET_TOP_REFERRAL_PATHS",
                    "GITHUB_GET_TOP_REFERRAL_SOURCES",
                    "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                    "GITHUB_GET_WORKFLOW_RUN_USAGE",
                    "GITHUB_GET_WORKFLOW_USAGE",
                    "GITHUB_GITHUB_API_ROOT",
                    "GITHUB_ISSUES_LIST_FOR_REPO",
                    "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT",
                    "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                    "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_ASSIGNEES",
                    "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM",
                    "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY",
                    "GITHUB_LIST_BRANCHES",
                    "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT",
                    "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE",
                    "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE",
                    "GITHUB_LIST_CHECK_RUN_ANNOTATIONS",
                    "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE",
                    "GITHUB_LIST_CHILD_TEAMS",
                    "GITHUB_LIST_CHILD_TEAMS_LEGACY",
                    "GITHUB_LIST_CLASSROOMS",
                    "GITHUB_LIST_CODEOWNERS_ERRORS",
                    "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION",
                    "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION",
                    "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY",
                    "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY",
                    "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW",
                    "GITHUB_LIST_COMMITS",
                    "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST",
                    "GITHUB_LIST_COMMIT_COMMENTS",
                    "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE",
                    "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES",
                    "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK",
                    "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE",
                    "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_DEPLOYMENTS",
                    "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES",
                    "GITHUB_LIST_DEPLOYMENT_STATUSES",
                    "GITHUB_LIST_DEPLOY_KEYS",
                    "GITHUB_LIST_DISCUSSIONS",
                    "GITHUB_LIST_DISCUSSIONS_LEGACY",
                    "GITHUB_LIST_DISCUSSION_COMMENTS",
                    "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY",
                    "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS",
                    "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_ENVIRONMENTS",
                    "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES",
                    "GITHUB_LIST_ENVIRONMENT_SECRETS",
                    "GITHUB_LIST_ENVIRONMENT_VARIABLES",
                    "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS",
                    "GITHUB_LIST_FOLLOWERS_OF_A_USER",
                    "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_FORKS",
                    "GITHUB_LIST_GISTS_FOR_A_USER",
                    "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_GIST_COMMENTS",
                    "GITHUB_LIST_GIST_COMMITS",
                    "GITHUB_LIST_GIST_FORKS",
                    "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY",
                    "GITHUB_LIST_GITHUB_PAGES_BUILDS",
                    "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES",
                    "GITHUB_LIST_GPG_KEYS_FOR_A_USER",
                    "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP",
                    "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT",
                    "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_ISSUE_COMMENTS",
                    "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_ISSUE_EVENTS",
                    "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN",
                    "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT",
                    "GITHUB_LIST_LABELS_FOR_AN_ISSUE",
                    "GITHUB_LIST_LABELS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                    "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE",
                    "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT",
                    "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE",
                    "GITHUB_LIST_MATCHING_REFERENCES",
                    "GITHUB_LIST_MILESTONES",
                    "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_ORGANIZATIONS",
                    "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER",
                    "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS",
                    "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_ORGANIZATION_MEMBERS",
                    "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_ORGANIZATION_MIGRATIONS",
                    "GITHUB_LIST_ORGANIZATION_PROJECTS",
                    "GITHUB_LIST_ORGANIZATION_REPOSITORIES",
                    "GITHUB_LIST_ORGANIZATION_RULE_SUITES",
                    "GITHUB_LIST_ORGANIZATION_SECRETS",
                    "GITHUB_LIST_ORGANIZATION_VARIABLES",
                    "GITHUB_LIST_ORGANIZATION_WEBHOOKS",
                    "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS",
                    "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED",
                    "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS",
                    "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS",
                    "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES",
                    "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_OWNED_PACKAGE_VERSIONS",
                    "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_PACKAGES_FOR_A_USER",
                    "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE",
                    "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION",
                    "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER",
                    "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS",
                    "GITHUB_LIST_PENDING_TEAM_INVITATIONS",
                    "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY",
                    "GITHUB_LIST_PROJECT_CARDS",
                    "GITHUB_LIST_PROJECT_COLLABORATORS",
                    "GITHUB_LIST_PROJECT_COLUMNS",
                    "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_PUBLIC_EVENTS",
                    "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES",
                    "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER",
                    "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER",
                    "GITHUB_LIST_PUBLIC_GISTS",
                    "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER",
                    "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS",
                    "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS",
                    "GITHUB_LIST_PUBLIC_REPOSITORIES",
                    "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_PULL_REQUESTS",
                    "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT",
                    "GITHUB_LIST_PULL_REQUESTS_FILES",
                    "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE",
                    "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT",
                    "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT",
                    "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                    "GITHUB_LIST_REACTIONS_FOR_A_RELEASE",
                    "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION",
                    "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT",
                    "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                    "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY",
                    "GITHUB_LIST_RELEASES",
                    "GITHUB_LIST_RELEASE_ASSETS",
                    "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION",
                    "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                    "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
                    "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION",
                    "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION",
                    "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER",
                    "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER",
                    "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_REPOSITORY_ACTIVITIES",
                    "GITHUB_LIST_REPOSITORY_COLLABORATORS",
                    "GITHUB_LIST_REPOSITORY_CONTRIBUTORS",
                    "GITHUB_LIST_REPOSITORY_EVENTS",
                    "GITHUB_LIST_REPOSITORY_INVITATIONS",
                    "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_REPOSITORY_ISSUES",
                    "GITHUB_LIST_REPOSITORY_LANGUAGES",
                    "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS",
                    "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES",
                    "GITHUB_LIST_REPOSITORY_PROJECTS",
                    "GITHUB_LIST_REPOSITORY_RULE_SUITES",
                    "GITHUB_LIST_REPOSITORY_SECRETS",
                    "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING",
                    "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES",
                    "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_REPOSITORY_TAGS",
                    "GITHUB_LIST_REPOSITORY_TEAMS",
                    "GITHUB_LIST_REPOSITORY_VARIABLES",
                    "GITHUB_LIST_REPOSITORY_WEBHOOKS",
                    "GITHUB_LIST_REPOSITORY_WORKFLOWS",
                    "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE",
                    "GITHUB_LIST_REPO_ACCESS_BY_TOKEN",
                    "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER",
                    "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES",
                    "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST",
                    "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY",
                    "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST",
                    "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE",
                    "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_SECURITY_MANAGER_TEAMS",
                    "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                    "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                    "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS",
                    "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION",
                    "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER",
                    "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER",
                    "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_STARGAZERS",
                    "GITHUB_LIST_STARRED_GISTS",
                    "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED",
                    "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY",
                    "GITHUB_LIST_TEAMS",
                    "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                    "GITHUB_LIST_TEAM_MEMBERS",
                    "GITHUB_LIST_TEAM_MEMBERS_LEGACY",
                    "GITHUB_LIST_TEAM_PROJECTS",
                    "GITHUB_LIST_TEAM_PROJECTS_LEGACY",
                    "GITHUB_LIST_TEAM_REPOSITORIES",
                    "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY",
                    "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS",
                    "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS",
                    "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE",
                    "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES",
                    "GITHUB_LIST_USERS",
                    "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION",
                    "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                    "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                    "GITHUB_LIST_USER_MIGRATIONS",
                    "GITHUB_LIST_USER_PROJECTS",
                    "GITHUB_LIST_WATCHERS",
                    "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY",
                    "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW",
                    "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS",
                    "GITHUB_LOCK_AN_ISSUE",
                    "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES",
                    "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS",
                    "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS",
                    "GITHUB_MAP_A_COMMIT_AUTHOR",
                    "GITHUB_MARK_A_THREAD_AS_DONE",
                    "GITHUB_MARK_A_THREAD_AS_READ",
                    "GITHUB_MARK_NOTIFICATIONS_AS_READ",
                    "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ",
                    "GITHUB_MERGE_A_BRANCH",
                    "GITHUB_MERGE_A_PULL_REQUEST",
                    "GITHUB_META_ROOT",
                    "GITHUB_MOVE_A_PROJECT_CARD",
                    "GITHUB_MOVE_A_PROJECT_COLUMN",
                    "GITHUB_PING_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_PING_A_REPOSITORY_WEBHOOK",
                    "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY",
                    "GITHUB_PULLS_CREATE",
                    "GITHUB_PULLS_CREATE_REVIEW",
                    "GITHUB_PULLS_CREATE_REVIEW_COMMENT",
                    "GITHUB_PULLS_LIST",
                    "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                    "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE",
                    "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM",
                    "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER",
                    "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER",
                    "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM",
                    "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER",
                    "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS",
                    "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE",
                    "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                    "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE",
                    "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM",
                    "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY",
                    "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR",
                    "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION",
                    "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM",
                    "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY",
                    "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM",
                    "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET",
                    "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER",
                    "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER",
                    "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER",
                    "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                    "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES",
                    "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME",
                    "GITHUB_REMOVE_ORG_SECRET_BY_NAME",
                    "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION",
                    "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP",
                    "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET",
                    "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                    "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST",
                    "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET",
                    "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS",
                    "GITHUB_REMOVE_STATUS_CHECK_PROTECTION",
                    "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                    "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS",
                    "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                    "GITHUB_REMOVE_TEAM_MEMBER_LEGACY",
                    "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                    "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                    "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS",
                    "GITHUB_REMOVE_USER_AS_A_COLLABORATOR",
                    "GITHUB_RENAME_A_BRANCH",
                    "GITHUB_RENDER_A_MARKDOWN_DOCUMENT",
                    "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS",
                    "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED",
                    "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET",
                    "GITHUB_REPO_S_CREATE_FOR_AUTHENTICATED_USER",
                    "GITHUB_REPO_S_GET_COMMIT",
                    "GITHUB_REPO_S_GET_CONTENT",
                    "GITHUB_REPO_S_LIST_FOR_ORG",
                    "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY",
                    "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD",
                    "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST",
                    "GITHUB_REREQUEST_A_CHECK_RUN",
                    "GITHUB_REREQUEST_A_CHECK_SUITE",
                    "GITHUB_RESET_A_TOKEN",
                    "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION",
                    "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER",
                    "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                    "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER",
                    "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION",
                    "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN",
                    "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN",
                    "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                    "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS",
                    "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN",
                    "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN",
                    "GITHUB_RE_RUN_A_WORKFLOW",
                    "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN",
                    "GITHUB_SEARCH_CODE",
                    "GITHUB_SEARCH_COMMITS",
                    "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS",
                    "GITHUB_SEARCH_LABELS",
                    "GITHUB_SEARCH_REPOSITORIES",
                    "GITHUB_SEARCH_REPO_S",
                    "GITHUB_SEARCH_TOPICS",
                    "GITHUB_SEARCH_USERS",
                    "GITHUB_SET_ADMIN_BRANCH_PROTECTION",
                    "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                    "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                    "GITHUB_SET_APP_ACCESS_RESTRICTIONS",
                    "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION",
                    "GITHUB_SET_A_THREAD_SUBSCRIPTION",
                    "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                    "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                    "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                    "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                    "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                    "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                    "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                    "GITHUB_SET_LABELS_FOR_AN_ISSUE",
                    "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                    "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                    "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                    "GITHUB_SET_STATUS_CHECK_CONTEXTS",
                    "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS",
                    "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                    "GITHUB_SET_USER_ACCESS_RESTRICTIONS",
                    "GITHUB_START_AN_IMPORT",
                    "GITHUB_START_AN_ORGANIZATION_MIGRATION",
                    "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_START_A_USER_MIGRATION",
                    "GITHUB_STAR_A_GIST",
                    "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER",
                    "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST",
                    "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY",
                    "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK",
                    "GITHUB_TRANSFER_A_REPOSITORY",
                    "GITHUB_UNBLOCK_A_USER",
                    "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION",
                    "GITHUB_UNFOLLOW_A_USER",
                    "GITHUB_UNLOCK_AN_ISSUE",
                    "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY",
                    "GITHUB_UNLOCK_A_USER_REPOSITORY",
                    "GITHUB_UNSTAR_A_GIST",
                    "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE",
                    "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD",
                    "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN",
                    "GITHUB_UPDATE_AN_IMPORT",
                    "GITHUB_UPDATE_AN_ISSUE",
                    "GITHUB_UPDATE_AN_ISSUE_COMMENT",
                    "GITHUB_UPDATE_AN_ORGANIZATION",
                    "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                    "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE",
                    "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK",
                    "GITHUB_UPDATE_A_CHECK_RUN",
                    "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                    "GITHUB_UPDATE_A_CODE_SCANNING_ALERT",
                    "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                    "GITHUB_UPDATE_A_COMMIT_COMMENT",
                    "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE",
                    "GITHUB_UPDATE_A_DEPENDABOT_ALERT",
                    "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY",
                    "GITHUB_UPDATE_A_DISCUSSION",
                    "GITHUB_UPDATE_A_DISCUSSION_COMMENT",
                    "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY",
                    "GITHUB_UPDATE_A_DISCUSSION_LEGACY",
                    "GITHUB_UPDATE_A_GIST",
                    "GITHUB_UPDATE_A_GIST_COMMENT",
                    "GITHUB_UPDATE_A_LABEL",
                    "GITHUB_UPDATE_A_MILESTONE",
                    "GITHUB_UPDATE_A_PROJECT",
                    "GITHUB_UPDATE_A_PULL_REQUEST",
                    "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH",
                    "GITHUB_UPDATE_A_REFERENCE",
                    "GITHUB_UPDATE_A_RELEASE",
                    "GITHUB_UPDATE_A_RELEASE_ASSET",
                    "GITHUB_UPDATE_A_REPOSITORY",
                    "GITHUB_UPDATE_A_REPOSITORY_INVITATION",
                    "GITHUB_UPDATE_A_REPOSITORY_RULESET",
                    "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY",
                    "GITHUB_UPDATE_A_REPOSITORY_VARIABLE",
                    "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK",
                    "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                    "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST",
                    "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT",
                    "GITHUB_UPDATE_A_TEAM",
                    "GITHUB_UPDATE_A_TEAM_LEGACY",
                    "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                    "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                    "GITHUB_UPDATE_BRANCH_PROTECTION",
                    "GITHUB_UPDATE_GIT_LFS_PREFERENCE",
                    "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE",
                    "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION",
                    "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES",
                    "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS",
                    "GITHUB_UPDATE_STATUS_CHECK_PROTECTION",
                    "GITHUB_UPDATE_THE_AUTHENTICATED_USER",
                    "GITHUB_UPDATE_TOKEN_ORG_ACCESS",
                    "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA",
                    "GITHUB_USERS_GET_AUTHENTICATED",
                    "GITHUB_USERS_GET_BY_USERNAME",
                    "GITHUB_USERS_LIST_PUBLIC_EMAILS_FOR_AUTHENTICATED_USER",
                    "GITHUB_USERS_LIST_SOCIAL_ACCOUNTS_FOR_USER",
                    "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED"
                  ],
                  "combobox": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "action_names",
                  "value": [
                    "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS"
                  ],
                  "display_name": "Actions to use",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The actions to pass to agent to execute",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultiselectInput"
                },
                "api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "Composio API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key",
                  "refresh_button": true,
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "app_names": {
                  "trace_as_metadata": true,
                  "options": [
                    "APALEO",
                    "APIFY",
                    "ASANA",
                    "ATTIO",
                    "BITBUCKET",
                    "BREVO",
                    "BROWSERBASE_TOOL",
                    "BROWSER_TOOL",
                    "CLICKUP",
                    "CODEINTERPRETER",
                    "CODE_FORMAT_TOOL",
                    "CODE_GREP_TOOL",
                    "CODE_INDEX_TOOL",
                    "CODE_MAP_TOOL",
                    "COMPOSIO",
                    "DISCORD",
                    "DROPBOX",
                    "ELEVENLABS",
                    "EMBED_TOOL",
                    "EXA",
                    "FIGMA",
                    "FILETOOL",
                    "FIRECRAWL",
                    "GIT",
                    "GITHUB",
                    "GITLAB",
                    "GMAIL",
                    "GOOGLECALENDAR",
                    "GOOGLEDOCS",
                    "GOOGLEDRIVE",
                    "GOOGLEMEET",
                    "GOOGLESHEETS",
                    "GOOGLETASKS",
                    "GREPTILE",
                    "HACKERNEWS",
                    "HEROKU",
                    "HISTORY_FETCHER",
                    "HUBSPOT",
                    "IMAGE_ANALYSER",
                    "INDUCED_AI",
                    "JIRA",
                    "KLAVIYO",
                    "LINEAR",
                    "LISTENNOTES",
                    "MATHEMATICAL",
                    "MULTIONAI",
                    "NASA",
                    "NOTION",
                    "OKTA",
                    "PAGERDUTY",
                    "PERPLEXITYAI",
                    "PIPEDRIVE",
                    "POSTHOG",
                    "RAGTOOL",
                    "SCHEDULER",
                    "SERPAPI",
                    "SHELLTOOL",
                    "SLACK",
                    "SLACKBOT",
                    "SNOWFLAKE",
                    "SOUNDCLOUD",
                    "SPIDERTOOL",
                    "SPLITWISE",
                    "SPOTIFY",
                    "SQLTOOL",
                    "STRAVA",
                    "TASKADE",
                    "TAVILY",
                    "TRELLO",
                    "TWILIO",
                    "TWITTER",
                    "TYPEFORM",
                    "WEATHERMAP",
                    "WEBTOOL",
                    "WHATSAPP",
                    "WORKABLE",
                    "WORKSPACE_TOOL",
                    "YOUSEARCH",
                    "YOUTUBE",
                    "ZENDESK",
                    "ZEPTOOL",
                    "ZOOM"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "app_names",
                  "value": "GITHUB",
                  "display_name": "App Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The app name to use. Please refresh after selecting app name",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "auth_status_config": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "auth_status_config",
                  "value": "GITHUB CONNECTED",
                  "display_name": "Auth status",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Open link or enter api key. Then refresh button",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "entity_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "entity_id",
                  "value": "default",
                  "display_name": "Entity ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Use Composio toolset to run actions with your agent",
              "icon": "Composio",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "Composio Tools",
              "documentation": "https://docs.composio.dev",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "entity_id",
                "api_key",
                "app_names",
                "action_names",
                "auth_status_config"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ComposioAPI-eVVDu"
          },
          "selected": false,
          "width": 384,
          "height": 633,
          "positionAbsolute": {
            "x": -1708.1287716834595,
            "y": 1905.6582548691897
          },
          "dragging": false
        },
        {
          "id": "OpenAIEmbeddings-lPBSd",
          "type": "genericNode",
          "position": {
            "x": -3542.2793722220995,
            "y": 1152.3593439974807
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "chunk_size": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 1000,
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "client": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "client",
                  "value": "",
                  "display_name": "Client",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "default_headers": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_headers",
                  "value": {},
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default headers to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "default_query": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_query",
                  "value": {},
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default query parameters to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "deployment": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "deployment",
                  "value": "",
                  "display_name": "Deployment",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "dimensions": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "dimensions",
                  "value": "",
                  "display_name": "Dimensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "embedding_ctx_length": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding_ctx_length",
                  "value": 1536,
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "max_retries": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_retries",
                  "value": 3,
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "text-embedding-3-small",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "openai_api_base": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_type": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_type",
                  "value": "",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_version": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_version",
                  "value": "",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_organization": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_organization",
                  "value": "",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_proxy": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_proxy",
                  "value": "",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "request_timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "request_timeout",
                  "value": "",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                },
                "show_progress_bar": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "show_progress_bar",
                  "value": false,
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "skip_empty": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "skip_empty",
                  "value": false,
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_enable": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_enable",
                  "value": true,
                  "display_name": "TikToken Enable",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If False, you must have transformers installed.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_model_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_model_name",
                  "value": "",
                  "display_name": "TikToken Model Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Generate embeddings using OpenAI models.",
              "icon": "OpenAI",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "OpenAI Embeddings",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "default_headers",
                "default_query",
                "chunk_size",
                "client",
                "deployment",
                "embedding_ctx_length",
                "max_retries",
                "model",
                "model_kwargs",
                "openai_api_base",
                "openai_api_key",
                "openai_api_type",
                "openai_api_version",
                "openai_organization",
                "openai_proxy",
                "request_timeout",
                "show_progress_bar",
                "skip_empty",
                "tiktoken_model_name",
                "tiktoken_enable",
                "dimensions"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "OpenAIEmbeddings-lPBSd"
          },
          "selected": false,
          "width": 384,
          "height": 388,
          "dragging": false,
          "positionAbsolute": {
            "x": -3542.2793722220995,
            "y": 1152.3593439974807
          }
        },
        {
          "id": "Directory-IVxiV",
          "type": "genericNode",
          "position": {
            "x": -3547.5184323158346,
            "y": 1562.553098166891
          },
          "data": {
            "type": "Directory",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\nimport os\nimport logging  \nfrom axiestudio.base.data.utils import parallel_load_data, parse_text_file_to_data, retrieve_file_paths\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, IntInput, MessageTextInput\nfrom axiestudio.schema import Data\nfrom axiestudio.template import Output\n\n\nclass DirectoryComponent(Component):\n    display_name = \"Directory\"\n    description = \"Recursively load files from a directory.\"\n    icon = \"folder\"\n    name = \"Directory\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"path\",\n            display_name=\"Path\",\n            info=\"Path to the directory to load files from.\",\n        ),\n        MessageTextInput(\n            name=\"types\",\n            display_name=\"Types\",\n            info=\"File types to load. Leave empty to load all types.\",\n            is_list=True,\n        ),\n        IntInput(\n            name=\"depth\",\n            display_name=\"Depth\",\n            info=\"Depth to search for files.\",\n            value=0,\n        ),\n        IntInput(\n            name=\"max_concurrency\",\n            display_name=\"Max Concurrency\",\n            advanced=True,\n            info=\"Maximum concurrency for loading files.\",\n            value=2,\n        ),\n        BoolInput(\n            name=\"load_hidden\",\n            display_name=\"Load Hidden\",\n            advanced=True,\n            info=\"If true, hidden files will be loaded.\",\n        ),\n        BoolInput(\n            name=\"recursive\",\n            display_name=\"Recursive\",\n            advanced=True,\n            info=\"If true, the search will be recursive.\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"Use Multithreading\",\n            advanced=True,\n            info=\"If true, multithreading will be used.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_directory\"),\n    ]\n\n    def load_directory(self) -> List[Data]:\n        path = self.path\n        types = self.types or []  # self.types is already a list due to is_list=True\n        depth = self.depth\n        max_concurrency = self.max_concurrency\n        load_hidden = self.load_hidden\n        recursive = self.recursive\n        silent_errors = self.silent_errors\n        use_multithreading = self.use_multithreading\n\n        resolved_path = self.resolve_path(path)\n        file_paths = retrieve_file_paths(resolved_path, load_hidden, recursive, depth)\n\n        if types:\n            file_paths = [fp for fp in file_paths if any(fp.endswith(ext) for ext in types)]\n\n        loaded_data = []\n\n        if use_multithreading:\n            loaded_data = parallel_load_data(file_paths, silent_errors, max_concurrency)\n        else:\n            loaded_data = [self.process_markdown_file(file_path) for file_path in file_paths]\n        loaded_data = self._docs_to_data(loaded_data) #list(filter(None, loaded_data))\n        self.status = loaded_data\n        return loaded_data  # type: ignore\n        \n    def process_markdown_file(self, file_path: str) -> dict:\n            logging.info(f\"Processing file: {file_path}\")\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    content = file.read()\n                \n                title = os.path.basename(file_path).rsplit('.', 1)[0]\n                \n                logging.info(f\"Successfully processed {title}\")\n                return {\n                    \"title\": title,\n                    \"content\": content\n                }\n            except IOError as e:\n                logging.error(f\"Error processing file {file_path}: {str(e)}\")\n                return None\n                \n    def _docs_to_data(self, docs):\n        return [Data(text=doc[\"content\"], data={\"title\": doc[\"title\"]}) for doc in docs]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "depth": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "depth",
                  "value": 0,
                  "display_name": "Depth",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Depth to search for files.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "load_hidden": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "load_hidden",
                  "value": false,
                  "display_name": "Load Hidden",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, hidden files will be loaded.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_concurrency": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_concurrency",
                  "value": 2,
                  "display_name": "Max Concurrency",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Maximum concurrency for loading files.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "path": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "path",
                  "value": "/Users/mohammed.ahmed/Documents/Langflow/Challenge-1/docs",
                  "display_name": "Path",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Path to the directory to load files from.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "recursive": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "recursive",
                  "value": false,
                  "display_name": "Recursive",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, the search will be recursive.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "silent_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "silent_errors",
                  "value": false,
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "types": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "types",
                  "value": [
                    ""
                  ],
                  "display_name": "Types",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "File types to load. Leave empty to load all types.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "use_multithreading": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "use_multithreading",
                  "value": false,
                  "display_name": "Use Multithreading",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, multithreading will be used.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Recursively load files from a directory.",
              "icon": "folder",
              "base_classes": [
                "Data"
              ],
              "display_name": "Directory",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "load_directory",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "path",
                "types",
                "depth",
                "max_concurrency",
                "load_hidden",
                "recursive",
                "silent_errors",
                "use_multithreading"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "Directory-IVxiV"
          },
          "selected": false,
          "width": 384,
          "height": 474,
          "dragging": false,
          "positionAbsolute": {
            "x": -3547.5184323158346,
            "y": 1562.553098166891
          }
        },
        {
          "id": "ComposioAPI-aSkKs",
          "type": "genericNode",
          "position": {
            "x": -1690.7431711579475,
            "y": 3183.1580001215657
          },
          "data": {
            "type": "ComposioAPI",
            "node": {
              "template": {
                "_type": "Component",
                "action_names": {
                  "trace_as_metadata": true,
                  "options": [
                    "FIRECRAWL_CHECK_CRAWL_STATUS",
                    "FIRECRAWL_CRAWL",
                    "FIRECRAWL_EXTRACT",
                    "FIRECRAWL_SCRAPE",
                    "FIRECRAWL_SEARCH"
                  ],
                  "combobox": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "action_names",
                  "value": [
                    "FIRECRAWL_SCRAPE"
                  ],
                  "display_name": "Actions to use",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The actions to pass to agent to execute",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultiselectInput"
                },
                "api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "Composio API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key",
                  "refresh_button": true,
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "app_names": {
                  "trace_as_metadata": true,
                  "options": [
                    "APALEO",
                    "APIFY",
                    "ASANA",
                    "ATTIO",
                    "BITBUCKET",
                    "BREVO",
                    "BROWSERBASE_TOOL",
                    "BROWSER_TOOL",
                    "CLICKUP",
                    "CODEINTERPRETER",
                    "CODE_FORMAT_TOOL",
                    "CODE_GREP_TOOL",
                    "CODE_INDEX_TOOL",
                    "CODE_MAP_TOOL",
                    "COMPOSIO",
                    "DISCORD",
                    "DROPBOX",
                    "ELEVENLABS",
                    "EMBED_TOOL",
                    "EXA",
                    "FIGMA",
                    "FILETOOL",
                    "FIRECRAWL",
                    "GIT",
                    "GITHUB",
                    "GITLAB",
                    "GMAIL",
                    "GOOGLECALENDAR",
                    "GOOGLEDOCS",
                    "GOOGLEDRIVE",
                    "GOOGLEMEET",
                    "GOOGLESHEETS",
                    "GOOGLETASKS",
                    "GREPTILE",
                    "HACKERNEWS",
                    "HEROKU",
                    "HISTORY_FETCHER",
                    "HUBSPOT",
                    "IMAGE_ANALYSER",
                    "INDUCED_AI",
                    "JIRA",
                    "KLAVIYO",
                    "LINEAR",
                    "LISTENNOTES",
                    "MATHEMATICAL",
                    "MULTIONAI",
                    "NASA",
                    "NOTION",
                    "OKTA",
                    "PAGERDUTY",
                    "PERPLEXITYAI",
                    "PIPEDRIVE",
                    "POSTHOG",
                    "RAGTOOL",
                    "SCHEDULER",
                    "SERPAPI",
                    "SHELLTOOL",
                    "SLACK",
                    "SLACKBOT",
                    "SNOWFLAKE",
                    "SOUNDCLOUD",
                    "SPIDERTOOL",
                    "SPLITWISE",
                    "SPOTIFY",
                    "SQLTOOL",
                    "STRAVA",
                    "TASKADE",
                    "TAVILY",
                    "TRELLO",
                    "TWILIO",
                    "TWITTER",
                    "TYPEFORM",
                    "WEATHERMAP",
                    "WEBTOOL",
                    "WHATSAPP",
                    "WORKABLE",
                    "WORKSPACE_TOOL",
                    "YOUSEARCH",
                    "YOUTUBE",
                    "ZENDESK",
                    "ZEPTOOL",
                    "ZOOM"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "app_names",
                  "value": "FIRECRAWL",
                  "display_name": "App Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The app name to use. Please refresh after selecting app name",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "auth_status_config": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "auth_status_config",
                  "value": "FIRECRAWL CONNECTED",
                  "display_name": "Auth status",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Open link or enter api key. Then refresh button",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "entity_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "entity_id",
                  "value": "default",
                  "display_name": "Entity ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Use Composio toolset to run actions with your agent",
              "icon": "Composio",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "Composio Tools",
              "documentation": "https://docs.composio.dev",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "entity_id",
                "api_key",
                "app_names",
                "action_names",
                "auth_status_config"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ComposioAPI-aSkKs"
          },
          "selected": false,
          "width": 384,
          "height": 633,
          "positionAbsolute": {
            "x": -1690.7431711579475,
            "y": 3183.1580001215657
          },
          "dragging": false
        },
        {
          "id": "CrewAIWithCustomSearchComponent-08mqQ",
          "type": "genericNode",
          "position": {
            "x": -787.3639903392773,
            "y": 2439.817091363844
          },
          "data": {
            "type": "CrewAIWithCustomSearchComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "Language model that will run the agent.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tools",
                  "value": [],
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool"
                  ],
                  "dynamic": false,
                  "info": "Tools at agent's disposal",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from crewai import Agent, Task, Crew, Process\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, HandleInput, SecretStrInput, IntInput\nfrom typing import Any, List\nimport traceback\nfrom axiestudio.base.agents.crewai.crew import BaseCrewComponent\n\nclass CrewAIWithCustomSearchComponent(BaseCrewComponent):\n    display_name = \"CrewAI Workflow with Custom Search\"\n    description = \"Executes a CrewAI workflow with a custom search capability.\"\n    documentation = \"https://docs.crewai.com/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MessageTextInput(name=\"goal\", display_name=\"Goal\"),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agent's disposal\",\n            value=[],\n        ),\n    ]\n\n    def build_agents(self) -> tuple[Agent, Agent, Agent]:\n        # Initialize agents with concise yet informative backstories and goals\n        document_specialist = Agent(\n            role=\"Documentation Specialist\",\n            goal=\"Extract and summarize the most relevant documentation sections related to the user's query.\",\n            backstory=\"\"\"You are skilled at navigating and summarizing technical documentation to assist users effectively.\"\"\",\n            llm=self.llm,\n            verbose=True,\n            allow_delegation=False\n        )\n\n        web_researcher = Agent(\n            role=\"Web & GitHub Researcher\",\n            goal=\"Find and summarize key information from web sources and GitHub related to the user's query.\",\n            backstory=\"\"\"Your expertise lies in efficiently gathering and summarizing information from web and GitHub sources.\"\"\",\n            llm=self.llm,\n            verbose=True,\n            allow_delegation=False\n        )\n\n        writer = Agent(\n            role=\"Langflow Support Synthesizer\",\n            goal=\"Compose a detailed and well-reasoned response to the user's query, integrating information from the other agents.\",\n            backstory=\"\"\"You excel at synthesizing information from various sources to provide comprehensive answers.\"\"\",\n            llm=self.llm,\n            verbose=True,\n            allow_delegation=False\n        )\n\n        return document_specialist, web_researcher, writer\n\n    def build_tasks(self, document_specialist: Agent, web_researcher: Agent, writer: Agent) -> List[Task]:\n        if not self.tools:\n            raise ValueError(\"No tools available. The tools list is empty.\")\n\n        tools_dict = {tool.name: tool for tool in self.tools}\n\n        # Retrieve necessary tools\n        pinecone_tool = tools_dict.get(\"PINECONE_SEARCH\")\n        tavily_tool = tools_dict.get(\"TAVILY_TAVILY_SEARCH\")\n\n        # Ensure necessary tools are available\n        if not pinecone_tool:\n            raise ValueError(\"PINECONE_SEARCH tool is missing.\")\n        if not tavily_tool:\n            raise ValueError(\"TAVILY_TAVILY_SEARCH tool is missing.\")\n\n        # Document Task\n        document_task = Task(\n            description=(\n                f\"\"\"Search and summarize the most relevant sections from Langflow's documentation for the query: '{self.goal}'.\n                \n                IMPORTANT:\n                - You can make only **one successful call** to the PINECONE_SEARCH tool.\n                - If you encounter an error, you may retry, but do not make multiple successful calls.\n                - Focus on providing key insights, relevant code examples, and direct answers to the query.\n                \"\"\"\n            ),\n            agent=document_specialist,\n            expected_output=\"\"\"\n            Documentation Summary:\n            - **Section Title**: [Brief summary of how it relates to the query]\n               - **Key Points**:\n                 - [Point 1]\n                 - [Point 2]\n               - **Code Example (if applicable)**:\n                 ```python\n                 [Relevant code snippet]\n                 ```\n            \"\"\",\n            tools=[pinecone_tool],\n            async_execution=True,\n        )\n\n        # Web Research Task\n        web_task = Task(\n            description=(\n                f\"\"\"Perform targeted web searches to find the most relevant online discussions, articles, or GitHub issues related to the query: '{self.goal}'.\n                \n                IMPORTANT:\n                - You can make **up to two successful calls** to the TAVILY_TAVILY_SEARCH tool.\n                    1. First, perform a general search with the user's query.\n                    2. Second, perform a search specifically targeting GitHub issues and discussions related to the query.\n                - For each call, if you encounter an error, you may retry, but do not make multiple successful calls beyond the two allowed.\n                - Summarize the key findings from both searches.\n                \"\"\"\n            ),\n            agent=web_researcher,\n            expected_output=\"\"\"\n            Web and GitHub Findings:\n            - **Source Title**: [Title and URL]\n               - **Summary**: [Brief summary of content and relevance]\n            \"\"\",\n            tools=[tavily_tool],\n            async_execution=True,\n        )\n\n        # Writer Task\n        writer_task = Task(\n            description=(\n                f\"\"\"Using the outputs from the Documentation Specialist and Web & GitHub Researcher, compose a detailed and comprehensive response to the query: '{self.goal}'.\n\n                **Guidelines**:\n                - Thoroughly analyze the summaries provided by the other agents.\n                - Integrate key insights, code examples, and recommendations into your response.\n                - Provide clear explanations and reasoning to address the user's query, ensuring accuracy.\n                - If discussing specific implementations or systems (like the \"tweaks\" or \"global variables\" system), ensure your explanation reflects how it actually works (e.g., use of global variables and passing them with API call parameters or in soome function provided by axiestudio).\n                - If the discussion pertains to a specific query, focus solely on that topic. For example, if the question relates to the usage of a custom component, provide information exclusively about the custom component. If the question is about a custom tool, limit the response to details regarding the custom tool.\n                - When discussing prompt components, illustrate the creation of dynamic variables by enclosing them in curly braces within the template. If the user requests code, provide the relevant code; otherwise, stick to a general explanation.                \n                - Structure the response with appropriate headings and formatting for clarity.\n                - Ensure the final answer is self-contained and does not refer back to the agents' outputs as separate entities.\n                - Avoid including unnecessary or redundant information to keep token usage efficient.\n                \"\"\"\n            ),\n            expected_output=f\"\"\"\n                \n                [Provide a detailed answer to the user's query, integrating information from both the documentation and web findings.]\n                \n                **Explanation**:\n                \n                [Offer in-depth explanations, including how you arrived at the answer, important considerations, and any relevant technical details.]\n                \n                **Code Examples (if applicable)**:\n                \n                ```python\n                [Include any relevant code snippets that help illustrate the solution.]\n                ```\n                \n                **Additional Resources**:\n                \n                - [List any additional documentation links, articles, or GitHub issues that may help the user.]\n                \"\"\",\n            agent=writer,\n            context=[document_task, web_task],\n            async_execution=False,\n        )\n\n        return [document_task, web_task, writer_task]\n\n    def build_crew(self) -> Crew:\n        try:\n            document_specialist, web_researcher, writer = self.build_agents()\n            tasks = self.build_tasks(document_specialist, web_researcher, writer)\n\n            crew = Crew(\n                agents=[document_specialist, web_researcher, writer],\n                tasks=tasks,\n                process=Process.sequential,\n                verbose=2\n            )\n            return crew\n\n        except Exception as e:\n            error_message = f\"An error occurred during CrewAI execution: {str(e)}\\nTraceback: {traceback.format_exc()}\"\n            print(error_message)\n            self.status = error_message\n            return error_message",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "goal": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "goal",
                  "value": "",
                  "display_name": "Goal",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Executes a CrewAI workflow with a custom search capability.",
              "icon": "CrewAI",
              "base_classes": [
                "Message"
              ],
              "display_name": "Multi Agent Crew",
              "documentation": "https://docs.crewai.com/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "output",
                  "display_name": "Output",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "goal",
                "llm",
                "tools"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "CrewAIWithCustomSearchComponent-08mqQ"
          },
          "selected": false,
          "width": 384,
          "height": 422,
          "dragging": false,
          "positionAbsolute": {
            "x": -787.3639903392773,
            "y": 2439.817091363844
          }
        },
        {
          "id": "Pinecone-RXZA9",
          "type": "genericNode",
          "position": {
            "x": -3035.8475745719534,
            "y": 1210.0842886710668
          },
          "data": {
            "type": "Pinecone",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding",
                  "value": "",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "ingest_data": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "distance_strategy": {
                  "trace_as_metadata": true,
                  "options": [
                    "Cosine",
                    "Euclidean",
                    "Dot Product"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "distance_strategy",
                  "value": "Cosine",
                  "display_name": "Distance Strategy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "index_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "index_name",
                  "value": "agents",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "namespace": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "namespace",
                  "value": "ns1",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Namespace for the index.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 4,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "pinecone_api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "pinecone_api_key",
                  "value": "",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "text_key": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "text",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Key in the record to use as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Pinecone Vector Store with search capabilities",
              "icon": "Pinecone",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Pinecone",
              "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "text_key",
                "search_query",
                "ingest_data",
                "embedding",
                "number_of_results"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "Pinecone-RXZA9"
          },
          "selected": false,
          "width": 384,
          "height": 746,
          "dragging": false,
          "positionAbsolute": {
            "x": -3035.8475745719534,
            "y": 1210.0842886710668
          }
        },
        {
          "id": "OpenAIEmbeddings-1EeZ4",
          "type": "genericNode",
          "position": {
            "x": -2238.942213602306,
            "y": 1247.2869225017737
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "chunk_size": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 1000,
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "client": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "client",
                  "value": "",
                  "display_name": "Client",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "default_headers": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_headers",
                  "value": {},
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default headers to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "default_query": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_query",
                  "value": {},
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default query parameters to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "deployment": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "deployment",
                  "value": "",
                  "display_name": "Deployment",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "dimensions": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "dimensions",
                  "value": "",
                  "display_name": "Dimensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "embedding_ctx_length": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding_ctx_length",
                  "value": 1536,
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "max_retries": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_retries",
                  "value": 3,
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "text-embedding-3-small",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "openai_api_base": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_type": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_type",
                  "value": "",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_version": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_version",
                  "value": "",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_organization": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_organization",
                  "value": "",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_proxy": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_proxy",
                  "value": "",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "request_timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "request_timeout",
                  "value": "",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                },
                "show_progress_bar": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "show_progress_bar",
                  "value": false,
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "skip_empty": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "skip_empty",
                  "value": false,
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_enable": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_enable",
                  "value": true,
                  "display_name": "TikToken Enable",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If False, you must have transformers installed.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_model_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_model_name",
                  "value": "",
                  "display_name": "TikToken Model Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Generate embeddings using OpenAI models.",
              "icon": "OpenAI",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "OpenAI Embeddings",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "default_headers",
                "default_query",
                "chunk_size",
                "client",
                "deployment",
                "embedding_ctx_length",
                "max_retries",
                "model",
                "model_kwargs",
                "openai_api_base",
                "openai_api_key",
                "openai_api_type",
                "openai_api_version",
                "openai_organization",
                "openai_proxy",
                "request_timeout",
                "show_progress_bar",
                "skip_empty",
                "tiktoken_model_name",
                "tiktoken_enable",
                "dimensions"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "OpenAIEmbeddings-1EeZ4"
          },
          "selected": false,
          "width": 384,
          "height": 388,
          "positionAbsolute": {
            "x": -2238.942213602306,
            "y": 1247.2869225017737
          },
          "dragging": false
        },
        {
          "id": "PineconeSearch-GGDNf",
          "type": "genericNode",
          "position": {
            "x": -1714.8606280985805,
            "y": 1040.5954340362732
          },
          "data": {
            "type": "PineconeSearch",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding",
                  "value": "",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional\nfrom pydantic import BaseModel, Field\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import SecretStrInput, MessageTextInput, DropdownInput, IntInput\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Tool\nfrom langchain.tools import StructuredTool\nfrom langchain_pinecone.vectorstores import Pinecone\nfrom axiestudio.helpers.data import docs_to_data\n\nclass PineconeSearchToolComponent(LCToolComponent):\n    display_name = \"Pinecone Search\"\n    description = \"Perform similarity search using Pinecone vector database.\"\n    icon = \"Pinecone\"\n    name = \"PineconeSearch\"\n    documentation = \"https://docs.pinecone.io/docs/overview\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"pinecone_api_key\",\n            display_name=\"Pinecone API Key\",\n            required=True,\n            info=\"Your Pinecone API Key.\",\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        MessageTextInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            required=True,\n            info=\"The name of your Pinecone index.\",\n            value=\"agents\",\n        ),\n        MessageTextInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"The namespace to use in the Pinecone index.\",\n            value=\"ns1\",\n        ),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            info=\"The distance strategy for similarity search.\",\n            options=[\"cosine\", \"euclidean\", \"dot_product\"],\n            value=\"cosine\",\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"The number of search results to return.\",\n            value=3,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"The search query for similarity search.\",\n        ),\n    ]\n\n    class PineconeSearchSchema(BaseModel):\n        query: str = Field(..., description=\"The search query for similarity search.\")\n        number_of_results: int = Field(3, description=\"The number of search results to return.\")\n\n    def run_model(self) -> List[Data]:\n        return self._pinecone_search(\n            self.query,\n            self.number_of_results,\n        )\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"PINECONE_SEARCH\",\n            description=\"Perform a similarity search using the Pinecone vector database.\",\n            func=self._pinecone_search,\n            args_schema=self.PineconeSearchSchema,\n        )\n\n    def _pinecone_search(\n        self,\n        query: str,\n        number_of_results: int = 3,\n    ) -> List[Data]:\n        try:\n            vector_store = Pinecone(\n                index_name=self.index_name,\n                embedding=self.embedding,\n                namespace=self.namespace,\n                distance_strategy=self.distance_strategy,\n                pinecone_api_key=self.pinecone_api_key,\n            )\n\n            if query and isinstance(query, str) and query.strip():\n                docs = vector_store.similarity_search(\n                    query=query,\n                    k=number_of_results,\n                )\n                data = docs_to_data(docs)\n                self.status = data\n                return data\n            else:\n                error_message = \"Invalid query for Pinecone search.\"\n                self.status = error_message\n                return [Data(data={\"error\": error_message})]\n\n        except Exception as e:\n            error_message = f\"Unexpected error: {str(e)}\"\n            self.status = error_message\n            return [Data(data={\"error\": error_message})]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "distance_strategy": {
                  "trace_as_metadata": true,
                  "options": [
                    "cosine",
                    "euclidean",
                    "dot_product"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "distance_strategy",
                  "value": "cosine",
                  "display_name": "Distance Strategy",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The distance strategy for similarity search.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "index_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "index_name",
                  "value": "agents",
                  "display_name": "Index Name",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The name of your Pinecone index.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "namespace": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "namespace",
                  "value": "ns1",
                  "display_name": "Namespace",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The namespace to use in the Pinecone index.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 3,
                  "display_name": "Number of Results",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The number of search results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "pinecone_api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "pinecone_api_key",
                  "value": "",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Your Pinecone API Key.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "query": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The search query for similarity search.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Perform similarity search using Pinecone vector database.",
              "icon": "Pinecone",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "Pinecone Vector Search",
              "documentation": "https://docs.pinecone.io/docs/overview",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "pinecone_api_key",
                "embedding",
                "index_name",
                "namespace",
                "distance_strategy",
                "number_of_results",
                "query"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "PineconeSearch-GGDNf"
          },
          "selected": false,
          "width": 384,
          "height": 853,
          "positionAbsolute": {
            "x": -1714.8606280985805,
            "y": 1040.5954340362732
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-d8Szd",
          "type": "genericNode",
          "position": {
            "x": -826.0503755950391,
            "y": 3004.681039271254
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\r\nfrom functools import reduce\r\n\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\r\nfrom axiestudio.field_typing import LanguageModel\r\nfrom axiestudio.inputs import (\r\n    BoolInput,\r\n    DictInput,\r\n    DropdownInput,\r\n    FloatInput,\r\n    IntInput,\r\n    MessageInput,\r\n    SecretStrInput,\r\n    StrInput,\r\n)\r\n\r\nclass OpenAIModelComponent(LCModelComponent):\r\n    display_name = \"OpenAI\"\r\n    description = \"Generates text using OpenAI LLMs.\"\r\n    icon = \"OpenAI\"\r\n    name = \"OpenAIModel\"\r\n\r\n    inputs = [\r\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\r\n        IntInput(\r\n            name=\"max_tokens\",\r\n            display_name=\"Max Tokens\",\r\n            advanced=True,\r\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\r\n        ),\r\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\r\n        BoolInput(\r\n            name=\"json_mode\",\r\n            display_name=\"JSON Mode\",\r\n            advanced=True,\r\n            info=\"If True, it will output JSON regardless of passing a schema.\",\r\n        ),\r\n        DictInput(\r\n            name=\"output_schema\",\r\n            is_list=True,\r\n            display_name=\"Schema\",\r\n            advanced=True,\r\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=[\"gpt-4o-mini\"], value=\"gpt-4o-mini\"\r\n        ),\r\n        StrInput(\r\n            name=\"openai_api_base\",\r\n            display_name=\"OpenAI API Base\",\r\n            advanced=True,\r\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"OpenAI API Key\",\r\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\r\n            advanced=False,\r\n            value=\"OPENAI_API_KEY\",\r\n        ),\r\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\r\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\r\n        StrInput(\r\n            name=\"system_message\",\r\n            display_name=\"System Message\",\r\n            info=\"System message to pass to the model.\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"seed\",\r\n            display_name=\"Seed\",\r\n            info=\"The seed controls the reproducibility of the job.\",\r\n            advanced=True,\r\n            value=1,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\r\n        # self.output_schema is a list of dictionaries\r\n        # let's convert it to a dictionary\r\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\r\n        openai_api_key = self.api_key\r\n        temperature = self.temperature\r\n        model_name: str = self.model_name\r\n        max_tokens = self.max_tokens\r\n        model_kwargs = self.model_kwargs or {}\r\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\r\n        json_mode = bool(output_schema_dict) or self.json_mode\r\n        seed = self.seed\r\n\r\n        if openai_api_key:\r\n            api_key = SecretStr(openai_api_key)\r\n        else:\r\n            api_key = None\r\n        output = ChatOpenAI(\r\n            max_tokens=max_tokens or None,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=api_key,\r\n            temperature=temperature or 0.1,\r\n            seed=seed,\r\n        )\r\n        if json_mode:\r\n            if output_schema_dict:\r\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\r\n            else:\r\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\r\n\r\n        return output  # type: ignore\r\n\r\n    def _get_exception_message(self, e: Exception):\r\n        \"\"\"\r\n        Get a message from an OpenAI exception.\r\n\r\n        Args:\r\n            exception (Exception): The exception to get the message from.\r\n\r\n        Returns:\r\n            str: The message from the exception.\r\n        \"\"\"\r\n\r\n        try:\r\n            from openai import BadRequestError\r\n        except ImportError:\r\n            return\r\n        if isinstance(e, BadRequestError):\r\n            message = e.body.get(\"message\")  # type: ignore\r\n            if message:\r\n                return message\r\n        return",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "json_mode",
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o-mini"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "gpt-4o-mini",
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "load_from_db": false
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "output_schema",
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 1,
                  "name": "seed",
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool"
                },
                "system_message": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0.1,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float"
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "openai_api_base",
                "api_key",
                "temperature",
                "stream",
                "system_message",
                "seed"
              ],
              "beta": false,
              "edited": true,
              "official": false,
              "lf_version": "1.0.18"
            },
            "id": "OpenAIModel-d8Szd"
          },
          "selected": false,
          "width": 384,
          "height": 605,
          "positionAbsolute": {
            "x": -826.0503755950391,
            "y": 3004.681039271254
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-iA7yc",
          "type": "genericNode",
          "position": {
            "x": -317.44473120523435,
            "y": 2529.968272948814
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_template",
                  "value": "{text}",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "AI",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ChatOutput-iA7yc"
          },
          "selected": false,
          "width": 384,
          "height": 302,
          "positionAbsolute": {
            "x": -317.44473120523435,
            "y": 2529.968272948814
          },
          "dragging": false
        },
        {
          "id": "ComposioAPI-3S15k",
          "type": "genericNode",
          "position": {
            "x": -1701.425314809219,
            "y": 2547.6292171864307
          },
          "data": {
            "type": "ComposioAPI",
            "node": {
              "template": {
                "_type": "Component",
                "action_names": {
                  "trace_as_metadata": true,
                  "options": [
                    "TAVILY_TAVILY_SEARCH"
                  ],
                  "combobox": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "action_names",
                  "value": [
                    "TAVILY_TAVILY_SEARCH"
                  ],
                  "display_name": "Actions to use",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The actions to pass to agent to execute",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultiselectInput"
                },
                "api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "Composio API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key",
                  "refresh_button": true,
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "app_names": {
                  "trace_as_metadata": true,
                  "options": [
                    "APALEO",
                    "APIFY",
                    "ASANA",
                    "ATTIO",
                    "BITBUCKET",
                    "BREVO",
                    "BROWSERBASE_TOOL",
                    "BROWSER_TOOL",
                    "CLICKUP",
                    "CODEINTERPRETER",
                    "CODE_FORMAT_TOOL",
                    "CODE_GREP_TOOL",
                    "CODE_INDEX_TOOL",
                    "CODE_MAP_TOOL",
                    "COMPOSIO",
                    "DISCORD",
                    "DROPBOX",
                    "ELEVENLABS",
                    "EMBED_TOOL",
                    "EXA",
                    "FIGMA",
                    "FILETOOL",
                    "FIRECRAWL",
                    "GIT",
                    "GITHUB",
                    "GITLAB",
                    "GMAIL",
                    "GOOGLECALENDAR",
                    "GOOGLEDOCS",
                    "GOOGLEDRIVE",
                    "GOOGLEMEET",
                    "GOOGLESHEETS",
                    "GOOGLETASKS",
                    "GREPTILE",
                    "HACKERNEWS",
                    "HEROKU",
                    "HISTORY_FETCHER",
                    "HUBSPOT",
                    "IMAGE_ANALYSER",
                    "INDUCED_AI",
                    "JIRA",
                    "KLAVIYO",
                    "LINEAR",
                    "LISTENNOTES",
                    "MATHEMATICAL",
                    "MULTIONAI",
                    "NASA",
                    "NOTION",
                    "OKTA",
                    "PAGERDUTY",
                    "PERPLEXITYAI",
                    "PIPEDRIVE",
                    "POSTHOG",
                    "RAGTOOL",
                    "SCHEDULER",
                    "SERPAPI",
                    "SHELLTOOL",
                    "SLACK",
                    "SLACKBOT",
                    "SNOWFLAKE",
                    "SOUNDCLOUD",
                    "SPIDERTOOL",
                    "SPLITWISE",
                    "SPOTIFY",
                    "SQLTOOL",
                    "STRAVA",
                    "TASKADE",
                    "TAVILY",
                    "TRELLO",
                    "TWILIO",
                    "TWITTER",
                    "TYPEFORM",
                    "WEATHERMAP",
                    "WEBTOOL",
                    "WHATSAPP",
                    "WORKABLE",
                    "WORKSPACE_TOOL",
                    "YOUSEARCH",
                    "YOUTUBE",
                    "ZENDESK",
                    "ZEPTOOL",
                    "ZOOM"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "app_names",
                  "value": "TAVILY",
                  "display_name": "App Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The app name to use. Please refresh after selecting app name",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "auth_status_config": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "auth_status_config",
                  "value": "TAVILY CONNECTED",
                  "display_name": "Auth status",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Open link or enter api key. Then refresh button",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "entity_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "entity_id",
                  "value": "default",
                  "display_name": "Entity ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Use Composio toolset to run actions with your agent",
              "icon": "Composio",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "Composio Tools",
              "documentation": "https://docs.composio.dev",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "entity_id",
                "api_key",
                "app_names",
                "action_names",
                "auth_status_config"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ComposioAPI-3S15k"
          },
          "selected": false,
          "width": 384,
          "height": 633,
          "positionAbsolute": {
            "x": -1701.425314809219,
            "y": 2547.6292171864307
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "Directory-IVxiV",
          "sourceHandle": "{œdataTypeœ:œDirectoryœ,œidœ:œDirectory-IVxiVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "Pinecone-RXZA9",
          "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ingest_data",
              "id": "Pinecone-RXZA9",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "Directory",
              "id": "Directory-IVxiV",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-Directory-IVxiV{œdataTypeœ:œDirectoryœ,œidœ:œDirectory-IVxiVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-Pinecone-RXZA9{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-lPBSd",
          "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-lPBSdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Pinecone-RXZA9",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Pinecone-RXZA9",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-lPBSd",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-lPBSd{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-lPBSdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-RXZA9{œfieldNameœ:œembeddingœ,œidœ:œPinecone-RXZA9œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-1EeZ4",
          "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1EeZ4œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "PineconeSearch-GGDNf",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-GGDNfœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "PineconeSearch-GGDNf",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-1EeZ4",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-1EeZ4{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1EeZ4œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-PineconeSearch-GGDNf{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-GGDNfœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "PineconeSearch-GGDNf",
          "sourceHandle": "{œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-GGDNfœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CrewAIWithCustomSearchComponent-08mqQ",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CrewAIWithCustomSearchComponent-08mqQ",
              "inputTypes": [
                "Tool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "PineconeSearch",
              "id": "PineconeSearch-GGDNf",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-PineconeSearch-GGDNf{œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-GGDNfœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ComposioAPI-aSkKs",
          "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-aSkKsœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CrewAIWithCustomSearchComponent-08mqQ",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CrewAIWithCustomSearchComponent-08mqQ",
              "inputTypes": [
                "Tool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ComposioAPI",
              "id": "ComposioAPI-aSkKs",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-ComposioAPI-aSkKs{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-aSkKsœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ChatInput-Mhy7E",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "CrewAIWithCustomSearchComponent-08mqQ",
          "targetHandle": "{œfieldNameœ:œgoalœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "goal",
              "id": "CrewAIWithCustomSearchComponent-08mqQ",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-Mhy7E",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-Mhy7E{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œgoalœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ComposioAPI-eVVDu",
          "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-eVVDuœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CrewAIWithCustomSearchComponent-08mqQ",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CrewAIWithCustomSearchComponent-08mqQ",
              "inputTypes": [
                "Tool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ComposioAPI",
              "id": "ComposioAPI-eVVDu",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-ComposioAPI-eVVDu{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-eVVDuœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-d8Szd",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-d8Szdœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "CrewAIWithCustomSearchComponent-08mqQ",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CrewAIWithCustomSearchComponent-08mqQ",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-d8Szd",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-d8Szd{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-d8Szdœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œllmœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "CrewAIWithCustomSearchComponent-08mqQ",
          "sourceHandle": "{œdataTypeœ:œCrewAIWithCustomSearchComponentœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-iA7yc",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-iA7ycœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-iA7yc",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "CrewAIWithCustomSearchComponent",
              "id": "CrewAIWithCustomSearchComponent-08mqQ",
              "name": "output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-CrewAIWithCustomSearchComponent-08mqQ{œdataTypeœ:œCrewAIWithCustomSearchComponentœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-iA7yc{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-iA7ycœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatOutput-iA7yc",
          "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-iA7ycœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "LangWatchEvaluatorComponent-gPZln",
          "targetHandle": "{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "answer",
              "id": "LangWatchEvaluatorComponent-gPZln",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatOutput",
              "id": "ChatOutput-iA7yc",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatOutput-iA7yc{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-iA7ycœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-gPZln{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-Mhy7E",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "LangWatchEvaluatorComponent-gPZln",
          "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "question",
              "id": "LangWatchEvaluatorComponent-gPZln",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-Mhy7E",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-Mhy7E{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Mhy7Eœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-gPZln{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-gPZlnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ComposioAPI-3S15k",
          "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-3S15kœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CrewAIWithCustomSearchComponent-08mqQ",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CrewAIWithCustomSearchComponent-08mqQ",
              "inputTypes": [
                "Tool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ComposioAPI",
              "id": "ComposioAPI-3S15k",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-ComposioAPI-3S15k{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-3S15kœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIWithCustomSearchComponent-08mqQ{œfieldNameœ:œtoolsœ,œidœ:œCrewAIWithCustomSearchComponent-08mqQœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 1419.278259194885,
        "y": -1064.7276693633594,
        "zoom": 0.5850570982355469
      }
    },
    "date_created": "2024-11-19T17:04:02.703Z",
    "date_updated": "2024-11-19T17:04:02.815Z",
    "status": "Public",
    "sort": null,
    "user_updated": "d5b0563c-0a44-4468-b5e8-66ec983def2f",
    "user_created": {
      "username": "dragnboy",
      "first_name": "draggon",
      "last_name": "boy",
      "id": "d5b0563c-0a44-4468-b5e8-66ec983def2f"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:53.791Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 110,
    "converter_version": "1.0.0"
  }
}