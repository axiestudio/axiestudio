{
  "id": "8b4e4c6c-59af-4ad2-9a05-94b9c87a4425",
  "name": "Untitled document (60)",
  "description": "Empowering Enterprises with Intelligent Interactions. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Zod12",
    "first_name": "General",
    "last_name": "Zod",
    "id": "c076bce5-81d3-4b8b-a6a3-dee007e34c3d",
    "full_name": "General Zod"
  },
  "store_url": "https://www.langflow.store/store/component/8b4e4c6c-59af-4ad2-9a05-94b9c87a4425",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-11T10:47:07.423Z",
    "updated": "2024-06-11T10:47:07.472Z",
    "downloaded": "2025-08-19T17:50:05.627Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Prompt",
        "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.0a36",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatInput-7T31w",
        "type": "genericNode",
        "position": {
          "x": 147,
          "y": 143.89999771118164
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-7T31w"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "APIRequest-0l0WK",
        "type": "genericNode",
        "position": {
          "x": 587,
          "y": -29.020005035400388
        },
        "data": {
          "type": "APIRequest",
          "node": {
            "template": {
              "body": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "body",
                "display_name": "Body",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The body to send with the request (for POST, PATCH, PUT).",
                "load_from_db": false,
                "title_case": false
              },
              "headers": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\nimport json\nfrom typing import List, Optional\n\nimport httpx\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass APIRequest(CustomComponent):\n    display_name: str = \"API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"field_type\": \"str\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"field_type\": \"int\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> Record:\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            return Record(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": response.status_code,\n                    \"result\": result,\n                },\n            )\n        except httpx.TimeoutException:\n            return Record(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 408,\n                    \"error\": \"Request timed out\",\n                },\n            )\n        except Exception as exc:\n            return Record(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 500,\n                    \"error\": str(exc),\n                },\n            )\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        headers: Optional[Record] = None,\n        body: Optional[Record] = None,\n        timeout: int = 5,\n    ) -> List[Record]:\n        if headers is None:\n            headers_dict = {}\n        else:\n            headers_dict = headers.data\n\n        bodies = []\n        if body:\n            if isinstance(body, list):\n                bodies = [b.data for b in body]\n            else:\n                bodies = [body.data]\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        self.status = results\n        return results\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "method": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "GET",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ],
                "name": "method",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "The HTTP method to use.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "urls",
                "display_name": "URLs",
                "advanced": false,
                "dynamic": false,
                "info": "URLs to make requests to.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": [
                  "www.google.com"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Make HTTP requests given one or more URLs.",
            "icon": "Globe",
            "base_classes": [
              "Record"
            ],
            "display_name": "API Request",
            "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
            "custom_fields": {
              "method": null,
              "urls": null,
              "headers": null,
              "body": null,
              "timeout": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "urls",
              "method",
              "headers",
              "body",
              "timeout"
            ],
            "beta": false
          },
          "id": "APIRequest-0l0WK"
        },
        "selected": true,
        "width": 384,
        "height": 555,
        "positionAbsolute": {
          "x": 587,
          "y": -29.020005035400388
        },
        "dragging": false
      }
    ],
    "edges": [],
    "viewport": {
      "x": 0,
      "y": 124.92000274658203,
      "zoom": 1
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "APIRequest": {
      "count": 1
    },
    "total": 2
  },
  "original": {
    "id": "8b4e4c6c-59af-4ad2-9a05-94b9c87a4425",
    "name": "Untitled document (60)",
    "description": "Empowering Enterprises with Intelligent Interactions.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "4",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "APIRequest": {
        "count": 1
      },
      "total": 2
    },
    "last_tested_version": "1.0.0a36",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatInput-7T31w",
          "type": "genericNode",
          "position": {
            "x": 147,
            "y": 143.89999771118164
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-7T31w"
          },
          "selected": false,
          "width": 384,
          "height": 374
        },
        {
          "id": "APIRequest-0l0WK",
          "type": "genericNode",
          "position": {
            "x": 587,
            "y": -29.020005035400388
          },
          "data": {
            "type": "APIRequest",
            "node": {
              "template": {
                "body": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "body",
                  "display_name": "Body",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The body to send with the request (for POST, PATCH, PUT).",
                  "load_from_db": false,
                  "title_case": false
                },
                "headers": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\nimport json\nfrom typing import List, Optional\n\nimport httpx\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass APIRequest(CustomComponent):\n    display_name: str = \"API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"field_type\": \"str\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"field_type\": \"int\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> Record:\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            return Record(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": response.status_code,\n                    \"result\": result,\n                },\n            )\n        except httpx.TimeoutException:\n            return Record(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 408,\n                    \"error\": \"Request timed out\",\n                },\n            )\n        except Exception as exc:\n            return Record(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 500,\n                    \"error\": str(exc),\n                },\n            )\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        headers: Optional[Record] = None,\n        body: Optional[Record] = None,\n        timeout: int = 5,\n    ) -> List[Record]:\n        if headers is None:\n            headers_dict = {}\n        else:\n            headers_dict = headers.data\n\n        bodies = []\n        if body:\n            if isinstance(body, list):\n                bodies = [b.data for b in body]\n            else:\n                bodies = [body.data]\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        self.status = results\n        return results\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "method": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "GET",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "GET",
                    "POST",
                    "PATCH",
                    "PUT"
                  ],
                  "name": "method",
                  "display_name": "Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The HTTP method to use.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "urls",
                  "display_name": "URLs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URLs to make requests to.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": [
                    "www.google.com"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Make HTTP requests given one or more URLs.",
              "icon": "Globe",
              "base_classes": [
                "Record"
              ],
              "display_name": "API Request",
              "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
              "custom_fields": {
                "method": null,
                "urls": null,
                "headers": null,
                "body": null,
                "timeout": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "urls",
                "method",
                "headers",
                "body",
                "timeout"
              ],
              "beta": false
            },
            "id": "APIRequest-0l0WK"
          },
          "selected": true,
          "width": 384,
          "height": 555,
          "positionAbsolute": {
            "x": 587,
            "y": -29.020005035400388
          },
          "dragging": false
        }
      ],
      "edges": [],
      "viewport": {
        "x": 0,
        "y": 124.92000274658203,
        "zoom": 1
      }
    },
    "date_created": "2024-06-11T10:47:07.423Z",
    "date_updated": "2024-06-11T10:47:07.472Z",
    "status": "Public",
    "sort": null,
    "user_updated": "c076bce5-81d3-4b8b-a6a3-dee007e34c3d",
    "user_created": {
      "username": "Zod12",
      "first_name": "General",
      "last_name": "Zod",
      "id": "c076bce5-81d3-4b8b-a6a3-dee007e34c3d"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Prompt",
          "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:01.417Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 14,
    "converter_version": "1.0.0"
  }
}