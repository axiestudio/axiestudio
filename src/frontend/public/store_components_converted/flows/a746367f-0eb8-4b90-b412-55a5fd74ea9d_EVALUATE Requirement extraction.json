{
  "id": "a746367f-0eb8-4b90-b412-55a5fd74ea9d",
  "name": "[EVALUATE] Requirement extraction",
  "description": "Evaluate set of extracted requirements (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "wiresky",
    "first_name": "Nguyen",
    "last_name": "Nam",
    "id": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "full_name": "Nguyen Nam"
  },
  "store_url": "https://www.langflow.store/store/component/a746367f-0eb8-4b90-b412-55a5fd74ea9d",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-17T02:41:01.739Z",
    "updated": "2024-06-17T02:41:01.780Z",
    "downloaded": "2025-08-19T17:50:05.607Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CustomComponent-yuvpH",
        "type": "genericNode",
        "position": {
          "x": 1061.5075438519345,
          "y": 43.68832457865326
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "batch_inp": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "batch_inp",
                "display_name": "Inputs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "batch_out": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "batch_out",
                "display_name": "Outputs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom typing import Optional, List\nimport numpy as np\nimport json\nfrom langfuse import Langfuse\n\nclass Evaluator(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"Evaluator\"\n    description = \"Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.\"\n    \n    def build_config(self):\n        return {\n            \"batch_inp\": {\"display_name\": \"Inputs\"},\n            \"batch_out\": {\"display_name\": \"Outputs\"},\n            \"dataset\": {\"display_name\": \"Dataset name\", \"required\": False},\n            \"experiment_name\": {\"display_name\": \"Experiment name\", \"required\": False},\n            \"trace_name\": {\"display_name\": \"Trace name\", \"required\": False},\n            \"field_validators\": {\"display_name\": \"Field validators\"},\n            \"scorers\": {\"display_name\": \"Scorers\"},\n            \"model_name\": {\"display_name\": \"Model name\", \"required\": False},\n            \"master_key\": {\"display_name\": \"Master key\", \"required\": False},\n            \"tags\": {\"display_name\": \"Tags\", \"required\": False}\n        }\n\n    def build(self, batch_inp: Any, batch_out: Any, \n                    field_validators: List[Any], \n                    scorers: List[Any], \n                    dataset: Optional[str]=None, \n                    experiment_name: Optional[str]=None, \n                    trace_name: Optional[str]=None, \n                    model_name: Optional[str]=None, \n                    master_key: Optional[str]=None,\n                    tags: Optional[List[str]]=None) -> Any:\n        \n        if (isinstance(batch_inp,str)):\n            if (batch_inp in ('',' ')):\n                raise ValueError(\"Input string must not be empty\")\n            batch_inp = [batch_inp]\n        if (isinstance(batch_out,str)):\n            if (batch_out in ('',' ')):\n                raise ValueError(\"Output string must not be empty\")\n            batch_out = [batch_out]\n        if (len(batch_inp)!=len(batch_out)):\n            raise ValueError(\"Inconsistent number of input and output instances encountered\")\n        if (len(batch_out)==0):\n            raise ValueError(\"Output list must not be empty\")\n        if (len(batch_inp)==0):\n            raise ValueError(\"Input list must not be empty\")\n            \n        field_check = {}\n        score_list = []\n        langfuse = Langfuse(\n            secret_key=os.environ.get('LANGFLOW_LANGFUSE_SECRET_KEY', ''),\n            public_key=os.environ.get('LANGFLOW_LANGFUSE_PUBLIC_KEY', ''),\n            host=os.environ.get('LANGFLOW_LANGFUSE_HOST', ''),\n        )\n\n        if (dataset is not None):\n            langfuse.create_dataset(name=dataset)\n        \n            # Add inputs to Langfuse dataset        \n            for inp in batch_inp:\n                langfuse.create_dataset_item(\n                    dataset_name=dataset,\n                    input = inp,\n                    expected_output='')\n                \n            inputs = langfuse.get_dataset(dataset).items\n            for item, out in zip(inputs, batch_out):\n                langfuse_generation = langfuse.generation(\n                    input=item.input,\n                    output=out,\n                    model=model_name,\n                    name=trace_name\n                    ) \n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                if (experiment_name is not None):\n                    item.link(langfuse_generation, experiment_name)\n                \n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=item.input)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=item.input)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='requirementExtraction_JSONFormatCompliance', value=0)\n            \n        else:\n            for inp, out in zip(batch_inp, batch_out):\n\n                langfuse_generation = langfuse.generation(\n                    input=inp,\n                    output=out,\n                    name=trace_name,\n                    model=model_name\n                    )\n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=inp)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=inp)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='requirementExtraction_JSONFormatCompliance', value=0)\n        return score_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "dataset": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "dataset",
                "display_name": "Dataset name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "experiment_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "experiment_name",
                "display_name": "Experiment name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "field_validators": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_validators",
                "display_name": "Field validators",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "master_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "master_key",
                "display_name": "Master key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "requirements"
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_name",
                "display_name": "Model name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "gpt-3.5-turbo"
              },
              "scorers": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "scorers",
                "display_name": "Scorers",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tags": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tags",
                "display_name": "Tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": [
                  "Evaluation",
                  "Requirement Extraction"
                ]
              },
              "trace_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "trace_name",
                "display_name": "Trace name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Requirement Extraction Evaluation"
              },
              "_type": "CustomComponent"
            },
            "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
            "base_classes": [
              "Data"
            ],
            "display_name": "Evaluator",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "batch_inp": null,
              "batch_out": null,
              "field_validators": null,
              "scorers": null,
              "dataset": null,
              "experiment_name": null,
              "trace_name": null,
              "model_name": null,
              "master_key": null,
              "tags": null
            },
            "output_types": [
              "Data"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-yuvpH",
          "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
          "display_name": "Evaluator"
        },
        "selected": false,
        "width": 384,
        "height": 1119,
        "dragging": false
      },
      {
        "id": "CustomComponent-198VL",
        "type": "genericNode",
        "position": {
          "x": 343.0268366936101,
          "y": -76.39139121875212
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"content\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "content": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "content",
                "display_name": "Content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "{\n    \"requirements\": [\n        {\n            \"requirement\": \"The legacy system must be transitioned to a cloud-based service implementation\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"System Modernization\",\n            \"systems\": [\n                \"Legacy System\",\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"Data, applications, and services must be transferred to the cloud\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Data Management\",\n            \"systems\": [\n                \"Legacy System\",\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"A testing strategy must be developed to ensure performance, security, and scalability of the new cloud-based system\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Quality Assurance\",\n            \"systems\": [\n                \"Legacy System\",\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"Training must be provided to users on the new cloud system\",\n            \"type\": \"Functional\",\n            \"level\": \"Operational requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Training\",\n            \"systems\": [\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"The system must not allow B2B data transferring\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Data Security\",\n            \"systems\": [\n                \"Cloud Service\"\n            ]\n        }\n    ]\n}"
              },
              "_type": "CustomComponent"
            },
            "description": "Plain text placeholder, return text in Any type for better connection with custom components",
            "base_classes": [
              "Any"
            ],
            "display_name": "TextPlaceholderGeneric",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "content": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-198VL"
        },
        "selected": false,
        "width": 384,
        "height": 387,
        "positionAbsolute": {
          "x": 343.0268366936101,
          "y": -76.39139121875212
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-e9sWp",
        "type": "genericNode",
        "position": {
          "x": 335.8210691107121,
          "y": -512.7560923731048
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"content\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "content": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "content",
                "display_name": "Content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "To modernize a legacy system by transitioning it to a cloud-based service implementation, the following steps should be followed. First, conduct a thorough analysis of the current legacy system to identify its functionalities, dependencies, and potential challenges. Next, design a migration plan outlining the process of transferring data, applications, and services to the cloud. Then, develop a testing strategy to ensure the new cloud-based system meets performance, security, and scalability requirements. Finally, execute the migration plan, monitor the transition process, and provide training to users on the new cloud system. Additionally, the system will not allow B2B data transferring."
              },
              "_type": "CustomComponent"
            },
            "description": "Plain text placeholder, return text in Any type for better connection with custom components",
            "base_classes": [
              "Any"
            ],
            "display_name": "TextPlaceholderGeneric",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "content": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-e9sWp"
        },
        "selected": false,
        "width": 384,
        "height": 387,
        "positionAbsolute": {
          "x": 335.8210691107121,
          "y": -512.7560923731048
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-sAn8Q",
        "type": "genericNode",
        "position": {
          "x": 345.4830038663317,
          "y": 410.58928203160383
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "requirement"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "requirementExtraction_requirement_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-sAn8Q",
          "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
          "display_name": "FieldExistenceScorer"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "dragging": false,
        "positionAbsolute": {
          "x": 345.4830038663317,
          "y": 410.58928203160383
        }
      },
      {
        "id": "CustomComponent-BC84u",
        "type": "genericNode",
        "position": {
          "x": -70.30782915847101,
          "y": 626.4393927855735
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "requirement"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "requirementExtraction_requirement_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-BC84u",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "dragging": false,
        "positionAbsolute": {
          "x": -70.30782915847101,
          "y": 626.4393927855735
        }
      },
      {
        "id": "OpenAIEmbeddings-24Mbz",
        "type": "genericNode",
        "position": {
          "x": -710.3402938714971,
          "y": 350.3924760370913
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "allowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "allowed_special",
                "display_name": "Allowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "client",
                "display_name": "Client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "default_headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_headers",
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "default_query": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_query",
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "deployment",
                "display_name": "Deployment",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "disallowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [
                  "all"
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "disallowed_special",
                "display_name": "Disallowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding_ctx_length": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 8191,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding_ctx_length",
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 6,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_version": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_organization": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_proxy": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "show_progress_bar": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "show_progress_bar",
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "skip_empty": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "skip_empty",
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_enable": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_enable",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_model_name",
                "display_name": "TikToken Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "OpenAI embedding models",
            "base_classes": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "display_name": "OpenAIEmbeddings",
            "documentation": "",
            "custom_fields": {
              "default_headers": null,
              "default_query": null,
              "allowed_special": null,
              "disallowed_special": null,
              "chunk_size": null,
              "client": null,
              "deployment": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "output_types": [
              "OpenAIEmbeddings",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIEmbeddings-24Mbz"
        },
        "selected": false,
        "width": 384,
        "height": 635,
        "positionAbsolute": {
          "x": -710.3402938714971,
          "y": 350.3924760370913
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-D02hw",
        "type": "genericNode",
        "position": {
          "x": -74.27355158573278,
          "y": 1195.0746859745886
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "requirement"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "requirementExtraction_requirement_comprehension"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-D02hw",
          "description": "Return Flesch reading ease score (Comprehension score)",
          "display_name": "ComprehensionScorer"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "dragging": false,
        "positionAbsolute": {
          "x": -74.27355158573278,
          "y": 1195.0746859745886
        }
      }
    ],
    "edges": [
      {
        "source": "CustomComponent-e9sWp",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-e9sWpœ}",
        "target": "CustomComponent-yuvpH",
        "targetHandle": "{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "batch_inp",
            "id": "CustomComponent-yuvpH",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-e9sWp"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-e9sWp{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-e9sWpœ}-CustomComponent-yuvpH{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-198VL",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-198VLœ}",
        "target": "CustomComponent-yuvpH",
        "targetHandle": "{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "batch_out",
            "id": "CustomComponent-yuvpH",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-198VL"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-198VL{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-198VLœ}-CustomComponent-yuvpH{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-sAn8Q",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-sAn8Qœ}",
        "target": "CustomComponent-yuvpH",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-yuvpH",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-sAn8Q"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-sAn8Q{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-sAn8Qœ}-CustomComponent-yuvpH{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "OpenAIEmbeddings-24Mbz",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-24Mbzœ}",
        "target": "CustomComponent-BC84u",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-BC84uœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-BC84u",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-24Mbz"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-24Mbz{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-24Mbzœ}-CustomComponent-BC84u{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-BC84uœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
      },
      {
        "source": "CustomComponent-BC84u",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-BC84uœ}",
        "target": "CustomComponent-yuvpH",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-yuvpH",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-BC84u"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-BC84u{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-BC84uœ}-CustomComponent-yuvpH{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-D02hw",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-D02hwœ}",
        "target": "CustomComponent-yuvpH",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-yuvpH",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-D02hw"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-D02hw{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-D02hwœ}-CustomComponent-yuvpH{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      }
    ],
    "viewport": {
      "x": 529.8998660167889,
      "y": 262.8847555992721,
      "zoom": 0.3298769776932244
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 6
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "a746367f-0eb8-4b90-b412-55a5fd74ea9d",
    "name": "[EVALUATE] Requirement extraction",
    "description": "Evaluate set of extracted requirements",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "CustomComponent": {
        "count": 6
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "0.6.18",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "CustomComponent-yuvpH",
          "type": "genericNode",
          "position": {
            "x": 1061.5075438519345,
            "y": 43.68832457865326
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "batch_inp": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "batch_inp",
                  "display_name": "Inputs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "batch_out": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "batch_out",
                  "display_name": "Outputs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom typing import Optional, List\nimport numpy as np\nimport json\nfrom langfuse import Langfuse\n\nclass Evaluator(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"Evaluator\"\n    description = \"Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.\"\n    \n    def build_config(self):\n        return {\n            \"batch_inp\": {\"display_name\": \"Inputs\"},\n            \"batch_out\": {\"display_name\": \"Outputs\"},\n            \"dataset\": {\"display_name\": \"Dataset name\", \"required\": False},\n            \"experiment_name\": {\"display_name\": \"Experiment name\", \"required\": False},\n            \"trace_name\": {\"display_name\": \"Trace name\", \"required\": False},\n            \"field_validators\": {\"display_name\": \"Field validators\"},\n            \"scorers\": {\"display_name\": \"Scorers\"},\n            \"model_name\": {\"display_name\": \"Model name\", \"required\": False},\n            \"master_key\": {\"display_name\": \"Master key\", \"required\": False},\n            \"tags\": {\"display_name\": \"Tags\", \"required\": False}\n        }\n\n    def build(self, batch_inp: Any, batch_out: Any, \n                    field_validators: List[Any], \n                    scorers: List[Any], \n                    dataset: Optional[str]=None, \n                    experiment_name: Optional[str]=None, \n                    trace_name: Optional[str]=None, \n                    model_name: Optional[str]=None, \n                    master_key: Optional[str]=None,\n                    tags: Optional[List[str]]=None) -> Any:\n        \n        if (isinstance(batch_inp,str)):\n            if (batch_inp in ('',' ')):\n                raise ValueError(\"Input string must not be empty\")\n            batch_inp = [batch_inp]\n        if (isinstance(batch_out,str)):\n            if (batch_out in ('',' ')):\n                raise ValueError(\"Output string must not be empty\")\n            batch_out = [batch_out]\n        if (len(batch_inp)!=len(batch_out)):\n            raise ValueError(\"Inconsistent number of input and output instances encountered\")\n        if (len(batch_out)==0):\n            raise ValueError(\"Output list must not be empty\")\n        if (len(batch_inp)==0):\n            raise ValueError(\"Input list must not be empty\")\n            \n        field_check = {}\n        score_list = []\n        langfuse = Langfuse(\n            secret_key=os.environ.get('LANGFLOW_LANGFUSE_SECRET_KEY', ''),\n            public_key=os.environ.get('LANGFLOW_LANGFUSE_PUBLIC_KEY', ''),\n            host=os.environ.get('LANGFLOW_LANGFUSE_HOST', ''),\n        )\n\n        if (dataset is not None):\n            langfuse.create_dataset(name=dataset)\n        \n            # Add inputs to Langfuse dataset        \n            for inp in batch_inp:\n                langfuse.create_dataset_item(\n                    dataset_name=dataset,\n                    input = inp,\n                    expected_output='')\n                \n            inputs = langfuse.get_dataset(dataset).items\n            for item, out in zip(inputs, batch_out):\n                langfuse_generation = langfuse.generation(\n                    input=item.input,\n                    output=out,\n                    model=model_name,\n                    name=trace_name\n                    ) \n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                if (experiment_name is not None):\n                    item.link(langfuse_generation, experiment_name)\n                \n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=item.input)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=item.input)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='requirementExtraction_JSONFormatCompliance', value=0)\n            \n        else:\n            for inp, out in zip(batch_inp, batch_out):\n\n                langfuse_generation = langfuse.generation(\n                    input=inp,\n                    output=out,\n                    name=trace_name,\n                    model=model_name\n                    )\n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=inp)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=inp)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='requirementExtraction_JSONFormatCompliance', value=0)\n        return score_list\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "dataset": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "dataset",
                  "display_name": "Dataset name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "experiment_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "experiment_name",
                  "display_name": "Experiment name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "field_validators": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_validators",
                  "display_name": "Field validators",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "master_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "master_key",
                  "display_name": "Master key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "requirements"
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_name",
                  "display_name": "Model name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "gpt-3.5-turbo"
                },
                "scorers": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "scorers",
                  "display_name": "Scorers",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tags": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tags",
                  "display_name": "Tags",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": [
                    "Evaluation",
                    "Requirement Extraction"
                  ]
                },
                "trace_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "trace_name",
                  "display_name": "Trace name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Requirement Extraction Evaluation"
                },
                "_type": "CustomComponent"
              },
              "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
              "base_classes": [
                "Data"
              ],
              "display_name": "Evaluator",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "batch_inp": null,
                "batch_out": null,
                "field_validators": null,
                "scorers": null,
                "dataset": null,
                "experiment_name": null,
                "trace_name": null,
                "model_name": null,
                "master_key": null,
                "tags": null
              },
              "output_types": [
                "Data"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-yuvpH",
            "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
            "display_name": "Evaluator"
          },
          "selected": false,
          "width": 384,
          "height": 1119,
          "dragging": false
        },
        {
          "id": "CustomComponent-198VL",
          "type": "genericNode",
          "position": {
            "x": 343.0268366936101,
            "y": -76.39139121875212
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"content\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "content": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "content",
                  "display_name": "Content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "{\n    \"requirements\": [\n        {\n            \"requirement\": \"The legacy system must be transitioned to a cloud-based service implementation\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"System Modernization\",\n            \"systems\": [\n                \"Legacy System\",\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"Data, applications, and services must be transferred to the cloud\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Data Management\",\n            \"systems\": [\n                \"Legacy System\",\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"A testing strategy must be developed to ensure performance, security, and scalability of the new cloud-based system\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Quality Assurance\",\n            \"systems\": [\n                \"Legacy System\",\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"Training must be provided to users on the new cloud system\",\n            \"type\": \"Functional\",\n            \"level\": \"Operational requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Training\",\n            \"systems\": [\n                \"Cloud Service\"\n            ]\n        },\n        {\n            \"requirement\": \"The system must not allow B2B data transferring\",\n            \"type\": \"Functional\",\n            \"level\": \"Solution requirement\",\n            \"priority\": \"Must\",\n            \"capability\": \"Data Security\",\n            \"systems\": [\n                \"Cloud Service\"\n            ]\n        }\n    ]\n}"
                },
                "_type": "CustomComponent"
              },
              "description": "Plain text placeholder, return text in Any type for better connection with custom components",
              "base_classes": [
                "Any"
              ],
              "display_name": "TextPlaceholderGeneric",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "content": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-198VL"
          },
          "selected": false,
          "width": 384,
          "height": 387,
          "positionAbsolute": {
            "x": 343.0268366936101,
            "y": -76.39139121875212
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-e9sWp",
          "type": "genericNode",
          "position": {
            "x": 335.8210691107121,
            "y": -512.7560923731048
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"content\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "content": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "content",
                  "display_name": "Content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "To modernize a legacy system by transitioning it to a cloud-based service implementation, the following steps should be followed. First, conduct a thorough analysis of the current legacy system to identify its functionalities, dependencies, and potential challenges. Next, design a migration plan outlining the process of transferring data, applications, and services to the cloud. Then, develop a testing strategy to ensure the new cloud-based system meets performance, security, and scalability requirements. Finally, execute the migration plan, monitor the transition process, and provide training to users on the new cloud system. Additionally, the system will not allow B2B data transferring."
                },
                "_type": "CustomComponent"
              },
              "description": "Plain text placeholder, return text in Any type for better connection with custom components",
              "base_classes": [
                "Any"
              ],
              "display_name": "TextPlaceholderGeneric",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "content": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-e9sWp"
          },
          "selected": false,
          "width": 384,
          "height": 387,
          "positionAbsolute": {
            "x": 335.8210691107121,
            "y": -512.7560923731048
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-sAn8Q",
          "type": "genericNode",
          "position": {
            "x": 345.4830038663317,
            "y": 410.58928203160383
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "requirement"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "requirementExtraction_requirement_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-sAn8Q",
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "display_name": "FieldExistenceScorer"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "dragging": false,
          "positionAbsolute": {
            "x": 345.4830038663317,
            "y": 410.58928203160383
          }
        },
        {
          "id": "CustomComponent-BC84u",
          "type": "genericNode",
          "position": {
            "x": -70.30782915847101,
            "y": 626.4393927855735
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "requirement"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "requirementExtraction_requirement_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-BC84u",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "dragging": false,
          "positionAbsolute": {
            "x": -70.30782915847101,
            "y": 626.4393927855735
          }
        },
        {
          "id": "OpenAIEmbeddings-24Mbz",
          "type": "genericNode",
          "position": {
            "x": -710.3402938714971,
            "y": 350.3924760370913
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "allowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "allowed_special",
                  "display_name": "Allowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "client",
                  "display_name": "Client",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "default_headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_headers",
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "default_query": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_query",
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "deployment",
                  "display_name": "Deployment",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "disallowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [
                    "all"
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "disallowed_special",
                  "display_name": "Disallowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding_ctx_length": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 8191,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding_ctx_length",
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 6,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_type",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_version": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_version",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_organization": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_organization",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_proxy": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_proxy",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "show_progress_bar": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "show_progress_bar",
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "skip_empty": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "skip_empty",
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_enable": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_enable",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_model_name",
                  "display_name": "TikToken Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "OpenAI embedding models",
              "base_classes": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "display_name": "OpenAIEmbeddings",
              "documentation": "",
              "custom_fields": {
                "default_headers": null,
                "default_query": null,
                "allowed_special": null,
                "disallowed_special": null,
                "chunk_size": null,
                "client": null,
                "deployment": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "output_types": [
                "OpenAIEmbeddings",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIEmbeddings-24Mbz"
          },
          "selected": false,
          "width": 384,
          "height": 635,
          "positionAbsolute": {
            "x": -710.3402938714971,
            "y": 350.3924760370913
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-D02hw",
          "type": "genericNode",
          "position": {
            "x": -74.27355158573278,
            "y": 1195.0746859745886
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "requirement"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "requirementExtraction_requirement_comprehension"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-D02hw",
            "description": "Return Flesch reading ease score (Comprehension score)",
            "display_name": "ComprehensionScorer"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "dragging": false,
          "positionAbsolute": {
            "x": -74.27355158573278,
            "y": 1195.0746859745886
          }
        }
      ],
      "edges": [
        {
          "source": "CustomComponent-e9sWp",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-e9sWpœ}",
          "target": "CustomComponent-yuvpH",
          "targetHandle": "{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "batch_inp",
              "id": "CustomComponent-yuvpH",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-e9sWp"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-e9sWp{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-e9sWpœ}-CustomComponent-yuvpH{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-198VL",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-198VLœ}",
          "target": "CustomComponent-yuvpH",
          "targetHandle": "{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "batch_out",
              "id": "CustomComponent-yuvpH",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-198VL"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-198VL{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-198VLœ}-CustomComponent-yuvpH{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-sAn8Q",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-sAn8Qœ}",
          "target": "CustomComponent-yuvpH",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-yuvpH",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-sAn8Q"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-sAn8Q{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-sAn8Qœ}-CustomComponent-yuvpH{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "OpenAIEmbeddings-24Mbz",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-24Mbzœ}",
          "target": "CustomComponent-BC84u",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-BC84uœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-BC84u",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-24Mbz"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-24Mbz{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-24Mbzœ}-CustomComponent-BC84u{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-BC84uœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
        },
        {
          "source": "CustomComponent-BC84u",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-BC84uœ}",
          "target": "CustomComponent-yuvpH",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-yuvpH",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-BC84u"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-BC84u{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-BC84uœ}-CustomComponent-yuvpH{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-D02hw",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-D02hwœ}",
          "target": "CustomComponent-yuvpH",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-yuvpH",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-D02hw"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-D02hw{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-D02hwœ}-CustomComponent-yuvpH{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-yuvpHœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        }
      ],
      "viewport": {
        "x": 529.8998660167889,
        "y": 262.8847555992721,
        "zoom": 0.3298769776932244
      }
    },
    "date_created": "2024-06-17T02:41:01.739Z",
    "date_updated": "2024-06-17T02:41:01.780Z",
    "status": "Public",
    "sort": null,
    "user_updated": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "user_created": {
      "username": "wiresky",
      "first_name": "Nguyen",
      "last_name": "Nam",
      "id": "dc599610-3065-4b5b-94ed-de108ec210dd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:03.364Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 48,
    "converter_version": "1.0.0"
  }
}