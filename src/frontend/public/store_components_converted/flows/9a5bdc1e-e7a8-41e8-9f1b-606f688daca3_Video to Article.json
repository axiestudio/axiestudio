{
  "id": "9a5bdc1e-e7a8-41e8-9f1b-606f688daca3",
  "name": "Video to Article",
  "description": "",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/9a5bdc1e-e7a8-41e8-9f1b-606f688daca3",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-08T01:02:06.994Z",
    "updated": "2024-06-08T01:02:07.053Z",
    "downloaded": "2025-08-19T17:50:04.916Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a49",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatOutput-YUs36",
        "type": "genericNode",
        "position": {
          "x": 3251.819145395853,
          "y": 1592.9485799053175
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Writing Assistant",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-YUs36"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "positionAbsolute": {
          "x": 3251.819145395853,
          "y": 1592.9485799053175
        },
        "dragging": false
      },
      {
        "id": "TextOutput-87lID",
        "type": "genericNode",
        "position": {
          "x": 2266.25383819316,
          "y": 15.442657221921507
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "[DEBUG] -  Summary",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-87lID"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 2266.25383819316,
          "y": 15.442657221921507
        },
        "dragging": false
      },
      {
        "id": "TextOutput-8UyMX",
        "type": "genericNode",
        "position": {
          "x": 1412.594726240965,
          "y": 648.4349849381973
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "[DEBUG] - Transcript",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-8UyMX"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 1412.594726240965,
          "y": 648.4349849381973
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-5ceBc",
        "type": "genericNode",
        "position": {
          "x": 788.3115189228746,
          "y": 756.7735312388982
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "audio_file": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".mp3",
                  ".mp4",
                  ".wav",
                  ".m4a",
                  ".mkv"
                ],
                "file_path": "836b832f-5de7-4150-8a6d-3b677d3ce515/12 Expert Tips and Features for Building AI Apps VISUALLY with Langflow.mp4",
                "password": false,
                "name": "audio_file",
                "display_name": "Audio File",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "Assembly API Key",
                "advanced": false,
                "dynamic": false,
                "info": "Your AssemblyAI API key. You can get one from https://www.assemblyai.com/",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport time\r\nfrom typing import List\r\n\r\nimport requests\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.utils.constants import LOADERS_INFO\r\nfrom loguru import logger\r\n\r\nclass AssemblyAITranscriber(CustomComponent):\r\n    display_name: str = \"AssemblyAI Transcriber\"\r\n    description: str = \"Transcribe an audio file using AssemblyAI\"\r\n    documentation: str = \"https://docs.assemblyai.com/\"\r\n    output_types: list[str] = [\"Record\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"api_key\": {\r\n                \"display_name\": \"Assembly API Key\",\r\n                \"field_type\": \"str\",\r\n                \"password\": True,\r\n                \"required\": True,\r\n                \"info\": \"Your AssemblyAI API key. You can get one from https://www.assemblyai.com/\",\r\n            },\r\n            \"audio_file\": {\r\n                \"display_name\": \"Audio File\",\r\n                \"required\": True,\r\n                \"field_type\": \"file\",\r\n                \"file_types\": [\"mp3\", \"mp4\", \"wav\", \"m4a\",\".mkv\"],\r\n                \"suffixes\": [\".mp3\", \"mp4\", \".wav\", \".m4a\",\".mkv\"],\r\n            },\r\n            \"language\": {\r\n                \"display_name\": \"Language\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n                \"options\": [\r\n                    \"en\",\r\n                    \"es\",\r\n                    \"fr\",\r\n                    \"de\",\r\n                    \"it\",\r\n                    \"pt\",\r\n                    \"ja\",\r\n                    \"ko\",\r\n                    \"hi\",\r\n                    \"ar\",\r\n                    \"ru\",\r\n                    \"zh\",\r\n                ],\r\n                \"value\": \"en\",\r\n                \"info\": \"The language of the audio file.\",\r\n            },\r\n        }\r\n\r\n    def upload_audio_file(self, audio_file: str, headers: dict) -> str:\r\n        \"\"\"Uploads audio file to AssemblyAI and returns upload URL.\"\"\"\r\n        base_url = \"https://api.assemblyai.com/v2\"\r\n        with open(audio_file, \"rb\") as f:\r\n            response = requests.post(base_url + \"/upload\", headers=headers, data=f)\r\n        upload_url = response.json()[\"upload_url\"]\r\n        return upload_url\r\n\r\n    def create_transcription_request(self, upload_url: str, headers: dict, language: str) -> str:\r\n        \"\"\"Creates a transcription request and returns the transcription ID.\"\"\"\r\n        data = {\"audio_url\": upload_url, \"language_code\": language}\r\n        url = \"https://api.assemblyai.com/v2/transcript\"\r\n        response = requests.post(url, json=data, headers=headers)\r\n        transcript_id = response.json()[\"id\"]\r\n        return transcript_id\r\n\r\n    def poll_transcription_status(self, transcript_id: str, headers: dict) -> Record:\r\n        \"\"\"Polls the transcription status until completion and returns the Record.\"\"\"\r\n        polling_endpoint = f\"https://api.assemblyai.com/v2/transcript/{transcript_id}\"\r\n        while True:\r\n            transcription_result = requests.get(polling_endpoint, headers=headers).json()\r\n            logger.debug(transcription_result)\r\n\r\n            if transcription_result[\"status\"] == \"completed\":\r\n                self.status = \"Transcription completed\"\r\n                return Record(data=transcription_result, text=transcription_result['text'])\r\n\r\n            elif transcription_result[\"status\"] == \"error\":\r\n                raise RuntimeError(f\"Transcription failed: {transcription_result['error']}\")\r\n\r\n            else:\r\n                time.sleep(3)\r\n\r\n    def build(self, audio_file: str, api_key: str, language: str,) -> str:\r\n        headers = {\"authorization\": api_key}\r\n\r\n        upload_url = self.upload_audio_file(audio_file, headers)\r\n        transcript_id = self.create_transcription_request(upload_url, headers, language)\r\n        transcription_result = self.poll_transcription_status(transcript_id, headers)\r\n        return transcription_result.text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "language": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "en",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "en",
                  "es",
                  "fr",
                  "de",
                  "it",
                  "pt",
                  "ja",
                  "ko",
                  "hi",
                  "ar",
                  "ru",
                  "zh"
                ],
                "name": "language",
                "display_name": "Language",
                "advanced": false,
                "dynamic": false,
                "info": "The language of the audio file.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Transcribe an audio file using AssemblyAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Assembly AI - Transcribe",
            "documentation": "https://docs.assemblyai.com/",
            "custom_fields": {
              "audio_file": null,
              "api_key": null,
              "language": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-5ceBc"
        },
        "selected": false,
        "width": 384,
        "height": 469,
        "dragging": false,
        "positionAbsolute": {
          "x": 788.3115189228746,
          "y": 756.7735312388982
        }
      },
      {
        "id": "AnthropicModel-l22ms",
        "type": "genericNode",
        "position": {
          "x": 1766.6511243241089,
          "y": -276.78126927104427
        },
        "data": {
          "type": "AnthropicModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "anthropic_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "anthropic_api_key",
                "display_name": "Anthropic API Key",
                "advanced": false,
                "dynamic": false,
                "info": "Your Anthropic API key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "anthropic_api_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "anthropic_api_url",
                "display_name": "Anthropic API URL",
                "advanced": true,
                "dynamic": false,
                "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": True,\n                \"value\": 256,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4096",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "claude-3-haiku-20240307",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307",
                  "claude-2.1",
                  "claude-2.0",
                  "claude-instant-1.2",
                  "claude-instant-1"
                ],
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.3",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate text using Anthropic Chat&Completion LLMs.",
            "icon": "Anthropic",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Anthropic",
            "documentation": "",
            "custom_fields": {
              "model": null,
              "input_value": null,
              "system_message": null,
              "anthropic_api_key": null,
              "max_tokens": null,
              "temperature": null,
              "anthropic_api_url": null,
              "stream": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "model",
              "anthropic_api_key",
              "max_tokens",
              "temperature",
              "anthropic_api_url",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "AnthropicModel-l22ms"
        },
        "selected": false,
        "width": 384,
        "height": 563,
        "dragging": false,
        "positionAbsolute": {
          "x": 1766.6511243241089,
          "y": -276.78126927104427
        }
      },
      {
        "id": "ChatInput-3D5tW",
        "type": "genericNode",
        "position": {
          "x": 868.5272017465938,
          "y": 1916.445132033592
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "include a relevant quote from the video in the conclusion"
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": false,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Felipe",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Give more context to the LLM for the summary generation",
            "icon": "ChatInput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Context",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-3D5tW"
        },
        "selected": false,
        "width": 384,
        "height": 565,
        "positionAbsolute": {
          "x": 868.5272017465938,
          "y": 1916.445132033592
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-YgBgW",
        "type": "genericNode",
        "position": {
          "x": 2251.2777846472973,
          "y": 1578.8240105938316
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\r\nfrom axiestudio.field_typing import NestedDict, Text\r\n\r\n\r\nclass OpenAIModelComponent(LCModelComponent):\r\n    display_name = \"OpenAI\"\r\n    description = \"Generates text using OpenAI LLMs.\"\r\n    icon = \"OpenAI\"\r\n\r\n    field_order = [\r\n        \"max_tokens\",\r\n        \"model_kwargs\",\r\n        \"model_name\",\r\n        \"openai_api_base\",\r\n        \"openai_api_key\",\r\n        \"temperature\",\r\n        \"input_value\",\r\n        \"system_message\",\r\n        \"stream\",\r\n        \"json_mode\",\r\n        \"seed\",\r\n    ]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\"},\r\n            \"max_tokens\": {\r\n                \"display_name\": \"Max Tokens\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_kwargs\": {\r\n                \"display_name\": \"Model Kwargs\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_name\": {\r\n                \"display_name\": \"Model Name\",\r\n                \"advanced\": False,\r\n                \"options\": MODEL_NAMES,\r\n            },\r\n            \"openai_api_base\": {\r\n                \"display_name\": \"OpenAI API Base\",\r\n                \"advanced\": True,\r\n                \"info\": (\r\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\r\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\r\n                ),\r\n            },\r\n            \"openai_api_key\": {\r\n                \"display_name\": \"OpenAI API Key\",\r\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\r\n                \"advanced\": False,\r\n                \"password\": True,\r\n            },\r\n            \"temperature\": {\r\n                \"display_name\": \"Temperature\",\r\n                \"advanced\": False,\r\n                \"value\": 0.1,\r\n            },\r\n            \"stream\": {\r\n                \"display_name\": \"Stream\",\r\n                \"info\": STREAM_INFO_TEXT,\r\n                \"advanced\": True,\r\n            },\r\n            \"system_message\": {\r\n                \"display_name\": \"System Message\",\r\n                \"info\": \"System message to pass to the model.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"json_mode\": {\r\n                \"display_name\": \"JSON Mode\",\r\n                \"info\": \"Enable JSON mode for the model output.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"seed\": {\r\n                \"display_name\": \"Seed\",\r\n                \"info\": \"The seed controls the reproducibility of the job.\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        input_value: Text,\r\n        openai_api_key: str,\r\n        temperature: float,\r\n        model_name: str = \"gpt-4o\",\r\n        max_tokens: Optional[int] = 256,\r\n        model_kwargs: NestedDict = {},\r\n        openai_api_base: Optional[str] = None,\r\n        stream: bool = False,\r\n        system_message: Optional[str] = None,\r\n        json_mode: bool = False,\r\n        seed: Optional[int] = None,\r\n    ) -> Text:\r\n        if not openai_api_base:\r\n            openai_api_base = \"https://api.openai.com/v1\"\r\n        if openai_api_key:\r\n            api_key = SecretStr(openai_api_key)\r\n        else:\r\n            api_key = None\r\n\r\n        response_format = None\r\n        if json_mode:\r\n            response_format = {\"type\": \"json_object\"}\r\n\r\n        output = ChatOpenAI(\r\n            max_tokens=max_tokens,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=api_key,\r\n            temperature=temperature,\r\n            response_format=response_format,\r\n            seed=seed,\r\n        )\r\n\r\n        return self.get_chat_result(output, stream, input_value, system_message)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "json_mode": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_mode",
                "display_name": "JSON Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Enable JSON mode for the model output.",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4000",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-turbo",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "seed": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "seed",
                "display_name": "Seed",
                "advanced": false,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "load_from_db": false,
                "title_case": false,
                "value": "444888"
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.6",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs, with optional JSON Mode and Seed parameters.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null,
              "json_mode": null,
              "seed": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream",
              "json_mode",
              "seed"
            ],
            "beta": false,
            "official": false
          },
          "id": "OpenAIModel-YgBgW"
        },
        "selected": false,
        "width": 384,
        "height": 907,
        "positionAbsolute": {
          "x": 2251.2777846472973,
          "y": 1578.8240105938316
        },
        "dragging": false
      },
      {
        "id": "Prompt-lvcgT",
        "type": "genericNode",
        "position": {
          "x": 1279.7956990704731,
          "y": -111.38896572719074
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "<Instructions>\nYour task is to generate a long, comprehensive, detailed notes capturing all the key information from a YouTube video, which will be used to create a blog post about the video's content.\n\nThe video transcript will be provided in the {{TRANSCRIPT}} variable. This is the primary input you should use to identify and extract all relevant details, facts, examples, and key points covered in the video.\n\n{{USER_INSTRUCTIONS}} will contain any additional guidance from the user on specific aspects to focus on, desired organization, or key themes to emphasize. Carefully follow these instructions to ensure the notes meet the user's needs.\n\nHere are the steps to follow:\n\n1. Thoroughly review the {{TRANSCRIPT}}, noting down all significant information shared, including main topics, subtopics, examples, statistics, quotes, and any other details that contribute to the overall message of the video. Maintain the original language and terminology used in the video.\n\n2. Examine the {{USER_INSTRUCTIONS}} and create a checklist of specific requirements to address, such as highlighting particular sections, emphasizing certain themes, or structuring the notes in a specific way.\n\n3. Begin outlining the notes using clear headings and subheadings that correspond to the main topics and subtopics discussed in the video. Mirror the language used in the transcript to maintain consistency.\n\n4. Under each section, provide detailed bullet points capturing all relevant information shared in the video. Include specific examples, data points, quotes, and any other supporting details that help convey the full scope of what was discussed.\n\n5. Use formatting to highlight key facts, statistics, or important quotes. For example: \"**Key Fact: Over 50% of respondents preferred Product A.**\"\n\n6. If the video includes any actionable advice or recommendations, call them out using formatting like: \"[RECOMMENDATION] *Try implementing Strategy X for best results.*\"\n\n7. For any references to external sources or additional information mentioned in the video, include placeholders like: \"[EXTERNAL LINK] *Article on XYZ topic: [insert URL here]*\"\n\n8. After the main content sections, include a \"Key Takeaways\" section summarizing the most important points and overall message of the video.\n\n9. End with a \"Additional Resources\" section listing any external links, recommended reading, or other relevant sources mentioned in the video.\n\n10. Conclude with a <reflection> evaluating how comprehensively the notes capture the video's content and key messages. Provide suggestions for improvement or additional points to consider.\n\n\nOnce complete, review your notes and ensure they meet the following criteria:\n- Comprehensively cover all significant information and details from the {{TRANSCRIPT}} \n- Address the specific points and requirements outlined in the {{USER_INSTRUCTIONS}}\n- Utilize clear organization and formatting, including headings, bullet points, and Markdown syntax\n- Provide sufficient detail and context to serve as a standalone resource for creating a blog post\n- Highlight key facts, quotes, recommendations, and external resources\n- Follow a logical structure that mirrors the flow of information in the video\n\nSubmit your final video notes using the following high-level outline:\n# Video Title\n## Main Topic 1\n### Subtopic 1a\n### Subtopic 1b\n## Main Topic 2\n### Subtopic 2a\n### Subtopic 2b \n## Main Topic 3\n### Subtopic 3a\n### Subtopic 3b\n## Key Takeaways\n## Additional Resources\n\nRemember, your aim is to transform the video transcript into a long, thorough, well-organized resource that captures all the necessary information to develop a comprehensive blog post. Let me know if you have any additional questions!\n\nYour final output should contain ONLY the long video notes, without any extra comments or reflections.\n\n</Instructions>\n<Inputs>\n<TRANSCRIPT>\n{TRANSCRIPT}\n</TRANSCRIPT>\n</Inputs>",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "TRANSCRIPT": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "TRANSCRIPT",
                "display_name": "TRANSCRIPT",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "TRANSCRIPT"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-lvcgT",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 1279.7956990704731,
          "y": -111.38896572719074
        },
        "dragging": false
      },
      {
        "id": "MemoryComponent-xkcAM",
        "type": "genericNode",
        "position": {
          "x": 1331.0950467681632,
          "y": 1512.456213463097
        },
        "data": {
          "type": "MemoryComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "20",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "load_from_db": false,
                "title_case": false
              },
              "order": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Descending",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{sender_name}: {text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine and User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "icon": "history",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "session_id": null,
              "n_messages": null,
              "order": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": true
          },
          "id": "MemoryComponent-xkcAM"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 1331.0950467681632,
          "y": 1512.456213463097
        },
        "dragging": false
      },
      {
        "id": "Prompt-kS01R",
        "type": "genericNode",
        "position": {
          "x": 1807.1007030816031,
          "y": 1708.0050062510159
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "As a content writing assistant, your task is to help the user create a comprehensive blog post based on the main points and ideas presented in a video transcript summary. The blog post should be informative, engaging, and well-structured, with relevant examples, anecdotes, or personal insights to make the content more relatable and interesting to readers.\n\nBased on the following Video transcript summary:\n```\n{transcript}\n```\n\nTo generate the initial blog post draft (Draft 1), follow these steps:\n\n1. Begin with a captivating introduction that hooks the reader and provides context for the video's topic.\n\n2. Divide the main content into several paragraphs or sections, each focusing on a specific point from the video summary. Elaborate on these points, providing additional information, explanations, and examples to support the ideas presented.\n\n3. Share your own insights, opinions, or analysis related to the video's content. Discuss the implications, potential applications, or broader context of the ideas presented.\n\n4. Embed the video within the content: Suggest an appropriate place in the article to embed the video. This should enhance understanding and engagement by allowing readers to view the video that complements the textual content.\n\n5. Summarize the key takeaways from the video and your blog post in the conclusion. Provide a thought-provoking conclusion that encourages readers to reflect on the topic or take action.\n\n6. Use appropriate headings, subheadings, bullet points, and formatting to make the blog post visually appealing and easy to read. Ensure that the formatted text is in markdown format.\n\n7. The blog post should be approximately 800-1200 words long, providing sufficient detail and depth without overwhelming the reader.\n\nAfter generating Draft 1, engage in a dialogue with the user to gather their feedback and suggestions. Ask the user if they would like you to incorporate any additional content or make specific changes to the draft.\n\n# Revision Process\nIf the user provides feedback or requests changes:\n1. Acknowledge the user's feedback and suggestions.\n2. Clarify any specific details or requirements if needed.\n3. Explain how you plan to incorporate their feedback into the next draft.\n4. Generate a revised version of the blog post (Draft 2, Draft 3, etc.) based on the user's input.\n\nDuring the revision process, focus on:\n- Modifying the tone or style of the writing\n- Adding or removing specific examples or anecdotes\n- Clarifying or expanding on certain points\n- Restructuring the content for better flow and readability\n\nContinue the conversation with the user, making iterations to the blog post until they are satisfied with the final result.\n\nWhen responding, please format your entire response as a JSON object with the following structure:\n(\n\"answer\": \"Your direct response to the user's query\", \n\"article\": \"The generated blog post content in markdown format, always starting with 'Draft X' where X is the current draft number\", \n\"title\": \"The generated blog post title\" \n)\n\n# Important notes:\n- Always include the 'answer' key with your direct response.\n- If a blog post has been generated, include the content under the 'article' key (always starting with \"Draft X\" at the beginning, where X is the current draft number) and the title under the 'title' key.\n- If no blog post has been generated yet or during the revision process, omit the 'article' and 'title' keys entirely.\n- When the user provides feedback or requests changes, do not generate a new draft right away. Instead, acknowledge their input, ask for clarification if needed, and explain how you plan to incorporate their suggestions in the next draft. Only generate the revised draft after confirming the changes with the user.\n\nChat History:\n```\n{history}\n```\n\nUser Request:\n**{input}**\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "history": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "history",
                "display_name": "history",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "transcript": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "transcript",
                "display_name": "transcript",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "input": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input",
                "display_name": "input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "transcript",
                "history",
                "input"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-kS01R",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "positionAbsolute": {
          "x": 1807.1007030816031,
          "y": 1708.0050062510159
        },
        "dragging": false
      },
      {
        "id": "TextOutput-isOm2",
        "type": "genericNode",
        "position": {
          "x": 1409.7049442574119,
          "y": 970.4529994453871
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass SaveToFileComponent(CustomComponent):\r\n    display_name = \"Save to File\"\r\n    description = \"Save the input to a file named 'temporary_file_debug.txt'.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\", \"multiline\": True},\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, file_path: Optional[str] = \"temporary_file_debug.txt\") -> None:\r\n        with open(file_path, \"w\") as file:\r\n            file.write(input_value)\r\n        self.status = f\"Input saved to {file_path}\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "transcript.txt",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Save the input to a file named 'temporary_file_debug.txt'.",
            "icon": "file-text",
            "base_classes": [],
            "display_name": "Save to File",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "file_path": null
            },
            "output_types": [],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-isOm2",
          "description": "Save the input to a file named 'temporary_file_debug.txt'.",
          "display_name": "[DEBUG] -  Summary"
        },
        "selected": false,
        "width": 384,
        "height": 355,
        "dragging": false,
        "positionAbsolute": {
          "x": 1409.7049442574119,
          "y": 970.4529994453871
        }
      },
      {
        "id": "TextOutput-CBJgG",
        "type": "genericNode",
        "position": {
          "x": 1319.2834936025133,
          "y": 2089.0771914469997
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass ReadFromFileComponent(CustomComponent):\r\n    display_name = \"Read from File\"\r\n    description = \"Read the contents of a file named 'temporary_file_debug.txt' and return as a string.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"temporary_file_debug.txt\") -> Text:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                content = file.read()\r\n            self.status = f\"File {file_path} read successfully: \\n{content}\"\r\n            return content\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return \"\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "transcript.txt",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
            "icon": "file-text",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Read from File",
            "documentation": "",
            "custom_fields": {
              "file_path": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-CBJgG",
          "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
          "display_name": "Read from File"
        },
        "selected": false,
        "width": 384,
        "height": 309,
        "positionAbsolute": {
          "x": 1319.2834936025133,
          "y": 2089.0771914469997
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-rFBCx",
        "type": "genericNode",
        "position": {
          "x": 3264.3638998626293,
          "y": 2211.0388621428356
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Article Draft",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-rFBCx"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "positionAbsolute": {
          "x": 3264.3638998626293,
          "y": 2211.0388621428356
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-kBYaC",
        "type": "genericNode",
        "position": {
          "x": 2610.7259486211283,
          "y": 2912.748971849979
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Optional\r\n\r\nimport requests\r\nfrom axiestudio.custom import CustomComponent\r\n\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionPageCreator(CustomComponent):\r\n    display_name = \"Create Page [Notion]\"\r\n    description = \"A component for creating Notion pages.\"\r\n    documentation: str = \"https://docs.axiestudio.org/integrations/notion/page-create\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"database_id\": {\r\n                \"display_name\": \"Database ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the Notion database.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n            \"properties\": {\r\n                \"display_name\": \"Properties\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}\",\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        database_id: str,\r\n        notion_secret: str,\r\n        properties: str = '{\"Task name\": {\"id\": \"title\", \"type\": \"title\", \"title\": [{\"type\": \"text\", \"text\": {\"content\": \"Send Notion Components to LF\", \"link\": null}}]}}',\r\n    ) -> Record:\r\n        if not database_id or not properties:\r\n            raise ValueError(\"Invalid input. Please provide 'database_id' and 'properties'.\")\r\n\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"parent\": {\"database_id\": database_id},\r\n            \"properties\": json.loads(properties),\r\n        }\r\n\r\n        response = requests.post(\"https://api.notion.com/v1/pages\", headers=headers, json=data)\r\n\r\n        if response.status_code == 200:\r\n            page_id = response.json()[\"id\"]\r\n            self.status = f\"Successfully created Notion page with ID: {page_id}\\n {str(response.json())}\"\r\n            return Record(text=str(response.json()), **response.json())\r\n        else:\r\n            error_message = f\"Failed to create Notion page. Status code: {response.status_code}, Error: {response.text}\"\r\n            self.status = error_message\r\n            raise Exception(error_message)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "database_id",
                "display_name": "Database ID",
                "advanced": false,
                "dynamic": false,
                "info": "The ID of the Notion database.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "notion_secret": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "notion_secret",
                "display_name": "Notion Secret",
                "advanced": false,
                "dynamic": false,
                "info": "The Notion integration token.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "properties": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "properties",
                "display_name": "Properties",
                "advanced": false,
                "dynamic": false,
                "info": "The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "A component for creating Notion pages.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "Record"
            ],
            "display_name": "Create Page [Notion] ",
            "documentation": "https://docs.axiestudio.org/integrations/notion/page-create",
            "custom_fields": {
              "database_id": null,
              "notion_secret": null,
              "properties": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-kBYaC",
          "description": "A component for creating Notion pages.",
          "display_name": "Create Page [Notion] "
        },
        "selected": false,
        "width": 384,
        "height": 477,
        "positionAbsolute": {
          "x": 2610.7259486211283,
          "y": 2912.748971849979
        },
        "dragging": false
      },
      {
        "id": "RecordsToText-eadmZ",
        "type": "genericNode",
        "position": {
          "x": 3031.8637610556243,
          "y": 3084.1521717580704
        },
        "data": {
          "type": "RecordsToText",
          "node": {
            "template": {
              "records": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "records",
                "display_name": "Records",
                "advanced": false,
                "dynamic": false,
                "info": "The records to convert to text.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{id}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Convert Records into plain text following a specified template.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Records To Text",
            "documentation": "",
            "custom_fields": {
              "records": null,
              "template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecordsToText-eadmZ"
        },
        "selected": false,
        "width": 384,
        "height": 357,
        "positionAbsolute": {
          "x": 3031.8637610556243,
          "y": 3084.1521717580704
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-lNiMz",
        "type": "genericNode",
        "position": {
          "x": 2158.3995638344186,
          "y": 2909.16527237008
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Dict, Any\r\n\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionTitleGen(CustomComponent):\r\n    display_name = \"Generate Title Page Properties [Notion]\"\r\n    description = \"Generate the  properties for Creating a Notion page.\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"title\": {\r\n                \"display_name\": \"Article Title\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The meeting summary to add to the page.\",\r\n                \"multiline\": True,\r\n            },\r\n        }\r\n\r\n    def sanitize_input(self, input_str: str) -> str:\r\n        # Remove leading/trailing whitespace\r\n        return input_str.strip()\r\n\r\n    def build(\r\n        self,\r\n        title: str,\r\n    ) -> str:\r\n        sanitized_title  = self.sanitize_input(title)\r\n\r\n\r\n        properties = {\r\n            \"title\":{\r\n                \"id\":\"title\",\r\n                \"type\":\"title\",\r\n            \t\"title\":[\r\n                    {\r\n                        \"type\":\"text\",\r\n            \t\t\t\"text\":{\r\n                            \"content\": sanitized_title\r\n            \t\t\t}\r\n            \t\t}\r\n            \t]\r\n            }   \r\n        }\r\n        properties_json = json.dumps(properties, ensure_ascii=False)\r\n\r\n        self.status = f\"Generated properties:\\n{properties_json}\"\r\n        return properties_json",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "title": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "title",
                "display_name": "Article Title",
                "advanced": false,
                "dynamic": false,
                "info": "The meeting summary to add to the page.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Generate the  properties for Creating a Notion page.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Article Name",
            "documentation": "",
            "custom_fields": {
              "title": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-lNiMz",
          "description": "Generate the  properties for Creating a Notion page.",
          "display_name": "Article Name"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 2158.3995638344186,
          "y": 2909.16527237008
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-99QiK",
        "type": "genericNode",
        "position": {
          "x": 2726.955001243726,
          "y": 2447.7248547346044
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse a specific key from a JSON object.\"\r\n    output_types: list[str] = [\"Text\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_key\": {\r\n                \"display_name\": \"Key\",\r\n                \"info\": \"The key to parse from the JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_key: str) -> Optional[Text]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            if json_key in json_obj:\r\n                parsed_value = json_obj[json_key]\r\n                self.status = f\"Parsed value: {parsed_value}\"\r\n                return str(parsed_value)\r\n            else:\r\n                self.status = f\"Key '{json_key}' not found in the JSON object.\"\r\n                return None\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "JSON String",
                "advanced": false,
                "dynamic": false,
                "info": "Your JSON object.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "json_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_key",
                "display_name": "Key",
                "advanced": false,
                "dynamic": false,
                "info": "The key to parse from the JSON object.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "article"
              },
              "_type": "CustomComponent"
            },
            "description": "Parse a specific key from a JSON object.",
            "base_classes": [
              "NoneType",
              "object",
              "str",
              "Text"
            ],
            "display_name": "JSON Key to Text",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "json_key": null
            },
            "output_types": [
              "Text",
              "NoneType"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-99QiK",
          "description": "Parse a specific key from a JSON object.",
          "display_name": "JSON Key to Text"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 2726.955001243726,
          "y": 2447.7248547346044
        },
        "dragging": false
      },
      {
        "id": "IDGenerator-WY5om",
        "type": "genericNode",
        "position": {
          "x": 870.5622721265314,
          "y": 1543.4812113339126
        },
        "data": {
          "type": "IDGenerator",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import uuid\nfrom typing import Any, Optional\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass UUIDGeneratorComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"ID Generator\"\n    description = \"Generates a unique ID.\"\n\n    def update_build_config(\n        self,\n        build_config: dict,\n        field_value: Any,\n        field_name: Optional[str] = None,\n    ):\n        if field_name == \"unique_id\":\n            build_config[field_name][\"value\"] = str(uuid.uuid4())\n        return build_config\n\n    def build_config(self):\n        return {\n            \"unique_id\": {\n                \"display_name\": \"Value\",\n                \"refresh_button\": True,\n            }\n        }\n\n    def build(self, unique_id: str) -> str:\n        return unique_id\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "unique_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "unique_id",
                "display_name": "Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "refresh_button": true,
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "d29f3b01-5fd9-4bac-9546-60eff5c5f289"
              },
              "_type": "CustomComponent"
            },
            "description": "Generates a unique ID.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Session Generator",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "unique_id": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "IDGenerator-WY5om"
        },
        "selected": false,
        "width": 384,
        "height": 295,
        "positionAbsolute": {
          "x": 870.5622721265314,
          "y": 1543.4812113339126
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-mCQAa",
        "type": "genericNode",
        "position": {
          "x": 2698.917000300549,
          "y": 1627.509245382392
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse a specific key from a JSON object.\"\r\n    output_types: list[str] = [\"Text\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_key\": {\r\n                \"display_name\": \"Key\",\r\n                \"info\": \"The key to parse from the JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_key: str) -> Optional[Text]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            if json_key in json_obj:\r\n                parsed_value = json_obj[json_key]\r\n                self.status = f\"Parsed value: {parsed_value}\"\r\n                return str(parsed_value)\r\n            else:\r\n                self.status = f\"Key '{json_key}' not found in the JSON object.\"\r\n                return None\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "JSON String",
                "advanced": false,
                "dynamic": false,
                "info": "Your JSON object.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "json_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_key",
                "display_name": "Key",
                "advanced": false,
                "dynamic": false,
                "info": "The key to parse from the JSON object.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "answer"
              },
              "_type": "CustomComponent"
            },
            "description": "Extract a specific key from a JSON object.",
            "base_classes": [
              "NoneType",
              "object",
              "str",
              "Text"
            ],
            "display_name": "JSON Key to Text",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "json_key": null
            },
            "output_types": [
              "Text",
              "NoneType"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-mCQAa"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 2698.917000300549,
          "y": 1627.509245382392
        },
        "dragging": false
      },
      {
        "id": "RecordsToText-LRkHt",
        "type": "genericNode",
        "position": {
          "x": 1683.2256903306475,
          "y": 2829.1437972156186
        },
        "data": {
          "type": "RecordsToText",
          "node": {
            "template": {
              "records": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "records",
                "display_name": "Records",
                "advanced": false,
                "dynamic": false,
                "info": "The records to convert to text.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{title}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Convert Records into plain text following a specified template.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Records To Text",
            "documentation": "",
            "custom_fields": {
              "records": null,
              "template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecordsToText-LRkHt"
        },
        "selected": false,
        "width": 384,
        "height": 357,
        "positionAbsolute": {
          "x": 1683.2256903306475,
          "y": 2829.1437972156186
        },
        "dragging": false
      },
      {
        "id": "RecordsToText-nMq1R",
        "type": "genericNode",
        "position": {
          "x": 1825.4058310350433,
          "y": 3273.1957404132345
        },
        "data": {
          "type": "RecordsToText",
          "node": {
            "template": {
              "records": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "records",
                "display_name": "Records",
                "advanced": false,
                "dynamic": false,
                "info": "The records to convert to text.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{article}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Convert Records into plain text following a specified template.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Records To Text",
            "documentation": "",
            "custom_fields": {
              "records": null,
              "template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecordsToText-nMq1R"
        },
        "selected": false,
        "width": 384,
        "height": 357,
        "positionAbsolute": {
          "x": 1825.4058310350433,
          "y": 3273.1957404132345
        },
        "dragging": false
      },
      {
        "id": "TextOutput-ayBOi",
        "type": "genericNode",
        "position": {
          "x": 2707.4503033565916,
          "y": 2041.910881125033
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass SaveToFileComponent(CustomComponent):\r\n    display_name = \"Save to File\"\r\n    description = \"Save the input to a file named 'temporary_file_debug.txt'.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\", \"multiline\": True},\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, file_path: Optional[str] = \"temporary_file_debug.txt\") -> None:\r\n        with open(file_path, \"w\") as file:\r\n            file.write(input_value)\r\n        self.status = f\"Input saved to {file_path}\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "article.json",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Save the input to a file named 'temporary_file_debug.txt'.",
            "icon": "file-text",
            "base_classes": [],
            "display_name": "Save to File",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "file_path": null
            },
            "output_types": [],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "TextOutput-ayBOi"
        },
        "selected": false,
        "width": 384,
        "height": 355,
        "positionAbsolute": {
          "x": 2707.4503033565916,
          "y": 2041.910881125033
        },
        "dragging": false
      },
      {
        "id": "TextOutput-9aniu",
        "type": "genericNode",
        "position": {
          "x": 716.3968670292153,
          "y": 2870.51235466344
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass ReadFromFileComponent(CustomComponent):\r\n    display_name = \"Read from File\"\r\n    description = \"Read the contents of a file named 'temporary_file_debug.txt' and return as a string.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"temporary_file_debug.txt\") -> Text:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                content = file.read()\r\n            self.status = f\"File {file_path} read successfully: \\n{content}\"\r\n            return content\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return \"\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "article.json",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
            "icon": "file-text",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Read from File",
            "documentation": "",
            "custom_fields": {
              "file_path": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "TextOutput-9aniu"
        },
        "selected": false,
        "width": 384,
        "height": 309,
        "positionAbsolute": {
          "x": 716.3968670292153,
          "y": 2870.51235466344
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-tW2Xh",
        "type": "genericNode",
        "position": {
          "x": 1206.3736921957734,
          "y": 2878.135292766787
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import List, Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse specific keys from a JSON object.\"\r\n    output_types: list[str] = [\"Record\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_keys\": {\r\n                \"display_name\": \"Keys\",\r\n                \"info\": \"The keys to parse from the JSON object (comma-separated).\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_keys: str) -> Optional[Record]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            keys = [key.strip() for key in json_keys.split(\",\")]\r\n            parsed_data = {}\r\n            for key in keys:\r\n                if key in json_obj:\r\n                    parsed_data[key] = json_obj[key]\r\n                else:\r\n                    self.status = f\"Key '{key}' not found in the JSON object.\"\r\n                    return None\r\n            self.status = f\"Parsed keys: {', '.join(parsed_data.keys())}\"\r\n            return Record(data=parsed_data)\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "JSON String",
                "advanced": false,
                "dynamic": false,
                "info": "Your JSON object.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "json_keys": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_keys",
                "display_name": "Keys",
                "advanced": false,
                "dynamic": false,
                "info": "The keys to parse from the JSON object (comma-separated).",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "article,title"
              },
              "_type": "CustomComponent"
            },
            "description": "Parse specific keys from a JSON object.",
            "base_classes": [
              "NoneType",
              "object",
              "Record"
            ],
            "display_name": "JSON Key to Record - Multiple",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "json_keys": null
            },
            "output_types": [
              "Record",
              "NoneType"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-tW2Xh"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 1206.3736921957734,
          "y": 2878.135292766787
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-Ukv1v",
        "type": "genericNode",
        "position": {
          "x": 3496.319543797485,
          "y": 3224.4566891166287
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "block_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "block_id",
                "display_name": "Page/Block ID",
                "advanced": false,
                "dynamic": false,
                "info": "The ID of the page/block to add the content.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import List, Dict, Any\r\nfrom markdown import markdown\r\nfrom bs4 import BeautifulSoup\r\nimport requests\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass AddContentToPage(CustomComponent):\r\n    display_name = \"Add Content to Page [Notion]\"\r\n    description = \"Convert markdown text to Notion blocks and append them to a Notion page.\"\r\n    documentation: str = \"https://developers.notion.com/reference/patch-block-children\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"markdown_text\": {\r\n                \"display_name\": \"Markdown Text\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The markdown text to convert to Notion blocks.\",\r\n                \"multiline\": True,\r\n            },\r\n             \"block_id\": {\r\n                \"display_name\": \"Page/Block ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the page/block to add the content.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, markdown_text: str, block_id: str, notion_secret: str) -> Record:\r\n        html_text = markdown(markdown_text)\r\n        soup = BeautifulSoup(html_text, 'html.parser')\r\n        blocks = self.process_node(soup)\r\n\r\n        url = f\"https://api.notion.com/v1/blocks/{block_id}/children\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"children\": blocks,\r\n        }\r\n\r\n        response = requests.patch(url, headers=headers, json=data)\r\n        self.status = str(response.json())\r\n        response.raise_for_status()\r\n\r\n        result = response.json()\r\n        self.status = f\"Appended {len(blocks)} blocks to page with ID: {block_id}\"\r\n        return Record(data=result, text=json.dumps(result))\r\n\r\n    def process_node(self, node):\r\n        blocks = []\r\n        if isinstance(node, str):\r\n            text = node.strip()\r\n            if text:\r\n                if text.startswith('#'):\r\n                    heading_level = text.count('#', 0, 6)\r\n                    heading_text = text[heading_level:].strip()\r\n                    if heading_level == 1:\r\n                        blocks.append(self.create_block('heading_1', heading_text))\r\n                    elif heading_level == 2:\r\n                        blocks.append(self.create_block('heading_2', heading_text))\r\n                    elif heading_level == 3:\r\n                        blocks.append(self.create_block('heading_3', heading_text))\r\n                else:\r\n                    blocks.append(self.create_block('paragraph', text))\r\n        elif node.name == 'h1':\r\n            blocks.append(self.create_block('heading_1', node.get_text(strip=True)))\r\n        elif node.name == 'h2':\r\n            blocks.append(self.create_block('heading_2', node.get_text(strip=True)))\r\n        elif node.name == 'h3':\r\n            blocks.append(self.create_block('heading_3', node.get_text(strip=True)))\r\n        elif node.name == 'p':\r\n            code_node = node.find('code')\r\n            if code_node:\r\n                code_text = code_node.get_text()\r\n                language, code = self.extract_language_and_code(code_text)\r\n                blocks.append(self.create_block('code', code, language=language))\r\n            elif self.is_table(str(node)):\r\n                blocks.extend(self.process_table(node))\r\n            else:\r\n                blocks.append(self.create_block('paragraph', node.get_text(strip=True)))\r\n        elif node.name == 'ul':\r\n            blocks.extend(self.process_list(node, 'bulleted_list_item'))\r\n        elif node.name == 'ol':\r\n            blocks.extend(self.process_list(node, 'numbered_list_item'))\r\n        elif node.name == 'blockquote':\r\n            blocks.append(self.create_block('quote', node.get_text(strip=True)))\r\n        elif node.name == 'hr':\r\n            blocks.append(self.create_block('divider', ''))\r\n        elif node.name == 'img':\r\n            blocks.append(self.create_block('image', '', image_url=node.get('src')))\r\n        elif node.name == 'a':\r\n            blocks.append(self.create_block('bookmark', node.get_text(strip=True), link_url=node.get('href')))\r\n        elif node.name == 'table':\r\n            blocks.extend(self.process_table(node))\r\n\r\n        for child in node.children:\r\n            if isinstance(child, str):\r\n                continue\r\n            blocks.extend(self.process_node(child))\r\n\r\n        return blocks\r\n\r\n    def extract_language_and_code(self, code_text):\r\n        lines = code_text.split('\\n')\r\n        language = lines[0].strip()\r\n        code = '\\n'.join(lines[1:]).strip()\r\n        return language, code\r\n\r\n    def is_code_block(self, text):\r\n        return text.startswith('```')\r\n\r\n    def extract_code_block(self, text):\r\n        lines = text.split('\\n')\r\n        language = lines[0].strip('`').strip()\r\n        code = '\\n'.join(lines[1:]).strip('`').strip()\r\n        return language, code\r\n    \r\n    def is_table(self, text):\r\n        rows = text.split('\\n')\r\n        if len(rows) < 2:\r\n            return False\r\n\r\n        has_separator = False\r\n        for i, row in enumerate(rows):\r\n            if '|' in row:\r\n                cells = [cell.strip() for cell in row.split('|')]\r\n                cells = [cell for cell in cells if cell]  # Remove empty cells\r\n                if i == 1 and all(set(cell) <= set('-|') for cell in cells):\r\n                    has_separator = True\r\n                elif not cells:\r\n                    return False\r\n\r\n        return has_separator and len(rows) >= 3\r\n\r\n    def process_list(self, node, list_type):\r\n        blocks = []\r\n        for item in node.find_all('li'):\r\n            item_text = item.get_text(strip=True)\r\n            checked = item_text.startswith('[x]')\r\n            is_checklist = item_text.startswith('[ ]') or checked\r\n\r\n            if is_checklist:\r\n                item_text = item_text.replace('[x]', '').replace('[ ]', '').strip()\r\n                blocks.append(self.create_block('to_do', item_text, checked=checked))\r\n            else:\r\n                blocks.append(self.create_block(list_type, item_text))\r\n        return blocks\r\n\r\n    def process_table(self, node):\r\n        blocks = []\r\n        header_row = node.find('thead').find('tr') if node.find('thead') else None\r\n        body_rows = node.find('tbody').find_all('tr') if node.find('tbody') else []\r\n\r\n        if header_row or body_rows:\r\n            table_width = max(len(header_row.find_all(['th', 'td'])) if header_row else 0,\r\n                            max(len(row.find_all(['th', 'td'])) for row in body_rows))\r\n\r\n            table_block = self.create_block('table', '', table_width=table_width, has_column_header=bool(header_row))\r\n            blocks.append(table_block)\r\n\r\n            if header_row:\r\n                header_cells = [cell.get_text(strip=True) for cell in header_row.find_all(['th', 'td'])]\r\n                header_row_block = self.create_block('table_row', header_cells)\r\n                blocks.append(header_row_block)\r\n\r\n            for row in body_rows:\r\n                cells = [cell.get_text(strip=True) for cell in row.find_all(['th', 'td'])]\r\n                row_block = self.create_block('table_row', cells)\r\n                blocks.append(row_block)\r\n\r\n        return blocks\r\n    \r\n    def create_block(self, block_type: str, content: str, **kwargs) -> Dict[str, Any]:\r\n        block = {\r\n            \"object\": \"block\",\r\n            \"type\": block_type,\r\n            block_type: {},\r\n        }\r\n\r\n        if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"bulleted_list_item\", \"numbered_list_item\", \"quote\"]:\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n        elif block_type == 'to_do':\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['checked'] = kwargs.get('checked', False)\r\n        elif block_type == 'code':\r\n            block[block_type]['rich_text'] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['language'] = kwargs.get('language', 'plain text')\r\n        elif block_type == 'image':\r\n            block[block_type] = {\r\n                \"type\": \"external\",\r\n                \"external\": {\r\n                    \"url\": kwargs.get('image_url', '')\r\n                }\r\n            }\r\n        elif block_type == 'divider':\r\n            pass\r\n        elif block_type == 'bookmark':\r\n            block[block_type]['url'] = kwargs.get('link_url', '')\r\n        elif block_type == 'table':\r\n            block[block_type]['table_width'] = kwargs.get('table_width', 0)\r\n            block[block_type]['has_column_header'] = kwargs.get('has_column_header', False)\r\n            block[block_type]['has_row_header'] = kwargs.get('has_row_header', False)\r\n        elif block_type == 'table_row':\r\n            block[block_type]['cells'] = [[{'type': 'text', 'text': {'content': cell}} for cell in content]]\r\n\r\n        return block",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "markdown_text": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "markdown_text",
                "display_name": "Markdown Text",
                "advanced": false,
                "dynamic": false,
                "info": "The markdown text to convert to Notion blocks.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "notion_secret": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "notion_secret",
                "display_name": "Notion Secret",
                "advanced": false,
                "dynamic": false,
                "info": "The Notion integration token.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Convert markdown text to Notion blocks and append them to a Notion page.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "Record"
            ],
            "display_name": "Add Content to Page [Notion] ",
            "documentation": "https://developers.notion.com/reference/patch-block-children",
            "custom_fields": {
              "markdown_text": null,
              "block_id": null,
              "notion_secret": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-Ukv1v"
        },
        "selected": true,
        "width": 384,
        "height": 497,
        "dragging": true,
        "positionAbsolute": {
          "x": 3496.319543797485,
          "y": 3224.4566891166287
        }
      }
    ],
    "edges": [
      {
        "source": "Prompt-kS01R",
        "target": "OpenAIModel-YgBgW",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-kS01Rœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YgBgWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-kS01R{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-kS01Rœ}-OpenAIModel-YgBgW{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YgBgWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-YgBgW",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-kS01R"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "MemoryComponent-xkcAM",
        "target": "Prompt-kS01R",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-xkcAMœ}",
        "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-MemoryComponent-xkcAM{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-xkcAMœ}-Prompt-kS01R{œfieldNameœ:œhistoryœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "history",
            "id": "Prompt-kS01R",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-xkcAM"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "TextOutput-CBJgG",
        "target": "Prompt-kS01R",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-CBJgGœ}",
        "targetHandle": "{œfieldNameœ:œtranscriptœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-TextOutput-CBJgG{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-CBJgGœ}-Prompt-kS01R{œfieldNameœ:œtranscriptœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "transcript",
            "id": "Prompt-kS01R",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextOutput",
            "id": "TextOutput-CBJgG"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-lNiMz",
        "target": "CustomComponent-kBYaC",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-lNiMzœ}",
        "targetHandle": "{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-kBYaCœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomComponent-lNiMz{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-lNiMzœ}-CustomComponent-kBYaC{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-kBYaCœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "properties",
            "id": "CustomComponent-kBYaC",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-lNiMz"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "OpenAIModel-YgBgW",
        "target": "CustomComponent-99QiK",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-99QiKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OpenAIModel-YgBgW{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}-CustomComponent-99QiK{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-99QiKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CustomComponent-99QiK",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-YgBgW"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "IDGenerator-WY5om",
        "target": "ChatInput-3D5tW",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatInput-3D5tWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-ChatInput-3D5tW{œfieldNameœ:œsession_idœ,œidœ:œChatInput-3D5tWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "ChatInput-3D5tW",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-WY5om"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "IDGenerator-WY5om",
        "target": "MemoryComponent-xkcAM",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-xkcAMœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-MemoryComponent-xkcAM{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-xkcAMœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "MemoryComponent-xkcAM",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-WY5om"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "OpenAIModel-YgBgW",
        "target": "CustomComponent-mCQAa",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-mCQAaœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OpenAIModel-YgBgW{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}-CustomComponent-mCQAa{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-mCQAaœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CustomComponent-mCQAa",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-YgBgW"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-mCQAa",
        "target": "ChatOutput-YUs36",
        "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mCQAaœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomComponent-mCQAa{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mCQAaœ}-ChatOutput-YUs36{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-YUs36",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "NoneType",
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-mCQAa"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-99QiK",
        "target": "ChatOutput-rFBCx",
        "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-99QiKœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomComponent-99QiK{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-99QiKœ}-ChatOutput-rFBCx{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-rFBCx",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "NoneType",
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-99QiK"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "RecordsToText-LRkHt",
        "target": "CustomComponent-lNiMz",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-LRkHtœ}",
        "targetHandle": "{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-lNiMzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-RecordsToText-LRkHt{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-LRkHtœ}-CustomComponent-lNiMz{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-lNiMzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "title",
            "id": "CustomComponent-lNiMz",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-LRkHt"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "OpenAIModel-YgBgW",
        "target": "TextOutput-ayBOi",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-ayBOiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OpenAIModel-YgBgW{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}-TextOutput-ayBOi{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-ayBOiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-ayBOi",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-YgBgW"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "TextOutput-9aniu",
        "target": "CustomComponent-tW2Xh",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-9aniuœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-tW2Xhœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-TextOutput-9aniu{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-9aniuœ}-CustomComponent-tW2Xh{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-tW2Xhœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CustomComponent-tW2Xh",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextOutput",
            "id": "TextOutput-9aniu"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-tW2Xh",
        "target": "RecordsToText-nMq1R",
        "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}",
        "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-nMq1Rœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "id": "reactflow__edge-CustomComponent-tW2Xh{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}-RecordsToText-nMq1R{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-nMq1Rœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "records",
            "id": "RecordsToText-nMq1R",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "NoneType",
              "object",
              "Record"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-tW2Xh"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-tW2Xh",
        "target": "RecordsToText-LRkHt",
        "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}",
        "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-LRkHtœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "id": "reactflow__edge-CustomComponent-tW2Xh{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}-RecordsToText-LRkHt{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-LRkHtœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "records",
            "id": "RecordsToText-LRkHt",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "NoneType",
              "object",
              "Record"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-tW2Xh"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "IDGenerator-WY5om",
        "target": "ChatOutput-YUs36",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-ChatOutput-YUs36{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "ChatOutput-YUs36",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-WY5om"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "IDGenerator-WY5om",
        "target": "ChatOutput-rFBCx",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-ChatOutput-rFBCx{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "ChatOutput-rFBCx",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-WY5om"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "ChatInput-3D5tW",
        "target": "Prompt-kS01R",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-3D5tWœ}",
        "targetHandle": "{œfieldNameœ:œinputœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ChatInput-3D5tW{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-3D5tWœ}-Prompt-kS01R{œfieldNameœ:œinputœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input",
            "id": "Prompt-kS01R",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-3D5tW"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-kBYaC",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-kBYaCœ}",
        "target": "RecordsToText-eadmZ",
        "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-eadmZœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "records",
            "id": "RecordsToText-eadmZ",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-kBYaC"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-kBYaC{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-kBYaCœ}-RecordsToText-eadmZ{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-eadmZœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "source": "CustomComponent-5ceBc",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}",
        "target": "TextOutput-8UyMX",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-8UyMXœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-8UyMX",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-5ceBc"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-5ceBc{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}-TextOutput-8UyMX{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-8UyMXœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-5ceBc",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}",
        "target": "TextOutput-isOm2",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-isOm2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-isOm2",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-5ceBc"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-5ceBc{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}-TextOutput-isOm2{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-isOm2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "RecordsToText-eadmZ",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-eadmZœ}",
        "target": "CustomComponent-Ukv1v",
        "targetHandle": "{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "block_id",
            "id": "CustomComponent-Ukv1v",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-eadmZ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-RecordsToText-eadmZ{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-eadmZœ}-CustomComponent-Ukv1v{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "RecordsToText-nMq1R",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-nMq1Rœ}",
        "target": "CustomComponent-Ukv1v",
        "targetHandle": "{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "markdown_text",
            "id": "CustomComponent-Ukv1v",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-nMq1R"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-RecordsToText-nMq1R{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-nMq1Rœ}-CustomComponent-Ukv1v{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": -427.2221279313554,
      "y": -1082.887112909176,
      "zoom": 0.5000000000000013
    }
  },
  "metadata": {
    "ChatOutput": {
      "count": 2
    },
    "TextOutput": {
      "count": 6
    },
    "CustomComponent": {
      "count": 7
    },
    "AnthropicModel": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "Prompt": {
      "count": 2
    },
    "MemoryComponent": {
      "count": 1
    },
    "RecordsToText": {
      "count": 3
    },
    "IDGenerator": {
      "count": 1
    },
    "total": 25
  },
  "original": {
    "id": "9a5bdc1e-e7a8-41e8-9f1b-606f688daca3",
    "name": "Video to Article",
    "description": "",
    "is_component": false,
    "liked_by_count": "13",
    "downloads_count": "118",
    "metadata": {
      "ChatOutput": {
        "count": 2
      },
      "TextOutput": {
        "count": 6
      },
      "CustomComponent": {
        "count": 7
      },
      "AnthropicModel": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "Prompt": {
        "count": 2
      },
      "MemoryComponent": {
        "count": 1
      },
      "RecordsToText": {
        "count": 3
      },
      "IDGenerator": {
        "count": 1
      },
      "total": 25
    },
    "last_tested_version": "1.0.0a49",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatOutput-YUs36",
          "type": "genericNode",
          "position": {
            "x": 3251.819145395853,
            "y": 1592.9485799053175
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Writing Assistant",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-YUs36"
          },
          "selected": false,
          "width": 384,
          "height": 571,
          "positionAbsolute": {
            "x": 3251.819145395853,
            "y": 1592.9485799053175
          },
          "dragging": false
        },
        {
          "id": "TextOutput-87lID",
          "type": "genericNode",
          "position": {
            "x": 2266.25383819316,
            "y": 15.442657221921507
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "[DEBUG] -  Summary",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-87lID"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 2266.25383819316,
            "y": 15.442657221921507
          },
          "dragging": false
        },
        {
          "id": "TextOutput-8UyMX",
          "type": "genericNode",
          "position": {
            "x": 1412.594726240965,
            "y": 648.4349849381973
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "[DEBUG] - Transcript",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-8UyMX"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 1412.594726240965,
            "y": 648.4349849381973
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-5ceBc",
          "type": "genericNode",
          "position": {
            "x": 788.3115189228746,
            "y": 756.7735312388982
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "audio_file": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".mp3",
                    ".mp4",
                    ".wav",
                    ".m4a",
                    ".mkv"
                  ],
                  "file_path": "836b832f-5de7-4150-8a6d-3b677d3ce515/12 Expert Tips and Features for Building AI Apps VISUALLY with Langflow.mp4",
                  "password": false,
                  "name": "audio_file",
                  "display_name": "Audio File",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "api_key",
                  "display_name": "Assembly API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your AssemblyAI API key. You can get one from https://www.assemblyai.com/",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nimport time\r\nfrom typing import List\r\n\r\nimport requests\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.utils.constants import LOADERS_INFO\r\nfrom loguru import logger\r\n\r\nclass AssemblyAITranscriber(CustomComponent):\r\n    display_name: str = \"AssemblyAI Transcriber\"\r\n    description: str = \"Transcribe an audio file using AssemblyAI\"\r\n    documentation: str = \"https://docs.assemblyai.com/\"\r\n    output_types: list[str] = [\"Record\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"api_key\": {\r\n                \"display_name\": \"Assembly API Key\",\r\n                \"field_type\": \"str\",\r\n                \"password\": True,\r\n                \"required\": True,\r\n                \"info\": \"Your AssemblyAI API key. You can get one from https://www.assemblyai.com/\",\r\n            },\r\n            \"audio_file\": {\r\n                \"display_name\": \"Audio File\",\r\n                \"required\": True,\r\n                \"field_type\": \"file\",\r\n                \"file_types\": [\"mp3\", \"mp4\", \"wav\", \"m4a\",\".mkv\"],\r\n                \"suffixes\": [\".mp3\", \"mp4\", \".wav\", \".m4a\",\".mkv\"],\r\n            },\r\n            \"language\": {\r\n                \"display_name\": \"Language\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n                \"options\": [\r\n                    \"en\",\r\n                    \"es\",\r\n                    \"fr\",\r\n                    \"de\",\r\n                    \"it\",\r\n                    \"pt\",\r\n                    \"ja\",\r\n                    \"ko\",\r\n                    \"hi\",\r\n                    \"ar\",\r\n                    \"ru\",\r\n                    \"zh\",\r\n                ],\r\n                \"value\": \"en\",\r\n                \"info\": \"The language of the audio file.\",\r\n            },\r\n        }\r\n\r\n    def upload_audio_file(self, audio_file: str, headers: dict) -> str:\r\n        \"\"\"Uploads audio file to AssemblyAI and returns upload URL.\"\"\"\r\n        base_url = \"https://api.assemblyai.com/v2\"\r\n        with open(audio_file, \"rb\") as f:\r\n            response = requests.post(base_url + \"/upload\", headers=headers, data=f)\r\n        upload_url = response.json()[\"upload_url\"]\r\n        return upload_url\r\n\r\n    def create_transcription_request(self, upload_url: str, headers: dict, language: str) -> str:\r\n        \"\"\"Creates a transcription request and returns the transcription ID.\"\"\"\r\n        data = {\"audio_url\": upload_url, \"language_code\": language}\r\n        url = \"https://api.assemblyai.com/v2/transcript\"\r\n        response = requests.post(url, json=data, headers=headers)\r\n        transcript_id = response.json()[\"id\"]\r\n        return transcript_id\r\n\r\n    def poll_transcription_status(self, transcript_id: str, headers: dict) -> Record:\r\n        \"\"\"Polls the transcription status until completion and returns the Record.\"\"\"\r\n        polling_endpoint = f\"https://api.assemblyai.com/v2/transcript/{transcript_id}\"\r\n        while True:\r\n            transcription_result = requests.get(polling_endpoint, headers=headers).json()\r\n            logger.debug(transcription_result)\r\n\r\n            if transcription_result[\"status\"] == \"completed\":\r\n                self.status = \"Transcription completed\"\r\n                return Record(data=transcription_result, text=transcription_result['text'])\r\n\r\n            elif transcription_result[\"status\"] == \"error\":\r\n                raise RuntimeError(f\"Transcription failed: {transcription_result['error']}\")\r\n\r\n            else:\r\n                time.sleep(3)\r\n\r\n    def build(self, audio_file: str, api_key: str, language: str,) -> str:\r\n        headers = {\"authorization\": api_key}\r\n\r\n        upload_url = self.upload_audio_file(audio_file, headers)\r\n        transcript_id = self.create_transcription_request(upload_url, headers, language)\r\n        transcription_result = self.poll_transcription_status(transcript_id, headers)\r\n        return transcription_result.text",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "language": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "en",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "en",
                    "es",
                    "fr",
                    "de",
                    "it",
                    "pt",
                    "ja",
                    "ko",
                    "hi",
                    "ar",
                    "ru",
                    "zh"
                  ],
                  "name": "language",
                  "display_name": "Language",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The language of the audio file.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Transcribe an audio file using AssemblyAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Assembly AI - Transcribe",
              "documentation": "https://docs.assemblyai.com/",
              "custom_fields": {
                "audio_file": null,
                "api_key": null,
                "language": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-5ceBc"
          },
          "selected": false,
          "width": 384,
          "height": 469,
          "dragging": false,
          "positionAbsolute": {
            "x": 788.3115189228746,
            "y": 756.7735312388982
          }
        },
        {
          "id": "AnthropicModel-l22ms",
          "type": "genericNode",
          "position": {
            "x": 1766.6511243241089,
            "y": -276.78126927104427
          },
          "data": {
            "type": "AnthropicModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "anthropic_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "anthropic_api_key",
                  "display_name": "Anthropic API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Anthropic API key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "anthropic_api_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "anthropic_api_url",
                  "display_name": "Anthropic API URL",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": True,\n                \"value\": 256,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4096",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "claude-3-haiku-20240307",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307",
                    "claude-2.1",
                    "claude-2.0",
                    "claude-instant-1.2",
                    "claude-instant-1"
                  ],
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.3",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate text using Anthropic Chat&Completion LLMs.",
              "icon": "Anthropic",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Anthropic",
              "documentation": "",
              "custom_fields": {
                "model": null,
                "input_value": null,
                "system_message": null,
                "anthropic_api_key": null,
                "max_tokens": null,
                "temperature": null,
                "anthropic_api_url": null,
                "stream": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "model",
                "anthropic_api_key",
                "max_tokens",
                "temperature",
                "anthropic_api_url",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "AnthropicModel-l22ms"
          },
          "selected": false,
          "width": 384,
          "height": 563,
          "dragging": false,
          "positionAbsolute": {
            "x": 1766.6511243241089,
            "y": -276.78126927104427
          }
        },
        {
          "id": "ChatInput-3D5tW",
          "type": "genericNode",
          "position": {
            "x": 868.5272017465938,
            "y": 1916.445132033592
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "include a relevant quote from the video in the conclusion"
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Felipe",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Give more context to the LLM for the summary generation",
              "icon": "ChatInput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Context",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-3D5tW"
          },
          "selected": false,
          "width": 384,
          "height": 565,
          "positionAbsolute": {
            "x": 868.5272017465938,
            "y": 1916.445132033592
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-YgBgW",
          "type": "genericNode",
          "position": {
            "x": 2251.2777846472973,
            "y": 1578.8240105938316
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\r\nfrom axiestudio.field_typing import NestedDict, Text\r\n\r\n\r\nclass OpenAIModelComponent(LCModelComponent):\r\n    display_name = \"OpenAI\"\r\n    description = \"Generates text using OpenAI LLMs.\"\r\n    icon = \"OpenAI\"\r\n\r\n    field_order = [\r\n        \"max_tokens\",\r\n        \"model_kwargs\",\r\n        \"model_name\",\r\n        \"openai_api_base\",\r\n        \"openai_api_key\",\r\n        \"temperature\",\r\n        \"input_value\",\r\n        \"system_message\",\r\n        \"stream\",\r\n        \"json_mode\",\r\n        \"seed\",\r\n    ]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\"},\r\n            \"max_tokens\": {\r\n                \"display_name\": \"Max Tokens\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_kwargs\": {\r\n                \"display_name\": \"Model Kwargs\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_name\": {\r\n                \"display_name\": \"Model Name\",\r\n                \"advanced\": False,\r\n                \"options\": MODEL_NAMES,\r\n            },\r\n            \"openai_api_base\": {\r\n                \"display_name\": \"OpenAI API Base\",\r\n                \"advanced\": True,\r\n                \"info\": (\r\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\r\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\r\n                ),\r\n            },\r\n            \"openai_api_key\": {\r\n                \"display_name\": \"OpenAI API Key\",\r\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\r\n                \"advanced\": False,\r\n                \"password\": True,\r\n            },\r\n            \"temperature\": {\r\n                \"display_name\": \"Temperature\",\r\n                \"advanced\": False,\r\n                \"value\": 0.1,\r\n            },\r\n            \"stream\": {\r\n                \"display_name\": \"Stream\",\r\n                \"info\": STREAM_INFO_TEXT,\r\n                \"advanced\": True,\r\n            },\r\n            \"system_message\": {\r\n                \"display_name\": \"System Message\",\r\n                \"info\": \"System message to pass to the model.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"json_mode\": {\r\n                \"display_name\": \"JSON Mode\",\r\n                \"info\": \"Enable JSON mode for the model output.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"seed\": {\r\n                \"display_name\": \"Seed\",\r\n                \"info\": \"The seed controls the reproducibility of the job.\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        input_value: Text,\r\n        openai_api_key: str,\r\n        temperature: float,\r\n        model_name: str = \"gpt-4o\",\r\n        max_tokens: Optional[int] = 256,\r\n        model_kwargs: NestedDict = {},\r\n        openai_api_base: Optional[str] = None,\r\n        stream: bool = False,\r\n        system_message: Optional[str] = None,\r\n        json_mode: bool = False,\r\n        seed: Optional[int] = None,\r\n    ) -> Text:\r\n        if not openai_api_base:\r\n            openai_api_base = \"https://api.openai.com/v1\"\r\n        if openai_api_key:\r\n            api_key = SecretStr(openai_api_key)\r\n        else:\r\n            api_key = None\r\n\r\n        response_format = None\r\n        if json_mode:\r\n            response_format = {\"type\": \"json_object\"}\r\n\r\n        output = ChatOpenAI(\r\n            max_tokens=max_tokens,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=api_key,\r\n            temperature=temperature,\r\n            response_format=response_format,\r\n            seed=seed,\r\n        )\r\n\r\n        return self.get_chat_result(output, stream, input_value, system_message)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "json_mode": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_mode",
                  "display_name": "JSON Mode",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Enable JSON mode for the model output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4000",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-turbo",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "seed": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "seed",
                  "display_name": "Seed",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "444888"
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.6",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs, with optional JSON Mode and Seed parameters.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null,
                "json_mode": null,
                "seed": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream",
                "json_mode",
                "seed"
              ],
              "beta": false,
              "official": false
            },
            "id": "OpenAIModel-YgBgW"
          },
          "selected": false,
          "width": 384,
          "height": 907,
          "positionAbsolute": {
            "x": 2251.2777846472973,
            "y": 1578.8240105938316
          },
          "dragging": false
        },
        {
          "id": "Prompt-lvcgT",
          "type": "genericNode",
          "position": {
            "x": 1279.7956990704731,
            "y": -111.38896572719074
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "<Instructions>\nYour task is to generate a long, comprehensive, detailed notes capturing all the key information from a YouTube video, which will be used to create a blog post about the video's content.\n\nThe video transcript will be provided in the {{TRANSCRIPT}} variable. This is the primary input you should use to identify and extract all relevant details, facts, examples, and key points covered in the video.\n\n{{USER_INSTRUCTIONS}} will contain any additional guidance from the user on specific aspects to focus on, desired organization, or key themes to emphasize. Carefully follow these instructions to ensure the notes meet the user's needs.\n\nHere are the steps to follow:\n\n1. Thoroughly review the {{TRANSCRIPT}}, noting down all significant information shared, including main topics, subtopics, examples, statistics, quotes, and any other details that contribute to the overall message of the video. Maintain the original language and terminology used in the video.\n\n2. Examine the {{USER_INSTRUCTIONS}} and create a checklist of specific requirements to address, such as highlighting particular sections, emphasizing certain themes, or structuring the notes in a specific way.\n\n3. Begin outlining the notes using clear headings and subheadings that correspond to the main topics and subtopics discussed in the video. Mirror the language used in the transcript to maintain consistency.\n\n4. Under each section, provide detailed bullet points capturing all relevant information shared in the video. Include specific examples, data points, quotes, and any other supporting details that help convey the full scope of what was discussed.\n\n5. Use formatting to highlight key facts, statistics, or important quotes. For example: \"**Key Fact: Over 50% of respondents preferred Product A.**\"\n\n6. If the video includes any actionable advice or recommendations, call them out using formatting like: \"[RECOMMENDATION] *Try implementing Strategy X for best results.*\"\n\n7. For any references to external sources or additional information mentioned in the video, include placeholders like: \"[EXTERNAL LINK] *Article on XYZ topic: [insert URL here]*\"\n\n8. After the main content sections, include a \"Key Takeaways\" section summarizing the most important points and overall message of the video.\n\n9. End with a \"Additional Resources\" section listing any external links, recommended reading, or other relevant sources mentioned in the video.\n\n10. Conclude with a <reflection> evaluating how comprehensively the notes capture the video's content and key messages. Provide suggestions for improvement or additional points to consider.\n\n\nOnce complete, review your notes and ensure they meet the following criteria:\n- Comprehensively cover all significant information and details from the {{TRANSCRIPT}} \n- Address the specific points and requirements outlined in the {{USER_INSTRUCTIONS}}\n- Utilize clear organization and formatting, including headings, bullet points, and Markdown syntax\n- Provide sufficient detail and context to serve as a standalone resource for creating a blog post\n- Highlight key facts, quotes, recommendations, and external resources\n- Follow a logical structure that mirrors the flow of information in the video\n\nSubmit your final video notes using the following high-level outline:\n# Video Title\n## Main Topic 1\n### Subtopic 1a\n### Subtopic 1b\n## Main Topic 2\n### Subtopic 2a\n### Subtopic 2b \n## Main Topic 3\n### Subtopic 3a\n### Subtopic 3b\n## Key Takeaways\n## Additional Resources\n\nRemember, your aim is to transform the video transcript into a long, thorough, well-organized resource that captures all the necessary information to develop a comprehensive blog post. Let me know if you have any additional questions!\n\nYour final output should contain ONLY the long video notes, without any extra comments or reflections.\n\n</Instructions>\n<Inputs>\n<TRANSCRIPT>\n{TRANSCRIPT}\n</TRANSCRIPT>\n</Inputs>",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "TRANSCRIPT": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "TRANSCRIPT",
                  "display_name": "TRANSCRIPT",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "TRANSCRIPT"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-lvcgT",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 1279.7956990704731,
            "y": -111.38896572719074
          },
          "dragging": false
        },
        {
          "id": "MemoryComponent-xkcAM",
          "type": "genericNode",
          "position": {
            "x": 1331.0950467681632,
            "y": 1512.456213463097
          },
          "data": {
            "type": "MemoryComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "n_messages": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "20",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "load_from_db": false,
                  "title_case": false
                },
                "order": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Descending",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{sender_name}: {text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine and User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Retrieves stored chat messages given a specific Session ID.",
              "icon": "history",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Memory",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "session_id": null,
                "n_messages": null,
                "order": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": true
            },
            "id": "MemoryComponent-xkcAM"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 1331.0950467681632,
            "y": 1512.456213463097
          },
          "dragging": false
        },
        {
          "id": "Prompt-kS01R",
          "type": "genericNode",
          "position": {
            "x": 1807.1007030816031,
            "y": 1708.0050062510159
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "As a content writing assistant, your task is to help the user create a comprehensive blog post based on the main points and ideas presented in a video transcript summary. The blog post should be informative, engaging, and well-structured, with relevant examples, anecdotes, or personal insights to make the content more relatable and interesting to readers.\n\nBased on the following Video transcript summary:\n```\n{transcript}\n```\n\nTo generate the initial blog post draft (Draft 1), follow these steps:\n\n1. Begin with a captivating introduction that hooks the reader and provides context for the video's topic.\n\n2. Divide the main content into several paragraphs or sections, each focusing on a specific point from the video summary. Elaborate on these points, providing additional information, explanations, and examples to support the ideas presented.\n\n3. Share your own insights, opinions, or analysis related to the video's content. Discuss the implications, potential applications, or broader context of the ideas presented.\n\n4. Embed the video within the content: Suggest an appropriate place in the article to embed the video. This should enhance understanding and engagement by allowing readers to view the video that complements the textual content.\n\n5. Summarize the key takeaways from the video and your blog post in the conclusion. Provide a thought-provoking conclusion that encourages readers to reflect on the topic or take action.\n\n6. Use appropriate headings, subheadings, bullet points, and formatting to make the blog post visually appealing and easy to read. Ensure that the formatted text is in markdown format.\n\n7. The blog post should be approximately 800-1200 words long, providing sufficient detail and depth without overwhelming the reader.\n\nAfter generating Draft 1, engage in a dialogue with the user to gather their feedback and suggestions. Ask the user if they would like you to incorporate any additional content or make specific changes to the draft.\n\n# Revision Process\nIf the user provides feedback or requests changes:\n1. Acknowledge the user's feedback and suggestions.\n2. Clarify any specific details or requirements if needed.\n3. Explain how you plan to incorporate their feedback into the next draft.\n4. Generate a revised version of the blog post (Draft 2, Draft 3, etc.) based on the user's input.\n\nDuring the revision process, focus on:\n- Modifying the tone or style of the writing\n- Adding or removing specific examples or anecdotes\n- Clarifying or expanding on certain points\n- Restructuring the content for better flow and readability\n\nContinue the conversation with the user, making iterations to the blog post until they are satisfied with the final result.\n\nWhen responding, please format your entire response as a JSON object with the following structure:\n(\n\"answer\": \"Your direct response to the user's query\", \n\"article\": \"The generated blog post content in markdown format, always starting with 'Draft X' where X is the current draft number\", \n\"title\": \"The generated blog post title\" \n)\n\n# Important notes:\n- Always include the 'answer' key with your direct response.\n- If a blog post has been generated, include the content under the 'article' key (always starting with \"Draft X\" at the beginning, where X is the current draft number) and the title under the 'title' key.\n- If no blog post has been generated yet or during the revision process, omit the 'article' and 'title' keys entirely.\n- When the user provides feedback or requests changes, do not generate a new draft right away. Instead, acknowledge their input, ask for clarification if needed, and explain how you plan to incorporate their suggestions in the next draft. Only generate the revised draft after confirming the changes with the user.\n\nChat History:\n```\n{history}\n```\n\nUser Request:\n**{input}**\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "history": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "history",
                  "display_name": "history",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "transcript": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "transcript",
                  "display_name": "transcript",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "input": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input",
                  "display_name": "input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "transcript",
                  "history",
                  "input"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-kS01R",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 571,
          "positionAbsolute": {
            "x": 1807.1007030816031,
            "y": 1708.0050062510159
          },
          "dragging": false
        },
        {
          "id": "TextOutput-isOm2",
          "type": "genericNode",
          "position": {
            "x": 1409.7049442574119,
            "y": 970.4529994453871
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass SaveToFileComponent(CustomComponent):\r\n    display_name = \"Save to File\"\r\n    description = \"Save the input to a file named 'temporary_file_debug.txt'.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\", \"multiline\": True},\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, file_path: Optional[str] = \"temporary_file_debug.txt\") -> None:\r\n        with open(file_path, \"w\") as file:\r\n            file.write(input_value)\r\n        self.status = f\"Input saved to {file_path}\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "transcript.txt",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Save the input to a file named 'temporary_file_debug.txt'.",
              "icon": "file-text",
              "base_classes": [],
              "display_name": "Save to File",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "file_path": null
              },
              "output_types": [],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-isOm2",
            "description": "Save the input to a file named 'temporary_file_debug.txt'.",
            "display_name": "[DEBUG] -  Summary"
          },
          "selected": false,
          "width": 384,
          "height": 355,
          "dragging": false,
          "positionAbsolute": {
            "x": 1409.7049442574119,
            "y": 970.4529994453871
          }
        },
        {
          "id": "TextOutput-CBJgG",
          "type": "genericNode",
          "position": {
            "x": 1319.2834936025133,
            "y": 2089.0771914469997
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass ReadFromFileComponent(CustomComponent):\r\n    display_name = \"Read from File\"\r\n    description = \"Read the contents of a file named 'temporary_file_debug.txt' and return as a string.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"temporary_file_debug.txt\") -> Text:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                content = file.read()\r\n            self.status = f\"File {file_path} read successfully: \\n{content}\"\r\n            return content\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return \"\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "transcript.txt",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
              "icon": "file-text",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Read from File",
              "documentation": "",
              "custom_fields": {
                "file_path": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-CBJgG",
            "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
            "display_name": "Read from File"
          },
          "selected": false,
          "width": 384,
          "height": 309,
          "positionAbsolute": {
            "x": 1319.2834936025133,
            "y": 2089.0771914469997
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-rFBCx",
          "type": "genericNode",
          "position": {
            "x": 3264.3638998626293,
            "y": 2211.0388621428356
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Article Draft",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-rFBCx"
          },
          "selected": false,
          "width": 384,
          "height": 571,
          "positionAbsolute": {
            "x": 3264.3638998626293,
            "y": 2211.0388621428356
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-kBYaC",
          "type": "genericNode",
          "position": {
            "x": 2610.7259486211283,
            "y": 2912.748971849979
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Optional\r\n\r\nimport requests\r\nfrom axiestudio.custom import CustomComponent\r\n\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionPageCreator(CustomComponent):\r\n    display_name = \"Create Page [Notion]\"\r\n    description = \"A component for creating Notion pages.\"\r\n    documentation: str = \"https://docs.axiestudio.org/integrations/notion/page-create\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"database_id\": {\r\n                \"display_name\": \"Database ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the Notion database.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n            \"properties\": {\r\n                \"display_name\": \"Properties\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}\",\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        database_id: str,\r\n        notion_secret: str,\r\n        properties: str = '{\"Task name\": {\"id\": \"title\", \"type\": \"title\", \"title\": [{\"type\": \"text\", \"text\": {\"content\": \"Send Notion Components to LF\", \"link\": null}}]}}',\r\n    ) -> Record:\r\n        if not database_id or not properties:\r\n            raise ValueError(\"Invalid input. Please provide 'database_id' and 'properties'.\")\r\n\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"parent\": {\"database_id\": database_id},\r\n            \"properties\": json.loads(properties),\r\n        }\r\n\r\n        response = requests.post(\"https://api.notion.com/v1/pages\", headers=headers, json=data)\r\n\r\n        if response.status_code == 200:\r\n            page_id = response.json()[\"id\"]\r\n            self.status = f\"Successfully created Notion page with ID: {page_id}\\n {str(response.json())}\"\r\n            return Record(text=str(response.json()), **response.json())\r\n        else:\r\n            error_message = f\"Failed to create Notion page. Status code: {response.status_code}, Error: {response.text}\"\r\n            self.status = error_message\r\n            raise Exception(error_message)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "database_id",
                  "display_name": "Database ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The ID of the Notion database.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "notion_secret": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "notion_secret",
                  "display_name": "Notion Secret",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The Notion integration token.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "properties": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "properties",
                  "display_name": "Properties",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "A component for creating Notion pages.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "Record"
              ],
              "display_name": "Create Page [Notion] ",
              "documentation": "https://docs.axiestudio.org/integrations/notion/page-create",
              "custom_fields": {
                "database_id": null,
                "notion_secret": null,
                "properties": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-kBYaC",
            "description": "A component for creating Notion pages.",
            "display_name": "Create Page [Notion] "
          },
          "selected": false,
          "width": 384,
          "height": 477,
          "positionAbsolute": {
            "x": 2610.7259486211283,
            "y": 2912.748971849979
          },
          "dragging": false
        },
        {
          "id": "RecordsToText-eadmZ",
          "type": "genericNode",
          "position": {
            "x": 3031.8637610556243,
            "y": 3084.1521717580704
          },
          "data": {
            "type": "RecordsToText",
            "node": {
              "template": {
                "records": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "records",
                  "display_name": "Records",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The records to convert to text.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{id}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Convert Records into plain text following a specified template.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Records To Text",
              "documentation": "",
              "custom_fields": {
                "records": null,
                "template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecordsToText-eadmZ"
          },
          "selected": false,
          "width": 384,
          "height": 357,
          "positionAbsolute": {
            "x": 3031.8637610556243,
            "y": 3084.1521717580704
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-lNiMz",
          "type": "genericNode",
          "position": {
            "x": 2158.3995638344186,
            "y": 2909.16527237008
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Dict, Any\r\n\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionTitleGen(CustomComponent):\r\n    display_name = \"Generate Title Page Properties [Notion]\"\r\n    description = \"Generate the  properties for Creating a Notion page.\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"title\": {\r\n                \"display_name\": \"Article Title\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The meeting summary to add to the page.\",\r\n                \"multiline\": True,\r\n            },\r\n        }\r\n\r\n    def sanitize_input(self, input_str: str) -> str:\r\n        # Remove leading/trailing whitespace\r\n        return input_str.strip()\r\n\r\n    def build(\r\n        self,\r\n        title: str,\r\n    ) -> str:\r\n        sanitized_title  = self.sanitize_input(title)\r\n\r\n\r\n        properties = {\r\n            \"title\":{\r\n                \"id\":\"title\",\r\n                \"type\":\"title\",\r\n            \t\"title\":[\r\n                    {\r\n                        \"type\":\"text\",\r\n            \t\t\t\"text\":{\r\n                            \"content\": sanitized_title\r\n            \t\t\t}\r\n            \t\t}\r\n            \t]\r\n            }   \r\n        }\r\n        properties_json = json.dumps(properties, ensure_ascii=False)\r\n\r\n        self.status = f\"Generated properties:\\n{properties_json}\"\r\n        return properties_json",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "title": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "title",
                  "display_name": "Article Title",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The meeting summary to add to the page.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Generate the  properties for Creating a Notion page.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Article Name",
              "documentation": "",
              "custom_fields": {
                "title": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-lNiMz",
            "description": "Generate the  properties for Creating a Notion page.",
            "display_name": "Article Name"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 2158.3995638344186,
            "y": 2909.16527237008
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-99QiK",
          "type": "genericNode",
          "position": {
            "x": 2726.955001243726,
            "y": 2447.7248547346044
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse a specific key from a JSON object.\"\r\n    output_types: list[str] = [\"Text\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_key\": {\r\n                \"display_name\": \"Key\",\r\n                \"info\": \"The key to parse from the JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_key: str) -> Optional[Text]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            if json_key in json_obj:\r\n                parsed_value = json_obj[json_key]\r\n                self.status = f\"Parsed value: {parsed_value}\"\r\n                return str(parsed_value)\r\n            else:\r\n                self.status = f\"Key '{json_key}' not found in the JSON object.\"\r\n                return None\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "JSON String",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your JSON object.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "json_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_key",
                  "display_name": "Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The key to parse from the JSON object.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "article"
                },
                "_type": "CustomComponent"
              },
              "description": "Parse a specific key from a JSON object.",
              "base_classes": [
                "NoneType",
                "object",
                "str",
                "Text"
              ],
              "display_name": "JSON Key to Text",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "json_key": null
              },
              "output_types": [
                "Text",
                "NoneType"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-99QiK",
            "description": "Parse a specific key from a JSON object.",
            "display_name": "JSON Key to Text"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 2726.955001243726,
            "y": 2447.7248547346044
          },
          "dragging": false
        },
        {
          "id": "IDGenerator-WY5om",
          "type": "genericNode",
          "position": {
            "x": 870.5622721265314,
            "y": 1543.4812113339126
          },
          "data": {
            "type": "IDGenerator",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import uuid\nfrom typing import Any, Optional\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass UUIDGeneratorComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"ID Generator\"\n    description = \"Generates a unique ID.\"\n\n    def update_build_config(\n        self,\n        build_config: dict,\n        field_value: Any,\n        field_name: Optional[str] = None,\n    ):\n        if field_name == \"unique_id\":\n            build_config[field_name][\"value\"] = str(uuid.uuid4())\n        return build_config\n\n    def build_config(self):\n        return {\n            \"unique_id\": {\n                \"display_name\": \"Value\",\n                \"refresh_button\": True,\n            }\n        }\n\n    def build(self, unique_id: str) -> str:\n        return unique_id\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "unique_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "unique_id",
                  "display_name": "Value",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "refresh_button": true,
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "d29f3b01-5fd9-4bac-9546-60eff5c5f289"
                },
                "_type": "CustomComponent"
              },
              "description": "Generates a unique ID.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Session Generator",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "unique_id": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "IDGenerator-WY5om"
          },
          "selected": false,
          "width": 384,
          "height": 295,
          "positionAbsolute": {
            "x": 870.5622721265314,
            "y": 1543.4812113339126
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-mCQAa",
          "type": "genericNode",
          "position": {
            "x": 2698.917000300549,
            "y": 1627.509245382392
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse a specific key from a JSON object.\"\r\n    output_types: list[str] = [\"Text\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_key\": {\r\n                \"display_name\": \"Key\",\r\n                \"info\": \"The key to parse from the JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_key: str) -> Optional[Text]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            if json_key in json_obj:\r\n                parsed_value = json_obj[json_key]\r\n                self.status = f\"Parsed value: {parsed_value}\"\r\n                return str(parsed_value)\r\n            else:\r\n                self.status = f\"Key '{json_key}' not found in the JSON object.\"\r\n                return None\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "JSON String",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your JSON object.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "json_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_key",
                  "display_name": "Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The key to parse from the JSON object.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "answer"
                },
                "_type": "CustomComponent"
              },
              "description": "Extract a specific key from a JSON object.",
              "base_classes": [
                "NoneType",
                "object",
                "str",
                "Text"
              ],
              "display_name": "JSON Key to Text",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "json_key": null
              },
              "output_types": [
                "Text",
                "NoneType"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-mCQAa"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 2698.917000300549,
            "y": 1627.509245382392
          },
          "dragging": false
        },
        {
          "id": "RecordsToText-LRkHt",
          "type": "genericNode",
          "position": {
            "x": 1683.2256903306475,
            "y": 2829.1437972156186
          },
          "data": {
            "type": "RecordsToText",
            "node": {
              "template": {
                "records": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "records",
                  "display_name": "Records",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The records to convert to text.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{title}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Convert Records into plain text following a specified template.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Records To Text",
              "documentation": "",
              "custom_fields": {
                "records": null,
                "template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecordsToText-LRkHt"
          },
          "selected": false,
          "width": 384,
          "height": 357,
          "positionAbsolute": {
            "x": 1683.2256903306475,
            "y": 2829.1437972156186
          },
          "dragging": false
        },
        {
          "id": "RecordsToText-nMq1R",
          "type": "genericNode",
          "position": {
            "x": 1825.4058310350433,
            "y": 3273.1957404132345
          },
          "data": {
            "type": "RecordsToText",
            "node": {
              "template": {
                "records": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "records",
                  "display_name": "Records",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The records to convert to text.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{article}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Convert Records into plain text following a specified template.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Records To Text",
              "documentation": "",
              "custom_fields": {
                "records": null,
                "template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecordsToText-nMq1R"
          },
          "selected": false,
          "width": 384,
          "height": 357,
          "positionAbsolute": {
            "x": 1825.4058310350433,
            "y": 3273.1957404132345
          },
          "dragging": false
        },
        {
          "id": "TextOutput-ayBOi",
          "type": "genericNode",
          "position": {
            "x": 2707.4503033565916,
            "y": 2041.910881125033
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass SaveToFileComponent(CustomComponent):\r\n    display_name = \"Save to File\"\r\n    description = \"Save the input to a file named 'temporary_file_debug.txt'.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\", \"multiline\": True},\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, file_path: Optional[str] = \"temporary_file_debug.txt\") -> None:\r\n        with open(file_path, \"w\") as file:\r\n            file.write(input_value)\r\n        self.status = f\"Input saved to {file_path}\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "article.json",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Save the input to a file named 'temporary_file_debug.txt'.",
              "icon": "file-text",
              "base_classes": [],
              "display_name": "Save to File",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "file_path": null
              },
              "output_types": [],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "TextOutput-ayBOi"
          },
          "selected": false,
          "width": 384,
          "height": 355,
          "positionAbsolute": {
            "x": 2707.4503033565916,
            "y": 2041.910881125033
          },
          "dragging": false
        },
        {
          "id": "TextOutput-9aniu",
          "type": "genericNode",
          "position": {
            "x": 716.3968670292153,
            "y": 2870.51235466344
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass ReadFromFileComponent(CustomComponent):\r\n    display_name = \"Read from File\"\r\n    description = \"Read the contents of a file named 'temporary_file_debug.txt' and return as a string.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"temporary_file_debug.txt\") -> Text:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                content = file.read()\r\n            self.status = f\"File {file_path} read successfully: \\n{content}\"\r\n            return content\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return \"\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "article.json",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
              "icon": "file-text",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Read from File",
              "documentation": "",
              "custom_fields": {
                "file_path": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "TextOutput-9aniu"
          },
          "selected": false,
          "width": 384,
          "height": 309,
          "positionAbsolute": {
            "x": 716.3968670292153,
            "y": 2870.51235466344
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-tW2Xh",
          "type": "genericNode",
          "position": {
            "x": 1206.3736921957734,
            "y": 2878.135292766787
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import List, Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse specific keys from a JSON object.\"\r\n    output_types: list[str] = [\"Record\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_keys\": {\r\n                \"display_name\": \"Keys\",\r\n                \"info\": \"The keys to parse from the JSON object (comma-separated).\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_keys: str) -> Optional[Record]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            keys = [key.strip() for key in json_keys.split(\",\")]\r\n            parsed_data = {}\r\n            for key in keys:\r\n                if key in json_obj:\r\n                    parsed_data[key] = json_obj[key]\r\n                else:\r\n                    self.status = f\"Key '{key}' not found in the JSON object.\"\r\n                    return None\r\n            self.status = f\"Parsed keys: {', '.join(parsed_data.keys())}\"\r\n            return Record(data=parsed_data)\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "JSON String",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your JSON object.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "json_keys": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_keys",
                  "display_name": "Keys",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The keys to parse from the JSON object (comma-separated).",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "article,title"
                },
                "_type": "CustomComponent"
              },
              "description": "Parse specific keys from a JSON object.",
              "base_classes": [
                "NoneType",
                "object",
                "Record"
              ],
              "display_name": "JSON Key to Record - Multiple",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "json_keys": null
              },
              "output_types": [
                "Record",
                "NoneType"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-tW2Xh"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 1206.3736921957734,
            "y": 2878.135292766787
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-Ukv1v",
          "type": "genericNode",
          "position": {
            "x": 3496.319543797485,
            "y": 3224.4566891166287
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "block_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "block_id",
                  "display_name": "Page/Block ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The ID of the page/block to add the content.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import List, Dict, Any\r\nfrom markdown import markdown\r\nfrom bs4 import BeautifulSoup\r\nimport requests\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass AddContentToPage(CustomComponent):\r\n    display_name = \"Add Content to Page [Notion]\"\r\n    description = \"Convert markdown text to Notion blocks and append them to a Notion page.\"\r\n    documentation: str = \"https://developers.notion.com/reference/patch-block-children\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"markdown_text\": {\r\n                \"display_name\": \"Markdown Text\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The markdown text to convert to Notion blocks.\",\r\n                \"multiline\": True,\r\n            },\r\n             \"block_id\": {\r\n                \"display_name\": \"Page/Block ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the page/block to add the content.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, markdown_text: str, block_id: str, notion_secret: str) -> Record:\r\n        html_text = markdown(markdown_text)\r\n        soup = BeautifulSoup(html_text, 'html.parser')\r\n        blocks = self.process_node(soup)\r\n\r\n        url = f\"https://api.notion.com/v1/blocks/{block_id}/children\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"children\": blocks,\r\n        }\r\n\r\n        response = requests.patch(url, headers=headers, json=data)\r\n        self.status = str(response.json())\r\n        response.raise_for_status()\r\n\r\n        result = response.json()\r\n        self.status = f\"Appended {len(blocks)} blocks to page with ID: {block_id}\"\r\n        return Record(data=result, text=json.dumps(result))\r\n\r\n    def process_node(self, node):\r\n        blocks = []\r\n        if isinstance(node, str):\r\n            text = node.strip()\r\n            if text:\r\n                if text.startswith('#'):\r\n                    heading_level = text.count('#', 0, 6)\r\n                    heading_text = text[heading_level:].strip()\r\n                    if heading_level == 1:\r\n                        blocks.append(self.create_block('heading_1', heading_text))\r\n                    elif heading_level == 2:\r\n                        blocks.append(self.create_block('heading_2', heading_text))\r\n                    elif heading_level == 3:\r\n                        blocks.append(self.create_block('heading_3', heading_text))\r\n                else:\r\n                    blocks.append(self.create_block('paragraph', text))\r\n        elif node.name == 'h1':\r\n            blocks.append(self.create_block('heading_1', node.get_text(strip=True)))\r\n        elif node.name == 'h2':\r\n            blocks.append(self.create_block('heading_2', node.get_text(strip=True)))\r\n        elif node.name == 'h3':\r\n            blocks.append(self.create_block('heading_3', node.get_text(strip=True)))\r\n        elif node.name == 'p':\r\n            code_node = node.find('code')\r\n            if code_node:\r\n                code_text = code_node.get_text()\r\n                language, code = self.extract_language_and_code(code_text)\r\n                blocks.append(self.create_block('code', code, language=language))\r\n            elif self.is_table(str(node)):\r\n                blocks.extend(self.process_table(node))\r\n            else:\r\n                blocks.append(self.create_block('paragraph', node.get_text(strip=True)))\r\n        elif node.name == 'ul':\r\n            blocks.extend(self.process_list(node, 'bulleted_list_item'))\r\n        elif node.name == 'ol':\r\n            blocks.extend(self.process_list(node, 'numbered_list_item'))\r\n        elif node.name == 'blockquote':\r\n            blocks.append(self.create_block('quote', node.get_text(strip=True)))\r\n        elif node.name == 'hr':\r\n            blocks.append(self.create_block('divider', ''))\r\n        elif node.name == 'img':\r\n            blocks.append(self.create_block('image', '', image_url=node.get('src')))\r\n        elif node.name == 'a':\r\n            blocks.append(self.create_block('bookmark', node.get_text(strip=True), link_url=node.get('href')))\r\n        elif node.name == 'table':\r\n            blocks.extend(self.process_table(node))\r\n\r\n        for child in node.children:\r\n            if isinstance(child, str):\r\n                continue\r\n            blocks.extend(self.process_node(child))\r\n\r\n        return blocks\r\n\r\n    def extract_language_and_code(self, code_text):\r\n        lines = code_text.split('\\n')\r\n        language = lines[0].strip()\r\n        code = '\\n'.join(lines[1:]).strip()\r\n        return language, code\r\n\r\n    def is_code_block(self, text):\r\n        return text.startswith('```')\r\n\r\n    def extract_code_block(self, text):\r\n        lines = text.split('\\n')\r\n        language = lines[0].strip('`').strip()\r\n        code = '\\n'.join(lines[1:]).strip('`').strip()\r\n        return language, code\r\n    \r\n    def is_table(self, text):\r\n        rows = text.split('\\n')\r\n        if len(rows) < 2:\r\n            return False\r\n\r\n        has_separator = False\r\n        for i, row in enumerate(rows):\r\n            if '|' in row:\r\n                cells = [cell.strip() for cell in row.split('|')]\r\n                cells = [cell for cell in cells if cell]  # Remove empty cells\r\n                if i == 1 and all(set(cell) <= set('-|') for cell in cells):\r\n                    has_separator = True\r\n                elif not cells:\r\n                    return False\r\n\r\n        return has_separator and len(rows) >= 3\r\n\r\n    def process_list(self, node, list_type):\r\n        blocks = []\r\n        for item in node.find_all('li'):\r\n            item_text = item.get_text(strip=True)\r\n            checked = item_text.startswith('[x]')\r\n            is_checklist = item_text.startswith('[ ]') or checked\r\n\r\n            if is_checklist:\r\n                item_text = item_text.replace('[x]', '').replace('[ ]', '').strip()\r\n                blocks.append(self.create_block('to_do', item_text, checked=checked))\r\n            else:\r\n                blocks.append(self.create_block(list_type, item_text))\r\n        return blocks\r\n\r\n    def process_table(self, node):\r\n        blocks = []\r\n        header_row = node.find('thead').find('tr') if node.find('thead') else None\r\n        body_rows = node.find('tbody').find_all('tr') if node.find('tbody') else []\r\n\r\n        if header_row or body_rows:\r\n            table_width = max(len(header_row.find_all(['th', 'td'])) if header_row else 0,\r\n                            max(len(row.find_all(['th', 'td'])) for row in body_rows))\r\n\r\n            table_block = self.create_block('table', '', table_width=table_width, has_column_header=bool(header_row))\r\n            blocks.append(table_block)\r\n\r\n            if header_row:\r\n                header_cells = [cell.get_text(strip=True) for cell in header_row.find_all(['th', 'td'])]\r\n                header_row_block = self.create_block('table_row', header_cells)\r\n                blocks.append(header_row_block)\r\n\r\n            for row in body_rows:\r\n                cells = [cell.get_text(strip=True) for cell in row.find_all(['th', 'td'])]\r\n                row_block = self.create_block('table_row', cells)\r\n                blocks.append(row_block)\r\n\r\n        return blocks\r\n    \r\n    def create_block(self, block_type: str, content: str, **kwargs) -> Dict[str, Any]:\r\n        block = {\r\n            \"object\": \"block\",\r\n            \"type\": block_type,\r\n            block_type: {},\r\n        }\r\n\r\n        if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"bulleted_list_item\", \"numbered_list_item\", \"quote\"]:\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n        elif block_type == 'to_do':\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['checked'] = kwargs.get('checked', False)\r\n        elif block_type == 'code':\r\n            block[block_type]['rich_text'] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['language'] = kwargs.get('language', 'plain text')\r\n        elif block_type == 'image':\r\n            block[block_type] = {\r\n                \"type\": \"external\",\r\n                \"external\": {\r\n                    \"url\": kwargs.get('image_url', '')\r\n                }\r\n            }\r\n        elif block_type == 'divider':\r\n            pass\r\n        elif block_type == 'bookmark':\r\n            block[block_type]['url'] = kwargs.get('link_url', '')\r\n        elif block_type == 'table':\r\n            block[block_type]['table_width'] = kwargs.get('table_width', 0)\r\n            block[block_type]['has_column_header'] = kwargs.get('has_column_header', False)\r\n            block[block_type]['has_row_header'] = kwargs.get('has_row_header', False)\r\n        elif block_type == 'table_row':\r\n            block[block_type]['cells'] = [[{'type': 'text', 'text': {'content': cell}} for cell in content]]\r\n\r\n        return block",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "markdown_text": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "markdown_text",
                  "display_name": "Markdown Text",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The markdown text to convert to Notion blocks.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "notion_secret": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "notion_secret",
                  "display_name": "Notion Secret",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The Notion integration token.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Convert markdown text to Notion blocks and append them to a Notion page.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "Record"
              ],
              "display_name": "Add Content to Page [Notion] ",
              "documentation": "https://developers.notion.com/reference/patch-block-children",
              "custom_fields": {
                "markdown_text": null,
                "block_id": null,
                "notion_secret": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-Ukv1v"
          },
          "selected": true,
          "width": 384,
          "height": 497,
          "dragging": true,
          "positionAbsolute": {
            "x": 3496.319543797485,
            "y": 3224.4566891166287
          }
        }
      ],
      "edges": [
        {
          "source": "Prompt-kS01R",
          "target": "OpenAIModel-YgBgW",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-kS01Rœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YgBgWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-Prompt-kS01R{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-kS01Rœ}-OpenAIModel-YgBgW{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YgBgWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-YgBgW",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-kS01R"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "MemoryComponent-xkcAM",
          "target": "Prompt-kS01R",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-xkcAMœ}",
          "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-MemoryComponent-xkcAM{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-xkcAMœ}-Prompt-kS01R{œfieldNameœ:œhistoryœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "history",
              "id": "Prompt-kS01R",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-xkcAM"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "TextOutput-CBJgG",
          "target": "Prompt-kS01R",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-CBJgGœ}",
          "targetHandle": "{œfieldNameœ:œtranscriptœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-TextOutput-CBJgG{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-CBJgGœ}-Prompt-kS01R{œfieldNameœ:œtranscriptœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "transcript",
              "id": "Prompt-kS01R",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextOutput",
              "id": "TextOutput-CBJgG"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-lNiMz",
          "target": "CustomComponent-kBYaC",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-lNiMzœ}",
          "targetHandle": "{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-kBYaCœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomComponent-lNiMz{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-lNiMzœ}-CustomComponent-kBYaC{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-kBYaCœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "properties",
              "id": "CustomComponent-kBYaC",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-lNiMz"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "OpenAIModel-YgBgW",
          "target": "CustomComponent-99QiK",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-99QiKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-OpenAIModel-YgBgW{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}-CustomComponent-99QiK{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-99QiKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "CustomComponent-99QiK",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-YgBgW"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "IDGenerator-WY5om",
          "target": "ChatInput-3D5tW",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatInput-3D5tWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-ChatInput-3D5tW{œfieldNameœ:œsession_idœ,œidœ:œChatInput-3D5tWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "ChatInput-3D5tW",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-WY5om"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "IDGenerator-WY5om",
          "target": "MemoryComponent-xkcAM",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-xkcAMœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-MemoryComponent-xkcAM{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-xkcAMœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "MemoryComponent-xkcAM",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-WY5om"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "OpenAIModel-YgBgW",
          "target": "CustomComponent-mCQAa",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-mCQAaœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-OpenAIModel-YgBgW{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}-CustomComponent-mCQAa{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-mCQAaœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "CustomComponent-mCQAa",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-YgBgW"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-mCQAa",
          "target": "ChatOutput-YUs36",
          "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mCQAaœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomComponent-mCQAa{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mCQAaœ}-ChatOutput-YUs36{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-YUs36",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "NoneType",
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-mCQAa"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-99QiK",
          "target": "ChatOutput-rFBCx",
          "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-99QiKœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomComponent-99QiK{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-99QiKœ}-ChatOutput-rFBCx{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-rFBCx",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "NoneType",
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-99QiK"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "RecordsToText-LRkHt",
          "target": "CustomComponent-lNiMz",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-LRkHtœ}",
          "targetHandle": "{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-lNiMzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-RecordsToText-LRkHt{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-LRkHtœ}-CustomComponent-lNiMz{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-lNiMzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "title",
              "id": "CustomComponent-lNiMz",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-LRkHt"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "OpenAIModel-YgBgW",
          "target": "TextOutput-ayBOi",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-ayBOiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-OpenAIModel-YgBgW{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YgBgWœ}-TextOutput-ayBOi{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-ayBOiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-ayBOi",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-YgBgW"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "TextOutput-9aniu",
          "target": "CustomComponent-tW2Xh",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-9aniuœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-tW2Xhœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-TextOutput-9aniu{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-9aniuœ}-CustomComponent-tW2Xh{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-tW2Xhœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "CustomComponent-tW2Xh",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextOutput",
              "id": "TextOutput-9aniu"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-tW2Xh",
          "target": "RecordsToText-nMq1R",
          "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}",
          "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-nMq1Rœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "id": "reactflow__edge-CustomComponent-tW2Xh{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}-RecordsToText-nMq1R{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-nMq1Rœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "records",
              "id": "RecordsToText-nMq1R",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "NoneType",
                "object",
                "Record"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-tW2Xh"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-tW2Xh",
          "target": "RecordsToText-LRkHt",
          "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}",
          "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-LRkHtœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "id": "reactflow__edge-CustomComponent-tW2Xh{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tW2Xhœ}-RecordsToText-LRkHt{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-LRkHtœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "records",
              "id": "RecordsToText-LRkHt",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "NoneType",
                "object",
                "Record"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-tW2Xh"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "IDGenerator-WY5om",
          "target": "ChatOutput-YUs36",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-ChatOutput-YUs36{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-YUs36œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "ChatOutput-YUs36",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-WY5om"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "IDGenerator-WY5om",
          "target": "ChatOutput-rFBCx",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-IDGenerator-WY5om{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-WY5omœ}-ChatOutput-rFBCx{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-rFBCxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "ChatOutput-rFBCx",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-WY5om"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "ChatInput-3D5tW",
          "target": "Prompt-kS01R",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-3D5tWœ}",
          "targetHandle": "{œfieldNameœ:œinputœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-ChatInput-3D5tW{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-3D5tWœ}-Prompt-kS01R{œfieldNameœ:œinputœ,œidœ:œPrompt-kS01Rœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input",
              "id": "Prompt-kS01R",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-3D5tW"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-kBYaC",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-kBYaCœ}",
          "target": "RecordsToText-eadmZ",
          "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-eadmZœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "records",
              "id": "RecordsToText-eadmZ",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-kBYaC"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-kBYaC{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-kBYaCœ}-RecordsToText-eadmZ{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-eadmZœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "source": "CustomComponent-5ceBc",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}",
          "target": "TextOutput-8UyMX",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-8UyMXœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-8UyMX",
              "inputTypes": [
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-5ceBc"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-5ceBc{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}-TextOutput-8UyMX{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-8UyMXœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-5ceBc",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}",
          "target": "TextOutput-isOm2",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-isOm2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-isOm2",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-5ceBc"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-5ceBc{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-5ceBcœ}-TextOutput-isOm2{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-isOm2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "RecordsToText-eadmZ",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-eadmZœ}",
          "target": "CustomComponent-Ukv1v",
          "targetHandle": "{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "block_id",
              "id": "CustomComponent-Ukv1v",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-eadmZ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-RecordsToText-eadmZ{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-eadmZœ}-CustomComponent-Ukv1v{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "RecordsToText-nMq1R",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-nMq1Rœ}",
          "target": "CustomComponent-Ukv1v",
          "targetHandle": "{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "markdown_text",
              "id": "CustomComponent-Ukv1v",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-nMq1R"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-RecordsToText-nMq1R{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-nMq1Rœ}-CustomComponent-Ukv1v{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-Ukv1vœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": -427.2221279313554,
        "y": -1082.887112909176,
        "zoom": 0.5000000000000013
      }
    },
    "date_created": "2024-06-08T01:02:06.994Z",
    "date_updated": "2024-06-08T01:02:07.053Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:02.550Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 144,
    "converter_version": "1.0.0"
  }
}