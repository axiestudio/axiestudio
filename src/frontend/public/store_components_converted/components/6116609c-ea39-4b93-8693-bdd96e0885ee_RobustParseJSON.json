{
  "id": "6116609c-ea39-4b93-8693-bdd96e0885ee",
  "name": "RobustParseJSON",
  "description": "Parse JSON string with error handling and convert it to Data objects (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "oldaque",
    "first_name": "Oldaque",
    "last_name": "Rios",
    "id": "1511f67c-8b49-44c8-8422-2fb2e5716312",
    "full_name": "Oldaque Rios"
  },
  "store_url": "https://www.langflow.store/store/component/6116609c-ea39-4b93-8693-bdd96e0885ee",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-10-09T06:18:04.162Z",
    "updated": "2024-10-09T06:18:04.200Z",
    "downloaded": "2025-08-19T17:50:07.578Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "RobustJSONParser",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MultilineInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\nimport json\r\nimport re\r\n\r\nclass RobustJSONParserComponent(Component):\r\n    display_name = \"Robust JSON Parser\"\r\n    description = \"Parse JSON string with error handling and convert it to Data objects\"\r\n    icon = \"🐍\"\r\n    name = \"RobustJSONParser\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"json_string\",\r\n            display_name=\"JSON String\",\r\n            info=\"The JSON string to parse.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            name=\"data_output\",\r\n            display_name=\"Data Output\",\r\n            method=\"parse_json\",\r\n        ),\r\n    ]\r\n\r\n    def clean_json_string(self, json_string: str) -> str:\r\n        json_string = re.sub(r'[\\x00-\\x1F\\x7F-\\x9F]', '', json_string)\r\n        json_string = json_string.replace(\"'\", '\"')\r\n        json_string = ' '.join(json_string.split())\r\n        return json_string\r\n\r\n    def parse_json(self) -> List[Data]:\r\n        json_string = self.json_string\r\n        if not json_string:\r\n            return [Data(text=\"No JSON string provided.\", additional_kwargs=\"input_missing\")]\r\n        \r\n        try:\r\n            cleaned_json = self.clean_json_string(json_string)\r\n            data = json.loads(cleaned_json)\r\n            formatted_json = json.dumps(data, indent=2)\r\n            return [Data(text=formatted_json, additional_kwargs=\"input_json\")]\r\n        except json.JSONDecodeError as e:\r\n            error_message = f\"Error parsing JSON: {str(e)}\\nCleaned JSON string: {cleaned_json}\"\r\n            return [Data(text=error_message, additional_kwargs=\"json_parse_error\")]\r\n        except Exception as e:\r\n            return [Data(text=f\"Unexpected error: {str(e)}\", additional_kwargs=\"unexpected_error\")]\r\n\r\n    def execute_function_data(self) -> List[Data]:\r\n        return self.parse_json()\r\n\r\n    def execute_function_message(self) -> Message:\r\n        data_list = self.parse_json()\r\n        results_str = \"\\n\".join([f\"Content: {data.text}\\nMetadata: {data.additional_kwargs}\" for data in data_list])\r\n        return Message(text=results_str)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "json_string": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_string",
                "value": "",
                "display_name": "JSON String",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The JSON string to parse.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Parse JSON string with error handling and convert it to Data objects",
            "icon": "🐍",
            "base_classes": [
              "Data"
            ],
            "display_name": "RobustParseJSON",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_output",
                "display_name": "Data Output",
                "method": "parse_json",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "json_string"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18",
            "official": false
          },
          "id": "PythonFunction-jJYHf"
        },
        "id": "PythonFunction-jJYHf",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "PythonFunction": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "6116609c-ea39-4b93-8693-bdd96e0885ee",
    "name": "RobustParseJSON",
    "description": "Parse JSON string with error handling and convert it to Data objects",
    "is_component": true,
    "liked_by_count": "5",
    "downloads_count": "120",
    "metadata": {
      "PythonFunction": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "RobustJSONParser",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MultilineInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\nimport json\r\nimport re\r\n\r\nclass RobustJSONParserComponent(Component):\r\n    display_name = \"Robust JSON Parser\"\r\n    description = \"Parse JSON string with error handling and convert it to Data objects\"\r\n    icon = \"🐍\"\r\n    name = \"RobustJSONParser\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"json_string\",\r\n            display_name=\"JSON String\",\r\n            info=\"The JSON string to parse.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            name=\"data_output\",\r\n            display_name=\"Data Output\",\r\n            method=\"parse_json\",\r\n        ),\r\n    ]\r\n\r\n    def clean_json_string(self, json_string: str) -> str:\r\n        json_string = re.sub(r'[\\x00-\\x1F\\x7F-\\x9F]', '', json_string)\r\n        json_string = json_string.replace(\"'\", '\"')\r\n        json_string = ' '.join(json_string.split())\r\n        return json_string\r\n\r\n    def parse_json(self) -> List[Data]:\r\n        json_string = self.json_string\r\n        if not json_string:\r\n            return [Data(text=\"No JSON string provided.\", additional_kwargs=\"input_missing\")]\r\n        \r\n        try:\r\n            cleaned_json = self.clean_json_string(json_string)\r\n            data = json.loads(cleaned_json)\r\n            formatted_json = json.dumps(data, indent=2)\r\n            return [Data(text=formatted_json, additional_kwargs=\"input_json\")]\r\n        except json.JSONDecodeError as e:\r\n            error_message = f\"Error parsing JSON: {str(e)}\\nCleaned JSON string: {cleaned_json}\"\r\n            return [Data(text=error_message, additional_kwargs=\"json_parse_error\")]\r\n        except Exception as e:\r\n            return [Data(text=f\"Unexpected error: {str(e)}\", additional_kwargs=\"unexpected_error\")]\r\n\r\n    def execute_function_data(self) -> List[Data]:\r\n        return self.parse_json()\r\n\r\n    def execute_function_message(self) -> Message:\r\n        data_list = self.parse_json()\r\n        results_str = \"\\n\".join([f\"Content: {data.text}\\nMetadata: {data.additional_kwargs}\" for data in data_list])\r\n        return Message(text=results_str)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "json_string": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "json_string",
                  "value": "",
                  "display_name": "JSON String",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The JSON string to parse.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Parse JSON string with error handling and convert it to Data objects",
              "icon": "🐍",
              "base_classes": [
                "Data"
              ],
              "display_name": "RobustParseJSON",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data_output",
                  "display_name": "Data Output",
                  "method": "parse_json",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "json_string"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18",
              "official": false
            },
            "id": "PythonFunction-jJYHf"
          },
          "id": "PythonFunction-jJYHf",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-10-09T06:18:04.162Z",
    "date_updated": "2024-10-09T06:18:04.200Z",
    "status": "Public",
    "sort": null,
    "user_updated": "1511f67c-8b49-44c8-8422-2fb2e5716312",
    "user_created": {
      "username": "oldaque",
      "first_name": "Oldaque",
      "last_name": "Rios",
      "id": "1511f67c-8b49-44c8-8422-2fb2e5716312"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:10.333Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}