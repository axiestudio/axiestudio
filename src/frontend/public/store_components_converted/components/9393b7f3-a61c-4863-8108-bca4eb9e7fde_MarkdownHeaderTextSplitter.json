{
  "id": "9393b7f3-a61c-4863-8108-bca4eb9e7fde",
  "name": "MarkdownHeaderTextSplitter",
  "description": "Splits markdown text into chunks based on specified headers. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "Victor",
    "first_name": "VICTOR",
    "last_name": "GOMES",
    "id": "3e203c77-c087-4ccf-a0c6-07c619d760f1",
    "full_name": "VICTOR GOMES"
  },
  "store_url": "https://www.langflow.store/store/component/9393b7f3-a61c-4863-8108-bca4eb9e7fde",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-07T02:20:22.881Z",
    "updated": "2024-08-07T02:20:22.940Z",
    "downloaded": "2025-08-19T17:50:06.490Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "MarkdownHeaderTextSplitter",
          "node": {
            "template": {
              "_type": "Component",
              "markdown_files": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "markdown_files",
                "display_name": "Markdown Files",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Upload Markdown files or provide files from a directory to be split based on headers.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput, BoolInput, HandleInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nfrom langchain_text_splitters import MarkdownHeaderTextSplitter\r\nfrom typing import List, Tuple\r\n\r\nclass MarkdownHeaderTextSplitterComponent(Component):\r\n    display_name: str = \"Markdown Header Text Splitter\"\r\n    description: str = \"Splits markdown text into chunks based on specified headers.\"\r\n    icon = \"scissors-line-dashed\"\r\n    name = \"MarkdownHeaderTextSplitter\"\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"markdown_files\",\r\n            display_name=\"Markdown Files\",\r\n            info=\"Upload Markdown files or provide files from a directory to be split based on headers.\",\r\n            input_types=[\"Data\"],\r\n            is_list=True,  # Allow handling multiple files\r\n        ),\r\n        MessageTextInput(\r\n            name=\"headers\",\r\n            display_name=\"Headers to Split On\",\r\n            info=\"Comma-separated list of headers to split on, e.g., '#,##,###'.\"\r\n        ),\r\n        BoolInput(\r\n            name=\"strip_headers\",\r\n            display_name=\"Strip Headers\",\r\n            info=\"Whether to strip headers from the output content.\",\r\n            value=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\r\n    ]\r\n\r\n    def parse_headers(self, headers_input: str) -> List[Tuple[str, str]]:\r\n        \"\"\"Parse headers input from comma-separated string to list of tuples.\"\"\"\r\n        headers = headers_input.split(',')\r\n        return [(header.strip(), f\"Header {i+1}\") for i, header in enumerate(headers)]\r\n\r\n    def split_text(self) -> List[Data]:\r\n        \"\"\"Split markdown text into chunks based on headers.\"\"\"\r\n        # Initialize a list to store all document chunks\r\n        data_chunks = []\r\n        \r\n        # Process each markdown file\r\n        for file_input in self.markdown_files:\r\n            if isinstance(file_input, Data):\r\n                markdown_content = file_input.text\r\n                headers = self.parse_headers(self.headers)\r\n                markdown_splitter = MarkdownHeaderTextSplitter(\r\n                    headers_to_split_on=headers, strip_headers=self.strip_headers\r\n                )\r\n\r\n                # Split the content and collect chunks\r\n                documents = markdown_splitter.split_text(markdown_content)\r\n                for doc in documents:\r\n                    data_chunks.append(Data(text=doc.page_content, data=doc.metadata))\r\n\r\n        self.status = data_chunks\r\n        return data_chunks\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "headers",
                "display_name": "Headers to Split On",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Comma-separated list of headers to split on, e.g., '#,##,###'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "strip_headers": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "strip_headers",
                "display_name": "Strip Headers",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to strip headers from the output content.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Splits markdown text into chunks based on specified headers.",
            "icon": "scissors-line-dashed",
            "base_classes": [
              "Data"
            ],
            "display_name": "MarkdownHeaderTextSplitter",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "chunks",
                "display_name": "Chunks",
                "method": "split_text",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "markdown_files",
              "headers",
              "strip_headers"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "MarkdownHeaderTextSplitter-PkYex"
        },
        "id": "MarkdownHeaderTextSplitter-PkYex",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "MarkdownHeaderTextSplitter": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "9393b7f3-a61c-4863-8108-bca4eb9e7fde",
    "name": "MarkdownHeaderTextSplitter",
    "description": "Splits markdown text into chunks based on specified headers.",
    "is_component": true,
    "liked_by_count": "7",
    "downloads_count": "85",
    "metadata": {
      "MarkdownHeaderTextSplitter": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.14",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "MarkdownHeaderTextSplitter",
            "node": {
              "template": {
                "_type": "Component",
                "markdown_files": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "markdown_files",
                  "display_name": "Markdown Files",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Upload Markdown files or provide files from a directory to be split based on headers.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput, BoolInput, HandleInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\nfrom langchain_text_splitters import MarkdownHeaderTextSplitter\r\nfrom typing import List, Tuple\r\n\r\nclass MarkdownHeaderTextSplitterComponent(Component):\r\n    display_name: str = \"Markdown Header Text Splitter\"\r\n    description: str = \"Splits markdown text into chunks based on specified headers.\"\r\n    icon = \"scissors-line-dashed\"\r\n    name = \"MarkdownHeaderTextSplitter\"\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"markdown_files\",\r\n            display_name=\"Markdown Files\",\r\n            info=\"Upload Markdown files or provide files from a directory to be split based on headers.\",\r\n            input_types=[\"Data\"],\r\n            is_list=True,  # Allow handling multiple files\r\n        ),\r\n        MessageTextInput(\r\n            name=\"headers\",\r\n            display_name=\"Headers to Split On\",\r\n            info=\"Comma-separated list of headers to split on, e.g., '#,##,###'.\"\r\n        ),\r\n        BoolInput(\r\n            name=\"strip_headers\",\r\n            display_name=\"Strip Headers\",\r\n            info=\"Whether to strip headers from the output content.\",\r\n            value=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\r\n    ]\r\n\r\n    def parse_headers(self, headers_input: str) -> List[Tuple[str, str]]:\r\n        \"\"\"Parse headers input from comma-separated string to list of tuples.\"\"\"\r\n        headers = headers_input.split(',')\r\n        return [(header.strip(), f\"Header {i+1}\") for i, header in enumerate(headers)]\r\n\r\n    def split_text(self) -> List[Data]:\r\n        \"\"\"Split markdown text into chunks based on headers.\"\"\"\r\n        # Initialize a list to store all document chunks\r\n        data_chunks = []\r\n        \r\n        # Process each markdown file\r\n        for file_input in self.markdown_files:\r\n            if isinstance(file_input, Data):\r\n                markdown_content = file_input.text\r\n                headers = self.parse_headers(self.headers)\r\n                markdown_splitter = MarkdownHeaderTextSplitter(\r\n                    headers_to_split_on=headers, strip_headers=self.strip_headers\r\n                )\r\n\r\n                # Split the content and collect chunks\r\n                documents = markdown_splitter.split_text(markdown_content)\r\n                for doc in documents:\r\n                    data_chunks.append(Data(text=doc.page_content, data=doc.metadata))\r\n\r\n        self.status = data_chunks\r\n        return data_chunks\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "headers": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "headers",
                  "display_name": "Headers to Split On",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Comma-separated list of headers to split on, e.g., '#,##,###'.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "strip_headers": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "strip_headers",
                  "display_name": "Strip Headers",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Whether to strip headers from the output content.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Splits markdown text into chunks based on specified headers.",
              "icon": "scissors-line-dashed",
              "base_classes": [
                "Data"
              ],
              "display_name": "MarkdownHeaderTextSplitter",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "chunks",
                  "display_name": "Chunks",
                  "method": "split_text",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "markdown_files",
                "headers",
                "strip_headers"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "MarkdownHeaderTextSplitter-PkYex"
          },
          "id": "MarkdownHeaderTextSplitter-PkYex",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-07T02:20:22.881Z",
    "date_updated": "2024-08-07T02:20:22.940Z",
    "status": "Public",
    "sort": null,
    "user_updated": "3e203c77-c087-4ccf-a0c6-07c619d760f1",
    "user_created": {
      "username": "Victor",
      "first_name": "VICTOR",
      "last_name": "GOMES",
      "id": "3e203c77-c087-4ccf-a0c6-07c619d760f1"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.068Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}