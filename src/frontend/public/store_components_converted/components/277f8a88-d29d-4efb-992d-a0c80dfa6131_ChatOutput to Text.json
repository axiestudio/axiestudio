{
  "id": "277f8a88-d29d-4efb-992d-a0c80dfa6131",
  "name": "ChatOutput to Text",
  "description": "",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "arthurkaromm",
    "first_name": "Arthur",
    "last_name": "Quet",
    "id": "8741fbb0-5283-442f-beb7-895feea9ec4a",
    "full_name": "Arthur Quet"
  },
  "store_url": "https://www.langflow.store/store/component/277f8a88-d29d-4efb-992d-a0c80dfa6131",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-11-24T13:02:52.938Z",
    "updated": "2024-11-24T13:02:53.033Z",
    "downloaded": "2025-08-19T17:50:07.383Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Chain",
        "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
      }
    },
    {
      "tags_id": {
        "name": "Memory",
        "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.1.0",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "id": "groupComponent-Yw09L",
          "type": "GroupNode",
          "node": {
            "display_name": "ChatOutput to Text",
            "documentation": "",
            "description": "",
            "template": {
              "code_CombineText-AwMYa": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"ChatOutput\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return Message(text=combined)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "CombineText-AwMYa",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "delimiter_CombineText-AwMYa": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "delimiter",
                "value": " ",
                "display_name": "Delimiter",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A string used to separate the two text inputs. Defaults to a whitespace.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "CombineText-AwMYa",
                  "field": "delimiter"
                }
              },
              "text2_CombineText-AwMYa": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text2",
                "value": "",
                "display_name": "ChatOutput",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The second text input to concatenate.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "CombineText-AwMYa",
                  "field": "text2"
                }
              },
              "memory_Memory-sjayC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "BaseChatMessageHistory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput",
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "memory"
                }
              },
              "code_Memory-sjayC": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.memory import ConversationBufferMemory\n\nfrom axiestudio.custom import Component\nfrom axiestudio.field_typing import BaseChatMemory\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.inputs import HandleInput\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import LCBuiltinChatMemory, get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n\n        Output(display_name=\"Text\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        chat_memory = self.memory or LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "n_messages_Memory-sjayC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 1,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false,
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "n_messages"
                }
              },
              "order_Memory-sjayC": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Descending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false,
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "order"
                }
              },
              "sender_Memory-sjayC": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false,
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "sender"
                }
              },
              "sender_name_Memory-sjayC": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "sender_name"
                }
              },
              "session_id_Memory-sjayC": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "session_id"
                }
              },
              "template_Memory-sjayC": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput",
                "proxy": {
                  "id": "Memory-sjayC",
                  "field": "template"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "CombineText-AwMYa",
                    "type": "genericNode",
                    "position": {
                      "x": 4377.388778536222,
                      "y": 905.7479928107168
                    },
                    "data": {
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"ChatOutput\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return Message(text=combined)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "delimiter": {
                            "tool_mode": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "delimiter",
                            "value": " ",
                            "display_name": "Delimiter",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "A string used to separate the two text inputs. Defaults to a whitespace.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "text1": {
                            "tool_mode": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "text1",
                            "value": "",
                            "display_name": "First Text",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The first text input to concatenate.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "text2": {
                            "tool_mode": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "text2",
                            "value": "",
                            "display_name": "ChatOutput",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The second text input to concatenate.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          }
                        },
                        "description": "Concatenate two text sources into a single text chunk using a specified delimiter.",
                        "icon": "merge",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "Combine Text",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "combined_text",
                            "display_name": "Text",
                            "method": "combine_texts",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "text1",
                          "text2",
                          "delimiter"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": true,
                        "metadata": {},
                        "tool_mode": false,
                        "lf_version": "1.1.0"
                      },
                      "type": "CombineText",
                      "id": "CombineText-AwMYa"
                    },
                    "selected": true,
                    "width": 320,
                    "height": 338,
                    "positionAbsolute": {
                      "x": 4377.388778536222,
                      "y": 905.7479928107168
                    },
                    "dragging": false
                  },
                  {
                    "id": "Memory-sjayC",
                    "type": "genericNode",
                    "position": {
                      "x": 4374.191917991613,
                      "y": 679.2052658865675
                    },
                    "data": {
                      "node": {
                        "template": {
                          "_type": "Component",
                          "memory": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "memory",
                            "value": "",
                            "display_name": "External Memory",
                            "advanced": false,
                            "input_types": [
                              "BaseChatMessageHistory"
                            ],
                            "dynamic": false,
                            "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "HandleInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from langchain.memory import ConversationBufferMemory\n\nfrom axiestudio.custom import Component\nfrom axiestudio.field_typing import BaseChatMemory\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.inputs import HandleInput\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import LCBuiltinChatMemory, get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n\n        Output(display_name=\"Text\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        chat_memory = self.memory or LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "n_messages": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "n_messages",
                            "value": 1,
                            "display_name": "Number of Messages",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of messages to retrieve.",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput",
                            "load_from_db": false
                          },
                          "order": {
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "options": [
                              "Ascending",
                              "Descending"
                            ],
                            "combobox": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "order",
                            "value": "Descending",
                            "display_name": "Order",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Order of the messages.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "DropdownInput",
                            "load_from_db": false
                          },
                          "sender": {
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "options": [
                              "Machine",
                              "User",
                              "Machine and User"
                            ],
                            "combobox": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "sender",
                            "value": "Machine",
                            "display_name": "Sender Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Filter by sender type.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "DropdownInput",
                            "load_from_db": false
                          },
                          "sender_name": {
                            "tool_mode": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "sender_name",
                            "value": "",
                            "display_name": "Sender Name",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "Filter by sender name.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "session_id": {
                            "tool_mode": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "session_id",
                            "value": "",
                            "display_name": "Session ID",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "template": {
                            "tool_mode": false,
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "{text}",
                            "display_name": "Template",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          }
                        },
                        "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                        "icon": "message-square-more",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "Message History",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "messages_text",
                            "display_name": "Text",
                            "method": "retrieve_messages_as_text",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "memory",
                          "sender",
                          "sender_name",
                          "n_messages",
                          "session_id",
                          "order",
                          "template"
                        ],
                        "beta": false,
                        "legacy": false,
                        "edited": true,
                        "metadata": {},
                        "tool_mode": false,
                        "lf_version": "1.1.0"
                      },
                      "type": "Memory",
                      "id": "Memory-sjayC"
                    },
                    "selected": true,
                    "width": 320,
                    "height": 214,
                    "positionAbsolute": {
                      "x": 4374.191917991613,
                      "y": 679.2052658865675
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "Memory-sjayC",
                    "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-sjayCœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "CombineText-AwMYa",
                    "targetHandle": "{œfieldNameœ:œtext1œ,œidœ:œCombineText-AwMYaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "text1",
                        "id": "CombineText-AwMYa",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-sjayC",
                        "name": "messages_text",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Memory-sjayC{œdataTypeœ:œMemoryœ,œidœ:œMemory-sjayCœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-AwMYa{œfieldNameœ:œtext1œ,œidœ:œCombineText-AwMYaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "animated": false,
                    "className": "",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Elated Mayer",
              "description": "",
              "id": "XRCDM"
            },
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "CombineText-AwMYa_combined_text",
                "display_name": "Text",
                "method": "combine_texts",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "CombineText-AwMYa",
                  "name": "combined_text",
                  "nodeDisplayName": "Combine Text"
                }
              }
            ],
            "lf_version": "1.1.0",
            "official": false
          }
        },
        "id": "groupComponent-Yw09L",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "groupComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "277f8a88-d29d-4efb-992d-a0c80dfa6131",
    "name": "ChatOutput to Text",
    "description": "",
    "is_component": true,
    "liked_by_count": "5",
    "downloads_count": "39",
    "metadata": {
      "groupComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.1.0",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "id": "groupComponent-Yw09L",
            "type": "GroupNode",
            "node": {
              "display_name": "ChatOutput to Text",
              "documentation": "",
              "description": "",
              "template": {
                "code_CombineText-AwMYa": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"ChatOutput\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return Message(text=combined)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "CombineText-AwMYa",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "delimiter_CombineText-AwMYa": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "delimiter",
                  "value": " ",
                  "display_name": "Delimiter",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "A string used to separate the two text inputs. Defaults to a whitespace.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "CombineText-AwMYa",
                    "field": "delimiter"
                  }
                },
                "text2_CombineText-AwMYa": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text2",
                  "value": "",
                  "display_name": "ChatOutput",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The second text input to concatenate.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "CombineText-AwMYa",
                    "field": "text2"
                  }
                },
                "memory_Memory-sjayC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "memory",
                  "value": "",
                  "display_name": "External Memory",
                  "advanced": false,
                  "input_types": [
                    "BaseChatMessageHistory"
                  ],
                  "dynamic": false,
                  "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput",
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "memory"
                  }
                },
                "code_Memory-sjayC": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain.memory import ConversationBufferMemory\n\nfrom axiestudio.custom import Component\nfrom axiestudio.field_typing import BaseChatMemory\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.inputs import HandleInput\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import LCBuiltinChatMemory, get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n\n        Output(display_name=\"Text\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        chat_memory = self.memory or LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "n_messages_Memory-sjayC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "n_messages",
                  "value": 1,
                  "display_name": "Number of Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "load_from_db": false,
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "n_messages"
                  }
                },
                "order_Memory-sjayC": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "order",
                  "value": "Descending",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "load_from_db": false,
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "order"
                  }
                },
                "sender_Memory-sjayC": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Filter by sender type.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "load_from_db": false,
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "sender"
                  }
                },
                "sender_name_Memory-sjayC": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Filter by sender name.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "sender_name"
                  }
                },
                "session_id_Memory-sjayC": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "session_id"
                  }
                },
                "template_Memory-sjayC": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{text}",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput",
                  "proxy": {
                    "id": "Memory-sjayC",
                    "field": "template"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "CombineText-AwMYa",
                      "type": "genericNode",
                      "position": {
                        "x": 4377.388778536222,
                        "y": 905.7479928107168
                      },
                      "data": {
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass CombineTextComponent(Component):\n    display_name = \"Combine Text\"\n    description = \"Concatenate two text sources into a single text chunk using a specified delimiter.\"\n    icon = \"merge\"\n    name = \"CombineText\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"text1\",\n            display_name=\"First Text\",\n            info=\"The first text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"text2\",\n            display_name=\"ChatOutput\",\n            info=\"The second text input to concatenate.\",\n        ),\n        MessageTextInput(\n            name=\"delimiter\",\n            display_name=\"Delimiter\",\n            info=\"A string used to separate the two text inputs. Defaults to a whitespace.\",\n            value=\" \",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"combined_text\", method=\"combine_texts\"),\n    ]\n\n    def combine_texts(self) -> Message:\n        combined = self.delimiter.join([self.text1, self.text2])\n        self.status = combined\n        return Message(text=combined)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "delimiter": {
                              "tool_mode": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "delimiter",
                              "value": " ",
                              "display_name": "Delimiter",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "A string used to separate the two text inputs. Defaults to a whitespace.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "text1": {
                              "tool_mode": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "text1",
                              "value": "",
                              "display_name": "First Text",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The first text input to concatenate.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "text2": {
                              "tool_mode": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "text2",
                              "value": "",
                              "display_name": "ChatOutput",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The second text input to concatenate.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            }
                          },
                          "description": "Concatenate two text sources into a single text chunk using a specified delimiter.",
                          "icon": "merge",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "Combine Text",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "combined_text",
                              "display_name": "Text",
                              "method": "combine_texts",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "text1",
                            "text2",
                            "delimiter"
                          ],
                          "beta": false,
                          "legacy": false,
                          "edited": true,
                          "metadata": {},
                          "tool_mode": false,
                          "lf_version": "1.1.0"
                        },
                        "type": "CombineText",
                        "id": "CombineText-AwMYa"
                      },
                      "selected": true,
                      "width": 320,
                      "height": 338,
                      "positionAbsolute": {
                        "x": 4377.388778536222,
                        "y": 905.7479928107168
                      },
                      "dragging": false
                    },
                    {
                      "id": "Memory-sjayC",
                      "type": "genericNode",
                      "position": {
                        "x": 4374.191917991613,
                        "y": 679.2052658865675
                      },
                      "data": {
                        "node": {
                          "template": {
                            "_type": "Component",
                            "memory": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "memory",
                              "value": "",
                              "display_name": "External Memory",
                              "advanced": false,
                              "input_types": [
                                "BaseChatMessageHistory"
                              ],
                              "dynamic": false,
                              "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "HandleInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from langchain.memory import ConversationBufferMemory\n\nfrom axiestudio.custom import Component\nfrom axiestudio.field_typing import BaseChatMemory\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.inputs import HandleInput\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import LCBuiltinChatMemory, get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n\n        Output(display_name=\"Text\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        chat_memory = self.memory or LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "n_messages": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "n_messages",
                              "value": 1,
                              "display_name": "Number of Messages",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of messages to retrieve.",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput",
                              "load_from_db": false
                            },
                            "order": {
                              "tool_mode": false,
                              "trace_as_metadata": true,
                              "options": [
                                "Ascending",
                                "Descending"
                              ],
                              "combobox": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "order",
                              "value": "Descending",
                              "display_name": "Order",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Order of the messages.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "DropdownInput",
                              "load_from_db": false
                            },
                            "sender": {
                              "tool_mode": false,
                              "trace_as_metadata": true,
                              "options": [
                                "Machine",
                                "User",
                                "Machine and User"
                              ],
                              "combobox": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "sender",
                              "value": "Machine",
                              "display_name": "Sender Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Filter by sender type.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "DropdownInput",
                              "load_from_db": false
                            },
                            "sender_name": {
                              "tool_mode": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "sender_name",
                              "value": "",
                              "display_name": "Sender Name",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "Filter by sender name.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "session_id": {
                              "tool_mode": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "session_id",
                              "value": "",
                              "display_name": "Session ID",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "template": {
                              "tool_mode": false,
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "{text}",
                              "display_name": "Template",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            }
                          },
                          "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                          "icon": "message-square-more",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "Message History",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "messages_text",
                              "display_name": "Text",
                              "method": "retrieve_messages_as_text",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "memory",
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order",
                            "template"
                          ],
                          "beta": false,
                          "legacy": false,
                          "edited": true,
                          "metadata": {},
                          "tool_mode": false,
                          "lf_version": "1.1.0"
                        },
                        "type": "Memory",
                        "id": "Memory-sjayC"
                      },
                      "selected": true,
                      "width": 320,
                      "height": 214,
                      "positionAbsolute": {
                        "x": 4374.191917991613,
                        "y": 679.2052658865675
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "Memory-sjayC",
                      "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-sjayCœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "CombineText-AwMYa",
                      "targetHandle": "{œfieldNameœ:œtext1œ,œidœ:œCombineText-AwMYaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "text1",
                          "id": "CombineText-AwMYa",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "Memory",
                          "id": "Memory-sjayC",
                          "name": "messages_text",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Memory-sjayC{œdataTypeœ:œMemoryœ,œidœ:œMemory-sjayCœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-CombineText-AwMYa{œfieldNameœ:œtext1œ,œidœ:œCombineText-AwMYaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "animated": false,
                      "className": "",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Elated Mayer",
                "description": "",
                "id": "XRCDM"
              },
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "CombineText-AwMYa_combined_text",
                  "display_name": "Text",
                  "method": "combine_texts",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "CombineText-AwMYa",
                    "name": "combined_text",
                    "nodeDisplayName": "Combine Text"
                  }
                }
              ],
              "lf_version": "1.1.0",
              "official": false
            }
          },
          "id": "groupComponent-Yw09L",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-11-24T13:02:52.938Z",
    "date_updated": "2024-11-24T13:02:53.033Z",
    "status": "Public",
    "sort": null,
    "user_updated": "8741fbb0-5283-442f-beb7-895feea9ec4a",
    "user_created": {
      "username": "arthurkaromm",
      "first_name": "Arthur",
      "last_name": "Quet",
      "id": "8741fbb0-5283-442f-beb7-895feea9ec4a"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Chain",
          "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
        }
      },
      {
        "tags_id": {
          "name": "Memory",
          "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:09.319Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 48,
    "converter_version": "1.0.0"
  }
}