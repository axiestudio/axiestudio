{
  "id": "ec5f0d15-6015-4532-9e83-6365688e8ae9",
  "name": "WB - GitHub Comments",
  "description": "Fetches discussions and their comments from a GitHub repository. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "wagner",
    "first_name": "Wagner",
    "last_name": "Bittencourt",
    "id": "00808143-7274-457d-a5b8-75c89231a3dd",
    "full_name": "Wagner Bittencourt"
  },
  "store_url": "https://www.langflow.store/store/component/ec5f0d15-6015-4532-9e83-6365688e8ae9",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-18T22:59:51.739Z",
    "updated": "2024-08-19T00:50:40.189Z",
    "downloaded": "2025-08-19T17:50:06.826Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": true,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "GitHubDiscussionsComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass GitHubDiscussionsComponent(Component):\r\n    display_name = \"GitHub Discussions\"\r\n    description = \"Fetches discussions and their comments from a GitHub repository.\"\r\n    icon = \"github\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"repo_owner\",\r\n            display_name=\"Repository Owner\",\r\n            info=\"Owner of the GitHub repository.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"repo_name\",\r\n            display_name=\"Repository Name\",\r\n            info=\"Name of the GitHub repository.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Discussions\", name=\"discussions\", method=\"fetch_discussions\"),\r\n    ]\r\n\r\n    def fetch_discussions(self) -> Data:\r\n        try:\r\n            repo_owner = self.repo_owner\r\n            repo_name = self.repo_name\r\n            url = f\"https://api.github.com/repos/{repo_owner}/{repo_name}/discussions\"\r\n\r\n            response = requests.get(url)\r\n            response.raise_for_status()\r\n\r\n            discussions = response.json()\r\n            discussion_details = []\r\n\r\n            for discussion in discussions:\r\n                discussion_info = {\r\n                    \"id\": discussion.get(\"id\"),\r\n                    \"title\": discussion.get(\"title\"),\r\n                    \"state\": discussion.get(\"state\"),\r\n                    \"created_at\": discussion.get(\"created_at\"),\r\n                    \"url\": discussion.get(\"html_url\"),\r\n                    \"comments\": self.fetch_comments(discussion.get(\"comments_url\"))\r\n                }\r\n                discussion_details.append(discussion_info)\r\n\r\n            return Data(data={\"discussions\": discussion_details})\r\n\r\n        except Exception as e:\r\n            return Data(data={\"error\": str(e)})\r\n\r\n    def fetch_comments(self, comments_url: str):\r\n        try:\r\n            response = requests.get(comments_url)\r\n            response.raise_for_status()\r\n\r\n            comments = response.json()\r\n            comment_details = []\r\n            for comment in comments:\r\n                comment_info = {\r\n                    \"user\": comment.get(\"user\", {}).get(\"login\"),\r\n                    \"created_at\": comment.get(\"created_at\"),\r\n                    \"body\": comment.get(\"body\"),\r\n                    \"url\": comment.get(\"html_url\"),\r\n                }\r\n                comment_details.append(comment_info)\r\n\r\n            return comment_details\r\n\r\n        except Exception as e:\r\n            return [{\"error\": str(e)}]\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "repo_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "repo_name",
                "value": "axiestudio",
                "display_name": "Repository Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the GitHub repository.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "repo_owner": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "repo_owner",
                "value": "axiestudio-ai",
                "display_name": "Repository Owner",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Owner of the GitHub repository.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Fetches discussions and their comments from a GitHub repository.",
            "icon": "github",
            "base_classes": [
              "Data"
            ],
            "display_name": "WB - GitHub Comments",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "discussions",
                "display_name": "Discussions",
                "method": "fetch_discussions",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "repo_owner",
              "repo_name"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.15",
            "official": false
          },
          "id": "GitHubDiscussionsComponent-2CmAF"
        },
        "id": "GitHubDiscussionsComponent-2CmAF",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "GitHubDiscussionsComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "ec5f0d15-6015-4532-9e83-6365688e8ae9",
    "name": "WB - GitHub Comments",
    "description": "Fetches discussions and their comments from a GitHub repository.",
    "is_component": true,
    "liked_by_count": "0",
    "downloads_count": "2",
    "metadata": {
      "GitHubDiscussionsComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": true,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "GitHubDiscussionsComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass GitHubDiscussionsComponent(Component):\r\n    display_name = \"GitHub Discussions\"\r\n    description = \"Fetches discussions and their comments from a GitHub repository.\"\r\n    icon = \"github\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"repo_owner\",\r\n            display_name=\"Repository Owner\",\r\n            info=\"Owner of the GitHub repository.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"repo_name\",\r\n            display_name=\"Repository Name\",\r\n            info=\"Name of the GitHub repository.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Discussions\", name=\"discussions\", method=\"fetch_discussions\"),\r\n    ]\r\n\r\n    def fetch_discussions(self) -> Data:\r\n        try:\r\n            repo_owner = self.repo_owner\r\n            repo_name = self.repo_name\r\n            url = f\"https://api.github.com/repos/{repo_owner}/{repo_name}/discussions\"\r\n\r\n            response = requests.get(url)\r\n            response.raise_for_status()\r\n\r\n            discussions = response.json()\r\n            discussion_details = []\r\n\r\n            for discussion in discussions:\r\n                discussion_info = {\r\n                    \"id\": discussion.get(\"id\"),\r\n                    \"title\": discussion.get(\"title\"),\r\n                    \"state\": discussion.get(\"state\"),\r\n                    \"created_at\": discussion.get(\"created_at\"),\r\n                    \"url\": discussion.get(\"html_url\"),\r\n                    \"comments\": self.fetch_comments(discussion.get(\"comments_url\"))\r\n                }\r\n                discussion_details.append(discussion_info)\r\n\r\n            return Data(data={\"discussions\": discussion_details})\r\n\r\n        except Exception as e:\r\n            return Data(data={\"error\": str(e)})\r\n\r\n    def fetch_comments(self, comments_url: str):\r\n        try:\r\n            response = requests.get(comments_url)\r\n            response.raise_for_status()\r\n\r\n            comments = response.json()\r\n            comment_details = []\r\n            for comment in comments:\r\n                comment_info = {\r\n                    \"user\": comment.get(\"user\", {}).get(\"login\"),\r\n                    \"created_at\": comment.get(\"created_at\"),\r\n                    \"body\": comment.get(\"body\"),\r\n                    \"url\": comment.get(\"html_url\"),\r\n                }\r\n                comment_details.append(comment_info)\r\n\r\n            return comment_details\r\n\r\n        except Exception as e:\r\n            return [{\"error\": str(e)}]\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "repo_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "repo_name",
                  "value": "axiestudio",
                  "display_name": "Repository Name",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the GitHub repository.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "repo_owner": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "repo_owner",
                  "value": "axiestudio-ai",
                  "display_name": "Repository Owner",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Owner of the GitHub repository.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Fetches discussions and their comments from a GitHub repository.",
              "icon": "github",
              "base_classes": [
                "Data"
              ],
              "display_name": "WB - GitHub Comments",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "discussions",
                  "display_name": "Discussions",
                  "method": "fetch_discussions",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "repo_owner",
                "repo_name"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.15",
              "official": false
            },
            "id": "GitHubDiscussionsComponent-2CmAF"
          },
          "id": "GitHubDiscussionsComponent-2CmAF",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-18T22:59:51.739Z",
    "date_updated": "2024-08-19T00:50:40.189Z",
    "status": "Public",
    "sort": null,
    "user_updated": "00808143-7274-457d-a5b8-75c89231a3dd",
    "user_created": {
      "username": "wagner",
      "first_name": "Wagner",
      "last_name": "Bittencourt",
      "id": "00808143-7274-457d-a5b8-75c89231a3dd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:12.443Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 12,
    "converter_version": "1.0.0"
  }
}