{
  "id": "fe6921e3-7139-46fe-89bc-85a265d8c725",
  "name": "Data Filter",
  "description": "Filter a list of data items based on a specified key, filter value, and comparison operator. Check advanced options to select match comparision. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/fe6921e3-7139-46fe-89bc-85a265d8c725",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-11T11:41:15.784Z",
    "updated": "2024-09-05T03:05:08.906Z",
    "downloaded": "2025-08-19T17:50:06.353Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "DataFilterComponent",
          "node": {
            "template": {
              "_type": "Component",
              "input_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_data",
                "value": "",
                "display_name": "Input Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The list of data items to filter.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import DataInput, MessageInput, DropdownInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom typing import List, Dict, Any\r\n\r\nclass DataFilterComponent(Component):\r\n    display_name = \"Data Filter\"\r\n    description = \"Filter a list of data items based on a specified key, filter value, and comparison operator. Check advanced options to select match comparision.\"\r\n    icon = \"text-search\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"input_data\",\r\n            display_name=\"Input Data\",\r\n            info=\"The list of data items to filter.\",\r\n            is_list=True\r\n        ),\r\n        MessageInput(\r\n            name=\"filter_key\",\r\n            display_name=\"Filter Key\",\r\n            info=\"The key to filter on (e.g., 'route').\",\r\n            value=\"route\"\r\n        ),\r\n        MessageInput(\r\n            name=\"filter_value\",\r\n            display_name=\"Filter Value\",\r\n            info=\"The value to filter by (e.g., 'CMIP').\",\r\n            value=\"CMIP\"\r\n        ),\r\n        DropdownInput(\r\n            name=\"operator\",\r\n            display_name=\"Comparison Operator\",\r\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\"],\r\n            info=\"The operator to apply for comparing the values.\",\r\n            value=\"equals\",\r\n            advanced=True\r\n        )\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\r\n    ]\r\n\r\n    def compare_values(self, item_value: Any, filter_value: str, operator: str) -> bool:\r\n        if operator == \"equals\":\r\n            return str(item_value) == filter_value\r\n        elif operator == \"not equals\":\r\n            return str(item_value) != filter_value\r\n        elif operator == \"contains\":\r\n            return filter_value in str(item_value)\r\n        elif operator == \"starts with\":\r\n            return str(item_value).startswith(filter_value)\r\n        elif operator == \"ends with\":\r\n            return str(item_value).endswith(filter_value)\r\n        return False\r\n\r\n    def filter_data(self) -> List[Data]:\r\n        # Extract inputs\r\n        input_data: List[Data] = self.input_data\r\n        filter_key: str = self.filter_key.text\r\n        filter_value: str = self.filter_value.text\r\n        operator: str = self.operator\r\n\r\n        # Validate inputs\r\n        if not input_data:\r\n            self.status = \"Input data is empty.\"\r\n            return []\r\n\r\n        if not filter_key or not filter_value:\r\n            self.status = \"Filter key or value is missing.\"\r\n            return input_data\r\n\r\n        # Filter the data\r\n        filtered_data = []\r\n        for item in input_data:\r\n            if isinstance(item.data, dict) and filter_key in item.data:\r\n                if self.compare_values(item.data[filter_key], filter_value, operator):\r\n                    filtered_data.append(item)\r\n            else:\r\n                self.status = f\"Warning: Some items don't have the key '{filter_key}' or are not dictionaries.\"\r\n\r\n        self.status = filtered_data\r\n        return filtered_data",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "filter_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "filter_key",
                "value": "content",
                "display_name": "Filter Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key to filter on (e.g., 'route').",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "filter_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "filter_value",
                "value": "humano",
                "display_name": "Filter Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The value to filter by (e.g., 'CMIP').",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "operator": {
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "operator",
                "value": "contains",
                "display_name": "Comparison Operator",
                "advanced": false,
                "dynamic": false,
                "info": "The operator to apply for comparing the values.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              }
            },
            "description": "Filter a list of data items based on a specified key, filter value, and comparison operator. Check advanced options to select match comparision.",
            "icon": "text-search",
            "base_classes": [
              "Data"
            ],
            "display_name": "Data Filter",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "filtered_data",
                "display_name": "Filtered Data",
                "method": "filter_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_data",
              "filter_key",
              "filter_value",
              "operator"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "DataFilterComponent-XGTeX"
        },
        "id": "DataFilterComponent-XGTeX",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "DataFilterComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "fe6921e3-7139-46fe-89bc-85a265d8c725",
    "name": "Data Filter",
    "description": "Filter a list of data items based on a specified key, filter value, and comparison operator. Check advanced options to select match comparision.",
    "is_component": true,
    "liked_by_count": "11",
    "downloads_count": "92",
    "metadata": {
      "DataFilterComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "DataFilterComponent",
            "node": {
              "template": {
                "_type": "Component",
                "input_data": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_data",
                  "value": "",
                  "display_name": "Input Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The list of data items to filter.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import DataInput, MessageInput, DropdownInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom typing import List, Dict, Any\r\n\r\nclass DataFilterComponent(Component):\r\n    display_name = \"Data Filter\"\r\n    description = \"Filter a list of data items based on a specified key, filter value, and comparison operator. Check advanced options to select match comparision.\"\r\n    icon = \"text-search\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"input_data\",\r\n            display_name=\"Input Data\",\r\n            info=\"The list of data items to filter.\",\r\n            is_list=True\r\n        ),\r\n        MessageInput(\r\n            name=\"filter_key\",\r\n            display_name=\"Filter Key\",\r\n            info=\"The key to filter on (e.g., 'route').\",\r\n            value=\"route\"\r\n        ),\r\n        MessageInput(\r\n            name=\"filter_value\",\r\n            display_name=\"Filter Value\",\r\n            info=\"The value to filter by (e.g., 'CMIP').\",\r\n            value=\"CMIP\"\r\n        ),\r\n        DropdownInput(\r\n            name=\"operator\",\r\n            display_name=\"Comparison Operator\",\r\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\"],\r\n            info=\"The operator to apply for comparing the values.\",\r\n            value=\"equals\",\r\n            advanced=True\r\n        )\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\r\n    ]\r\n\r\n    def compare_values(self, item_value: Any, filter_value: str, operator: str) -> bool:\r\n        if operator == \"equals\":\r\n            return str(item_value) == filter_value\r\n        elif operator == \"not equals\":\r\n            return str(item_value) != filter_value\r\n        elif operator == \"contains\":\r\n            return filter_value in str(item_value)\r\n        elif operator == \"starts with\":\r\n            return str(item_value).startswith(filter_value)\r\n        elif operator == \"ends with\":\r\n            return str(item_value).endswith(filter_value)\r\n        return False\r\n\r\n    def filter_data(self) -> List[Data]:\r\n        # Extract inputs\r\n        input_data: List[Data] = self.input_data\r\n        filter_key: str = self.filter_key.text\r\n        filter_value: str = self.filter_value.text\r\n        operator: str = self.operator\r\n\r\n        # Validate inputs\r\n        if not input_data:\r\n            self.status = \"Input data is empty.\"\r\n            return []\r\n\r\n        if not filter_key or not filter_value:\r\n            self.status = \"Filter key or value is missing.\"\r\n            return input_data\r\n\r\n        # Filter the data\r\n        filtered_data = []\r\n        for item in input_data:\r\n            if isinstance(item.data, dict) and filter_key in item.data:\r\n                if self.compare_values(item.data[filter_key], filter_value, operator):\r\n                    filtered_data.append(item)\r\n            else:\r\n                self.status = f\"Warning: Some items don't have the key '{filter_key}' or are not dictionaries.\"\r\n\r\n        self.status = filtered_data\r\n        return filtered_data",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "filter_key": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "filter_key",
                  "value": "content",
                  "display_name": "Filter Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The key to filter on (e.g., 'route').",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "filter_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "filter_value",
                  "value": "humano",
                  "display_name": "Filter Value",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The value to filter by (e.g., 'CMIP').",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "operator": {
                  "trace_as_metadata": true,
                  "options": [
                    "equals",
                    "not equals",
                    "contains",
                    "starts with",
                    "ends with"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "operator",
                  "value": "contains",
                  "display_name": "Comparison Operator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The operator to apply for comparing the values.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "load_from_db": false
                }
              },
              "description": "Filter a list of data items based on a specified key, filter value, and comparison operator. Check advanced options to select match comparision.",
              "icon": "text-search",
              "base_classes": [
                "Data"
              ],
              "display_name": "Data Filter",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "filtered_data",
                  "display_name": "Filtered Data",
                  "method": "filter_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_data",
                "filter_key",
                "filter_value",
                "operator"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "DataFilterComponent-XGTeX"
          },
          "id": "DataFilterComponent-XGTeX",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-07-11T11:41:15.784Z",
    "date_updated": "2024-09-05T03:05:08.906Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:12.723Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 6,
    "converter_version": "1.0.0"
  }
}