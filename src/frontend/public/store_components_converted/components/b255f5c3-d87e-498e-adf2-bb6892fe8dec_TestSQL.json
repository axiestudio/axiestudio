{
  "id": "b255f5c3-d87e-498e-adf2-bb6892fe8dec",
  "name": "TestSQL",
  "description": "",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "ck",
    "first_name": "chriskaspar",
    "last_name": "aws",
    "id": "a7b85039-5948-473b-8636-f32e985cae24",
    "full_name": "chriskaspar aws"
  },
  "store_url": "https://www.langflow.store/store/component/b255f5c3-d87e-498e-adf2-bb6892fe8dec",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-29T21:34:42.872Z",
    "updated": "2024-08-29T21:51:33.423Z",
    "downloaded": "2025-08-19T17:50:06.273Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": true,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "AthenaSQLDatabaseComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "aws_access_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_access_key",
                "value": "",
                "display_name": "Access Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "aws_secret_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_secret_key",
                "value": "",
                "display_name": "Secret Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.inputs import StrInput, SecretStrInput, DropdownInput, DictInput, MultilineInput\nfrom axiestudio.template import Output\nfrom langchain_aws import ChatBedrock, AmazonKnowledgeBasesRetriever\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.runnables import RunnablePassthrough, RunnableParallel\nfrom langchain_core.output_parsers import StrOutputParser\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Retriever\nimport boto3\nfrom langchain_community.utilities.sql_database import SQLDatabase\nfrom axiestudio.custom import Component\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import StaticPool\nimport boto3\nimport urllib.parse\nfrom axiestudio.inputs import HandleInput, MultilineInput, SecretStrInput, StrInput, DictInput\nfrom axiestudio.io import Output\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_AI\n\n \n\nclass AthenaSQLDatabaseComponent(Component):\n    icon = \"database\"  # Choose an appropriate icon from lucide.dev/icons\n\n    inputs = [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(name=\"prompt\", display_name=\"Prompt\", info=\"The input prompt for generating SQL.\" ),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        StrInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        StrInput(name=\"s3_staging_dir\", display_name=\"S3 Staging Directory\" ),\n        StrInput(name=\"database_name\", display_name=\"Database Name\" ),\n        # StrInput(name=\"endpoint_url\", display_name=\"Endpoint URL\" ),\n    ]\n\n    outputs = [\n        # Output(display_name=\"Message\", name=\"build_results\", type=Message),\n        Output(display_name=\"Message\", name=\"build_results\", method=\"build_results\")\n    ]\n\n\n    async def build_results(self) -> Message:\n        # Initialize the AWS session based on the provided credentials\n        #session = self.initialize_aws_session()\n\n        session = boto3.Session(\n            aws_access_key_id=self.aws_access_key,\n            aws_secret_access_key=self.aws_secret_key,\n            region_name=self.region_name,\n        )\n        # client_params = {}\n        # if self.endpoint_url:\n        #     client_params[\"endpoint_url\"] = self.endpoint_url\n        # if self.region_name:\n        #     client_params[\"region_name\"] = self.region_name\n\n        # # Athena connection string\n        # connection_string = (\n        #     f\"awsathena+rest://{urllib.parse.quote(self.aws_access_key)}:\"\n        #     f\"{urllib.parse.quote(self.aws_secret_key)}@athena.{self.region_name}.amazonaws.com:443/\"\n        #     f\"{urllib.parse.quote(self.database_name)}?s3_staging_dir={urllib.parse.quote(self.s3_staging_dir)}&region_name={self.region_name}\"\n        # )\n\n        # # Athena connection string\n        # # Athena connection string\n        # connection_string = (\n        #     f\"awsathena+rest://{self.aws_access_key}:\"\n        #     f\"{self.aws_secret_key}@athena.{self.region_name}.amazonaws.com:443/\"\n        #     f\"{self.database_name}?s3_staging_dir={self.s3_staging_dir}&region_name={self.region_name}\"\n        # )\n\n        connection_string = \"awsathena+rest://:@athena.{self.region_name}.amazonaws.com:443/\" \\\n                   \"{self.database_name}?s3_staging_dir={self.s3_staging_dir}\"\n        # engine = create_engine(connection_string.format(\n        #     region_name={self.region_name},\n        #     schema_name={self.database_name},\n        #     s3_staging_dir={self.s3_staging_dir}))\n\n\n        # Create SQLAlchemy engine with StaticPool to avoid connection issues\n        engine = create_engine(connection_string, poolclass=StaticPool)\n        sql_database = SQLDatabase(engine)\n\n        # Generate SQL using LLM\n        generated_sql = await self.generate_sql(self.prompt, self.llm)\n\n        # Execute the SQL query\n        query_results = await self.execute_query(sql_database, generated_sql)\n\n        # Return results as a Message\n        return {\n            \"message\": Message(\n                content=query_results,\n                sender_name=MESSAGE_SENDER_NAME_AI,\n                sender_type=MESSAGE_SENDER_AI\n            )\n        }\n\n    # def initialize_aws_session(self):\n    #     if self.aws_access_key and self.aws_secret_key:\n    #         session = boto3.Session(\n    #             aws_access_key_id=self.aws_access_key,\n    #             aws_secret_access_key=self.aws_secret_key,\n    #         )\n    #     elif self.credentials_profile_name:\n    #         session = boto3.Session(profile_name=self.credentials_profile_name)\n    #     else:\n    #         session = boto3.Session()\n    #     return session\n\n    async def generate_sql(self, prompt: str, llm, max_attempts: int = 4) -> str:\n        attempt = 0\n        while attempt < max_attempts:\n            try:\n                generated_sql = await llm.predict(prompt)\n                query_str = generated_sql.split(\"```\")[1]\n                query_str = \" \".join(query_str.split(\"\\n\")).strip()\n                sql_query = query_str[3:] if query_str.startswith(\"sql\") else query_str\n\n                # Here you would implement your logic to check the SQL syntax\n                syntax_check_msg = await self.syntax_checker(sql_query)\n                if syntax_check_msg == 'Passed':\n                    return sql_query\n                else:\n                    prompt = (\n                        f\"{prompt}\\n\"\n                        f\"This is a syntax error: {syntax_check_msg}. \"\n                        f\"Please generate an alternative SQL query which corrects the syntax error.\"\n                    )\n                    attempt += 1\n            except Exception as e:\n                attempt += 1\n        return sql_query\n\n    async def syntax_checker(self, sql_query: str) -> str:\n        # Implement syntax checking logic here, return 'Passed' if successful\n        return 'Passed'\n\n    async def execute_query(self, sql_database: SQLDatabase, sql_query: str) -> str:\n        # Execute the generated SQL query using SQLDatabase\n        # This is where you would execute the SQL query and return results\n        return f\"Executed SQL: {sql_query}\"\n\n\n    # def message(self) -> Message:\n    #     # # Initialize boto3 session with credentials\n    #     # session = boto3.Session(\n    #     #     aws_access_key_id=self.aws_access_key,\n    #     #     aws_secret_access_key=self.aws_secret_key,\n    #     #     region_name=self.region_name,\n    #     # )\n\n    #     # # Create Bedrock runtime client\n    #     # bedrock_runtime = session.client(service_name=\"bedrock-runtime\")\n\n \n  \n\n    #     # # Initialize Amazon Knowledge Base Retriever\n    #     # retriever = AmazonKnowledgeBasesRetriever(\n    #     #     knowledge_base_id=self.knowledge_base_id,\n    #     #     retrieval_config={\"vectorSearchConfiguration\": {\"numberOfResults\": 4}},\n    #     # )\n \n \n    #     ## Return the response\n    #     #return retriever\n    #     return \"fdxgdf\"\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "database_name",
                "value": "athena_db",
                "display_name": "Database Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "prompt",
                "value": "fdghdfg",
                "display_name": "Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input prompt for generating SQL.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "region_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "region_name",
                "value": "us-east-1",
                "display_name": "Region Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "s3_staging_dir": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "s3_staging_dir",
                "value": "s3://athena-destination-store-ckaspar/",
                "display_name": "S3 Staging Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "icon": "database",
            "base_classes": [
              "Message"
            ],
            "display_name": "TestSQL",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "build_results",
                "display_name": "Message",
                "method": "build_results",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "llm",
              "prompt",
              "aws_access_key",
              "aws_secret_key",
              "region_name",
              "s3_staging_dir",
              "database_name"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "AthenaSQLDatabase-WIwc6"
        },
        "id": "AthenaSQLDatabase-WIwc6",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "AthenaSQLDatabase": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "b255f5c3-d87e-498e-adf2-bb6892fe8dec",
    "name": "TestSQL",
    "description": "",
    "is_component": true,
    "liked_by_count": "0",
    "downloads_count": "1",
    "metadata": {
      "AthenaSQLDatabase": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": true,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "AthenaSQLDatabaseComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "aws_access_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_access_key",
                  "value": "",
                  "display_name": "Access Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "aws_secret_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_secret_key",
                  "value": "",
                  "display_name": "Secret Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.inputs import StrInput, SecretStrInput, DropdownInput, DictInput, MultilineInput\nfrom axiestudio.template import Output\nfrom langchain_aws import ChatBedrock, AmazonKnowledgeBasesRetriever\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.runnables import RunnablePassthrough, RunnableParallel\nfrom langchain_core.output_parsers import StrOutputParser\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Retriever\nimport boto3\nfrom langchain_community.utilities.sql_database import SQLDatabase\nfrom axiestudio.custom import Component\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import StaticPool\nimport boto3\nimport urllib.parse\nfrom axiestudio.inputs import HandleInput, MultilineInput, SecretStrInput, StrInput, DictInput\nfrom axiestudio.io import Output\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_AI\n\n \n\nclass AthenaSQLDatabaseComponent(Component):\n    icon = \"database\"  # Choose an appropriate icon from lucide.dev/icons\n\n    inputs = [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(name=\"prompt\", display_name=\"Prompt\", info=\"The input prompt for generating SQL.\" ),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        StrInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        StrInput(name=\"s3_staging_dir\", display_name=\"S3 Staging Directory\" ),\n        StrInput(name=\"database_name\", display_name=\"Database Name\" ),\n        # StrInput(name=\"endpoint_url\", display_name=\"Endpoint URL\" ),\n    ]\n\n    outputs = [\n        # Output(display_name=\"Message\", name=\"build_results\", type=Message),\n        Output(display_name=\"Message\", name=\"build_results\", method=\"build_results\")\n    ]\n\n\n    async def build_results(self) -> Message:\n        # Initialize the AWS session based on the provided credentials\n        #session = self.initialize_aws_session()\n\n        session = boto3.Session(\n            aws_access_key_id=self.aws_access_key,\n            aws_secret_access_key=self.aws_secret_key,\n            region_name=self.region_name,\n        )\n        # client_params = {}\n        # if self.endpoint_url:\n        #     client_params[\"endpoint_url\"] = self.endpoint_url\n        # if self.region_name:\n        #     client_params[\"region_name\"] = self.region_name\n\n        # # Athena connection string\n        # connection_string = (\n        #     f\"awsathena+rest://{urllib.parse.quote(self.aws_access_key)}:\"\n        #     f\"{urllib.parse.quote(self.aws_secret_key)}@athena.{self.region_name}.amazonaws.com:443/\"\n        #     f\"{urllib.parse.quote(self.database_name)}?s3_staging_dir={urllib.parse.quote(self.s3_staging_dir)}&region_name={self.region_name}\"\n        # )\n\n        # # Athena connection string\n        # # Athena connection string\n        # connection_string = (\n        #     f\"awsathena+rest://{self.aws_access_key}:\"\n        #     f\"{self.aws_secret_key}@athena.{self.region_name}.amazonaws.com:443/\"\n        #     f\"{self.database_name}?s3_staging_dir={self.s3_staging_dir}&region_name={self.region_name}\"\n        # )\n\n        connection_string = \"awsathena+rest://:@athena.{self.region_name}.amazonaws.com:443/\" \\\n                   \"{self.database_name}?s3_staging_dir={self.s3_staging_dir}\"\n        # engine = create_engine(connection_string.format(\n        #     region_name={self.region_name},\n        #     schema_name={self.database_name},\n        #     s3_staging_dir={self.s3_staging_dir}))\n\n\n        # Create SQLAlchemy engine with StaticPool to avoid connection issues\n        engine = create_engine(connection_string, poolclass=StaticPool)\n        sql_database = SQLDatabase(engine)\n\n        # Generate SQL using LLM\n        generated_sql = await self.generate_sql(self.prompt, self.llm)\n\n        # Execute the SQL query\n        query_results = await self.execute_query(sql_database, generated_sql)\n\n        # Return results as a Message\n        return {\n            \"message\": Message(\n                content=query_results,\n                sender_name=MESSAGE_SENDER_NAME_AI,\n                sender_type=MESSAGE_SENDER_AI\n            )\n        }\n\n    # def initialize_aws_session(self):\n    #     if self.aws_access_key and self.aws_secret_key:\n    #         session = boto3.Session(\n    #             aws_access_key_id=self.aws_access_key,\n    #             aws_secret_access_key=self.aws_secret_key,\n    #         )\n    #     elif self.credentials_profile_name:\n    #         session = boto3.Session(profile_name=self.credentials_profile_name)\n    #     else:\n    #         session = boto3.Session()\n    #     return session\n\n    async def generate_sql(self, prompt: str, llm, max_attempts: int = 4) -> str:\n        attempt = 0\n        while attempt < max_attempts:\n            try:\n                generated_sql = await llm.predict(prompt)\n                query_str = generated_sql.split(\"```\")[1]\n                query_str = \" \".join(query_str.split(\"\\n\")).strip()\n                sql_query = query_str[3:] if query_str.startswith(\"sql\") else query_str\n\n                # Here you would implement your logic to check the SQL syntax\n                syntax_check_msg = await self.syntax_checker(sql_query)\n                if syntax_check_msg == 'Passed':\n                    return sql_query\n                else:\n                    prompt = (\n                        f\"{prompt}\\n\"\n                        f\"This is a syntax error: {syntax_check_msg}. \"\n                        f\"Please generate an alternative SQL query which corrects the syntax error.\"\n                    )\n                    attempt += 1\n            except Exception as e:\n                attempt += 1\n        return sql_query\n\n    async def syntax_checker(self, sql_query: str) -> str:\n        # Implement syntax checking logic here, return 'Passed' if successful\n        return 'Passed'\n\n    async def execute_query(self, sql_database: SQLDatabase, sql_query: str) -> str:\n        # Execute the generated SQL query using SQLDatabase\n        # This is where you would execute the SQL query and return results\n        return f\"Executed SQL: {sql_query}\"\n\n\n    # def message(self) -> Message:\n    #     # # Initialize boto3 session with credentials\n    #     # session = boto3.Session(\n    #     #     aws_access_key_id=self.aws_access_key,\n    #     #     aws_secret_access_key=self.aws_secret_key,\n    #     #     region_name=self.region_name,\n    #     # )\n\n    #     # # Create Bedrock runtime client\n    #     # bedrock_runtime = session.client(service_name=\"bedrock-runtime\")\n\n \n  \n\n    #     # # Initialize Amazon Knowledge Base Retriever\n    #     # retriever = AmazonKnowledgeBasesRetriever(\n    #     #     knowledge_base_id=self.knowledge_base_id,\n    #     #     retrieval_config={\"vectorSearchConfiguration\": {\"numberOfResults\": 4}},\n    #     # )\n \n \n    #     ## Return the response\n    #     #return retriever\n    #     return \"fdxgdf\"\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "database_name",
                  "value": "athena_db",
                  "display_name": "Database Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "prompt",
                  "value": "fdghdfg",
                  "display_name": "Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The input prompt for generating SQL.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "region_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "region_name",
                  "value": "us-east-1",
                  "display_name": "Region Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "s3_staging_dir": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "s3_staging_dir",
                  "value": "s3://athena-destination-store-ckaspar/",
                  "display_name": "S3 Staging Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "icon": "database",
              "base_classes": [
                "Message"
              ],
              "display_name": "TestSQL",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "build_results",
                  "display_name": "Message",
                  "method": "build_results",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "llm",
                "prompt",
                "aws_access_key",
                "aws_secret_key",
                "region_name",
                "s3_staging_dir",
                "database_name"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "AthenaSQLDatabase-WIwc6"
          },
          "id": "AthenaSQLDatabase-WIwc6",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-29T21:34:42.872Z",
    "date_updated": "2024-08-29T21:51:33.423Z",
    "status": "Public",
    "sort": null,
    "user_updated": "a7b85039-5948-473b-8636-f32e985cae24",
    "user_created": {
      "username": "ck",
      "first_name": "chriskaspar",
      "last_name": "aws",
      "id": "a7b85039-5948-473b-8636-f32e985cae24"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.458Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 20,
    "converter_version": "1.0.0"
  }
}