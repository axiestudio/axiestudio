{
  "id": "049ea949-63fd-445c-9aa3-efe4163a07e4",
  "name": "Message Router",
  "description": "Routes an input message to a corresponding output based on text comparison. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "aleolidev",
    "first_name": "Alex",
    "last_name": "Olivares",
    "id": "fe44cfb7-15c4-48e1-b447-94b171c86b01",
    "full_name": "Alex Olivares"
  },
  "store_url": "https://www.langflow.store/store/component/049ea949-63fd-445c-9aa3-efe4163a07e4",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-09T18:58:08.903Z",
    "updated": "2024-07-09T18:58:08.949Z",
    "downloaded": "2025-08-19T17:50:05.727Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.6",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "ConditionalRouter",
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "case_sensitive",
                "display_name": "Case Sensitive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import BoolInput, DropdownInput, MessageInput, MessageTextInput, Output\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass ConditionalRouterComponent(Component):\r\n    display_name = \"Message Router\"\r\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\r\n    icon = \"equal\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"input_text\",\r\n            display_name=\"Input Text\",\r\n            info=\"The primary text input for the operation.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"match_text\",\r\n            display_name=\"Match Text\",\r\n            info=\"The text input to compare against.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"operator\",\r\n            display_name=\"Operator\",\r\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\"],\r\n            info=\"The operator to apply for comparing the texts.\",\r\n            value=\"equals\",\r\n        ),\r\n        BoolInput(\r\n            name=\"case_sensitive\",\r\n            display_name=\"Case Sensitive\",\r\n            info=\"If true, the comparison will be case sensitive.\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"true_message\",\r\n            display_name=\"True Message\",\r\n            info=\"The message to pass through when the condition is true.\",\r\n        ),\r\n        MessageInput(\r\n            name=\"false_message\",\r\n            display_name=\"False Message\",\r\n            info=\"The message to pass through when the condition is false.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"message\", method=\"response\"),\r\n    ]\r\n\r\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, case_sensitive: bool) -> bool:\r\n        if not case_sensitive:\r\n            input_text = input_text.lower()\r\n            match_text = match_text.lower()\r\n\r\n        if operator == \"equals\":\r\n            return input_text == match_text\r\n        elif operator == \"not equals\":\r\n            return input_text != match_text\r\n        elif operator == \"contains\":\r\n            return match_text in input_text\r\n        elif operator == \"starts with\":\r\n            return input_text.startswith(match_text)\r\n        elif operator == \"ends with\":\r\n            return input_text.endswith(match_text)\r\n        return False\r\n    \r\n    def response(self) -> Message:\r\n        result = self.evaluate_condition(self.input_text, self.match_text, self.operator, self.case_sensitive)\r\n        if result:\r\n            self.status = self.true_message\r\n            return self.true_message\r\n        else:\r\n            self.status = self.false_message\r\n            return self.false_message",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "false_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "false_message",
                "display_name": "False Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through when the condition is false.",
                "title_case": false,
                "type": "str"
              },
              "input_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_text",
                "display_name": "Input Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str"
              },
              "match_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "match_text",
                "display_name": "Match Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text input to compare against.",
                "title_case": false,
                "type": "str"
              },
              "operator": {
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "equals",
                "name": "operator",
                "display_name": "Operator",
                "advanced": false,
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "title_case": false,
                "type": "str"
              },
              "true_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "true_message",
                "display_name": "True Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through when the condition is true.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "equal",
            "base_classes": [
              "Message"
            ],
            "display_name": "Message Router",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "response",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "true_message",
              "false_message"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "ConditionalRouter-QbR0G",
          "description": "Routes an input message to a corresponding output based on text comparison.",
          "display_name": "Conditional Router"
        },
        "id": "ConditionalRouter-QbR0G",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "ConditionalRouter": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "049ea949-63fd-445c-9aa3-efe4163a07e4",
    "name": "Message Router",
    "description": "Routes an input message to a corresponding output based on text comparison.",
    "is_component": true,
    "liked_by_count": "21",
    "downloads_count": "199",
    "metadata": {
      "ConditionalRouter": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.6",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "ConditionalRouter",
            "node": {
              "template": {
                "_type": "Component",
                "case_sensitive": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "case_sensitive",
                  "display_name": "Case Sensitive",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, the comparison will be case sensitive.",
                  "title_case": false,
                  "type": "bool"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import BoolInput, DropdownInput, MessageInput, MessageTextInput, Output\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass ConditionalRouterComponent(Component):\r\n    display_name = \"Message Router\"\r\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\r\n    icon = \"equal\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"input_text\",\r\n            display_name=\"Input Text\",\r\n            info=\"The primary text input for the operation.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"match_text\",\r\n            display_name=\"Match Text\",\r\n            info=\"The text input to compare against.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"operator\",\r\n            display_name=\"Operator\",\r\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\"],\r\n            info=\"The operator to apply for comparing the texts.\",\r\n            value=\"equals\",\r\n        ),\r\n        BoolInput(\r\n            name=\"case_sensitive\",\r\n            display_name=\"Case Sensitive\",\r\n            info=\"If true, the comparison will be case sensitive.\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"true_message\",\r\n            display_name=\"True Message\",\r\n            info=\"The message to pass through when the condition is true.\",\r\n        ),\r\n        MessageInput(\r\n            name=\"false_message\",\r\n            display_name=\"False Message\",\r\n            info=\"The message to pass through when the condition is false.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"message\", method=\"response\"),\r\n    ]\r\n\r\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, case_sensitive: bool) -> bool:\r\n        if not case_sensitive:\r\n            input_text = input_text.lower()\r\n            match_text = match_text.lower()\r\n\r\n        if operator == \"equals\":\r\n            return input_text == match_text\r\n        elif operator == \"not equals\":\r\n            return input_text != match_text\r\n        elif operator == \"contains\":\r\n            return match_text in input_text\r\n        elif operator == \"starts with\":\r\n            return input_text.startswith(match_text)\r\n        elif operator == \"ends with\":\r\n            return input_text.endswith(match_text)\r\n        return False\r\n    \r\n    def response(self) -> Message:\r\n        result = self.evaluate_condition(self.input_text, self.match_text, self.operator, self.case_sensitive)\r\n        if result:\r\n            self.status = self.true_message\r\n            return self.true_message\r\n        else:\r\n            self.status = self.false_message\r\n            return self.false_message",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "false_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "false_message",
                  "display_name": "False Message",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The message to pass through when the condition is false.",
                  "title_case": false,
                  "type": "str"
                },
                "input_text": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_text",
                  "display_name": "Input Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The primary text input for the operation.",
                  "title_case": false,
                  "type": "str"
                },
                "match_text": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "match_text",
                  "display_name": "Match Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The text input to compare against.",
                  "title_case": false,
                  "type": "str"
                },
                "operator": {
                  "trace_as_metadata": true,
                  "options": [
                    "equals",
                    "not equals",
                    "contains",
                    "starts with",
                    "ends with"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "equals",
                  "name": "operator",
                  "display_name": "Operator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The operator to apply for comparing the texts.",
                  "title_case": false,
                  "type": "str"
                },
                "true_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "true_message",
                  "display_name": "True Message",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The message to pass through when the condition is true.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Routes an input message to a corresponding output based on text comparison.",
              "icon": "equal",
              "base_classes": [
                "Message"
              ],
              "display_name": "Message Router",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "input_text",
                "match_text",
                "operator",
                "case_sensitive",
                "true_message",
                "false_message"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "ConditionalRouter-QbR0G",
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "display_name": "Conditional Router"
          },
          "id": "ConditionalRouter-QbR0G",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-07-09T18:58:08.903Z",
    "date_updated": "2024-07-09T18:58:08.949Z",
    "status": "Public",
    "sort": null,
    "user_updated": "fe44cfb7-15c4-48e1-b447-94b171c86b01",
    "user_created": {
      "username": "aleolidev",
      "first_name": "Alex",
      "last_name": "Olivares",
      "id": "fe44cfb7-15c4-48e1-b447-94b171c86b01"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:08.806Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 6,
    "converter_version": "1.0.0"
  }
}