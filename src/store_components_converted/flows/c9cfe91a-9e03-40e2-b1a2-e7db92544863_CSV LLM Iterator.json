{
  "id": "c9cfe91a-9e03-40e2-b1a2-e7db92544863",
  "name": "CSV LLM Iterator",
  "description": "Load a CSV file, convert its contents into data objects, process each item using an LLM with dynamic prompts, and optionally save the results to a CSV file.\n\n (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/c9cfe91a-9e03-40e2-b1a2-e7db92544863",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-25T17:03:10.101Z",
    "updated": "2024-06-27T21:44:41.650Z",
    "downloaded": "2025-08-19T17:50:05.872Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.5",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ToolCallingAgent-8kJhl",
        "type": "genericNode",
        "position": {
          "x": 1108.5387848932367,
          "y": 554.6961267068241
        },
        "data": {
          "type": "ToolCallingAgent",
          "node": {
            "template": {
              "_type": "Component",
              "data_list": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data_list",
                "display_name": "Data List",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The list of data to iterate over.",
                "title_case": false,
                "type": "other"
              },
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "The language model to use for processing.",
                "title_case": false,
                "type": "other"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import csv\r\nimport os\r\nfrom typing import List\r\nfrom loguru import logger\r\n\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.helpers.data import data_to_text\r\nfrom axiestudio.io import (\r\n    MessageTextInput,\r\n    IntInput,\r\n    DataInput,\r\n    Output,\r\n    MultilineInput,\r\n    HandleInput,\r\n    StrInput,\r\n)\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass DynamicLLMDataIteratorComponent(Component):\r\n    display_name = \"Dynamic LLM Data Iterator\"\r\n    description = (\r\n        \"Iterate over a list of data, process each item using a specified LLM with a dynamically constructed prompt, \"\r\n        \"store the result, and optionally save the results to a CSV file.\\n\\n\"\r\n        \"- Define a prompt template using placeholders for data keys (e.g., `{key_1}`, `{key_2}`).\\n\"\r\n        \"- Specify the key under which the LLM output will be stored in each data item.\\n\"\r\n        \"- Optional: Provide a path to save the processed data as a CSV file.\\n\"\r\n    )\r\n    icon = \"🔁\"\r\n    base_type = \"component\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data_list\", display_name=\"Data List\", info=\"The list of data to iterate over.\", is_list=True),\r\n        IntInput(name=\"start_index\", display_name=\"Start Index\", info=\"The index to start processing from.\", value=0),\r\n        IntInput(name=\"iteration_count\", display_name=\"Iteration Count\", info=\"Number of items to process. Set to 0 to process all remaining items.\", value=0),\r\n        MultilineInput(\r\n            name=\"prompt_template\",\r\n            display_name=\"Prompt Template\",\r\n            info=\"The prompt template to use for each item. Use `{key}` to refer to values in the data. For example, 'Based on the domain {Domain} and the meta {Meta}, do X'.\",\r\n            value=\"Based on the domain {Domain} and the meta {Meta}, do X\",\r\n        ),\r\n        MessageTextInput(name=\"output_key\", display_name=\"Output Key\", info=\"The key to store the LLM output in the data.\"),\r\n        HandleInput(\r\n            name=\"llm\",\r\n            display_name=\"LLM\",\r\n            input_types=[\"LanguageModel\"],\r\n            info=\"The language model to use for processing.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"file_path\",\r\n            display_name=\"CSV File Path\",\r\n            info=\"The path to save the CSV file. If not provided, no CSV will be saved.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Processed Data\", name=\"processed_data\", method=\"process_data\"),\r\n    ]\r\n\r\n    def append_to_csv(self, file_path: str, data: dict):\r\n        file_exists = os.path.isfile(file_path)\r\n        \r\n        with open(file_path, 'a', newline='') as csvfile:\r\n            writer = csv.DictWriter(csvfile, fieldnames=data.keys())\r\n            \r\n            if not file_exists:\r\n                writer.writeheader()\r\n            \r\n            writer.writerow(data)\r\n\r\n    def construct_prompt(self, template: str, data: dict) -> str:\r\n        return template.format(**data)\r\n\r\n    def process_data(self) -> List[Data]:\r\n        logger.info(\"Starting data processing\")\r\n        data_list: List[Data] = self.data_list\r\n        start_index: int = max(0, self.start_index)  # Ensure start_index is not negative\r\n        iteration_count: int = self.iteration_count\r\n        prompt_template: str = self.prompt_template\r\n        output_key: str = self.output_key\r\n        file_path: str = self.file_path\r\n\r\n        logger.debug(f\"Number of data items: {len(data_list)}\")\r\n        logger.debug(f\"Start index: {start_index}\")\r\n        logger.debug(f\"Iteration count: {iteration_count}\")\r\n        logger.debug(f\"Prompt template: {prompt_template}\")\r\n        logger.debug(f\"Output key: {output_key}\")\r\n        logger.debug(f\"CSV file path: {file_path}\")\r\n\r\n        llm = self.llm\r\n\r\n        # Adjust iteration_count based on start_index and remaining items\r\n        if iteration_count <= 0 or (start_index + iteration_count) > len(data_list):\r\n            iteration_count = len(data_list) - start_index\r\n        \r\n        end_index = start_index + iteration_count\r\n        logger.info(f\"Will process items from index {start_index} to {end_index - 1}\")\r\n\r\n        processed_data = []\r\n\r\n        for index, item in enumerate(data_list[start_index:end_index], start=start_index):\r\n            logger.debug(f\"Processing item {index}/{end_index - 1}\")\r\n            if not isinstance(item.data, dict):\r\n                logger.error(f\"Data item {index} is not a dictionary\")\r\n                raise ValueError(f\"Data item {index} is not a dictionary\")\r\n\r\n            prompt = self.construct_prompt(prompt_template, item.data)\r\n            logger.debug(f\"Generated prompt: {prompt}\")\r\n            \r\n            try:\r\n                logger.debug(\"Invoking LLM\")\r\n                llm_output = llm.invoke(prompt).content\r\n                logger.debug(f\"LLM output: {llm_output}\")\r\n                new_item = item.data.copy()\r\n                new_item[output_key] = llm_output\r\n                processed_data.append(Data(data=new_item))\r\n                logger.info(f\"Successfully processed item {index}\")\r\n                \r\n                if file_path:\r\n                    self.append_to_csv(file_path, new_item)\r\n                    logger.info(f\"Appended item {index} to CSV\")\r\n            except Exception as e:\r\n                logger.error(f\"Error processing item {index}: {str(e)}\")\r\n                self.status = f\"Error processing item {index}: {str(e)}\"\r\n                return processed_data\r\n\r\n        self.status = processed_data\r\n        logger.info(f\"Finished processing. {len(processed_data)} items processed successfully.\")\r\n        return processed_data",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "test",
                "name": "file_path",
                "display_name": "CSV File Path",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The path to save the CSV file. If not provided, no CSV will be saved.",
                "title_case": false,
                "type": "str"
              },
              "iteration_count": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "100",
                "name": "iteration_count",
                "display_name": "Iteration Count",
                "advanced": false,
                "dynamic": false,
                "info": "Number of items to process. Set to 0 to process all remaining items.",
                "title_case": false,
                "type": "int"
              },
              "output_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Country",
                "name": "output_key",
                "display_name": "Output Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key to store the LLM output in the data.",
                "title_case": false,
                "type": "str"
              },
              "prompt_template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Based on the domain {Domain}, your response should contain ONLY the name of the country of origin of that domain.",
                "name": "prompt_template",
                "display_name": "Prompt Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The prompt template to use for each item. Use `{key}` to refer to values in the data. For example, 'Based on the domain {Domain} and the meta {Meta}, do X'.",
                "title_case": false,
                "type": "str"
              },
              "start_index": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "start_index",
                "display_name": "Start Index",
                "advanced": false,
                "dynamic": false,
                "info": "The index to start processing from.",
                "title_case": false,
                "type": "int"
              }
            },
            "description": "Iterate over a list of data, process each item using a specified LLM with a dynamically constructed prompt, store the result, and optionally save the results to a CSV file.\n\n- Define a prompt template using placeholders for data keys (e.g., `{key_1}`, `{key_2}`).\n- Specify the key under which the LLM output will be stored in each data item.\n- Optional: Provide a path to save the processed data as a CSV file.\n",
            "icon": "🔁",
            "base_classes": [
              "Data"
            ],
            "display_name": "LLM Data Iterator",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "processed_data",
                "display_name": "Processed Data",
                "method": "process_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data_list",
              "start_index",
              "iteration_count",
              "prompt_template",
              "output_key",
              "llm",
              "file_path"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ToolCallingAgent-8kJhl",
          "description": "Iterate over a list of data, process each item using a specified LLM with a dynamically constructed prompt, store the result, and optionally save the results to a CSV file.\n\n- Define a prompt template using placeholders for data keys (e.g., `{key_1}`, `{key_2}`).\n- Specify the key under which the LLM output will be stored in each data item.\n- Optional: Provide a path to save the processed data as a CSV file.\n",
          "display_name": "LLM Data Iterator"
        },
        "selected": true,
        "width": 384,
        "height": 1020,
        "positionAbsolute": {
          "x": 1108.5387848932367,
          "y": 554.6961267068241
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-NAOlw",
        "type": "genericNode",
        "position": {
          "x": 614.9437527673831,
          "y": 860.9588838742311
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        # self.output_schea is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict)\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "gpt-3.5-turbo",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "output_schema",
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 1,
                "name": "seed",
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool"
              },
              "system_message": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.1,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "input_value",
              "max_tokens",
              "model_kwargs",
              "output_schema",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "stream",
              "system_message",
              "seed"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OpenAIModel-NAOlw"
        },
        "selected": false,
        "width": 384,
        "height": 623,
        "positionAbsolute": {
          "x": 614.9437527673831,
          "y": 860.9588838742311
        },
        "dragging": false
      },
      {
        "data": {
          "id": "groupComponent-5jjCd",
          "type": "GroupNode",
          "node": {
            "display_name": "CSV Loader",
            "documentation": "",
            "description": "Loads a CSV as Data List",
            "template": {
              "path_File-LWAuh": {
                "trace_as_metadata": true,
                "file_path": "4333929e-97c9-4f68-9c71-e9edafdd9ea3/Domains List Advanced Store - Domains + verticals.csv",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "path",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "proxy": {
                  "id": "File-LWAuh",
                  "field": "path"
                }
              },
              "code_File-LWAuh": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "File-LWAuh",
                  "field": "code"
                }
              },
              "silent_errors_File-LWAuh": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "silent_errors",
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "File-LWAuh",
                  "field": "silent_errors"
                }
              },
              "code_CustomComponent-hHbc0": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nimport csv\r\nfrom io import StringIO\r\n\r\nclass CSVToDataComponent(Component):\r\n    display_name = \"CSV to Data\"\r\n    description = \"Convert a CSV string to a list of Data objects\"\r\n    icon = \"📊\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"csv_string\",\r\n            display_name=\"CSV String\",\r\n            info=\"Enter a valid CSV string to convert to a list of Data objects\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"data_list\", display_name=\"Data List\", method=\"convert_csv_to_data\"),\r\n    ]\r\n\r\n    def convert_csv_to_data(self) -> list[Data]:\r\n        try:\r\n            csv_string = self.csv_string\r\n\r\n            # Use StringIO to create a file-like object from the string\r\n            csv_file = StringIO(csv_string)\r\n\r\n            # Create a CSV reader object\r\n            csv_reader = csv.DictReader(csv_file)\r\n\r\n            # Convert each row to a Data object\r\n            result = []\r\n            for row in csv_reader:\r\n                result.append(Data(data=row))\r\n\r\n            self.status = result\r\n            return result\r\n\r\n        except csv.Error as e:\r\n            error_message = f\"CSV parsing error: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]\r\n\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "CustomComponent-hHbc0",
                  "field": "code"
                }
              },
              "code_ParseData-zTvi2": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-zTvi2",
                  "field": "code"
                }
              },
              "sep_ParseData-zTvi2": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "ParseData-zTvi2",
                  "field": "sep"
                }
              },
              "template_ParseData-zTvi2": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "ParseData-zTvi2",
                  "field": "template"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "File-LWAuh",
                    "type": "genericNode",
                    "position": {
                      "x": -215.1320633805642,
                      "y": 598.8356367303586
                    },
                    "data": {
                      "type": "File",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "path": {
                            "trace_as_metadata": true,
                            "file_path": "4333929e-97c9-4f68-9c71-e9edafdd9ea3/Domains List Advanced Store - Domains + verticals.csv",
                            "fileTypes": [
                              "txt",
                              "md",
                              "mdx",
                              "csv",
                              "json",
                              "yaml",
                              "yml",
                              "xml",
                              "html",
                              "htm",
                              "pdf",
                              "docx",
                              "py",
                              "sh",
                              "sql",
                              "js",
                              "ts",
                              "tsx"
                            ],
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "path",
                            "display_name": "Path",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                            "title_case": false,
                            "type": "file"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "silent_errors": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "silent_errors",
                            "display_name": "Silent Errors",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If true, errors will not raise an exception.",
                            "title_case": false,
                            "type": "bool"
                          }
                        },
                        "description": "A generic file loader.",
                        "icon": "file-text",
                        "base_classes": [
                          "Data"
                        ],
                        "display_name": "File",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "data",
                            "display_name": "Data",
                            "method": "load_file",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "path",
                          "silent_errors"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "File-LWAuh"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 301,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -215.1320633805642,
                      "y": 598.8356367303586
                    }
                  },
                  {
                    "id": "CustomComponent-hHbc0",
                    "type": "genericNode",
                    "position": {
                      "x": 617.759054007349,
                      "y": 537.0115882833842
                    },
                    "data": {
                      "type": "CustomComponent",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nimport csv\r\nfrom io import StringIO\r\n\r\nclass CSVToDataComponent(Component):\r\n    display_name = \"CSV to Data\"\r\n    description = \"Convert a CSV string to a list of Data objects\"\r\n    icon = \"📊\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"csv_string\",\r\n            display_name=\"CSV String\",\r\n            info=\"Enter a valid CSV string to convert to a list of Data objects\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"data_list\", display_name=\"Data List\", method=\"convert_csv_to_data\"),\r\n    ]\r\n\r\n    def convert_csv_to_data(self) -> list[Data]:\r\n        try:\r\n            csv_string = self.csv_string\r\n\r\n            # Use StringIO to create a file-like object from the string\r\n            csv_file = StringIO(csv_string)\r\n\r\n            # Create a CSV reader object\r\n            csv_reader = csv.DictReader(csv_file)\r\n\r\n            # Convert each row to a Data object\r\n            result = []\r\n            for row in csv_reader:\r\n                result.append(Data(data=row))\r\n\r\n            self.status = result\r\n            return result\r\n\r\n        except csv.Error as e:\r\n            error_message = f\"CSV parsing error: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]\r\n\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "csv_string": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "csv_string",
                            "display_name": "CSV String",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "Enter a valid CSV string to convert to a list of Data objects",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Convert a CSV string to a list of Data objects",
                        "icon": "📊",
                        "base_classes": [
                          "Data"
                        ],
                        "display_name": "CSV to Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "data_list",
                            "display_name": "Data List",
                            "method": "convert_csv_to_data",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "csv_string"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "CustomComponent-hHbc0",
                      "description": "Convert a CSV string to a list of Data objects",
                      "display_name": "CSV to Data"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 305,
                    "positionAbsolute": {
                      "x": 617.759054007349,
                      "y": 537.0115882833842
                    },
                    "dragging": false
                  },
                  {
                    "id": "ParseData-zTvi2",
                    "type": "genericNode",
                    "position": {
                      "x": 202.17031606351657,
                      "y": 526.5940182662955
                    },
                    "data": {
                      "type": "ParseData",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "data": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "data",
                            "display_name": "Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "title_case": false,
                            "type": "other"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "sep": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "\n",
                            "name": "sep",
                            "display_name": "Separator",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "template": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "{text}",
                            "name": "template",
                            "display_name": "Template",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "Parse Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "text",
                            "display_name": "Text",
                            "method": "parse_data",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "ParseData-zTvi2"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 385,
                    "positionAbsolute": {
                      "x": 202.17031606351657,
                      "y": 526.5940182662955
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "File-LWAuh",
                    "target": "ParseData-zTvi2",
                    "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-LWAuhœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-zTvi2œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "id": "reactflow__edge-File-LWAuh{œdataTypeœ:œFileœ,œidœ:œFile-LWAuhœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-zTvi2{œfieldNameœ:œdataœ,œidœ:œParseData-zTvi2œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-zTvi2",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "File",
                        "id": "File-LWAuh",
                        "name": "data",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "selected": false,
                    "className": ""
                  },
                  {
                    "source": "ParseData-zTvi2",
                    "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-zTvi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "CustomComponent-hHbc0",
                    "targetHandle": "{œfieldNameœ:œcsv_stringœ,œidœ:œCustomComponent-hHbc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "csv_string",
                        "id": "CustomComponent-hHbc0",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "ParseData",
                        "id": "ParseData-zTvi2",
                        "name": "text",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-ParseData-zTvi2{œdataTypeœ:œParseDataœ,œidœ:œParseData-zTvi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-hHbc0{œfieldNameœ:œcsv_stringœ,œidœ:œCustomComponent-hHbc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "className": ""
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Nauseous Ohm",
              "description": "",
              "id": "NHrOz"
            },
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "CustomComponent-hHbc0_data_list",
                "display_name": "Data List",
                "method": "convert_csv_to_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false,
                "proxy": {
                  "id": "CustomComponent-hHbc0",
                  "name": "data_list",
                  "nodeDisplayName": "CSV to Data"
                }
              }
            ]
          }
        },
        "id": "groupComponent-5jjCd",
        "position": {
          "x": 615.8707057740633,
          "y": 530.7253649919207
        },
        "type": "genericNode",
        "width": 384,
        "height": 301,
        "selected": false,
        "positionAbsolute": {
          "x": 615.8707057740633,
          "y": 530.7253649919207
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "OpenAIModel-NAOlw",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-NAOlwœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "ToolCallingAgent-8kJhl",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ToolCallingAgent-8kJhl",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-NAOlw",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-NAOlw{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-NAOlwœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-8kJhl{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "groupComponent-5jjCd",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-5jjCdœ,œnameœ:œCustomComponent-hHbc0_data_listœ,œoutput_typesœ:[œDataœ]}",
        "target": "ToolCallingAgent-8kJhl",
        "targetHandle": "{œfieldNameœ:œdata_listœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data_list",
            "id": "ToolCallingAgent-8kJhl",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "groupComponent-5jjCd",
            "name": "CustomComponent-hHbc0_data_list",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-groupComponent-5jjCd{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-5jjCdœ,œnameœ:œCustomComponent-hHbc0_data_listœ,œoutput_typesœ:[œDataœ]}-ToolCallingAgent-8kJhl{œfieldNameœ:œdata_listœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 303.4168563349758,
      "y": -240.829714316729,
      "zoom": 0.6831267158526542
    }
  },
  "metadata": {
    "ToolCallingAgent": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "groupComponent": {
      "count": 1
    },
    "total": 3
  },
  "original": {
    "id": "c9cfe91a-9e03-40e2-b1a2-e7db92544863",
    "name": "CSV LLM Iterator",
    "description": "Load a CSV file, convert its contents into data objects, process each item using an LLM with dynamic prompts, and optionally save the results to a CSV file.\n\n",
    "is_component": false,
    "liked_by_count": "19",
    "downloads_count": "327",
    "metadata": {
      "ToolCallingAgent": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "groupComponent": {
        "count": 1
      },
      "total": 3
    },
    "last_tested_version": "1.0.5",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ToolCallingAgent-8kJhl",
          "type": "genericNode",
          "position": {
            "x": 1108.5387848932367,
            "y": 554.6961267068241
          },
          "data": {
            "type": "ToolCallingAgent",
            "node": {
              "template": {
                "_type": "Component",
                "data_list": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "data_list",
                  "display_name": "Data List",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The list of data to iterate over.",
                  "title_case": false,
                  "type": "other"
                },
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "The language model to use for processing.",
                  "title_case": false,
                  "type": "other"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import csv\r\nimport os\r\nfrom typing import List\r\nfrom loguru import logger\r\n\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.helpers.data import data_to_text\r\nfrom axiestudio.io import (\r\n    MessageTextInput,\r\n    IntInput,\r\n    DataInput,\r\n    Output,\r\n    MultilineInput,\r\n    HandleInput,\r\n    StrInput,\r\n)\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass DynamicLLMDataIteratorComponent(Component):\r\n    display_name = \"Dynamic LLM Data Iterator\"\r\n    description = (\r\n        \"Iterate over a list of data, process each item using a specified LLM with a dynamically constructed prompt, \"\r\n        \"store the result, and optionally save the results to a CSV file.\\n\\n\"\r\n        \"- Define a prompt template using placeholders for data keys (e.g., `{key_1}`, `{key_2}`).\\n\"\r\n        \"- Specify the key under which the LLM output will be stored in each data item.\\n\"\r\n        \"- Optional: Provide a path to save the processed data as a CSV file.\\n\"\r\n    )\r\n    icon = \"🔁\"\r\n    base_type = \"component\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data_list\", display_name=\"Data List\", info=\"The list of data to iterate over.\", is_list=True),\r\n        IntInput(name=\"start_index\", display_name=\"Start Index\", info=\"The index to start processing from.\", value=0),\r\n        IntInput(name=\"iteration_count\", display_name=\"Iteration Count\", info=\"Number of items to process. Set to 0 to process all remaining items.\", value=0),\r\n        MultilineInput(\r\n            name=\"prompt_template\",\r\n            display_name=\"Prompt Template\",\r\n            info=\"The prompt template to use for each item. Use `{key}` to refer to values in the data. For example, 'Based on the domain {Domain} and the meta {Meta}, do X'.\",\r\n            value=\"Based on the domain {Domain} and the meta {Meta}, do X\",\r\n        ),\r\n        MessageTextInput(name=\"output_key\", display_name=\"Output Key\", info=\"The key to store the LLM output in the data.\"),\r\n        HandleInput(\r\n            name=\"llm\",\r\n            display_name=\"LLM\",\r\n            input_types=[\"LanguageModel\"],\r\n            info=\"The language model to use for processing.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"file_path\",\r\n            display_name=\"CSV File Path\",\r\n            info=\"The path to save the CSV file. If not provided, no CSV will be saved.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Processed Data\", name=\"processed_data\", method=\"process_data\"),\r\n    ]\r\n\r\n    def append_to_csv(self, file_path: str, data: dict):\r\n        file_exists = os.path.isfile(file_path)\r\n        \r\n        with open(file_path, 'a', newline='') as csvfile:\r\n            writer = csv.DictWriter(csvfile, fieldnames=data.keys())\r\n            \r\n            if not file_exists:\r\n                writer.writeheader()\r\n            \r\n            writer.writerow(data)\r\n\r\n    def construct_prompt(self, template: str, data: dict) -> str:\r\n        return template.format(**data)\r\n\r\n    def process_data(self) -> List[Data]:\r\n        logger.info(\"Starting data processing\")\r\n        data_list: List[Data] = self.data_list\r\n        start_index: int = max(0, self.start_index)  # Ensure start_index is not negative\r\n        iteration_count: int = self.iteration_count\r\n        prompt_template: str = self.prompt_template\r\n        output_key: str = self.output_key\r\n        file_path: str = self.file_path\r\n\r\n        logger.debug(f\"Number of data items: {len(data_list)}\")\r\n        logger.debug(f\"Start index: {start_index}\")\r\n        logger.debug(f\"Iteration count: {iteration_count}\")\r\n        logger.debug(f\"Prompt template: {prompt_template}\")\r\n        logger.debug(f\"Output key: {output_key}\")\r\n        logger.debug(f\"CSV file path: {file_path}\")\r\n\r\n        llm = self.llm\r\n\r\n        # Adjust iteration_count based on start_index and remaining items\r\n        if iteration_count <= 0 or (start_index + iteration_count) > len(data_list):\r\n            iteration_count = len(data_list) - start_index\r\n        \r\n        end_index = start_index + iteration_count\r\n        logger.info(f\"Will process items from index {start_index} to {end_index - 1}\")\r\n\r\n        processed_data = []\r\n\r\n        for index, item in enumerate(data_list[start_index:end_index], start=start_index):\r\n            logger.debug(f\"Processing item {index}/{end_index - 1}\")\r\n            if not isinstance(item.data, dict):\r\n                logger.error(f\"Data item {index} is not a dictionary\")\r\n                raise ValueError(f\"Data item {index} is not a dictionary\")\r\n\r\n            prompt = self.construct_prompt(prompt_template, item.data)\r\n            logger.debug(f\"Generated prompt: {prompt}\")\r\n            \r\n            try:\r\n                logger.debug(\"Invoking LLM\")\r\n                llm_output = llm.invoke(prompt).content\r\n                logger.debug(f\"LLM output: {llm_output}\")\r\n                new_item = item.data.copy()\r\n                new_item[output_key] = llm_output\r\n                processed_data.append(Data(data=new_item))\r\n                logger.info(f\"Successfully processed item {index}\")\r\n                \r\n                if file_path:\r\n                    self.append_to_csv(file_path, new_item)\r\n                    logger.info(f\"Appended item {index} to CSV\")\r\n            except Exception as e:\r\n                logger.error(f\"Error processing item {index}: {str(e)}\")\r\n                self.status = f\"Error processing item {index}: {str(e)}\"\r\n                return processed_data\r\n\r\n        self.status = processed_data\r\n        logger.info(f\"Finished processing. {len(processed_data)} items processed successfully.\")\r\n        return processed_data",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "test",
                  "name": "file_path",
                  "display_name": "CSV File Path",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The path to save the CSV file. If not provided, no CSV will be saved.",
                  "title_case": false,
                  "type": "str"
                },
                "iteration_count": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "100",
                  "name": "iteration_count",
                  "display_name": "Iteration Count",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of items to process. Set to 0 to process all remaining items.",
                  "title_case": false,
                  "type": "int"
                },
                "output_key": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Country",
                  "name": "output_key",
                  "display_name": "Output Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The key to store the LLM output in the data.",
                  "title_case": false,
                  "type": "str"
                },
                "prompt_template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Based on the domain {Domain}, your response should contain ONLY the name of the country of origin of that domain.",
                  "name": "prompt_template",
                  "display_name": "Prompt Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The prompt template to use for each item. Use `{key}` to refer to values in the data. For example, 'Based on the domain {Domain} and the meta {Meta}, do X'.",
                  "title_case": false,
                  "type": "str"
                },
                "start_index": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "0",
                  "name": "start_index",
                  "display_name": "Start Index",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The index to start processing from.",
                  "title_case": false,
                  "type": "int"
                }
              },
              "description": "Iterate over a list of data, process each item using a specified LLM with a dynamically constructed prompt, store the result, and optionally save the results to a CSV file.\n\n- Define a prompt template using placeholders for data keys (e.g., `{key_1}`, `{key_2}`).\n- Specify the key under which the LLM output will be stored in each data item.\n- Optional: Provide a path to save the processed data as a CSV file.\n",
              "icon": "🔁",
              "base_classes": [
                "Data"
              ],
              "display_name": "LLM Data Iterator",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "processed_data",
                  "display_name": "Processed Data",
                  "method": "process_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data_list",
                "start_index",
                "iteration_count",
                "prompt_template",
                "output_key",
                "llm",
                "file_path"
              ],
              "beta": false,
              "edited": true
            },
            "id": "ToolCallingAgent-8kJhl",
            "description": "Iterate over a list of data, process each item using a specified LLM with a dynamically constructed prompt, store the result, and optionally save the results to a CSV file.\n\n- Define a prompt template using placeholders for data keys (e.g., `{key_1}`, `{key_2}`).\n- Specify the key under which the LLM output will be stored in each data item.\n- Optional: Provide a path to save the processed data as a CSV file.\n",
            "display_name": "LLM Data Iterator"
          },
          "selected": true,
          "width": 384,
          "height": 1020,
          "positionAbsolute": {
            "x": 1108.5387848932367,
            "y": 554.6961267068241
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-NAOlw",
          "type": "genericNode",
          "position": {
            "x": 614.9437527673831,
            "y": 860.9588838742311
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        # self.output_schea is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict)\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "gpt-3.5-turbo",
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str"
                },
                "openai_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "output_schema",
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 1,
                  "name": "seed",
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool"
                },
                "system_message": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0.1,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float"
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "input_value",
                "max_tokens",
                "model_kwargs",
                "output_schema",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "stream",
                "system_message",
                "seed"
              ],
              "beta": false,
              "edited": false
            },
            "id": "OpenAIModel-NAOlw"
          },
          "selected": false,
          "width": 384,
          "height": 623,
          "positionAbsolute": {
            "x": 614.9437527673831,
            "y": 860.9588838742311
          },
          "dragging": false
        },
        {
          "data": {
            "id": "groupComponent-5jjCd",
            "type": "GroupNode",
            "node": {
              "display_name": "CSV Loader",
              "documentation": "",
              "description": "Loads a CSV as Data List",
              "template": {
                "path_File-LWAuh": {
                  "trace_as_metadata": true,
                  "file_path": "4333929e-97c9-4f68-9c71-e9edafdd9ea3/Domains List Advanced Store - Domains + verticals.csv",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "path",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "proxy": {
                    "id": "File-LWAuh",
                    "field": "path"
                  }
                },
                "code_File-LWAuh": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "File-LWAuh",
                    "field": "code"
                  }
                },
                "silent_errors_File-LWAuh": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "silent_errors",
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "File-LWAuh",
                    "field": "silent_errors"
                  }
                },
                "code_CustomComponent-hHbc0": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nimport csv\r\nfrom io import StringIO\r\n\r\nclass CSVToDataComponent(Component):\r\n    display_name = \"CSV to Data\"\r\n    description = \"Convert a CSV string to a list of Data objects\"\r\n    icon = \"📊\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"csv_string\",\r\n            display_name=\"CSV String\",\r\n            info=\"Enter a valid CSV string to convert to a list of Data objects\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"data_list\", display_name=\"Data List\", method=\"convert_csv_to_data\"),\r\n    ]\r\n\r\n    def convert_csv_to_data(self) -> list[Data]:\r\n        try:\r\n            csv_string = self.csv_string\r\n\r\n            # Use StringIO to create a file-like object from the string\r\n            csv_file = StringIO(csv_string)\r\n\r\n            # Create a CSV reader object\r\n            csv_reader = csv.DictReader(csv_file)\r\n\r\n            # Convert each row to a Data object\r\n            result = []\r\n            for row in csv_reader:\r\n                result.append(Data(data=row))\r\n\r\n            self.status = result\r\n            return result\r\n\r\n        except csv.Error as e:\r\n            error_message = f\"CSV parsing error: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]\r\n\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "CustomComponent-hHbc0",
                    "field": "code"
                  }
                },
                "code_ParseData-zTvi2": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-zTvi2",
                    "field": "code"
                  }
                },
                "sep_ParseData-zTvi2": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "\n",
                  "name": "sep",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "ParseData-zTvi2",
                    "field": "sep"
                  }
                },
                "template_ParseData-zTvi2": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "ParseData-zTvi2",
                    "field": "template"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "File-LWAuh",
                      "type": "genericNode",
                      "position": {
                        "x": -215.1320633805642,
                        "y": 598.8356367303586
                      },
                      "data": {
                        "type": "File",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "path": {
                              "trace_as_metadata": true,
                              "file_path": "4333929e-97c9-4f68-9c71-e9edafdd9ea3/Domains List Advanced Store - Domains + verticals.csv",
                              "fileTypes": [
                                "txt",
                                "md",
                                "mdx",
                                "csv",
                                "json",
                                "yaml",
                                "yml",
                                "xml",
                                "html",
                                "htm",
                                "pdf",
                                "docx",
                                "py",
                                "sh",
                                "sql",
                                "js",
                                "ts",
                                "tsx"
                              ],
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "path",
                              "display_name": "Path",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                              "title_case": false,
                              "type": "file"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "silent_errors": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "silent_errors",
                              "display_name": "Silent Errors",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If true, errors will not raise an exception.",
                              "title_case": false,
                              "type": "bool"
                            }
                          },
                          "description": "A generic file loader.",
                          "icon": "file-text",
                          "base_classes": [
                            "Data"
                          ],
                          "display_name": "File",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "data",
                              "display_name": "Data",
                              "method": "load_file",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "path",
                            "silent_errors"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "File-LWAuh"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 301,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -215.1320633805642,
                        "y": 598.8356367303586
                      }
                    },
                    {
                      "id": "CustomComponent-hHbc0",
                      "type": "genericNode",
                      "position": {
                        "x": 617.759054007349,
                        "y": 537.0115882833842
                      },
                      "data": {
                        "type": "CustomComponent",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nimport csv\r\nfrom io import StringIO\r\n\r\nclass CSVToDataComponent(Component):\r\n    display_name = \"CSV to Data\"\r\n    description = \"Convert a CSV string to a list of Data objects\"\r\n    icon = \"📊\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"csv_string\",\r\n            display_name=\"CSV String\",\r\n            info=\"Enter a valid CSV string to convert to a list of Data objects\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"data_list\", display_name=\"Data List\", method=\"convert_csv_to_data\"),\r\n    ]\r\n\r\n    def convert_csv_to_data(self) -> list[Data]:\r\n        try:\r\n            csv_string = self.csv_string\r\n\r\n            # Use StringIO to create a file-like object from the string\r\n            csv_file = StringIO(csv_string)\r\n\r\n            # Create a CSV reader object\r\n            csv_reader = csv.DictReader(csv_file)\r\n\r\n            # Convert each row to a Data object\r\n            result = []\r\n            for row in csv_reader:\r\n                result.append(Data(data=row))\r\n\r\n            self.status = result\r\n            return result\r\n\r\n        except csv.Error as e:\r\n            error_message = f\"CSV parsing error: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]\r\n\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            self.status = error_message\r\n            return [Data(data={\"error\": error_message})]",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "csv_string": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "csv_string",
                              "display_name": "CSV String",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "Enter a valid CSV string to convert to a list of Data objects",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Convert a CSV string to a list of Data objects",
                          "icon": "📊",
                          "base_classes": [
                            "Data"
                          ],
                          "display_name": "CSV to Data",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "data_list",
                              "display_name": "Data List",
                              "method": "convert_csv_to_data",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "csv_string"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "CustomComponent-hHbc0",
                        "description": "Convert a CSV string to a list of Data objects",
                        "display_name": "CSV to Data"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 305,
                      "positionAbsolute": {
                        "x": 617.759054007349,
                        "y": 537.0115882833842
                      },
                      "dragging": false
                    },
                    {
                      "id": "ParseData-zTvi2",
                      "type": "genericNode",
                      "position": {
                        "x": 202.17031606351657,
                        "y": 526.5940182662955
                      },
                      "data": {
                        "type": "ParseData",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "data": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "data",
                              "display_name": "Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "title_case": false,
                              "type": "other"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "sep": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "\n",
                              "name": "sep",
                              "display_name": "Separator",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "template": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "{text}",
                              "name": "template",
                              "display_name": "Template",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Convert Data into plain text following a specified template.",
                          "icon": "braces",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "Parse Data",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "text",
                              "display_name": "Text",
                              "method": "parse_data",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "ParseData-zTvi2"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 385,
                      "positionAbsolute": {
                        "x": 202.17031606351657,
                        "y": 526.5940182662955
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "File-LWAuh",
                      "target": "ParseData-zTvi2",
                      "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-LWAuhœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-zTvi2œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "id": "reactflow__edge-File-LWAuh{œdataTypeœ:œFileœ,œidœ:œFile-LWAuhœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-zTvi2{œfieldNameœ:œdataœ,œidœ:œParseData-zTvi2œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-zTvi2",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "File",
                          "id": "File-LWAuh",
                          "name": "data",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "selected": false,
                      "className": ""
                    },
                    {
                      "source": "ParseData-zTvi2",
                      "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-zTvi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "CustomComponent-hHbc0",
                      "targetHandle": "{œfieldNameœ:œcsv_stringœ,œidœ:œCustomComponent-hHbc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "csv_string",
                          "id": "CustomComponent-hHbc0",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "ParseData",
                          "id": "ParseData-zTvi2",
                          "name": "text",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-ParseData-zTvi2{œdataTypeœ:œParseDataœ,œidœ:œParseData-zTvi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-hHbc0{œfieldNameœ:œcsv_stringœ,œidœ:œCustomComponent-hHbc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "className": ""
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Nauseous Ohm",
                "description": "",
                "id": "NHrOz"
              },
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "CustomComponent-hHbc0_data_list",
                  "display_name": "Data List",
                  "method": "convert_csv_to_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false,
                  "proxy": {
                    "id": "CustomComponent-hHbc0",
                    "name": "data_list",
                    "nodeDisplayName": "CSV to Data"
                  }
                }
              ]
            }
          },
          "id": "groupComponent-5jjCd",
          "position": {
            "x": 615.8707057740633,
            "y": 530.7253649919207
          },
          "type": "genericNode",
          "width": 384,
          "height": 301,
          "selected": false,
          "positionAbsolute": {
            "x": 615.8707057740633,
            "y": 530.7253649919207
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "OpenAIModel-NAOlw",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-NAOlwœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "ToolCallingAgent-8kJhl",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "ToolCallingAgent-8kJhl",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-NAOlw",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-NAOlw{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-NAOlwœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-8kJhl{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "groupComponent-5jjCd",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-5jjCdœ,œnameœ:œCustomComponent-hHbc0_data_listœ,œoutput_typesœ:[œDataœ]}",
          "target": "ToolCallingAgent-8kJhl",
          "targetHandle": "{œfieldNameœ:œdata_listœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data_list",
              "id": "ToolCallingAgent-8kJhl",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "groupComponent-5jjCd",
              "name": "CustomComponent-hHbc0_data_list",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-groupComponent-5jjCd{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-5jjCdœ,œnameœ:œCustomComponent-hHbc0_data_listœ,œoutput_typesœ:[œDataœ]}-ToolCallingAgent-8kJhl{œfieldNameœ:œdata_listœ,œidœ:œToolCallingAgent-8kJhlœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 303.4168563349758,
        "y": -240.829714316729,
        "zoom": 0.6831267158526542
      }
    },
    "date_created": "2024-06-25T17:03:10.101Z",
    "date_updated": "2024-06-27T21:44:41.650Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.442Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 64,
    "converter_version": "1.0.0"
  }
}