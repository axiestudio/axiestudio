{
  "id": "00710236-d3a5-4c1b-81a1-bf3b47afb25d",
  "name": "U-M GPT Toolkit Flow",
  "description": "Flow for the U-M GPT Toolkit examples GitHub repo (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "audjunebug",
    "first_name": "Audrey",
    "last_name": "Smith",
    "id": "9516a4c0-f04f-4f25-b060-589f4cdea4e6",
    "full_name": "Audrey Smith"
  },
  "store_url": "https://www.langflow.store/store/component/00710236-d3a5-4c1b-81a1-bf3b47afb25d",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-12T14:26:42.197Z",
    "updated": "2024-06-12T14:26:42.429Z",
    "downloaded": "2025-08-19T17:50:05.474Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.19",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "PyPDFLoader-S3cAI",
        "type": "genericNode",
        "position": {
          "x": 77,
          "y": 110.59375
        },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [
                  ".pdf"
                ],
                "file_path": "/Users/ajunebug/Library/Caches/axiestudio/efa1001b-ad79-488a-8086-38a27a3fee2e/8971bbe8d4cc86c0e9aee2ecfc154d6591524e3141f12e5dd613828410be9503.pdf",
                "password": false,
                "name": "file_path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": [
                  {
                    "": ""
                  }
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": [
              "Document"
            ],
            "display_name": "PyPDFLoader",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "PyPDFLoader-S3cAI"
        },
        "selected": false,
        "width": 384,
        "height": 367,
        "positionAbsolute": {
          "x": 77,
          "y": 110.59375
        },
        "dragging": false
      },
      {
        "id": "AzureOpenAIEmbeddings-QVr0U",
        "type": "genericNode",
        "position": {
          "x": 80.3313412946735,
          "y": 496.0071672345583
        },
        "data": {
          "type": "AzureOpenAIEmbeddings",
          "node": {
            "template": {
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "api_version": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "2023-08-01-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "2022-12-01",
                  "2023-03-15-preview",
                  "2023-05-15",
                  "2023-06-01-preview",
                  "2023-07-01-preview",
                  "2023-08-01-preview"
                ],
                "name": "api_version",
                "display_name": "API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "azure_deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "azure_deployment",
                "display_name": "Deployment Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "gpt-35-turbo"
              },
              "azure_endpoint": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "azure_endpoint",
                "display_name": "Azure Endpoint",
                "advanced": false,
                "dynamic": false,
                "info": "Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`",
                "title_case": true,
                "value": "https://api.umgpt.umich.edu/azure-openai-api"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.embeddings.base import Embeddings\nfrom langchain_community.embeddings import AzureOpenAIEmbeddings\n\nfrom axiestudio import CustomComponent\n\n\nclass AzureOpenAIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"AzureOpenAIEmbeddings\"\n    description: str = \"Embeddings model from Azure OpenAI.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/text_embedding/azureopenai\"\n    beta = False\n\n    API_VERSION_OPTIONS = [\n        \"2022-12-01\",\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n    ]\n\n    def build_config(self):\n        return {\n            \"azure_endpoint\": {\n                \"display_name\": \"Azure Endpoint\",\n                \"required\": True,\n                \"info\": \"Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`\",\n            },\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"options\": self.API_VERSION_OPTIONS,\n                \"value\": self.API_VERSION_OPTIONS[-1],\n                \"advanced\": True,\n            },\n            \"api_key\": {\n                \"display_name\": \"API Key\",\n                \"required\": True,\n                \"password\": True,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        azure_endpoint: str,\n        azure_deployment: str,\n        api_version: str,\n        api_key: str,\n    ) -> Embeddings:\n        try:\n            embeddings = AzureOpenAIEmbeddings(\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=api_key,\n            )\n\n        except Exception as e:\n            raise ValueError(\"Could not connect to AzureOpenAIEmbeddings API.\") from e\n\n        return embeddings\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Embeddings model from Azure OpenAI.",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "AzureOpenAIEmbeddings",
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/azureopenai",
            "custom_fields": {
              "azure_endpoint": null,
              "azure_deployment": null,
              "api_version": null,
              "api_key": null
            },
            "output_types": [
              "Embeddings"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "AzureOpenAIEmbeddings-QVr0U"
        },
        "selected": false,
        "width": 384,
        "height": 563,
        "positionAbsolute": {
          "x": 80.3313412946735,
          "y": 496.0071672345583
        },
        "dragging": false
      },
      {
        "id": "RecursiveCharacterTextSplitter-3bEup",
        "type": "genericNode",
        "position": {
          "x": 518.9549288612591,
          "y": 111.6706767461828
        },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "title_case": true
              },
              "chunk_overlap": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.utils.util import build_loader_repr_from_documents\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "separators": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": [
              "Document"
            ],
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
            "custom_fields": {
              "documents": null,
              "separators": null,
              "chunk_size": null,
              "chunk_overlap": null
            },
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "RecursiveCharacterTextSplitter-3bEup"
        },
        "selected": false,
        "width": 384,
        "height": 587,
        "positionAbsolute": {
          "x": 518.9549288612591,
          "y": 111.6706767461828
        },
        "dragging": false
      },
      {
        "id": "AzureChatOpenAI-xw26o",
        "type": "genericNode",
        "position": {
          "x": 956.6705685312113,
          "y": -35.8237456033944
        },
        "data": {
          "type": "AzureChatOpenAI",
          "node": {
            "template": {
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "api_version": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "2023-12-01-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "2023-03-15-preview",
                  "2023-05-15",
                  "2023-06-01-preview",
                  "2023-07-01-preview",
                  "2023-08-01-preview",
                  "2023-09-01-preview",
                  "2023-12-01-preview"
                ],
                "name": "api_version",
                "display_name": "API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "azure_deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "azure_deployment",
                "display_name": "Deployment Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "gpt-35-turbo"
              },
              "azure_endpoint": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "azure_endpoint",
                "display_name": "Azure Endpoint",
                "advanced": false,
                "dynamic": false,
                "info": "Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`",
                "title_case": true,
                "value": "https://api.umgpt.umich.edu/azure-openai-api"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\nfrom axiestudio import CustomComponent\nfrom langchain.llms.base import BaseLanguageModel\nfrom langchain_community.chat_models.azure_openai import AzureChatOpenAI\n\n\nclass AzureChatOpenAIComponent(CustomComponent):\n    display_name: str = \"AzureChatOpenAI\"\n    description: str = \"LLM model from Azure OpenAI.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/llms/azure_openai\"\n    beta = False\n\n    AZURE_OPENAI_MODELS = [\n        \"gpt-35-turbo\",\n        \"gpt-35-turbo-16k\",\n        \"gpt-35-turbo-instruct\",\n        \"gpt-4\",\n        \"gpt-4-32k\",\n        \"gpt-4-vision\",\n    ]\n\n    AZURE_OPENAI_API_VERSIONS = [\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n        \"2023-09-01-preview\",\n        \"2023-12-01-preview\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": self.AZURE_OPENAI_MODELS[0],\n                \"options\": self.AZURE_OPENAI_MODELS,\n                \"required\": True,\n            },\n            \"azure_endpoint\": {\n                \"display_name\": \"Azure Endpoint\",\n                \"required\": True,\n                \"info\": \"Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`\",\n            },\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"options\": self.AZURE_OPENAI_API_VERSIONS,\n                \"value\": self.AZURE_OPENAI_API_VERSIONS[-1],\n                \"required\": True,\n                \"advanced\": True,\n            },\n            \"api_key\": {\"display_name\": \"API Key\", \"required\": True, \"password\": True},\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.7,\n                \"field_type\": \"float\",\n                \"required\": False,\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"value\": 1000,\n                \"required\": False,\n                \"field_type\": \"int\",\n                \"advanced\": True,\n                \"info\": \"Maximum number of tokens to generate.\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        model: str,\n        azure_endpoint: str,\n        azure_deployment: str,\n        api_key: str,\n        api_version: str,\n        temperature: float = 0.7,\n        max_tokens: Optional[int] = 1000,\n    ) -> BaseLanguageModel:\n        try:\n            llm = AzureChatOpenAI(\n                model=model,\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=api_key,\n                temperature=temperature,\n                max_tokens=max_tokens,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to AzureOpenAI API.\") from e\n        return llm\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Maximum number of tokens to generate.",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-35-turbo",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-35-turbo",
                  "gpt-35-turbo-16k",
                  "gpt-35-turbo-instruct",
                  "gpt-4",
                  "gpt-4-32k",
                  "gpt-4-vision"
                ],
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "LLM model from Azure OpenAI.",
            "base_classes": [
              "BaseLanguageModel"
            ],
            "display_name": "AzureChatOpenAI",
            "documentation": "https://python.langchain.com/docs/integrations/llms/azure_openai",
            "custom_fields": {
              "model": null,
              "azure_endpoint": null,
              "azure_deployment": null,
              "api_key": null,
              "api_version": null,
              "temperature": null,
              "max_tokens": null
            },
            "output_types": [
              "BaseLanguageModel"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "AzureChatOpenAI-xw26o"
        },
        "selected": false,
        "width": 384,
        "height": 739,
        "positionAbsolute": {
          "x": 956.6705685312113,
          "y": -35.8237456033944
        },
        "dragging": false
      },
      {
        "id": "CombineDocsChain-TMSMv",
        "type": "genericNode",
        "position": {
          "x": 1385.1635839857308,
          "y": 281.43109152574203
        },
        "data": {
          "type": "CombineDocsChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chain_type": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "stuff",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "stuff",
                  "map_reduce",
                  "map_rerank",
                  "refine"
                ],
                "name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "load_qa_chain"
            },
            "description": "Load question answering chain.",
            "base_classes": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "display_name": "CombineDocsChain",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "CombineDocsChain-TMSMv"
        },
        "selected": false,
        "width": 384,
        "height": 333,
        "positionAbsolute": {
          "x": 1385.1635839857308,
          "y": 281.43109152574203
        },
        "dragging": false
      },
      {
        "id": "RetrievalQAWithSourcesChain-d5ogF",
        "type": "genericNode",
        "position": {
          "x": 1867.7481410045461,
          "y": 397.6453317874159
        },
        "data": {
          "type": "RetrievalQAWithSourcesChain",
          "node": {
            "template": {
              "combine_documents_chain": {
                "type": "BaseCombineDocumentsChain",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "combine_documents_chain",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chain_type": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "stuff",
                  "map_reduce",
                  "map_rerank",
                  "refine"
                ],
                "name": "chain_type",
                "display_name": "Chain Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "stuff"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.chains.qa_with_sources.base import BaseQAWithSourcesChain\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, BaseRetriever\n\n\nclass RetrievalQAWithSourcesChainComponent(CustomComponent):\n    display_name = \"RetrievalQAWithSourcesChain\"\n    description = \"Question-answering with sources over an index.\"\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"chain_type\": {\n                \"display_name\": \"Chain Type\",\n                \"options\": [\"stuff\", \"map_reduce\", \"map_rerank\", \"refine\"],\n            },\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        llm: BaseLanguageModel,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        chain_type: str,\n        memory: Optional[BaseMemory] = None,\n        return_source_documents: Optional[bool] = True,\n    ) -> BaseQAWithSourcesChain:\n        return RetrievalQAWithSourcesChain.from_chain_type(\n            llm=llm,\n            chain_type=chain_type,\n            combine_documents_chain=combine_documents_chain,\n            memory=memory,\n            return_source_documents=return_source_documents,\n            retriever=retriever,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "return_source_documents": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_source_documents",
                "display_name": "Return Source Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Question-answering with sources over an index.",
            "base_classes": [
              "Chain",
              "BaseQAWithSourcesChain"
            ],
            "display_name": "RetrievalQAWithSourcesChain",
            "documentation": "",
            "custom_fields": {
              "retriever": null,
              "llm": null,
              "combine_documents_chain": null,
              "chain_type": null,
              "memory": null,
              "return_source_documents": null
            },
            "output_types": [
              "BaseQAWithSourcesChain"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "RetrievalQAWithSourcesChain-d5ogF"
        },
        "selected": false,
        "width": 384,
        "height": 639,
        "positionAbsolute": {
          "x": 1867.7481410045461,
          "y": 397.6453317874159
        },
        "dragging": false
      },
      {
        "id": "Chroma-1crLd",
        "type": "genericNode",
        "position": {
          "x": 951.8223491116921,
          "y": 714.5999747722738
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_cors_allow_origins": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_grpc_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_host": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_ssl_enabled": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "axiestudio",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist_directory": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {
              "collection_name": null,
              "persist": null,
              "embedding": null,
              "chroma_server_ssl_enabled": null,
              "persist_directory": null,
              "documents": null,
              "chroma_server_cors_allow_origins": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_grpc_port": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Chroma-1crLd"
        },
        "selected": false,
        "width": 384,
        "height": 555,
        "positionAbsolute": {
          "x": 951.8223491116921,
          "y": 714.5999747722738
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "PyPDFLoader-S3cAI",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-S3cAIœ}",
        "target": "RecursiveCharacterTextSplitter-3bEup",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-3bEup",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-S3cAI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PyPDFLoader-S3cAI{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-S3cAIœ}-RecursiveCharacterTextSplitter-3bEup{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "AzureChatOpenAI-xw26o",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}",
        "target": "CombineDocsChain-TMSMv",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-TMSMvœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CombineDocsChain-TMSMv",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel"
            ],
            "dataType": "AzureChatOpenAI",
            "id": "AzureChatOpenAI-xw26o"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-AzureChatOpenAI-xw26o{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}-CombineDocsChain-TMSMv{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-TMSMvœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "CombineDocsChain-TMSMv",
        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-TMSMvœ}",
        "target": "RetrievalQAWithSourcesChain-d5ogF",
        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
        "data": {
          "targetHandle": {
            "fieldName": "combine_documents_chain",
            "id": "RetrievalQAWithSourcesChain-d5ogF",
            "inputTypes": null,
            "type": "BaseCombineDocumentsChain"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "dataType": "CombineDocsChain",
            "id": "CombineDocsChain-TMSMv"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CombineDocsChain-TMSMv{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-TMSMvœ}-RetrievalQAWithSourcesChain-d5ogF{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
      },
      {
        "source": "AzureChatOpenAI-xw26o",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}",
        "target": "RetrievalQAWithSourcesChain-d5ogF",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "RetrievalQAWithSourcesChain-d5ogF",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel"
            ],
            "dataType": "AzureChatOpenAI",
            "id": "AzureChatOpenAI-xw26o"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-AzureChatOpenAI-xw26o{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}-RetrievalQAWithSourcesChain-d5ogF{œfieldNameœ:œllmœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "AzureOpenAIEmbeddings-QVr0U",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-QVr0Uœ}",
        "target": "Chroma-1crLd",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-1crLd",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "AzureOpenAIEmbeddings",
            "id": "AzureOpenAIEmbeddings-QVr0U"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-AzureOpenAIEmbeddings-QVr0U{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-QVr0Uœ}-Chroma-1crLd{œfieldNameœ:œembeddingœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-3bEup",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ}",
        "target": "Chroma-1crLd",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-1crLd",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-3bEup"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-3bEup{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ}-Chroma-1crLd{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Chroma-1crLd",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-1crLdœ}",
        "target": "RetrievalQAWithSourcesChain-d5ogF",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQAWithSourcesChain-d5ogF",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Chroma",
            "id": "Chroma-1crLd"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-1crLd{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-1crLdœ}-RetrievalQAWithSourcesChain-d5ogF{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      }
    ],
    "viewport": {
      "x": 20.775926331035862,
      "y": 48.80345496703853,
      "zoom": 0.5076830504347193
    }
  },
  "metadata": {
    "PyPDFLoader": {
      "count": 1
    },
    "AzureOpenAIEmbeddings": {
      "count": 1
    },
    "RecursiveCharacterTextSplitter": {
      "count": 1
    },
    "AzureChatOpenAI": {
      "count": 1
    },
    "CombineDocsChain": {
      "count": 1
    },
    "RetrievalQAWithSourcesChain": {
      "count": 1
    },
    "Chroma": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "00710236-d3a5-4c1b-81a1-bf3b47afb25d",
    "name": "U-M GPT Toolkit Flow",
    "description": "Flow for the U-M GPT Toolkit examples GitHub repo",
    "is_component": false,
    "liked_by_count": "2",
    "downloads_count": "23",
    "metadata": {
      "PyPDFLoader": {
        "count": 1
      },
      "AzureOpenAIEmbeddings": {
        "count": 1
      },
      "RecursiveCharacterTextSplitter": {
        "count": 1
      },
      "AzureChatOpenAI": {
        "count": 1
      },
      "CombineDocsChain": {
        "count": 1
      },
      "RetrievalQAWithSourcesChain": {
        "count": 1
      },
      "Chroma": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "0.6.19",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "PyPDFLoader-S3cAI",
          "type": "genericNode",
          "position": {
            "x": 77,
            "y": 110.59375
          },
          "data": {
            "type": "PyPDFLoader",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [
                    ".pdf"
                  ],
                  "file_path": "/Users/ajunebug/Library/Caches/axiestudio/efa1001b-ad79-488a-8086-38a27a3fee2e/8971bbe8d4cc86c0e9aee2ecfc154d6591524e3141f12e5dd613828410be9503.pdf",
                  "password": false,
                  "name": "file_path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": [
                    {
                      "": ""
                    }
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PyPDFLoader"
              },
              "description": "Load PDF using pypdf into list of documents.",
              "base_classes": [
                "Document"
              ],
              "display_name": "PyPDFLoader",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "PyPDFLoader-S3cAI"
          },
          "selected": false,
          "width": 384,
          "height": 367,
          "positionAbsolute": {
            "x": 77,
            "y": 110.59375
          },
          "dragging": false
        },
        {
          "id": "AzureOpenAIEmbeddings-QVr0U",
          "type": "genericNode",
          "position": {
            "x": 80.3313412946735,
            "y": 496.0071672345583
          },
          "data": {
            "type": "AzureOpenAIEmbeddings",
            "node": {
              "template": {
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "api_version": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "2023-08-01-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "2022-12-01",
                    "2023-03-15-preview",
                    "2023-05-15",
                    "2023-06-01-preview",
                    "2023-07-01-preview",
                    "2023-08-01-preview"
                  ],
                  "name": "api_version",
                  "display_name": "API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "azure_deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "azure_deployment",
                  "display_name": "Deployment Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "gpt-35-turbo"
                },
                "azure_endpoint": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "azure_endpoint",
                  "display_name": "Azure Endpoint",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`",
                  "title_case": true,
                  "value": "https://api.umgpt.umich.edu/azure-openai-api"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain.embeddings.base import Embeddings\nfrom langchain_community.embeddings import AzureOpenAIEmbeddings\n\nfrom axiestudio import CustomComponent\n\n\nclass AzureOpenAIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"AzureOpenAIEmbeddings\"\n    description: str = \"Embeddings model from Azure OpenAI.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/text_embedding/azureopenai\"\n    beta = False\n\n    API_VERSION_OPTIONS = [\n        \"2022-12-01\",\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n    ]\n\n    def build_config(self):\n        return {\n            \"azure_endpoint\": {\n                \"display_name\": \"Azure Endpoint\",\n                \"required\": True,\n                \"info\": \"Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`\",\n            },\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"options\": self.API_VERSION_OPTIONS,\n                \"value\": self.API_VERSION_OPTIONS[-1],\n                \"advanced\": True,\n            },\n            \"api_key\": {\n                \"display_name\": \"API Key\",\n                \"required\": True,\n                \"password\": True,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        azure_endpoint: str,\n        azure_deployment: str,\n        api_version: str,\n        api_key: str,\n    ) -> Embeddings:\n        try:\n            embeddings = AzureOpenAIEmbeddings(\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=api_key,\n            )\n\n        except Exception as e:\n            raise ValueError(\"Could not connect to AzureOpenAIEmbeddings API.\") from e\n\n        return embeddings\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Embeddings model from Azure OpenAI.",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "AzureOpenAIEmbeddings",
              "documentation": "https://python.langchain.com/docs/integrations/text_embedding/azureopenai",
              "custom_fields": {
                "azure_endpoint": null,
                "azure_deployment": null,
                "api_version": null,
                "api_key": null
              },
              "output_types": [
                "Embeddings"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "AzureOpenAIEmbeddings-QVr0U"
          },
          "selected": false,
          "width": 384,
          "height": 563,
          "positionAbsolute": {
            "x": 80.3313412946735,
            "y": 496.0071672345583
          },
          "dragging": false
        },
        {
          "id": "RecursiveCharacterTextSplitter-3bEup",
          "type": "genericNode",
          "position": {
            "x": 518.9549288612591,
            "y": 111.6706767461828
          },
          "data": {
            "type": "RecursiveCharacterTextSplitter",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The documents to split.",
                  "title_case": true
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The amount of overlap between chunks.",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum length of each chunk.",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.utils.util import build_loader_repr_from_documents\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "separators": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separators",
                  "display_name": "Separators",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Split text into chunks of a specified length.",
              "base_classes": [
                "Document"
              ],
              "display_name": "Recursive Character Text Splitter",
              "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
              "custom_fields": {
                "documents": null,
                "separators": null,
                "chunk_size": null,
                "chunk_overlap": null
              },
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "RecursiveCharacterTextSplitter-3bEup"
          },
          "selected": false,
          "width": 384,
          "height": 587,
          "positionAbsolute": {
            "x": 518.9549288612591,
            "y": 111.6706767461828
          },
          "dragging": false
        },
        {
          "id": "AzureChatOpenAI-xw26o",
          "type": "genericNode",
          "position": {
            "x": 956.6705685312113,
            "y": -35.8237456033944
          },
          "data": {
            "type": "AzureChatOpenAI",
            "node": {
              "template": {
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "api_version": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "2023-12-01-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "2023-03-15-preview",
                    "2023-05-15",
                    "2023-06-01-preview",
                    "2023-07-01-preview",
                    "2023-08-01-preview",
                    "2023-09-01-preview",
                    "2023-12-01-preview"
                  ],
                  "name": "api_version",
                  "display_name": "API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "azure_deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "azure_deployment",
                  "display_name": "Deployment Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "gpt-35-turbo"
                },
                "azure_endpoint": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "azure_endpoint",
                  "display_name": "Azure Endpoint",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`",
                  "title_case": true,
                  "value": "https://api.umgpt.umich.edu/azure-openai-api"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\nfrom axiestudio import CustomComponent\nfrom langchain.llms.base import BaseLanguageModel\nfrom langchain_community.chat_models.azure_openai import AzureChatOpenAI\n\n\nclass AzureChatOpenAIComponent(CustomComponent):\n    display_name: str = \"AzureChatOpenAI\"\n    description: str = \"LLM model from Azure OpenAI.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/llms/azure_openai\"\n    beta = False\n\n    AZURE_OPENAI_MODELS = [\n        \"gpt-35-turbo\",\n        \"gpt-35-turbo-16k\",\n        \"gpt-35-turbo-instruct\",\n        \"gpt-4\",\n        \"gpt-4-32k\",\n        \"gpt-4-vision\",\n    ]\n\n    AZURE_OPENAI_API_VERSIONS = [\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n        \"2023-09-01-preview\",\n        \"2023-12-01-preview\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": self.AZURE_OPENAI_MODELS[0],\n                \"options\": self.AZURE_OPENAI_MODELS,\n                \"required\": True,\n            },\n            \"azure_endpoint\": {\n                \"display_name\": \"Azure Endpoint\",\n                \"required\": True,\n                \"info\": \"Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`\",\n            },\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"options\": self.AZURE_OPENAI_API_VERSIONS,\n                \"value\": self.AZURE_OPENAI_API_VERSIONS[-1],\n                \"required\": True,\n                \"advanced\": True,\n            },\n            \"api_key\": {\"display_name\": \"API Key\", \"required\": True, \"password\": True},\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.7,\n                \"field_type\": \"float\",\n                \"required\": False,\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"value\": 1000,\n                \"required\": False,\n                \"field_type\": \"int\",\n                \"advanced\": True,\n                \"info\": \"Maximum number of tokens to generate.\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        model: str,\n        azure_endpoint: str,\n        azure_deployment: str,\n        api_key: str,\n        api_version: str,\n        temperature: float = 0.7,\n        max_tokens: Optional[int] = 1000,\n    ) -> BaseLanguageModel:\n        try:\n            llm = AzureChatOpenAI(\n                model=model,\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=api_key,\n                temperature=temperature,\n                max_tokens=max_tokens,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to AzureOpenAI API.\") from e\n        return llm\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Maximum number of tokens to generate.",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-35-turbo",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-35-turbo",
                    "gpt-35-turbo-16k",
                    "gpt-35-turbo-instruct",
                    "gpt-4",
                    "gpt-4-32k",
                    "gpt-4-vision"
                  ],
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "LLM model from Azure OpenAI.",
              "base_classes": [
                "BaseLanguageModel"
              ],
              "display_name": "AzureChatOpenAI",
              "documentation": "https://python.langchain.com/docs/integrations/llms/azure_openai",
              "custom_fields": {
                "model": null,
                "azure_endpoint": null,
                "azure_deployment": null,
                "api_key": null,
                "api_version": null,
                "temperature": null,
                "max_tokens": null
              },
              "output_types": [
                "BaseLanguageModel"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "AzureChatOpenAI-xw26o"
          },
          "selected": false,
          "width": 384,
          "height": 739,
          "positionAbsolute": {
            "x": 956.6705685312113,
            "y": -35.8237456033944
          },
          "dragging": false
        },
        {
          "id": "CombineDocsChain-TMSMv",
          "type": "genericNode",
          "position": {
            "x": 1385.1635839857308,
            "y": 281.43109152574203
          },
          "data": {
            "type": "CombineDocsChain",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chain_type": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "stuff",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "stuff",
                    "map_reduce",
                    "map_rerank",
                    "refine"
                  ],
                  "name": "chain_type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "load_qa_chain"
              },
              "description": "Load question answering chain.",
              "base_classes": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "display_name": "CombineDocsChain",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "CombineDocsChain-TMSMv"
          },
          "selected": false,
          "width": 384,
          "height": 333,
          "positionAbsolute": {
            "x": 1385.1635839857308,
            "y": 281.43109152574203
          },
          "dragging": false
        },
        {
          "id": "RetrievalQAWithSourcesChain-d5ogF",
          "type": "genericNode",
          "position": {
            "x": 1867.7481410045461,
            "y": 397.6453317874159
          },
          "data": {
            "type": "RetrievalQAWithSourcesChain",
            "node": {
              "template": {
                "combine_documents_chain": {
                  "type": "BaseCombineDocumentsChain",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "combine_documents_chain",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chain_type": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "stuff",
                    "map_reduce",
                    "map_rerank",
                    "refine"
                  ],
                  "name": "chain_type",
                  "display_name": "Chain Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "stuff"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.chains.qa_with_sources.base import BaseQAWithSourcesChain\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, BaseRetriever\n\n\nclass RetrievalQAWithSourcesChainComponent(CustomComponent):\n    display_name = \"RetrievalQAWithSourcesChain\"\n    description = \"Question-answering with sources over an index.\"\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"chain_type\": {\n                \"display_name\": \"Chain Type\",\n                \"options\": [\"stuff\", \"map_reduce\", \"map_rerank\", \"refine\"],\n            },\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        llm: BaseLanguageModel,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        chain_type: str,\n        memory: Optional[BaseMemory] = None,\n        return_source_documents: Optional[bool] = True,\n    ) -> BaseQAWithSourcesChain:\n        return RetrievalQAWithSourcesChain.from_chain_type(\n            llm=llm,\n            chain_type=chain_type,\n            combine_documents_chain=combine_documents_chain,\n            memory=memory,\n            return_source_documents=return_source_documents,\n            retriever=retriever,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "return_source_documents": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_source_documents",
                  "display_name": "Return Source Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Question-answering with sources over an index.",
              "base_classes": [
                "Chain",
                "BaseQAWithSourcesChain"
              ],
              "display_name": "RetrievalQAWithSourcesChain",
              "documentation": "",
              "custom_fields": {
                "retriever": null,
                "llm": null,
                "combine_documents_chain": null,
                "chain_type": null,
                "memory": null,
                "return_source_documents": null
              },
              "output_types": [
                "BaseQAWithSourcesChain"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "RetrievalQAWithSourcesChain-d5ogF"
          },
          "selected": false,
          "width": 384,
          "height": 639,
          "positionAbsolute": {
            "x": 1867.7481410045461,
            "y": 397.6453317874159
          },
          "dragging": false
        },
        {
          "id": "Chroma-1crLd",
          "type": "genericNode",
          "position": {
            "x": 951.8223491116921,
            "y": 714.5999747722738
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_cors_allow_origins": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_grpc_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_host": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_ssl_enabled": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "axiestudio",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist",
                  "display_name": "Persist",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist_directory": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Chroma",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Chroma",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {
                "collection_name": null,
                "persist": null,
                "embedding": null,
                "chroma_server_ssl_enabled": null,
                "persist_directory": null,
                "documents": null,
                "chroma_server_cors_allow_origins": null,
                "chroma_server_host": null,
                "chroma_server_port": null,
                "chroma_server_grpc_port": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Chroma-1crLd"
          },
          "selected": false,
          "width": 384,
          "height": 555,
          "positionAbsolute": {
            "x": 951.8223491116921,
            "y": 714.5999747722738
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "PyPDFLoader-S3cAI",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-S3cAIœ}",
          "target": "RecursiveCharacterTextSplitter-3bEup",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "RecursiveCharacterTextSplitter-3bEup",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "PyPDFLoader",
              "id": "PyPDFLoader-S3cAI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-PyPDFLoader-S3cAI{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-S3cAIœ}-RecursiveCharacterTextSplitter-3bEup{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "AzureChatOpenAI-xw26o",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}",
          "target": "CombineDocsChain-TMSMv",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-TMSMvœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CombineDocsChain-TMSMv",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel"
              ],
              "dataType": "AzureChatOpenAI",
              "id": "AzureChatOpenAI-xw26o"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-AzureChatOpenAI-xw26o{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}-CombineDocsChain-TMSMv{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-TMSMvœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "CombineDocsChain-TMSMv",
          "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-TMSMvœ}",
          "target": "RetrievalQAWithSourcesChain-d5ogF",
          "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
          "data": {
            "targetHandle": {
              "fieldName": "combine_documents_chain",
              "id": "RetrievalQAWithSourcesChain-d5ogF",
              "inputTypes": null,
              "type": "BaseCombineDocumentsChain"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "dataType": "CombineDocsChain",
              "id": "CombineDocsChain-TMSMv"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CombineDocsChain-TMSMv{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-TMSMvœ}-RetrievalQAWithSourcesChain-d5ogF{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
        },
        {
          "source": "AzureChatOpenAI-xw26o",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}",
          "target": "RetrievalQAWithSourcesChain-d5ogF",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "RetrievalQAWithSourcesChain-d5ogF",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel"
              ],
              "dataType": "AzureChatOpenAI",
              "id": "AzureChatOpenAI-xw26o"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-AzureChatOpenAI-xw26o{œbaseClassesœ:[œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-xw26oœ}-RetrievalQAWithSourcesChain-d5ogF{œfieldNameœ:œllmœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "AzureOpenAIEmbeddings-QVr0U",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-QVr0Uœ}",
          "target": "Chroma-1crLd",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-1crLd",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings"
              ],
              "dataType": "AzureOpenAIEmbeddings",
              "id": "AzureOpenAIEmbeddings-QVr0U"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-AzureOpenAIEmbeddings-QVr0U{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-QVr0Uœ}-Chroma-1crLd{œfieldNameœ:œembeddingœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        },
        {
          "source": "RecursiveCharacterTextSplitter-3bEup",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ}",
          "target": "Chroma-1crLd",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Chroma-1crLd",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "RecursiveCharacterTextSplitter",
              "id": "RecursiveCharacterTextSplitter-3bEup"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-RecursiveCharacterTextSplitter-3bEup{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-3bEupœ}-Chroma-1crLd{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1crLdœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "Chroma-1crLd",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-1crLdœ}",
          "target": "RetrievalQAWithSourcesChain-d5ogF",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "RetrievalQAWithSourcesChain-d5ogF",
              "inputTypes": null,
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Chroma",
              "id": "Chroma-1crLd"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Chroma-1crLd{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-1crLdœ}-RetrievalQAWithSourcesChain-d5ogF{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAWithSourcesChain-d5ogFœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
        }
      ],
      "viewport": {
        "x": 20.775926331035862,
        "y": 48.80345496703853,
        "zoom": 0.5076830504347193
      }
    },
    "date_created": "2024-06-12T14:26:42.197Z",
    "date_updated": "2024-06-12T14:26:42.429Z",
    "status": "Public",
    "sort": null,
    "user_updated": "9516a4c0-f04f-4f25-b060-589f4cdea4e6",
    "user_created": {
      "username": "audjunebug",
      "first_name": "Audrey",
      "last_name": "Smith",
      "id": "9516a4c0-f04f-4f25-b060-589f4cdea4e6"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:53.020Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 24,
    "converter_version": "1.0.0"
  }
}