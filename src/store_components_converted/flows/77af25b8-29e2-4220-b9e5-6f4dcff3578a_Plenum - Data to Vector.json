{
  "id": "77af25b8-29e2-4220-b9e5-6f4dcff3578a",
  "name": "Plenum - Data to Vector",
  "description": "Flow into the Future of Language. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "WelliMD",
    "first_name": "Wellington",
    "last_name": "Duarte",
    "id": "552a677f-9a40-4321-8d78-db19bb8a2734",
    "full_name": "Wellington Duarte"
  },
  "store_url": "https://www.langflow.store/store/component/77af25b8-29e2-4220-b9e5-6f4dcff3578a",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-25T08:59:17.528Z",
    "updated": "2024-09-25T08:59:17.663Z",
    "downloaded": "2025-08-19T17:50:07.141Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Pinecone-N8iiM",
        "type": "genericNode",
        "position": {
          "x": 564.5949740799347,
          "y": -502.4726103726491
        },
        "data": {
          "type": "Pinecone",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "distance_strategy": {
                "trace_as_metadata": true,
                "options": [
                  "Cosine",
                  "Euclidean",
                  "Dot Product"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "distance_strategy",
                "value": "Cosine",
                "display_name": "Distance Strategy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "index_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "index_name",
                "value": "axiestudio",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "namespace": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "namespace",
                "value": "nace",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "Namespace for the index.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 4,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pinecone_api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "pinecone_api_key",
                "value": "",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "text_key": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "text",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "Key in the record to use as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Pinecone Vector Store with search capabilities",
            "icon": "Pinecone",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Pinecone",
            "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "text_key",
              "search_query",
              "ingest_data",
              "embedding",
              "number_of_results"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "Pinecone-N8iiM"
        },
        "selected": false,
        "width": 384,
        "height": 742,
        "positionAbsolute": {
          "x": 564.5949740799347,
          "y": -502.4726103726491
        },
        "dragging": false
      },
      {
        "id": "TextInput-CUkdc",
        "type": "genericNode",
        "position": {
          "x": -106.17417492569274,
          "y": -523.5651862668085
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "TextInput-CUkdc"
        },
        "selected": false,
        "width": 384,
        "height": 298,
        "positionAbsolute": {
          "x": -106.17417492569274,
          "y": -523.5651862668085
        },
        "dragging": false
      },
      {
        "id": "AmazonBedrockEmbeddings-gcZmH",
        "type": "genericNode",
        "position": {
          "x": -116.9420659397324,
          "y": -100.94238280222581
        },
        "data": {
          "type": "AmazonBedrockEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "aws_access_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_access_key",
                "value": "",
                "display_name": "Access Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "aws_secret_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_secret_key",
                "value": "",
                "display_name": "Secret Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "aws_session_token": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_session_token",
                "value": "",
                "display_name": "Session Token",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings import BedrockEmbeddings\r\n\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.field_typing import Embeddings\r\nfrom axiestudio.inputs import SecretStrInput\r\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\r\n\r\n\r\nclass AmazonBedrockEmbeddingsComponent(LCModelComponent):\r\n    display_name: str = \"Amazon Bedrock Embeddings\"\r\n    description: str = \"Generate embeddings using Amazon Bedrock models.\"\r\n    documentation = \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/bedrock\"\r\n    icon = \"Amazon\"\r\n    name = \"AmazonBedrockEmbeddings\"\r\n\r\n    inputs = [\r\n        DropdownInput(\r\n            name=\"model_id\",\r\n            display_name=\"Model Id\",\r\n            options=[\"amazon.titan-embed-text-v1\"],\r\n            value=\"amazon.titan-embed-text-v1\",\r\n        ),\r\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\r\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\r\n        SecretStrInput(name=\"aws_session_token\", display_name=\"Session Token\"),\r\n        MessageTextInput(\r\n            name=\"credentials_profile_name\",\r\n            display_name=\"Credentials Profile Name\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\r\n        MessageTextInput(name=\"endpoint_url\", display_name=\" Endpoint URL\", advanced=True),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\r\n    ]\r\n\r\n    def build_embeddings(self) -> Embeddings:\r\n        if self.aws_access_key:\r\n            import boto3  # type: ignore\r\n\r\n            session = boto3.Session(\r\n                aws_access_key_id=self.aws_access_key,\r\n                aws_secret_access_key=self.aws_secret_key,\r\n                aws_session_token=self.aws_session_token,\r\n            )\r\n        elif self.credentials_profile_name:\r\n            import boto3\r\n\r\n            session = boto3.Session(profile_name=self.credentials_profile_name)\r\n        else:\r\n            import boto3\r\n\r\n            session = boto3.Session()\r\n\r\n        client_params = {}\r\n        if self.endpoint_url:\r\n            client_params[\"endpoint_url\"] = self.endpoint_url\r\n        if self.region_name:\r\n            client_params[\"region_name\"] = self.region_name\r\n\r\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\r\n        output = BedrockEmbeddings(\r\n            credentials_profile_name=self.credentials_profile_name,\r\n            client=boto3_client,\r\n            model_id=self.model_id,\r\n            endpoint_url=self.endpoint_url,\r\n            region_name=self.region_name,\r\n        )  # type: ignore\r\n        return output\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "credentials_profile_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "credentials_profile_name",
                "value": "",
                "display_name": "Credentials Profile Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "endpoint_url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "endpoint_url",
                "value": "",
                "display_name": " Endpoint URL",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "model_id": {
                "trace_as_metadata": true,
                "options": [
                  "amazon.titan-embed-text-v1"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_id",
                "value": "amazon.titan-embed-text-v1",
                "display_name": "Model Id",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "region_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "region_name",
                "value": "eu-central-1",
                "display_name": "Region Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Generate embeddings using Amazon Bedrock models.",
            "icon": "Amazon",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Amazon Bedrock Embeddings",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/bedrock",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "model_id",
              "aws_access_key",
              "aws_secret_key",
              "aws_session_token",
              "credentials_profile_name",
              "region_name",
              "endpoint_url"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "AmazonBedrockEmbeddings-gcZmH"
        },
        "selected": false,
        "width": 384,
        "height": 670,
        "positionAbsolute": {
          "x": -116.9420659397324,
          "y": -100.94238280222581
        },
        "dragging": false
      },
      {
        "id": "GroupNode-rDVMS",
        "type": "genericNode",
        "position": {
          "x": -100.73288657736953,
          "y": -1133.3023129029061
        },
        "data": {
          "type": "GroupNode",
          "node": {
            "display_name": "Load File and Create Chunks",
            "documentation": "",
            "description": "",
            "template": {
              "path_File-K3ohz": {
                "trace_as_metadata": true,
                "file_path": "33e10ae2-0008-446b-a3c1-ae6833e401ff/2024-09-16_16-35-17_output.pdf",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "path",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "proxy": {
                  "id": "File-qr0PC",
                  "field": "path"
                }
              },
              "code_File-K3ohz": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "File-qr0PC",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "silent_errors_File-K3ohz": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "silent_errors",
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "File-qr0PC",
                  "field": "silent_errors"
                }
              },
              "chunk_overlap_CharacterTextSplitter-Zr2KP": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 800,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "CharacterTextSplitter-qmgNd",
                  "field": "chunk_overlap"
                }
              },
              "chunk_size_CharacterTextSplitter-Zr2KP": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 4000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "CharacterTextSplitter-qmgNd",
                  "field": "chunk_size"
                }
              },
              "code_CharacterTextSplitter-Zr2KP": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "CharacterTextSplitter-qmgNd",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "separator_CharacterTextSplitter-Zr2KP": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": " ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "proxy": {
                  "id": "CharacterTextSplitter-qmgNd",
                  "field": "separator"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "File-qr0PC",
                    "type": "genericNode",
                    "position": {
                      "x": -272.1551030828084,
                      "y": 1007.5272782240486
                    },
                    "data": {
                      "type": "File",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "path": {
                            "trace_as_metadata": true,
                            "file_path": "7c0b6414-2cff-431c-9c87-5ee1ceb99236/Faust_Goethe_engl.txt",
                            "fileTypes": [
                              "txt",
                              "md",
                              "mdx",
                              "csv",
                              "json",
                              "yaml",
                              "yml",
                              "xml",
                              "html",
                              "htm",
                              "pdf",
                              "docx",
                              "py",
                              "sh",
                              "sql",
                              "js",
                              "ts",
                              "tsx"
                            ],
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "path",
                            "display_name": "Path",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                            "title_case": false,
                            "type": "file"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "silent_errors": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "silent_errors",
                            "display_name": "Silent Errors",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If true, errors will not raise an exception.",
                            "title_case": false,
                            "type": "bool"
                          }
                        },
                        "description": "A generic file loader.",
                        "icon": "file-text",
                        "base_classes": [
                          "Data"
                        ],
                        "display_name": "File",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "data",
                            "display_name": "Data",
                            "method": "load_file",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "path",
                          "silent_errors"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "File-qr0PC"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 301,
                    "positionAbsolute": {
                      "x": -272.1551030828084,
                      "y": 1007.5272782240486
                    },
                    "dragging": false
                  },
                  {
                    "id": "CharacterTextSplitter-qmgNd",
                    "type": "genericNode",
                    "position": {
                      "x": 296.4739525406844,
                      "y": 921.0144803062999
                    },
                    "data": {
                      "type": "CharacterTextSplitter",
                      "node": {
                        "template": {
                          "_type": "CustomComponent",
                          "inputs": {
                            "type": "Data",
                            "required": true,
                            "placeholder": "",
                            "list": true,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "inputs",
                            "display_name": "Input",
                            "advanced": false,
                            "input_types": [
                              "Document",
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "chunk_overlap": {
                            "type": "int",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": 200,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "chunk_overlap",
                            "display_name": "Chunk Overlap",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "chunk_size": {
                            "type": "int",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": 1000,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "chunk_size",
                            "display_name": "Chunk Size",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "separator": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": " ",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "separator",
                            "display_name": "Separator",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "input_types": [
                              "Text"
                            ]
                          }
                        },
                        "description": "Splitting text that looks at characters.",
                        "base_classes": [
                          "Data"
                        ],
                        "display_name": "CharacterTextSplitter",
                        "documentation": "",
                        "custom_fields": {
                          "inputs": null,
                          "chunk_overlap": null,
                          "chunk_size": null,
                          "separator": null
                        },
                        "output_types": [
                          "Data"
                        ],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "data",
                            "hidden": false,
                            "display_name": "Data",
                            "method": null,
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [],
                        "beta": false,
                        "edited": false
                      },
                      "id": "CharacterTextSplitter-qmgNd"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 529,
                    "positionAbsolute": {
                      "x": 296.4739525406844,
                      "y": 921.0144803062999
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "File-qr0PC",
                    "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-qr0PCœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                    "target": "CharacterTextSplitter-qmgNd",
                    "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-qmgNdœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "inputs",
                        "id": "CharacterTextSplitter-qmgNd",
                        "inputTypes": [
                          "Document",
                          "Data"
                        ],
                        "type": "Data"
                      },
                      "sourceHandle": {
                        "dataType": "File",
                        "id": "File-qr0PC",
                        "name": "data",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-File-qr0PC{œdataTypeœ:œFileœ,œidœ:œFile-qr0PCœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-CharacterTextSplitter-qmgNd{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-qmgNdœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                    "className": "",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Awesome Engelbart",
              "description": "",
              "id": "DWNRV"
            },
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "CharacterTextSplitter-Zr2KP_data",
                "hidden": false,
                "display_name": "Data",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "CharacterTextSplitter-qmgNd",
                  "name": "data",
                  "nodeDisplayName": "CharacterTextSplitter"
                }
              }
            ],
            "official": false
          },
          "id": "GroupNode-rDVMS"
        },
        "selected": true,
        "width": 384,
        "height": 550,
        "positionAbsolute": {
          "x": -100.73288657736953,
          "y": -1133.3023129029061
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "GroupNode-rDVMS",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-rDVMSœ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "Pinecone-N8iiM",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "Pinecone-N8iiM",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "GroupNode-rDVMS",
            "name": "CharacterTextSplitter-Zr2KP_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-GroupNode-rDVMS{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-rDVMSœ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}-Pinecone-N8iiM{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "AmazonBedrockEmbeddings-gcZmH",
        "sourceHandle": "{œdataTypeœ:œAmazonBedrockEmbeddingsœ,œidœ:œAmazonBedrockEmbeddings-gcZmHœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Pinecone-N8iiM",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Pinecone-N8iiM",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AmazonBedrockEmbeddings",
            "id": "AmazonBedrockEmbeddings-gcZmH",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-AmazonBedrockEmbeddings-gcZmH{œdataTypeœ:œAmazonBedrockEmbeddingsœ,œidœ:œAmazonBedrockEmbeddings-gcZmHœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-N8iiM{œfieldNameœ:œembeddingœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 585.1271329290212,
      "y": 592.0223278706299,
      "zoom": 0.4352752816480643
    }
  },
  "metadata": {
    "Pinecone": {
      "count": 1
    },
    "TextInput": {
      "count": 1
    },
    "AmazonBedrockEmbeddings": {
      "count": 1
    },
    "GroupNode": {
      "count": 1
    },
    "total": 4
  },
  "original": {
    "id": "77af25b8-29e2-4220-b9e5-6f4dcff3578a",
    "name": "Plenum - Data to Vector",
    "description": "Flow into the Future of Language.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "6",
    "metadata": {
      "Pinecone": {
        "count": 1
      },
      "TextInput": {
        "count": 1
      },
      "AmazonBedrockEmbeddings": {
        "count": 1
      },
      "GroupNode": {
        "count": 1
      },
      "total": 4
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "Pinecone-N8iiM",
          "type": "genericNode",
          "position": {
            "x": 564.5949740799347,
            "y": -502.4726103726491
          },
          "data": {
            "type": "Pinecone",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding",
                  "value": "",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "ingest_data": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "distance_strategy": {
                  "trace_as_metadata": true,
                  "options": [
                    "Cosine",
                    "Euclidean",
                    "Dot Product"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "distance_strategy",
                  "value": "Cosine",
                  "display_name": "Distance Strategy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "index_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "index_name",
                  "value": "axiestudio",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "namespace": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "namespace",
                  "value": "nace",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Namespace for the index.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 4,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "pinecone_api_key": {
                  "load_from_db": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "pinecone_api_key",
                  "value": "",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "text_key": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "text",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Key in the record to use as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Pinecone Vector Store with search capabilities",
              "icon": "Pinecone",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Pinecone",
              "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "text_key",
                "search_query",
                "ingest_data",
                "embedding",
                "number_of_results"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "Pinecone-N8iiM"
          },
          "selected": false,
          "width": 384,
          "height": 742,
          "positionAbsolute": {
            "x": 564.5949740799347,
            "y": -502.4726103726491
          },
          "dragging": false
        },
        {
          "id": "TextInput-CUkdc",
          "type": "genericNode",
          "position": {
            "x": -106.17417492569274,
            "y": -523.5651862668085
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "TextInput-CUkdc"
          },
          "selected": false,
          "width": 384,
          "height": 298,
          "positionAbsolute": {
            "x": -106.17417492569274,
            "y": -523.5651862668085
          },
          "dragging": false
        },
        {
          "id": "AmazonBedrockEmbeddings-gcZmH",
          "type": "genericNode",
          "position": {
            "x": -116.9420659397324,
            "y": -100.94238280222581
          },
          "data": {
            "type": "AmazonBedrockEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "aws_access_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_access_key",
                  "value": "",
                  "display_name": "Access Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "aws_secret_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_secret_key",
                  "value": "",
                  "display_name": "Secret Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "aws_session_token": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_session_token",
                  "value": "",
                  "display_name": "Session Token",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.embeddings import BedrockEmbeddings\r\n\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.field_typing import Embeddings\r\nfrom axiestudio.inputs import SecretStrInput\r\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\r\n\r\n\r\nclass AmazonBedrockEmbeddingsComponent(LCModelComponent):\r\n    display_name: str = \"Amazon Bedrock Embeddings\"\r\n    description: str = \"Generate embeddings using Amazon Bedrock models.\"\r\n    documentation = \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/bedrock\"\r\n    icon = \"Amazon\"\r\n    name = \"AmazonBedrockEmbeddings\"\r\n\r\n    inputs = [\r\n        DropdownInput(\r\n            name=\"model_id\",\r\n            display_name=\"Model Id\",\r\n            options=[\"amazon.titan-embed-text-v1\"],\r\n            value=\"amazon.titan-embed-text-v1\",\r\n        ),\r\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\r\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\r\n        SecretStrInput(name=\"aws_session_token\", display_name=\"Session Token\"),\r\n        MessageTextInput(\r\n            name=\"credentials_profile_name\",\r\n            display_name=\"Credentials Profile Name\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\r\n        MessageTextInput(name=\"endpoint_url\", display_name=\" Endpoint URL\", advanced=True),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\r\n    ]\r\n\r\n    def build_embeddings(self) -> Embeddings:\r\n        if self.aws_access_key:\r\n            import boto3  # type: ignore\r\n\r\n            session = boto3.Session(\r\n                aws_access_key_id=self.aws_access_key,\r\n                aws_secret_access_key=self.aws_secret_key,\r\n                aws_session_token=self.aws_session_token,\r\n            )\r\n        elif self.credentials_profile_name:\r\n            import boto3\r\n\r\n            session = boto3.Session(profile_name=self.credentials_profile_name)\r\n        else:\r\n            import boto3\r\n\r\n            session = boto3.Session()\r\n\r\n        client_params = {}\r\n        if self.endpoint_url:\r\n            client_params[\"endpoint_url\"] = self.endpoint_url\r\n        if self.region_name:\r\n            client_params[\"region_name\"] = self.region_name\r\n\r\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\r\n        output = BedrockEmbeddings(\r\n            credentials_profile_name=self.credentials_profile_name,\r\n            client=boto3_client,\r\n            model_id=self.model_id,\r\n            endpoint_url=self.endpoint_url,\r\n            region_name=self.region_name,\r\n        )  # type: ignore\r\n        return output\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "credentials_profile_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "credentials_profile_name",
                  "value": "",
                  "display_name": "Credentials Profile Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "endpoint_url": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "endpoint_url",
                  "value": "",
                  "display_name": " Endpoint URL",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "model_id": {
                  "trace_as_metadata": true,
                  "options": [
                    "amazon.titan-embed-text-v1"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_id",
                  "value": "amazon.titan-embed-text-v1",
                  "display_name": "Model Id",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "region_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "region_name",
                  "value": "eu-central-1",
                  "display_name": "Region Name",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Generate embeddings using Amazon Bedrock models.",
              "icon": "Amazon",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "Amazon Bedrock Embeddings",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/bedrock",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "model_id",
                "aws_access_key",
                "aws_secret_key",
                "aws_session_token",
                "credentials_profile_name",
                "region_name",
                "endpoint_url"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "AmazonBedrockEmbeddings-gcZmH"
          },
          "selected": false,
          "width": 384,
          "height": 670,
          "positionAbsolute": {
            "x": -116.9420659397324,
            "y": -100.94238280222581
          },
          "dragging": false
        },
        {
          "id": "GroupNode-rDVMS",
          "type": "genericNode",
          "position": {
            "x": -100.73288657736953,
            "y": -1133.3023129029061
          },
          "data": {
            "type": "GroupNode",
            "node": {
              "display_name": "Load File and Create Chunks",
              "documentation": "",
              "description": "",
              "template": {
                "path_File-K3ohz": {
                  "trace_as_metadata": true,
                  "file_path": "33e10ae2-0008-446b-a3c1-ae6833e401ff/2024-09-16_16-35-17_output.pdf",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "path",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "proxy": {
                    "id": "File-qr0PC",
                    "field": "path"
                  }
                },
                "code_File-K3ohz": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "File-qr0PC",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "silent_errors_File-K3ohz": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "silent_errors",
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "File-qr0PC",
                    "field": "silent_errors"
                  }
                },
                "chunk_overlap_CharacterTextSplitter-Zr2KP": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 800,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-qmgNd",
                    "field": "chunk_overlap"
                  }
                },
                "chunk_size_CharacterTextSplitter-Zr2KP": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 4000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-qmgNd",
                    "field": "chunk_size"
                  }
                },
                "code_CharacterTextSplitter-Zr2KP": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-qmgNd",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "separator_CharacterTextSplitter-Zr2KP": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": " ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "proxy": {
                    "id": "CharacterTextSplitter-qmgNd",
                    "field": "separator"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "File-qr0PC",
                      "type": "genericNode",
                      "position": {
                        "x": -272.1551030828084,
                        "y": 1007.5272782240486
                      },
                      "data": {
                        "type": "File",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "path": {
                              "trace_as_metadata": true,
                              "file_path": "7c0b6414-2cff-431c-9c87-5ee1ceb99236/Faust_Goethe_engl.txt",
                              "fileTypes": [
                                "txt",
                                "md",
                                "mdx",
                                "csv",
                                "json",
                                "yaml",
                                "yml",
                                "xml",
                                "html",
                                "htm",
                                "pdf",
                                "docx",
                                "py",
                                "sh",
                                "sql",
                                "js",
                                "ts",
                                "tsx"
                              ],
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "path",
                              "display_name": "Path",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                              "title_case": false,
                              "type": "file"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "silent_errors": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "silent_errors",
                              "display_name": "Silent Errors",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If true, errors will not raise an exception.",
                              "title_case": false,
                              "type": "bool"
                            }
                          },
                          "description": "A generic file loader.",
                          "icon": "file-text",
                          "base_classes": [
                            "Data"
                          ],
                          "display_name": "File",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "data",
                              "display_name": "Data",
                              "method": "load_file",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "path",
                            "silent_errors"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "File-qr0PC"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 301,
                      "positionAbsolute": {
                        "x": -272.1551030828084,
                        "y": 1007.5272782240486
                      },
                      "dragging": false
                    },
                    {
                      "id": "CharacterTextSplitter-qmgNd",
                      "type": "genericNode",
                      "position": {
                        "x": 296.4739525406844,
                        "y": 921.0144803062999
                      },
                      "data": {
                        "type": "CharacterTextSplitter",
                        "node": {
                          "template": {
                            "_type": "CustomComponent",
                            "inputs": {
                              "type": "Data",
                              "required": true,
                              "placeholder": "",
                              "list": true,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "inputs",
                              "display_name": "Input",
                              "advanced": false,
                              "input_types": [
                                "Document",
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "chunk_overlap": {
                              "type": "int",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": 200,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "chunk_overlap",
                              "display_name": "Chunk Overlap",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "chunk_size": {
                              "type": "int",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": 1000,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "chunk_size",
                              "display_name": "Chunk Size",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "separator": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": " ",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "separator",
                              "display_name": "Separator",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "input_types": [
                                "Text"
                              ]
                            }
                          },
                          "description": "Splitting text that looks at characters.",
                          "base_classes": [
                            "Data"
                          ],
                          "display_name": "CharacterTextSplitter",
                          "documentation": "",
                          "custom_fields": {
                            "inputs": null,
                            "chunk_overlap": null,
                            "chunk_size": null,
                            "separator": null
                          },
                          "output_types": [
                            "Data"
                          ],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "data",
                              "hidden": false,
                              "display_name": "Data",
                              "method": null,
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [],
                          "beta": false,
                          "edited": false
                        },
                        "id": "CharacterTextSplitter-qmgNd"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 529,
                      "positionAbsolute": {
                        "x": 296.4739525406844,
                        "y": 921.0144803062999
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "File-qr0PC",
                      "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-qr0PCœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                      "target": "CharacterTextSplitter-qmgNd",
                      "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-qmgNdœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "inputs",
                          "id": "CharacterTextSplitter-qmgNd",
                          "inputTypes": [
                            "Document",
                            "Data"
                          ],
                          "type": "Data"
                        },
                        "sourceHandle": {
                          "dataType": "File",
                          "id": "File-qr0PC",
                          "name": "data",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-File-qr0PC{œdataTypeœ:œFileœ,œidœ:œFile-qr0PCœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-CharacterTextSplitter-qmgNd{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-qmgNdœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                      "className": "",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Awesome Engelbart",
                "description": "",
                "id": "DWNRV"
              },
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "CharacterTextSplitter-Zr2KP_data",
                  "hidden": false,
                  "display_name": "Data",
                  "method": null,
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "CharacterTextSplitter-qmgNd",
                    "name": "data",
                    "nodeDisplayName": "CharacterTextSplitter"
                  }
                }
              ],
              "official": false
            },
            "id": "GroupNode-rDVMS"
          },
          "selected": true,
          "width": 384,
          "height": 550,
          "positionAbsolute": {
            "x": -100.73288657736953,
            "y": -1133.3023129029061
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "GroupNode-rDVMS",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-rDVMSœ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}",
          "target": "Pinecone-N8iiM",
          "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ingest_data",
              "id": "Pinecone-N8iiM",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "GroupNode-rDVMS",
              "name": "CharacterTextSplitter-Zr2KP_data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-GroupNode-rDVMS{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-rDVMSœ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}-Pinecone-N8iiM{œfieldNameœ:œingest_dataœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "AmazonBedrockEmbeddings-gcZmH",
          "sourceHandle": "{œdataTypeœ:œAmazonBedrockEmbeddingsœ,œidœ:œAmazonBedrockEmbeddings-gcZmHœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Pinecone-N8iiM",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Pinecone-N8iiM",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AmazonBedrockEmbeddings",
              "id": "AmazonBedrockEmbeddings-gcZmH",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-AmazonBedrockEmbeddings-gcZmH{œdataTypeœ:œAmazonBedrockEmbeddingsœ,œidœ:œAmazonBedrockEmbeddings-gcZmHœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-N8iiM{œfieldNameœ:œembeddingœ,œidœ:œPinecone-N8iiMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 585.1271329290212,
        "y": 592.0223278706299,
        "zoom": 0.4352752816480643
      }
    },
    "date_created": "2024-09-25T08:59:17.528Z",
    "date_updated": "2024-09-25T08:59:17.663Z",
    "status": "Public",
    "sort": null,
    "user_updated": "552a677f-9a40-4321-8d78-db19bb8a2734",
    "user_created": {
      "username": "WelliMD",
      "first_name": "Wellington",
      "last_name": "Duarte",
      "id": "552a677f-9a40-4321-8d78-db19bb8a2734"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:00.496Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 52,
    "converter_version": "1.0.0"
  }
}