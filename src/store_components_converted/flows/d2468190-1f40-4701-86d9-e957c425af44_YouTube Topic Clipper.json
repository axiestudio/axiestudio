{
  "id": "d2468190-1f40-4701-86d9-e957c425af44",
  "name": "YouTube Topic Clipper",
  "description": "Promptly Ingenious! (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "novo-projeto-agentes",
    "first_name": "Art",
    "last_name": "na Web",
    "id": "13d5b6d8-63f9-46f8-9e4e-10f0aaa3c425",
    "full_name": "Art na Web"
  },
  "store_url": "https://www.langflow.store/store/component/d2468190-1f40-4701-86d9-e957c425af44",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-07T21:23:03.275Z",
    "updated": "2024-07-07T21:23:03.379Z",
    "downloaded": "2025-08-19T17:50:06.167Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.6",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CustomComponent-P9lFk",
        "type": "genericNode",
        "position": {
          "x": 314.36802091783477,
          "y": 309.26447630706207
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# Import necessary modules and classes\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.custom import CustomComponent\r\nfrom pytube import YouTube\r\nfrom youtube_transcript_api import YouTubeTranscriptApi\r\nimport os\r\n\r\nclass YouTubeDownloader(CustomComponent):\r\n    # Metadata for the component\r\n    display_name = \"YouTube Downloader and Transcript Builder\"\r\n    description = \"Download a YouTube video and gets its transcript\"\r\n    icon = \"üìπ\"\r\n\r\n    def build_config(self):\r\n        # Configuration for the component\r\n        return {\r\n            \"youtube_url\": {\r\n                \"type\": \"text\",\r\n                \"label\": \"YouTube URL\",\r\n                \"placeholder\": \"Enter the URL of the YouTube video\",\r\n            }\r\n        }\r\n\r\n    def build(self, youtube_url: str) -> Record:\r\n        try:\r\n            # Initialize YouTube object with the provided URL\r\n            yt = YouTube(youtube_url)\r\n            # Filter for a specific stream (e.g., 720p mp4)\r\n            video = yt.streams.filter(file_extension='mp4').first()\r\n            if not video:\r\n                raise Exception(\"No suitable video stream found.\")\r\n            \r\n            # Sanitize the video title for safe file naming\r\n            safe_title = yt.title.replace(' ', '_')\r\n            filename = f\"downloaded_video/{safe_title}.mp4\"\r\n            \r\n            # Ensure the 'downloaded_video' directory exists\r\n            os.makedirs('downloaded_video', exist_ok=True)\r\n            \r\n            # Download the video\r\n            video.download(filename=filename)\r\n\r\n            # # Retrieve the video ID and transcript\r\n            video_id = yt.video_id\r\n            transcript = YouTubeTranscriptApi.get_transcript(video_id)\r\n            # print(transcript)\r\n            \r\n             # Save the segment labels to a text file\r\n            os.makedirs('transcripts', exist_ok=True)\r\n            \r\n            with open('transcripts/transcript.json', 'w') as f:\r\n                json.dump(transcript, f, indent=4)\r\n            \r\n            # Return the Record with the video path and transcript\r\n            return Record(video_path=filename, filename=filename, transcript=transcript)\r\n        \r\n        except Exception as e:\r\n            # Handle errors appropriately\r\n            return Record(error=str(e))\r\n\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "youtube_url": {
                "type": "str",
                "required": true,
                "placeholder": "Enter the URL of the YouTube video",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "youtube_url",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Download a YouTube video and gets its transcript",
            "icon": "üìπ",
            "base_classes": [
              "Record"
            ],
            "display_name": "YT Save 2",
            "documentation": "",
            "custom_fields": {
              "youtube_url": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": false,
            "outputs": [
              {
                "types": [
                  "Record"
                ],
                "selected": "Record",
                "name": "Record",
                "display_name": "Record",
                "hidden": false
              }
            ]
          },
          "id": "CustomComponent-P9lFk",
          "description": "Download a YouTube video and gets its transcript",
          "display_name": "YT Save 2"
        },
        "selected": false,
        "width": 384,
        "height": 305,
        "positionAbsolute": {
          "x": 314.36802091783477,
          "y": 309.26447630706207
        },
        "dragging": false
      },
      {
        "id": "TextInput-WN0ll",
        "type": "genericNode",
        "position": {
          "x": -150.51259101424773,
          "y": 191.78305897450616
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"YouTube URL\"\n    description = \"Get YouTube video URL\"\n    icon = \"üìΩÔ∏è\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get YouTube video URL",
            "icon": "üìΩÔ∏è",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "TextInput-WN0ll",
          "description": "Get YouTube video URL",
          "display_name": "Text Input"
        },
        "selected": false,
        "width": 384,
        "height": 305,
        "positionAbsolute": {
          "x": -150.51259101424773,
          "y": 191.78305897450616
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-FwU3n",
        "type": "genericNode",
        "position": {
          "x": 803.2592467659556,
          "y": -96.8281624230363
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "record": {
                "type": "Record",
                "required": true,
                "placeholder": "Provide the Record with the transcript and video path",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "Enter your OpenAI API key",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom typing import List\nfrom langchain_core.pydantic_v1 import BaseModel, Field\nfrom langchain_openai import ChatOpenAI\n\n\nclass TranscriptAnalyzer(CustomComponent):\n    display_name = \"Transcript\"\n    description = \"Analyze the transcript and identify video clips\"\n    icon=\"ü™Ñ\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript and video path\",\n            },\n            \"api_key\": {\n                \"type\": \"text\",\n                \"label\": \"OpenAI API Key\",\n                \"placeholder\": \"Enter your OpenAI API key\",\n            },\n            \"prompt\": {\n                \"type\": \"text\",\n                \"label\": \"Input\",\n                \"placeholder\": \"Prompt\",\n            },\n        }\n\n    def build(self, record: Record, api_key: str, prompt: str) -> Record:\n        # Initialize the LLM\n        llm = ChatOpenAI(\n            model=\"gpt-4o\",\n            temperature=0.7,\n            max_tokens=None,\n            timeout=None,\n            max_retries=2,\n            api_key=api_key\n        )\n        \n        print(prompt)\n\n        # Analyze the transcript\n        prompt = f\"{prompt}\\n\\nHere is the Transcription:\\n{record.transcript}\"\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a Viral Content Producer. You are master at reading youtube transcripts and identifying the most intriguing content.\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ]\n        class Segment(BaseModel):\n            \"\"\"Represents a segment of a video.\"\"\"\n        \n            start_time: float = Field(..., description=\"The start time of the segment in seconds.\")\n            end_time: float = Field(..., description=\"The end time of the segment in seconds.\")\n            yt_title: str = Field(..., description=\"The youtube title to make this segment as a viral sub-topic\")\n            description: str = Field(..., description=\"The detailed youtube description to make this segment viral\")\n            duration: int = Field(..., description=\"The duration of the segment in seconds.\")\n        \n        class VideoTranscript(BaseModel):\n            \"\"\"Represents the transcript of a video with identified viral segments.\"\"\"\n            segments: List[Segment] = Field(..., description=\"A list of viral segments in the video.\")\n\n        structured_llm = llm.with_structured_output(VideoTranscript)\n        ai_msg = structured_llm.invoke(messages)\n        print(ai_msg)\n        parsed_content = ai_msg.dict()[\"segments\"]\n        # Add the segment data to the Record\n        record.segments = parsed_content\n        return record",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "prompt": {
                "type": "str",
                "required": true,
                "placeholder": "Prompt",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Analyze the transcript and identify video clips",
            "icon": "ü™Ñ",
            "base_classes": [
              "Record"
            ],
            "display_name": "Analyze Transcript",
            "documentation": "",
            "custom_fields": {
              "record": null,
              "api_key": null,
              "prompt": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Record"
                ],
                "selected": "Record",
                "name": "Record",
                "display_name": "Record",
                "hidden": false
              }
            ]
          },
          "id": "CustomComponent-FwU3n",
          "description": "Analyze the transcript and identify video clips",
          "display_name": "Analyze Transcript"
        },
        "selected": false,
        "width": 384,
        "height": 447,
        "dragging": false,
        "positionAbsolute": {
          "x": 803.2592467659556,
          "y": -96.8281624230363
        }
      },
      {
        "id": "CustomComponent-CpiB3",
        "type": "genericNode",
        "position": {
          "x": 1308.3148067349262,
          "y": -19.690547675054333
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "record": {
                "type": "Record",
                "required": true,
                "placeholder": "Provide the Record with the transcript, video path, and segments",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import subprocess\nimport json\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nimport os\n\nclass VideoSegmenter(CustomComponent):\n    display_name = \"Video Segmenter and Data Saver\"\n    description = \"Segments the video and saves the segment data to disk\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript, video path, and segments\",\n            }\n        }\n\n    def build(self, record: Record) -> Record:\n        # Ensure the 'generated_clips' directory exists\n        os.makedirs('generated_clips', exist_ok=True)\n\n        # Segment the video and prepare segment labels\n        segment_labels = []\n        video_title = record.video_title\n        for i, segment in enumerate(record.segments):\n            start_time = segment['start_time']\n            end_time = segment['end_time']\n            yt_title = segment['yt_title'] #.replace(' ', '_')  # Replace spaces with underscores\n            description = segment['description']\n            duration = segment['duration']\n\n            output_file = f\"generated_clips/{video_title}_{str(i).zfill(3)}.mp4\"\n            # command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c copy {output_file}\"\n            command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c:v libx264 -c:a aac -strict experimental -b:a 192k {output_file}\"\n            subprocess.call(command, shell=True)\n\n            # Add segment label\n            segment_labels.append(f\"Sub-Topic {i+1}: {yt_title}, Duration: {duration}s\\nDescription: {description}\\n\")\n\n        # Save the segment labels to a text file\n        with open('generated_clips/segment_labels.txt', 'w') as f:\n            for label in segment_labels:\n                f.write(label + \"\\n\")\n\n        # Save the segment data to a JSON file\n        with open('generated_clips/segments.json', 'w') as f:\n            json.dump(record.segments, f, indent=4)\n\n        # Add the filename to the record\n        record.filename = record.video_path.split('/')[-1]\n\n        return record",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Segments the video and saves the segment data to disk",
            "base_classes": [
              "Record"
            ],
            "display_name": "Video Segmenter",
            "documentation": "",
            "custom_fields": {
              "record": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-CpiB3"
        },
        "selected": false,
        "width": 384,
        "height": 243,
        "dragging": false,
        "positionAbsolute": {
          "x": 1308.3148067349262,
          "y": -19.690547675054333
        }
      },
      {
        "id": "ChatInput-RBXHY",
        "type": "genericNode",
        "position": {
          "x": 301.77092572711604,
          "y": -444.90947605195095
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "files": {
                "type": "file",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx",
                  ".jpg",
                  ".jpeg",
                  ".png",
                  ".bmp"
                ],
                "file_path": "",
                "password": false,
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat input as record\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n        build_config[\"return_message\"] = {\n            \"display_name\": \"Return Record\",\n            \"advanced\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = True,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "return_message": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_message",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat input as record",
            "icon": "ChatInput",
            "base_classes": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "files": null,
              "session_id": null,
              "return_message": null
            },
            "output_types": [
              "Message",
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Message",
                  "Text"
                ],
                "selected": "Text",
                "name": "Message | Text",
                "display_name": "Message | Text"
              }
            ]
          },
          "id": "ChatInput-RBXHY",
          "description": "Get chat input as record",
          "display_name": "Chat Input"
        },
        "selected": false,
        "width": 384,
        "height": 309,
        "positionAbsolute": {
          "x": 301.77092572711604,
          "y": -444.90947605195095
        },
        "dragging": false
      },
      {
        "id": "TextInput-e4PqJ",
        "type": "genericNode",
        "position": {
          "x": -1126.1154153174589,
          "y": -678.0200196813735
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "ChromaDB",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "TextInput-e4PqJ",
          "description": "Get text inputs from the Playground.",
          "display_name": "Text Input",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 309,
        "positionAbsolute": {
          "x": -1126.1154153174589,
          "y": -678.0200196813735
        },
        "dragging": false
      },
      {
        "id": "Prompt-t2FJF",
        "type": "genericNode",
        "position": {
          "x": -626.7053525045586,
          "y": -1044.599138745017
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Provided to you is a transcript of a video. \n\nPlease identify maximum two segments that can be extracted about {Topic} from the video based on the transcript. \n\nMake sure each segment is between {Duration} in duration. \n\nMake sure you provide extremely accurate timestamps and respond only in the format provided. \n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "Topic": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Topic",
                "display_name": "Topic",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "Duration": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Duration",
                "display_name": "Duration",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Prompt",
              "Record"
            ],
            "name": "",
            "display_name": "Empty Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "Topic",
                "Duration"
              ]
            },
            "output_types": [
              "Prompt"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null,
            "outputs": [
              {
                "types": [
                  "Prompt"
                ],
                "name": "Prompt",
                "display_name": "Prompt"
              }
            ]
          },
          "id": "Prompt-t2FJF",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Empty Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 525,
        "positionAbsolute": {
          "x": -626.7053525045586,
          "y": -1044.599138745017
        },
        "dragging": false
      },
      {
        "id": "TextOutput-jGT57",
        "type": "genericNode",
        "position": {
          "x": -151.08629016522576,
          "y": -709.6695514019989
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display prompt with dynamic variables\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display prompt with dynamic variables",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Output",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "name": "Text",
                "display_name": "Text"
              }
            ]
          },
          "id": "TextOutput-jGT57",
          "description": "Display prompt with dynamic variables",
          "display_name": "Text Output"
        },
        "selected": true,
        "width": 384,
        "height": 309,
        "positionAbsolute": {
          "x": -151.08629016522576,
          "y": -709.6695514019989
        },
        "dragging": false
      },
      {
        "id": "TextInput-2PNr4",
        "type": "genericNode",
        "position": {
          "x": -1118.8240818268848,
          "y": -1040.849351106749
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "120 to 200 seconds",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Duration\"\n    description = \"Video Clip Duration\"\n    icon = \"‚åö\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Video Clip Duration",
            "icon": "‚åö",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "TextInput-2PNr4",
          "description": "Video Clip Duration",
          "display_name": "Text Input"
        },
        "selected": false,
        "width": 384,
        "height": 305,
        "positionAbsolute": {
          "x": -1118.8240818268848,
          "y": -1040.849351106749
        },
        "dragging": false
      },
      {
        "id": "TextInput-fEpn1",
        "type": "genericNode",
        "position": {
          "x": 307.4852807609278,
          "y": -79.22966665562048
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"OpenAI API Key\"\n    description = \"Get OpenAI API Key\"\n    icon = \"Ô∏èüîë\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get OpenAI API Key",
            "icon": "Ô∏èüîë",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "TextInput-fEpn1",
          "description": "Get OpenAI API Key",
          "display_name": "Text Input"
        },
        "selected": false,
        "width": 384,
        "height": 305,
        "positionAbsolute": {
          "x": 307.4852807609278,
          "y": -79.22966665562048
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "TextInput-WN0ll",
        "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-WN0ll≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
        "target": "CustomComponent-P9lFk",
        "targetHandle": "{≈ìfieldName≈ì:≈ìyoutube_url≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "data": {
          "targetHandle": {
            "fieldName": "youtube_url",
            "id": "CustomComponent-P9lFk",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-WN0ll",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-WN0ll{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-WN0ll≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-CustomComponent-P9lFk{≈ìfieldName≈ì:≈ìyoutube_url≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "className": ""
      },
      {
        "source": "CustomComponent-FwU3n",
        "sourceHandle": "{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}",
        "target": "CustomComponent-CpiB3",
        "targetHandle": "{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-CpiB3≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
        "data": {
          "targetHandle": {
            "fieldName": "record",
            "id": "CustomComponent-CpiB3",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-FwU3n",
            "name": "Record",
            "output_types": [
              "Record"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-FwU3n{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}-CustomComponent-CpiB3{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-CpiB3≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
        "className": ""
      },
      {
        "source": "CustomComponent-P9lFk",
        "sourceHandle": "{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}",
        "target": "CustomComponent-FwU3n",
        "targetHandle": "{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
        "data": {
          "targetHandle": {
            "fieldName": "record",
            "id": "CustomComponent-FwU3n",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-P9lFk",
            "name": "Record",
            "output_types": [
              "Record"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-P9lFk{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}-CustomComponent-FwU3n{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
        "className": ""
      },
      {
        "source": "TextInput-e4PqJ",
        "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-e4PqJ≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
        "target": "Prompt-t2FJF",
        "targetHandle": "{≈ìfieldName≈ì:≈ìTopic≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "data": {
          "targetHandle": {
            "fieldName": "Topic",
            "id": "Prompt-t2FJF",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-e4PqJ",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-e4PqJ{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-e4PqJ≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-Prompt-t2FJF{≈ìfieldName≈ì:≈ìTopic≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "className": ""
      },
      {
        "source": "TextInput-2PNr4",
        "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-2PNr4≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
        "target": "Prompt-t2FJF",
        "targetHandle": "{≈ìfieldName≈ì:≈ìDuration≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "data": {
          "targetHandle": {
            "fieldName": "Duration",
            "id": "Prompt-t2FJF",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-2PNr4",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-2PNr4{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-2PNr4≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-Prompt-t2FJF{≈ìfieldName≈ì:≈ìDuration≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "className": ""
      },
      {
        "source": "TextInput-fEpn1",
        "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-fEpn1≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
        "target": "CustomComponent-FwU3n",
        "targetHandle": "{≈ìfieldName≈ì:≈ìapi_key≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "data": {
          "targetHandle": {
            "fieldName": "api_key",
            "id": "CustomComponent-FwU3n",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-fEpn1",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-fEpn1{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-fEpn1≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-CustomComponent-FwU3n{≈ìfieldName≈ì:≈ìapi_key≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 501.09935695090985,
      "y": 543.4815138546846,
      "zoom": 0.4352752816480643
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 3
    },
    "TextInput": {
      "count": 4
    },
    "ChatInput": {
      "count": 1
    },
    "Prompt": {
      "count": 1
    },
    "TextOutput": {
      "count": 1
    },
    "total": 10
  },
  "original": {
    "id": "d2468190-1f40-4701-86d9-e957c425af44",
    "name": "YouTube Topic Clipper",
    "description": "Promptly Ingenious!",
    "is_component": false,
    "liked_by_count": "5",
    "downloads_count": "43",
    "metadata": {
      "CustomComponent": {
        "count": 3
      },
      "TextInput": {
        "count": 4
      },
      "ChatInput": {
        "count": 1
      },
      "Prompt": {
        "count": 1
      },
      "TextOutput": {
        "count": 1
      },
      "total": 10
    },
    "last_tested_version": "1.0.6",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "CustomComponent-P9lFk",
          "type": "genericNode",
          "position": {
            "x": 314.36802091783477,
            "y": 309.26447630706207
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# Import necessary modules and classes\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.custom import CustomComponent\r\nfrom pytube import YouTube\r\nfrom youtube_transcript_api import YouTubeTranscriptApi\r\nimport os\r\n\r\nclass YouTubeDownloader(CustomComponent):\r\n    # Metadata for the component\r\n    display_name = \"YouTube Downloader and Transcript Builder\"\r\n    description = \"Download a YouTube video and gets its transcript\"\r\n    icon = \"üìπ\"\r\n\r\n    def build_config(self):\r\n        # Configuration for the component\r\n        return {\r\n            \"youtube_url\": {\r\n                \"type\": \"text\",\r\n                \"label\": \"YouTube URL\",\r\n                \"placeholder\": \"Enter the URL of the YouTube video\",\r\n            }\r\n        }\r\n\r\n    def build(self, youtube_url: str) -> Record:\r\n        try:\r\n            # Initialize YouTube object with the provided URL\r\n            yt = YouTube(youtube_url)\r\n            # Filter for a specific stream (e.g., 720p mp4)\r\n            video = yt.streams.filter(file_extension='mp4').first()\r\n            if not video:\r\n                raise Exception(\"No suitable video stream found.\")\r\n            \r\n            # Sanitize the video title for safe file naming\r\n            safe_title = yt.title.replace(' ', '_')\r\n            filename = f\"downloaded_video/{safe_title}.mp4\"\r\n            \r\n            # Ensure the 'downloaded_video' directory exists\r\n            os.makedirs('downloaded_video', exist_ok=True)\r\n            \r\n            # Download the video\r\n            video.download(filename=filename)\r\n\r\n            # # Retrieve the video ID and transcript\r\n            video_id = yt.video_id\r\n            transcript = YouTubeTranscriptApi.get_transcript(video_id)\r\n            # print(transcript)\r\n            \r\n             # Save the segment labels to a text file\r\n            os.makedirs('transcripts', exist_ok=True)\r\n            \r\n            with open('transcripts/transcript.json', 'w') as f:\r\n                json.dump(transcript, f, indent=4)\r\n            \r\n            # Return the Record with the video path and transcript\r\n            return Record(video_path=filename, filename=filename, transcript=transcript)\r\n        \r\n        except Exception as e:\r\n            # Handle errors appropriately\r\n            return Record(error=str(e))\r\n\r\n\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "youtube_url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "Enter the URL of the YouTube video",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "youtube_url",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Download a YouTube video and gets its transcript",
              "icon": "üìπ",
              "base_classes": [
                "Record"
              ],
              "display_name": "YT Save 2",
              "documentation": "",
              "custom_fields": {
                "youtube_url": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": false,
              "outputs": [
                {
                  "types": [
                    "Record"
                  ],
                  "selected": "Record",
                  "name": "Record",
                  "display_name": "Record",
                  "hidden": false
                }
              ]
            },
            "id": "CustomComponent-P9lFk",
            "description": "Download a YouTube video and gets its transcript",
            "display_name": "YT Save 2"
          },
          "selected": false,
          "width": 384,
          "height": 305,
          "positionAbsolute": {
            "x": 314.36802091783477,
            "y": 309.26447630706207
          },
          "dragging": false
        },
        {
          "id": "TextInput-WN0ll",
          "type": "genericNode",
          "position": {
            "x": -150.51259101424773,
            "y": 191.78305897450616
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"YouTube URL\"\n    description = \"Get YouTube video URL\"\n    icon = \"üìΩÔ∏è\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get YouTube video URL",
              "icon": "üìΩÔ∏è",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "TextInput-WN0ll",
            "description": "Get YouTube video URL",
            "display_name": "Text Input"
          },
          "selected": false,
          "width": 384,
          "height": 305,
          "positionAbsolute": {
            "x": -150.51259101424773,
            "y": 191.78305897450616
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-FwU3n",
          "type": "genericNode",
          "position": {
            "x": 803.2592467659556,
            "y": -96.8281624230363
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "record": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "Provide the Record with the transcript and video path",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "Enter your OpenAI API key",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom typing import List\nfrom langchain_core.pydantic_v1 import BaseModel, Field\nfrom langchain_openai import ChatOpenAI\n\n\nclass TranscriptAnalyzer(CustomComponent):\n    display_name = \"Transcript\"\n    description = \"Analyze the transcript and identify video clips\"\n    icon=\"ü™Ñ\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript and video path\",\n            },\n            \"api_key\": {\n                \"type\": \"text\",\n                \"label\": \"OpenAI API Key\",\n                \"placeholder\": \"Enter your OpenAI API key\",\n            },\n            \"prompt\": {\n                \"type\": \"text\",\n                \"label\": \"Input\",\n                \"placeholder\": \"Prompt\",\n            },\n        }\n\n    def build(self, record: Record, api_key: str, prompt: str) -> Record:\n        # Initialize the LLM\n        llm = ChatOpenAI(\n            model=\"gpt-4o\",\n            temperature=0.7,\n            max_tokens=None,\n            timeout=None,\n            max_retries=2,\n            api_key=api_key\n        )\n        \n        print(prompt)\n\n        # Analyze the transcript\n        prompt = f\"{prompt}\\n\\nHere is the Transcription:\\n{record.transcript}\"\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a Viral Content Producer. You are master at reading youtube transcripts and identifying the most intriguing content.\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ]\n        class Segment(BaseModel):\n            \"\"\"Represents a segment of a video.\"\"\"\n        \n            start_time: float = Field(..., description=\"The start time of the segment in seconds.\")\n            end_time: float = Field(..., description=\"The end time of the segment in seconds.\")\n            yt_title: str = Field(..., description=\"The youtube title to make this segment as a viral sub-topic\")\n            description: str = Field(..., description=\"The detailed youtube description to make this segment viral\")\n            duration: int = Field(..., description=\"The duration of the segment in seconds.\")\n        \n        class VideoTranscript(BaseModel):\n            \"\"\"Represents the transcript of a video with identified viral segments.\"\"\"\n            segments: List[Segment] = Field(..., description=\"A list of viral segments in the video.\")\n\n        structured_llm = llm.with_structured_output(VideoTranscript)\n        ai_msg = structured_llm.invoke(messages)\n        print(ai_msg)\n        parsed_content = ai_msg.dict()[\"segments\"]\n        # Add the segment data to the Record\n        record.segments = parsed_content\n        return record",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "prompt": {
                  "type": "str",
                  "required": true,
                  "placeholder": "Prompt",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "prompt",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Analyze the transcript and identify video clips",
              "icon": "ü™Ñ",
              "base_classes": [
                "Record"
              ],
              "display_name": "Analyze Transcript",
              "documentation": "",
              "custom_fields": {
                "record": null,
                "api_key": null,
                "prompt": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Record"
                  ],
                  "selected": "Record",
                  "name": "Record",
                  "display_name": "Record",
                  "hidden": false
                }
              ]
            },
            "id": "CustomComponent-FwU3n",
            "description": "Analyze the transcript and identify video clips",
            "display_name": "Analyze Transcript"
          },
          "selected": false,
          "width": 384,
          "height": 447,
          "dragging": false,
          "positionAbsolute": {
            "x": 803.2592467659556,
            "y": -96.8281624230363
          }
        },
        {
          "id": "CustomComponent-CpiB3",
          "type": "genericNode",
          "position": {
            "x": 1308.3148067349262,
            "y": -19.690547675054333
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "record": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "Provide the Record with the transcript, video path, and segments",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import subprocess\nimport json\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nimport os\n\nclass VideoSegmenter(CustomComponent):\n    display_name = \"Video Segmenter and Data Saver\"\n    description = \"Segments the video and saves the segment data to disk\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript, video path, and segments\",\n            }\n        }\n\n    def build(self, record: Record) -> Record:\n        # Ensure the 'generated_clips' directory exists\n        os.makedirs('generated_clips', exist_ok=True)\n\n        # Segment the video and prepare segment labels\n        segment_labels = []\n        video_title = record.video_title\n        for i, segment in enumerate(record.segments):\n            start_time = segment['start_time']\n            end_time = segment['end_time']\n            yt_title = segment['yt_title'] #.replace(' ', '_')  # Replace spaces with underscores\n            description = segment['description']\n            duration = segment['duration']\n\n            output_file = f\"generated_clips/{video_title}_{str(i).zfill(3)}.mp4\"\n            # command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c copy {output_file}\"\n            command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c:v libx264 -c:a aac -strict experimental -b:a 192k {output_file}\"\n            subprocess.call(command, shell=True)\n\n            # Add segment label\n            segment_labels.append(f\"Sub-Topic {i+1}: {yt_title}, Duration: {duration}s\\nDescription: {description}\\n\")\n\n        # Save the segment labels to a text file\n        with open('generated_clips/segment_labels.txt', 'w') as f:\n            for label in segment_labels:\n                f.write(label + \"\\n\")\n\n        # Save the segment data to a JSON file\n        with open('generated_clips/segments.json', 'w') as f:\n            json.dump(record.segments, f, indent=4)\n\n        # Add the filename to the record\n        record.filename = record.video_path.split('/')[-1]\n\n        return record",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Segments the video and saves the segment data to disk",
              "base_classes": [
                "Record"
              ],
              "display_name": "Video Segmenter",
              "documentation": "",
              "custom_fields": {
                "record": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-CpiB3"
          },
          "selected": false,
          "width": 384,
          "height": 243,
          "dragging": false,
          "positionAbsolute": {
            "x": 1308.3148067349262,
            "y": -19.690547675054333
          }
        },
        {
          "id": "ChatInput-RBXHY",
          "type": "genericNode",
          "position": {
            "x": 301.77092572711604,
            "y": -444.90947605195095
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "files": {
                  "type": "file",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx",
                    ".jpg",
                    ".jpeg",
                    ".png",
                    ".bmp"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat input as record\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n        build_config[\"return_message\"] = {\n            \"display_name\": \"Return Record\",\n            \"advanced\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = True,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "return_message": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_message",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat input as record",
              "icon": "ChatInput",
              "base_classes": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "files": null,
                "session_id": null,
                "return_message": null
              },
              "output_types": [
                "Message",
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Message",
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Message | Text",
                  "display_name": "Message | Text"
                }
              ]
            },
            "id": "ChatInput-RBXHY",
            "description": "Get chat input as record",
            "display_name": "Chat Input"
          },
          "selected": false,
          "width": 384,
          "height": 309,
          "positionAbsolute": {
            "x": 301.77092572711604,
            "y": -444.90947605195095
          },
          "dragging": false
        },
        {
          "id": "TextInput-e4PqJ",
          "type": "genericNode",
          "position": {
            "x": -1126.1154153174589,
            "y": -678.0200196813735
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "ChromaDB",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "TextInput-e4PqJ",
            "description": "Get text inputs from the Playground.",
            "display_name": "Text Input",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 309,
          "positionAbsolute": {
            "x": -1126.1154153174589,
            "y": -678.0200196813735
          },
          "dragging": false
        },
        {
          "id": "Prompt-t2FJF",
          "type": "genericNode",
          "position": {
            "x": -626.7053525045586,
            "y": -1044.599138745017
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Provided to you is a transcript of a video. \n\nPlease identify maximum two segments that can be extracted about {Topic} from the video based on the transcript. \n\nMake sure each segment is between {Duration} in duration. \n\nMake sure you provide extremely accurate timestamps and respond only in the format provided. \n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "Topic": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Topic",
                  "display_name": "Topic",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "Duration": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Duration",
                  "display_name": "Duration",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Prompt",
                "Record"
              ],
              "name": "",
              "display_name": "Empty Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "Topic",
                  "Duration"
                ]
              },
              "output_types": [
                "Prompt"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null,
              "outputs": [
                {
                  "types": [
                    "Prompt"
                  ],
                  "name": "Prompt",
                  "display_name": "Prompt"
                }
              ]
            },
            "id": "Prompt-t2FJF",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Empty Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 525,
          "positionAbsolute": {
            "x": -626.7053525045586,
            "y": -1044.599138745017
          },
          "dragging": false
        },
        {
          "id": "TextOutput-jGT57",
          "type": "genericNode",
          "position": {
            "x": -151.08629016522576,
            "y": -709.6695514019989
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display prompt with dynamic variables\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display prompt with dynamic variables",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Output",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "name": "Text",
                  "display_name": "Text"
                }
              ]
            },
            "id": "TextOutput-jGT57",
            "description": "Display prompt with dynamic variables",
            "display_name": "Text Output"
          },
          "selected": true,
          "width": 384,
          "height": 309,
          "positionAbsolute": {
            "x": -151.08629016522576,
            "y": -709.6695514019989
          },
          "dragging": false
        },
        {
          "id": "TextInput-2PNr4",
          "type": "genericNode",
          "position": {
            "x": -1118.8240818268848,
            "y": -1040.849351106749
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "120 to 200 seconds",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Duration\"\n    description = \"Video Clip Duration\"\n    icon = \"‚åö\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Video Clip Duration",
              "icon": "‚åö",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "TextInput-2PNr4",
            "description": "Video Clip Duration",
            "display_name": "Text Input"
          },
          "selected": false,
          "width": 384,
          "height": 305,
          "positionAbsolute": {
            "x": -1118.8240818268848,
            "y": -1040.849351106749
          },
          "dragging": false
        },
        {
          "id": "TextInput-fEpn1",
          "type": "genericNode",
          "position": {
            "x": 307.4852807609278,
            "y": -79.22966665562048
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"OpenAI API Key\"\n    description = \"Get OpenAI API Key\"\n    icon = \"Ô∏èüîë\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get OpenAI API Key",
              "icon": "Ô∏èüîë",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "TextInput-fEpn1",
            "description": "Get OpenAI API Key",
            "display_name": "Text Input"
          },
          "selected": false,
          "width": 384,
          "height": 305,
          "positionAbsolute": {
            "x": 307.4852807609278,
            "y": -79.22966665562048
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "TextInput-WN0ll",
          "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-WN0ll≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
          "target": "CustomComponent-P9lFk",
          "targetHandle": "{≈ìfieldName≈ì:≈ìyoutube_url≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "data": {
            "targetHandle": {
              "fieldName": "youtube_url",
              "id": "CustomComponent-P9lFk",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-WN0ll",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-WN0ll{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-WN0ll≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-CustomComponent-P9lFk{≈ìfieldName≈ì:≈ìyoutube_url≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "className": ""
        },
        {
          "source": "CustomComponent-FwU3n",
          "sourceHandle": "{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}",
          "target": "CustomComponent-CpiB3",
          "targetHandle": "{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-CpiB3≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
          "data": {
            "targetHandle": {
              "fieldName": "record",
              "id": "CustomComponent-CpiB3",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "dataType": "CustomComponent",
              "id": "CustomComponent-FwU3n",
              "name": "Record",
              "output_types": [
                "Record"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-FwU3n{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}-CustomComponent-CpiB3{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-CpiB3≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
          "className": ""
        },
        {
          "source": "CustomComponent-P9lFk",
          "sourceHandle": "{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}",
          "target": "CustomComponent-FwU3n",
          "targetHandle": "{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
          "data": {
            "targetHandle": {
              "fieldName": "record",
              "id": "CustomComponent-FwU3n",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "dataType": "CustomComponent",
              "id": "CustomComponent-P9lFk",
              "name": "Record",
              "output_types": [
                "Record"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-P9lFk{≈ìdataType≈ì:≈ìCustomComponent≈ì,≈ìid≈ì:≈ìCustomComponent-P9lFk≈ì,≈ìname≈ì:≈ìRecord≈ì,≈ìoutput_types≈ì:[≈ìRecord≈ì]}-CustomComponent-FwU3n{≈ìfieldName≈ì:≈ìrecord≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:null,≈ìtype≈ì:≈ìRecord≈ì}",
          "className": ""
        },
        {
          "source": "TextInput-e4PqJ",
          "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-e4PqJ≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
          "target": "Prompt-t2FJF",
          "targetHandle": "{≈ìfieldName≈ì:≈ìTopic≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "data": {
            "targetHandle": {
              "fieldName": "Topic",
              "id": "Prompt-t2FJF",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-e4PqJ",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-e4PqJ{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-e4PqJ≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-Prompt-t2FJF{≈ìfieldName≈ì:≈ìTopic≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "className": ""
        },
        {
          "source": "TextInput-2PNr4",
          "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-2PNr4≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
          "target": "Prompt-t2FJF",
          "targetHandle": "{≈ìfieldName≈ì:≈ìDuration≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "data": {
            "targetHandle": {
              "fieldName": "Duration",
              "id": "Prompt-t2FJF",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-2PNr4",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-2PNr4{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-2PNr4≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-Prompt-t2FJF{≈ìfieldName≈ì:≈ìDuration≈ì,≈ìid≈ì:≈ìPrompt-t2FJF≈ì,≈ìinputTypes≈ì:[≈ìDocument≈ì,≈ìMessage≈ì,≈ìRecord≈ì,≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "className": ""
        },
        {
          "source": "TextInput-fEpn1",
          "sourceHandle": "{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-fEpn1≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}",
          "target": "CustomComponent-FwU3n",
          "targetHandle": "{≈ìfieldName≈ì:≈ìapi_key≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "data": {
            "targetHandle": {
              "fieldName": "api_key",
              "id": "CustomComponent-FwU3n",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-fEpn1",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-fEpn1{≈ìdataType≈ì:≈ìTextInput≈ì,≈ìid≈ì:≈ìTextInput-fEpn1≈ì,≈ìname≈ì:≈ìText≈ì,≈ìoutput_types≈ì:[≈ìText≈ì]}-CustomComponent-FwU3n{≈ìfieldName≈ì:≈ìapi_key≈ì,≈ìid≈ì:≈ìCustomComponent-FwU3n≈ì,≈ìinputTypes≈ì:[≈ìText≈ì],≈ìtype≈ì:≈ìstr≈ì}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 501.09935695090985,
        "y": 543.4815138546846,
        "zoom": 0.4352752816480643
      }
    },
    "date_created": "2024-07-07T21:23:03.275Z",
    "date_updated": "2024-07-07T21:23:03.379Z",
    "status": "Public",
    "sort": null,
    "user_updated": "13d5b6d8-63f9-46f8-9e4e-10f0aaa3c425",
    "user_created": {
      "username": "novo-projeto-agentes",
      "first_name": "Art",
      "last_name": "na Web",
      "id": "13d5b6d8-63f9-46f8-9e4e-10f0aaa3c425"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.983Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 44,
    "converter_version": "1.0.0"
  }
}