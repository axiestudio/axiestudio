{
  "id": "fb6307a9-78d0-47a1-b39f-0c7eccf25038",
  "name": "Summarization OpenAI Flow",
  "description": "This project Summarizes any File Loader using OpenAI Models. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "ygorbalves",
    "first_name": "Ygor",
    "last_name": "Alves",
    "id": "3785b674-1a4b-42da-9b4d-d028c7191975",
    "full_name": "Ygor Alves"
  },
  "store_url": "https://www.langflow.store/store/component/fb6307a9-78d0-47a1-b39f-0c7eccf25038",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-03-18T02:13:04.393Z",
    "updated": "2024-03-18T02:13:04.496Z",
    "downloaded": "2025-08-19T17:50:05.837Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.7.0a0",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "RecursiveCharacterTextSplitter-t6WqP",
        "type": "genericNode",
        "position": {
          "x": 1040.8008033049796,
          "y": 633.2204634490822
        },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "inputs": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "inputs",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record"
                ],
                "dynamic": false,
                "info": "The texts to split.",
                "title_case": false
              },
              "chunk_overlap": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "title_case": false
              },
              "chunk_size": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_core.documents import Document\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": false
              },
              "separators": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": [
                  "\\n"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": [
              "Record"
            ],
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
            "custom_fields": {
              "inputs": null,
              "separators": null,
              "chunk_size": null,
              "chunk_overlap": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "beta": true
          },
          "id": "RecursiveCharacterTextSplitter-t6WqP"
        },
        "selected": false,
        "width": 384,
        "height": 507,
        "positionAbsolute": {
          "x": 1040.8008033049796,
          "y": 633.2204634490822
        },
        "dragging": false
      },
      {
        "id": "TextOutput-AUSFT",
        "type": "genericNode",
        "position": {
          "x": 2147.8013331968295,
          "y": 774.4922879572049
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Used to pass text output to the next component.\"\n\n    field_config = {\n        \"input_value\": {\"display_name\": \"Value\"},\n    }\n\n    def build(self, input_value: Optional[Text] = \"\") -> Text:\n        return super().build(input_value=input_value)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Used to pass text output to the next component.",
            "base_classes": [
              "object",
              "Text",
              "str"
            ],
            "display_name": "Text Output",
            "documentation": "",
            "custom_fields": {
              "input_value": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "input_value"
            ],
            "beta": false
          },
          "id": "TextOutput-AUSFT"
        },
        "selected": false,
        "width": 384,
        "height": 296,
        "positionAbsolute": {
          "x": 2147.8013331968295,
          "y": 774.4922879572049
        },
        "dragging": false
      },
      {
        "id": "FileLoader-opEzn",
        "type": "genericNode",
        "position": {
          "x": 483.6593629337659,
          "y": 689.8155571967869
        },
        "data": {
          "type": "FileLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".json",
                  ".txt",
                  ".csv",
                  ".jsonl",
                  ".html",
                  ".htm",
                  ".conllu",
                  ".enex",
                  ".msg",
                  ".pdf",
                  ".srt",
                  ".eml",
                  ".md",
                  ".mdx",
                  ".pptx",
                  ".docx"
                ],
                "file_path": "73800cc3-c8e8-4e82-af8b-0caccd32c50b/SightCare.txt",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.constants import LOADERS_INFO\n\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"Generic File Loader\"\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [loader_info[\"name\"] for loader_info in LOADERS_INFO]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in LOADERS_INFO:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"mdx\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".mdx\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, file_path: str, loader: str) -> List[Record]:\n        file_type = file_path.split(\".\")[-1]\n\n        # Map the loader to the correct loader class\n        selected_loader_info = None\n        for loader_info in LOADERS_INFO:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine the loader based on the file type\n            default_loader_info = None\n            for info in LOADERS_INFO:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\")\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Import the loader class\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\") from e\n\n        result = loader_instance(file_path=file_path)\n        docs = result.load()\n        return self.to_records(docs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": false
              },
              "loader": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Automatic",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Automatic",
                  "Airbyte JSON (.jsonl)",
                  "JSON (.json)",
                  "BeautifulSoup4 HTML (.html, .htm)",
                  "CSV (.csv)",
                  "CoNLL-U (.conllu)",
                  "EverNote (.enex)",
                  "Facebook Chat (.json)",
                  "Outlook Message (.msg)",
                  "PyPDF (.pdf)",
                  "Subtitle (.str)",
                  "Text (.txt)",
                  "Unstructured Email (.eml)",
                  "Unstructured HTML (.html, .htm)",
                  "Unstructured Markdown (.md)",
                  "Unstructured PowerPoint (.pptx)",
                  "Unstructured Word (.docx)"
                ],
                "name": "loader",
                "display_name": "Loader",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Generic File Loader",
            "base_classes": [
              "Record"
            ],
            "display_name": "File Loader",
            "documentation": "",
            "custom_fields": {
              "file_path": null,
              "loader": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "FileLoader-opEzn"
        },
        "selected": false,
        "width": 384,
        "height": 378,
        "positionAbsolute": {
          "x": 483.6593629337659,
          "y": 689.8155571967869
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-4DMjb",
        "type": "genericNode",
        "position": {
          "x": 1587.0025961160904,
          "y": 678.2655103744589
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "Docs": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Docs",
                "display_name": "Docs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false
              },
              "OpenAIKey": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "OpenAIKey",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\nfrom langchain_openai import ChatOpenAI\nfrom langchain.chains import MapReduceDocumentsChain, ReduceDocumentsChain\nfrom langchain_text_splitters import CharacterTextSplitter\nfrom langchain.chains import MapReduceDocumentsChain, ReduceDocumentsChain, StuffDocumentsChain, LLMChain\nimport subprocess\nimport sys\n\nclass Component(CustomComponent):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n\n    def build_config(self):\n        return {\"Docs\": {\"display_name\": \"Docs\"},\n                \"OpenAIKey\":{\"password\": True,\n                \"required\": True},\n                \"model_name\": {\n                \"display_name\": \"model_name\",\n                \"advanced\": False,\n                \"required\": True,\n                \"options\": [\n                    \"gpt-3.5-turbo\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4\"\n                ],\n            },\n        }\n\n    def build(self, Docs: Record, OpenAIKey: str, model_name: str) -> Text:\n        \n        def install(package, cmake_args=None):\n            env = os.environ.copy()\n            if cmake_args is not None:\n                env[\"CMAKE_ARGS\"] = cmake_args\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package], env=env)\n            return 1\n        \n        install(\"langchainhub\") \n        from langchain import hub\n        \n        llm = ChatOpenAI(temperature=0,openai_api_key=OpenAIKey,model_name=model_name)\n        map_template = \"\"\"The following is a set of documents\n        {docs}\n        Based on this list of docs, please identify the main themes \n        Helpful Answer:\"\"\"\n        map_prompt = PromptTemplate.from_template(map_template)\n        map_chain = LLMChain(llm=llm, prompt=map_prompt)\n        \n        map_prompt = hub.pull(\"rlm/map-prompt\")\n        map_chain = LLMChain(llm=llm, prompt=map_prompt)\n        \n        # Reduce\n        reduce_template = \"\"\"The following is set of summaries:\n        {docs}\n        Take these and distill it into a final, consolidated summary of the main themes. \n        Helpful Answer:\"\"\"\n        reduce_prompt = PromptTemplate.from_template(reduce_template)\n        \n        # Note we can also get this from the prompt hub, as noted above\n        reduce_prompt = hub.pull(\"rlm/map-prompt\")\n    \n        # Run chain\n        reduce_chain = LLMChain(llm=llm, prompt=reduce_prompt)\n        \n        # Takes a list of documents, combines them into a single string, and passes this to an LLMChain\n        combine_documents_chain = StuffDocumentsChain(\n            llm_chain=reduce_chain, document_variable_name=\"docs\"\n        )\n        \n        # Combines and iteratively reduces the mapped documents\n        reduce_documents_chain = ReduceDocumentsChain(\n            # This is final chain that is called.\n            combine_documents_chain=combine_documents_chain,\n            # If documents exceed context for `StuffDocumentsChain`\n            collapse_documents_chain=combine_documents_chain,\n            # The maximum number of tokens to group documents into.\n            token_max=4000,\n        )\n        \n        \n        # Combining documents by mapping a chain over them, then combining results\n        map_reduce_chain = MapReduceDocumentsChain(\n            # Map chain\n            llm_chain=map_chain,\n            # Reduce chain\n            reduce_documents_chain=reduce_documents_chain,\n            # The variable name in the llm_chain to put the documents in\n            document_variable_name=\"docs\",\n            # Return the results of the map steps in the output\n            return_intermediate_steps=False,\n        )\n        \n        # split_docs = text_splitter.split_documents(Docs)\n        result = map_reduce_chain.run(Docs)\n        return str(result)\n\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-3.5-turbo",
                  "gpt-4-0125-preview",
                  "gpt-4"
                ],
                "name": "model_name",
                "display_name": "model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "gpt-3.5-turbo"
              },
              "_type": "CustomComponent"
            },
            "description": "Use as a template to Summarize any File Loader using OpenAI models.",
            "icon": "custom_components",
            "base_classes": [
              "Text",
              "object",
              "str"
            ],
            "display_name": "Summarization OpenAI",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "Docs": null,
              "OpenAIKey": null,
              "model_name": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-4DMjb",
          "description": "Use as a template to create your own component.",
          "display_name": "Summarization OpenAI"
        },
        "selected": true,
        "width": 384,
        "height": 462,
        "dragging": false,
        "positionAbsolute": {
          "x": 1587.0025961160904,
          "y": 678.2655103744589
        }
      }
    ],
    "edges": [
      {
        "source": "FileLoader-opEzn",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileLoaderœ,œidœ:œFileLoader-opEznœ}",
        "target": "RecursiveCharacterTextSplitter-t6WqP",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "inputs",
            "id": "RecursiveCharacterTextSplitter-t6WqP",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "FileLoader",
            "id": "FileLoader-opEzn"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-FileLoader-opEzn{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileLoaderœ,œidœ:œFileLoader-opEznœ}-RecursiveCharacterTextSplitter-t6WqP{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-t6WqP",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ}",
        "target": "CustomComponent-4DMjb",
        "targetHandle": "{œfieldNameœ:œDocsœ,œidœ:œCustomComponent-4DMjbœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Docs",
            "id": "CustomComponent-4DMjb",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-t6WqP"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-t6WqP{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ}-CustomComponent-4DMjb{œfieldNameœ:œDocsœ,œidœ:œCustomComponent-4DMjbœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "source": "CustomComponent-4DMjb",
        "sourceHandle": "{œbaseClassesœ:[œTextœ,œobjectœ,œstrœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-4DMjbœ}",
        "target": "TextOutput-AUSFT",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-AUSFTœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-AUSFT",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "object",
              "str"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-4DMjb"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-4DMjb{œbaseClassesœ:[œTextœ,œobjectœ,œstrœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-4DMjbœ}-TextOutput-AUSFT{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-AUSFTœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": -298.7317986228503,
      "y": -114.16572909871104,
      "zoom": 0.561749951515827
    }
  },
  "metadata": {
    "RecursiveCharacterTextSplitter": {
      "count": 1
    },
    "TextOutput": {
      "count": 1
    },
    "FileLoader": {
      "count": 1
    },
    "CustomComponent": {
      "count": 1
    },
    "total": 4
  },
  "original": {
    "id": "fb6307a9-78d0-47a1-b39f-0c7eccf25038",
    "name": "Summarization OpenAI Flow",
    "description": "This project Summarizes any File Loader using OpenAI Models.",
    "is_component": false,
    "liked_by_count": "26",
    "downloads_count": "248",
    "metadata": {
      "RecursiveCharacterTextSplitter": {
        "count": 1
      },
      "TextOutput": {
        "count": 1
      },
      "FileLoader": {
        "count": 1
      },
      "CustomComponent": {
        "count": 1
      },
      "total": 4
    },
    "last_tested_version": "0.7.0a0",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "RecursiveCharacterTextSplitter-t6WqP",
          "type": "genericNode",
          "position": {
            "x": 1040.8008033049796,
            "y": 633.2204634490822
          },
          "data": {
            "type": "RecursiveCharacterTextSplitter",
            "node": {
              "template": {
                "inputs": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "inputs",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The texts to split.",
                  "title_case": false
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The amount of overlap between chunks.",
                  "title_case": false
                },
                "chunk_size": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum length of each chunk.",
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_core.documents import Document\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": false
                },
                "separators": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separators",
                  "display_name": "Separators",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": [
                    "\\n"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Split text into chunks of a specified length.",
              "base_classes": [
                "Record"
              ],
              "display_name": "Recursive Character Text Splitter",
              "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
              "custom_fields": {
                "inputs": null,
                "separators": null,
                "chunk_size": null,
                "chunk_overlap": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "beta": true
            },
            "id": "RecursiveCharacterTextSplitter-t6WqP"
          },
          "selected": false,
          "width": 384,
          "height": 507,
          "positionAbsolute": {
            "x": 1040.8008033049796,
            "y": 633.2204634490822
          },
          "dragging": false
        },
        {
          "id": "TextOutput-AUSFT",
          "type": "genericNode",
          "position": {
            "x": 2147.8013331968295,
            "y": 774.4922879572049
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Used to pass text output to the next component.\"\n\n    field_config = {\n        \"input_value\": {\"display_name\": \"Value\"},\n    }\n\n    def build(self, input_value: Optional[Text] = \"\") -> Text:\n        return super().build(input_value=input_value)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Used to pass text output to the next component.",
              "base_classes": [
                "object",
                "Text",
                "str"
              ],
              "display_name": "Text Output",
              "documentation": "",
              "custom_fields": {
                "input_value": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "input_value"
              ],
              "beta": false
            },
            "id": "TextOutput-AUSFT"
          },
          "selected": false,
          "width": 384,
          "height": 296,
          "positionAbsolute": {
            "x": 2147.8013331968295,
            "y": 774.4922879572049
          },
          "dragging": false
        },
        {
          "id": "FileLoader-opEzn",
          "type": "genericNode",
          "position": {
            "x": 483.6593629337659,
            "y": 689.8155571967869
          },
          "data": {
            "type": "FileLoader",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".json",
                    ".txt",
                    ".csv",
                    ".jsonl",
                    ".html",
                    ".htm",
                    ".conllu",
                    ".enex",
                    ".msg",
                    ".pdf",
                    ".srt",
                    ".eml",
                    ".md",
                    ".mdx",
                    ".pptx",
                    ".docx"
                  ],
                  "file_path": "73800cc3-c8e8-4e82-af8b-0caccd32c50b/SightCare.txt",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.constants import LOADERS_INFO\n\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"Generic File Loader\"\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [loader_info[\"name\"] for loader_info in LOADERS_INFO]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in LOADERS_INFO:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"mdx\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".mdx\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, file_path: str, loader: str) -> List[Record]:\n        file_type = file_path.split(\".\")[-1]\n\n        # Map the loader to the correct loader class\n        selected_loader_info = None\n        for loader_info in LOADERS_INFO:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine the loader based on the file type\n            default_loader_info = None\n            for info in LOADERS_INFO:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\")\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Import the loader class\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\") from e\n\n        result = loader_instance(file_path=file_path)\n        docs = result.load()\n        return self.to_records(docs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": false
                },
                "loader": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Automatic",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Automatic",
                    "Airbyte JSON (.jsonl)",
                    "JSON (.json)",
                    "BeautifulSoup4 HTML (.html, .htm)",
                    "CSV (.csv)",
                    "CoNLL-U (.conllu)",
                    "EverNote (.enex)",
                    "Facebook Chat (.json)",
                    "Outlook Message (.msg)",
                    "PyPDF (.pdf)",
                    "Subtitle (.str)",
                    "Text (.txt)",
                    "Unstructured Email (.eml)",
                    "Unstructured HTML (.html, .htm)",
                    "Unstructured Markdown (.md)",
                    "Unstructured PowerPoint (.pptx)",
                    "Unstructured Word (.docx)"
                  ],
                  "name": "loader",
                  "display_name": "Loader",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Generic File Loader",
              "base_classes": [
                "Record"
              ],
              "display_name": "File Loader",
              "documentation": "",
              "custom_fields": {
                "file_path": null,
                "loader": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "FileLoader-opEzn"
          },
          "selected": false,
          "width": 384,
          "height": 378,
          "positionAbsolute": {
            "x": 483.6593629337659,
            "y": 689.8155571967869
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-4DMjb",
          "type": "genericNode",
          "position": {
            "x": 1587.0025961160904,
            "y": 678.2655103744589
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "Docs": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Docs",
                  "display_name": "Docs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false
                },
                "OpenAIKey": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "OpenAIKey",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\nfrom langchain_openai import ChatOpenAI\nfrom langchain.chains import MapReduceDocumentsChain, ReduceDocumentsChain\nfrom langchain_text_splitters import CharacterTextSplitter\nfrom langchain.chains import MapReduceDocumentsChain, ReduceDocumentsChain, StuffDocumentsChain, LLMChain\nimport subprocess\nimport sys\n\nclass Component(CustomComponent):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n\n    def build_config(self):\n        return {\"Docs\": {\"display_name\": \"Docs\"},\n                \"OpenAIKey\":{\"password\": True,\n                \"required\": True},\n                \"model_name\": {\n                \"display_name\": \"model_name\",\n                \"advanced\": False,\n                \"required\": True,\n                \"options\": [\n                    \"gpt-3.5-turbo\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4\"\n                ],\n            },\n        }\n\n    def build(self, Docs: Record, OpenAIKey: str, model_name: str) -> Text:\n        \n        def install(package, cmake_args=None):\n            env = os.environ.copy()\n            if cmake_args is not None:\n                env[\"CMAKE_ARGS\"] = cmake_args\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package], env=env)\n            return 1\n        \n        install(\"langchainhub\") \n        from langchain import hub\n        \n        llm = ChatOpenAI(temperature=0,openai_api_key=OpenAIKey,model_name=model_name)\n        map_template = \"\"\"The following is a set of documents\n        {docs}\n        Based on this list of docs, please identify the main themes \n        Helpful Answer:\"\"\"\n        map_prompt = PromptTemplate.from_template(map_template)\n        map_chain = LLMChain(llm=llm, prompt=map_prompt)\n        \n        map_prompt = hub.pull(\"rlm/map-prompt\")\n        map_chain = LLMChain(llm=llm, prompt=map_prompt)\n        \n        # Reduce\n        reduce_template = \"\"\"The following is set of summaries:\n        {docs}\n        Take these and distill it into a final, consolidated summary of the main themes. \n        Helpful Answer:\"\"\"\n        reduce_prompt = PromptTemplate.from_template(reduce_template)\n        \n        # Note we can also get this from the prompt hub, as noted above\n        reduce_prompt = hub.pull(\"rlm/map-prompt\")\n    \n        # Run chain\n        reduce_chain = LLMChain(llm=llm, prompt=reduce_prompt)\n        \n        # Takes a list of documents, combines them into a single string, and passes this to an LLMChain\n        combine_documents_chain = StuffDocumentsChain(\n            llm_chain=reduce_chain, document_variable_name=\"docs\"\n        )\n        \n        # Combines and iteratively reduces the mapped documents\n        reduce_documents_chain = ReduceDocumentsChain(\n            # This is final chain that is called.\n            combine_documents_chain=combine_documents_chain,\n            # If documents exceed context for `StuffDocumentsChain`\n            collapse_documents_chain=combine_documents_chain,\n            # The maximum number of tokens to group documents into.\n            token_max=4000,\n        )\n        \n        \n        # Combining documents by mapping a chain over them, then combining results\n        map_reduce_chain = MapReduceDocumentsChain(\n            # Map chain\n            llm_chain=map_chain,\n            # Reduce chain\n            reduce_documents_chain=reduce_documents_chain,\n            # The variable name in the llm_chain to put the documents in\n            document_variable_name=\"docs\",\n            # Return the results of the map steps in the output\n            return_intermediate_steps=False,\n        )\n        \n        # split_docs = text_splitter.split_documents(Docs)\n        result = map_reduce_chain.run(Docs)\n        return str(result)\n\n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-3.5-turbo",
                    "gpt-4-0125-preview",
                    "gpt-4"
                  ],
                  "name": "model_name",
                  "display_name": "model_name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "gpt-3.5-turbo"
                },
                "_type": "CustomComponent"
              },
              "description": "Use as a template to Summarize any File Loader using OpenAI models.",
              "icon": "custom_components",
              "base_classes": [
                "Text",
                "object",
                "str"
              ],
              "display_name": "Summarization OpenAI",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "Docs": null,
                "OpenAIKey": null,
                "model_name": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-4DMjb",
            "description": "Use as a template to create your own component.",
            "display_name": "Summarization OpenAI"
          },
          "selected": true,
          "width": 384,
          "height": 462,
          "dragging": false,
          "positionAbsolute": {
            "x": 1587.0025961160904,
            "y": 678.2655103744589
          }
        }
      ],
      "edges": [
        {
          "source": "FileLoader-opEzn",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileLoaderœ,œidœ:œFileLoader-opEznœ}",
          "target": "RecursiveCharacterTextSplitter-t6WqP",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "inputs",
              "id": "RecursiveCharacterTextSplitter-t6WqP",
              "inputTypes": [
                "Document",
                "Record"
              ],
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "FileLoader",
              "id": "FileLoader-opEzn"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-FileLoader-opEzn{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileLoaderœ,œidœ:œFileLoader-opEznœ}-RecursiveCharacterTextSplitter-t6WqP{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
        },
        {
          "source": "RecursiveCharacterTextSplitter-t6WqP",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ}",
          "target": "CustomComponent-4DMjb",
          "targetHandle": "{œfieldNameœ:œDocsœ,œidœ:œCustomComponent-4DMjbœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "Docs",
              "id": "CustomComponent-4DMjb",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "RecursiveCharacterTextSplitter",
              "id": "RecursiveCharacterTextSplitter-t6WqP"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-RecursiveCharacterTextSplitter-t6WqP{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-t6WqPœ}-CustomComponent-4DMjb{œfieldNameœ:œDocsœ,œidœ:œCustomComponent-4DMjbœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "source": "CustomComponent-4DMjb",
          "sourceHandle": "{œbaseClassesœ:[œTextœ,œobjectœ,œstrœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-4DMjbœ}",
          "target": "TextOutput-AUSFT",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-AUSFTœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-AUSFT",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Text",
                "object",
                "str"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-4DMjb"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-4DMjb{œbaseClassesœ:[œTextœ,œobjectœ,œstrœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-4DMjbœ}-TextOutput-AUSFT{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-AUSFTœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": -298.7317986228503,
        "y": -114.16572909871104,
        "zoom": 0.561749951515827
      }
    },
    "date_created": "2024-03-18T02:13:04.393Z",
    "date_updated": "2024-03-18T02:13:04.496Z",
    "status": "Public",
    "sort": null,
    "user_updated": "3785b674-1a4b-42da-9b4d-d028c7191975",
    "user_created": {
      "username": "ygorbalves",
      "first_name": "Ygor",
      "last_name": "Alves",
      "id": "3785b674-1a4b-42da-9b4d-d028c7191975"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:08.416Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 30,
    "converter_version": "1.0.0"
  }
}