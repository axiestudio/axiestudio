{
  "id": "be4089a7-91ba-4031-90d3-7a52c153cffd",
  "name": "pinecone RAG +doc+DB+ embedding +win",
  "description": "pinecone + ollama RAG+ DB +embedding + mistral + windows (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "opensmart",
    "first_name": "Victor",
    "last_name": "Lee",
    "id": "257afb1e-59d0-4be3-9699-9ad5e8e33ee8",
    "full_name": "Victor Lee"
  },
  "store_url": "https://www.langflow.store/store/component/be4089a7-91ba-4031-90d3-7a52c153cffd",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-13T23:56:28.850Z",
    "updated": "2024-06-13T23:56:28.888Z",
    "downloaded": "2025-08-19T17:50:05.719Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a53",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "File-hDDVd",
        "type": "genericNode",
        "position": {
          "x": -1253.7176340375117,
          "y": 1423.4065603469194
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx"
                ],
                "file_path": "6cb8419e-b53f-419d-bbec-6fe2102e839d\\Webex-Teams-Security-Frequently-Asked-Questions.pdf",
                "password": false,
                "name": "path",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "silent_errors",
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Record"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {
              "path": null,
              "silent_errors": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "File-hDDVd"
        },
        "selected": false,
        "width": 384,
        "height": 288,
        "positionAbsolute": {
          "x": -1253.7176340375117,
          "y": 1423.4065603469194
        },
        "dragging": false
      },
      {
        "id": "RecursiveCharacterTextSplitter-uKIJV",
        "type": "genericNode",
        "position": {
          "x": -685.5958262755294,
          "y": 1337.4077471189248
        },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "inputs": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "inputs",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record"
                ],
                "dynamic": false,
                "info": "The texts to split.",
                "load_from_db": false,
                "title_case": false
              },
              "chunk_overlap": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "load_from_db": false,
                "title_case": false
              },
              "chunk_size": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "separators": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": [
              "Record"
            ],
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
            "custom_fields": {
              "inputs": null,
              "separators": null,
              "chunk_size": null,
              "chunk_overlap": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecursiveCharacterTextSplitter-uKIJV"
        },
        "selected": false,
        "width": 384,
        "height": 507,
        "positionAbsolute": {
          "x": -685.5958262755294,
          "y": 1337.4077471189248
        },
        "dragging": false
      },
      {
        "id": "OllamaEmbeddings-hB3bu",
        "type": "genericNode",
        "position": {
          "x": -101.30007655143925,
          "y": 1176.5628658312257
        },
        "data": {
          "type": "OllamaEmbeddings",
          "node": {
            "template": {
              "base_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "http://localhost:11434",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "base_url",
                "display_name": "Ollama Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_community.embeddings import OllamaEmbeddings\nfrom langchain_core.embeddings import Embeddings\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass OllamaEmbeddingsComponent(CustomComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Ollama Model\",\n            },\n            \"base_url\": {\"display_name\": \"Ollama Base URL\"},\n            \"temperature\": {\"display_name\": \"Model Temperature\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        model: str = \"llama2\",\n        base_url: str = \"http://localhost:11434\",\n        temperature: Optional[float] = None,\n    ) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(model=model, base_url=base_url, temperature=temperature)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama API.\") from e\n        return output\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "mistral",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model",
                "display_name": "Ollama Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Model Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false,
                "value": "0.7"
              },
              "_type": "CustomComponent"
            },
            "description": "Generate embeddings using Ollama models.",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Ollama Embeddings",
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
            "custom_fields": {
              "model": null,
              "base_url": null,
              "temperature": null
            },
            "output_types": [
              "Embeddings"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "OllamaEmbeddings-hB3bu"
        },
        "selected": false,
        "width": 384,
        "height": 483,
        "positionAbsolute": {
          "x": -101.30007655143925,
          "y": 1176.5628658312257
        },
        "dragging": false
      },
      {
        "id": "Pinecone-qg66P",
        "type": "genericNode",
        "position": {
          "x": 394.6100178614387,
          "y": 1143.739771908792
        },
        "data": {
          "type": "Pinecone",
          "node": {
            "template": {
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "inputs": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "inputs",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nfrom langchain_core.documents import Document\nfrom langchain_core.retrievers import BaseRetriever\nfrom langchain_core.vectorstores import VectorStore\nfrom langchain_pinecone._utilities import DistanceStrategy\nfrom langchain_pinecone.vectorstores import PineconeVectorStore\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.schema import Record\n\n\nclass PineconeComponent(CustomComponent):\n    display_name = \"Pinecone\"\n    description = \"Construct Pinecone wrapper from raw documents.\"\n    icon = \"Pinecone\"\n    field_order = [\"index_name\", \"namespace\", \"distance_strategy\", \"pinecone_api_key\", \"documents\", \"embedding\"]\n\n    def build_config(self):\n        distance_options = [e.value.title().replace(\"_\", \" \") for e in DistanceStrategy]\n        distance_value = distance_options[0]\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"namespace\": {\"display_name\": \"Namespace\"},\n            \"text_key\": {\"display_name\": \"Text Key\"},\n            \"distance_strategy\": {\n                \"display_name\": \"Distance Strategy\",\n                # get values from enum\n                # and make them title case for display\n                \"options\": distance_options,\n                \"advanced\": True,\n                \"value\": distance_value,\n            },\n            \"pinecone_api_key\": {\n                \"display_name\": \"Pinecone API Key\",\n                \"default\": \"\",\n                \"password\": True,\n                \"required\": True,\n            },\n            \"pool_threads\": {\n                \"display_name\": \"Pool Threads\",\n                \"default\": 1,\n                \"advanced\": True,\n            },\n        }\n\n    def from_existing_index(\n        self,\n        index_name: str,\n        embedding: Embeddings,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        pool_threads: int = 4,\n    ) -> PineconeVectorStore:\n        \"\"\"Load pinecone vectorstore from index name.\"\"\"\n        pinecone_index = PineconeVectorStore.get_pinecone_index(\n            index_name, pool_threads, pinecone_api_key=pinecone_api_key\n        )\n        return PineconeVectorStore(\n            index=pinecone_index,\n            embedding=embedding,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n        )\n\n    def from_documents(\n        self,\n        documents: List[Document],\n        embedding: Embeddings,\n        index_name: str,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        pool_threads: int = 4,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        batch_size: int = 32,\n        upsert_kwargs: Optional[dict] = None,\n        embeddings_chunk_size: int = 1000,\n    ) -> PineconeVectorStore:\n        \"\"\"Create a new pinecone vectorstore from documents.\"\"\"\n        texts = [d.page_content for d in documents]\n        metadatas = [d.metadata for d in documents]\n        pinecone = self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n            pool_threads=pool_threads,\n        )\n        pinecone.add_texts(\n            texts,\n            metadatas=metadatas,\n            ids=None,\n            namespace=namespace,\n            batch_size=batch_size,\n            embedding_chunk_size=embeddings_chunk_size,\n            **(upsert_kwargs or {}),\n        )\n        return pinecone\n\n    def build(\n        self,\n        embedding: Embeddings,\n        distance_strategy: str,\n        inputs: Optional[List[Record]] = None,\n        text_key: str = \"text\",\n        pool_threads: int = 4,\n        index_name: Optional[str] = None,\n        pinecone_api_key: Optional[str] = None,\n        namespace: Optional[str] = \"default\",\n    ) -> Union[VectorStore, BaseRetriever]:\n        # get distance strategy from string\n        distance_strategy = distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n        if not index_name:\n            raise ValueError(\"Index Name is required.\")\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        if documents:\n            return self.from_documents(\n                documents=documents,\n                embedding=embedding,\n                index_name=index_name,\n                pinecone_api_key=pinecone_api_key,\n                text_key=text_key,\n                namespace=namespace,\n                distance_strategy=_distance_strategy,\n                pool_threads=pool_threads,\n            )\n\n        return self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=_distance_strategy,\n            pool_threads=pool_threads,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "distance_strategy": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Euclidean Distance",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Euclidean Distance",
                  "Max Inner Product",
                  "Cosine"
                ],
                "name": "distance_strategy",
                "display_name": "Distance Strategy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "index_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "index_name",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "axiestudio"
              },
              "namespace": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "default",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "namespace",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "pinecone_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "pinecone_api_key",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "pool_threads": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 4,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pool_threads",
                "display_name": "Pool Threads",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "text_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text_key",
                "display_name": "Text Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Construct Pinecone wrapper from raw documents.",
            "icon": "Pinecone",
            "base_classes": [
              "BaseRetriever",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "VectorStore"
            ],
            "display_name": "Pinecone",
            "documentation": "",
            "custom_fields": {
              "embedding": null,
              "distance_strategy": null,
              "inputs": null,
              "text_key": null,
              "pool_threads": null,
              "index_name": null,
              "pinecone_api_key": null,
              "namespace": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "documents",
              "embedding"
            ],
            "beta": false
          },
          "id": "Pinecone-qg66P"
        },
        "selected": true,
        "width": 384,
        "height": 699,
        "positionAbsolute": {
          "x": 394.6100178614387,
          "y": 1143.739771908792
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "File-hDDVd",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-hDDVdœ}",
        "target": "RecursiveCharacterTextSplitter-uKIJV",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "inputs",
            "id": "RecursiveCharacterTextSplitter-uKIJV",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "File",
            "id": "File-hDDVd"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "",
        "id": "reactflow__edge-File-hDDVd{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-hDDVdœ}-RecursiveCharacterTextSplitter-uKIJV{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
      },
      {
        "source": "OllamaEmbeddings-hB3bu",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-hB3buœ}",
        "target": "Pinecone-qg66P",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Pinecone-qg66P",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "OllamaEmbeddings",
            "id": "OllamaEmbeddings-hB3bu"
          }
        },
        "id": "reactflow__edge-OllamaEmbeddings-hB3bu{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-hB3buœ}-Pinecone-qg66P{œfieldNameœ:œembeddingœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-uKIJV",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ}",
        "target": "Pinecone-qg66P",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "inputs",
            "id": "Pinecone-qg66P",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-uKIJV"
          }
        },
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-uKIJV{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ}-Pinecone-qg66P{œfieldNameœ:œinputsœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}"
      }
    ],
    "viewport": {
      "x": 170.13176751558092,
      "y": -583.3029820520352,
      "zoom": 0.5571620528168072
    }
  },
  "metadata": {
    "File": {
      "count": 1
    },
    "RecursiveCharacterTextSplitter": {
      "count": 1
    },
    "OllamaEmbeddings": {
      "count": 1
    },
    "Pinecone": {
      "count": 1
    },
    "total": 4
  },
  "original": {
    "id": "be4089a7-91ba-4031-90d3-7a52c153cffd",
    "name": "pinecone RAG +doc+DB+ embedding +win",
    "description": "pinecone + ollama RAG+ DB +embedding + mistral + windows",
    "is_component": false,
    "liked_by_count": "1",
    "downloads_count": "1",
    "metadata": {
      "File": {
        "count": 1
      },
      "RecursiveCharacterTextSplitter": {
        "count": 1
      },
      "OllamaEmbeddings": {
        "count": 1
      },
      "Pinecone": {
        "count": 1
      },
      "total": 4
    },
    "last_tested_version": "1.0.0a53",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "File-hDDVd",
          "type": "genericNode",
          "position": {
            "x": -1253.7176340375117,
            "y": 1423.4065603469194
          },
          "data": {
            "type": "File",
            "node": {
              "template": {
                "path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx"
                  ],
                  "file_path": "6cb8419e-b53f-419d-bbec-6fe2102e839d\\Webex-Teams-Security-Frequently-Asked-Questions.pdf",
                  "password": false,
                  "name": "path",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "silent_errors",
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "A generic file loader.",
              "icon": "file-text",
              "base_classes": [
                "Record"
              ],
              "display_name": "File",
              "documentation": "",
              "custom_fields": {
                "path": null,
                "silent_errors": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "File-hDDVd"
          },
          "selected": false,
          "width": 384,
          "height": 288,
          "positionAbsolute": {
            "x": -1253.7176340375117,
            "y": 1423.4065603469194
          },
          "dragging": false
        },
        {
          "id": "RecursiveCharacterTextSplitter-uKIJV",
          "type": "genericNode",
          "position": {
            "x": -685.5958262755294,
            "y": 1337.4077471189248
          },
          "data": {
            "type": "RecursiveCharacterTextSplitter",
            "node": {
              "template": {
                "inputs": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "inputs",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The texts to split.",
                  "load_from_db": false,
                  "title_case": false
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The amount of overlap between chunks.",
                  "load_from_db": false,
                  "title_case": false
                },
                "chunk_size": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum length of each chunk.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "separators": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separators",
                  "display_name": "Separators",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Split text into chunks of a specified length.",
              "base_classes": [
                "Record"
              ],
              "display_name": "Recursive Character Text Splitter",
              "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
              "custom_fields": {
                "inputs": null,
                "separators": null,
                "chunk_size": null,
                "chunk_overlap": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecursiveCharacterTextSplitter-uKIJV"
          },
          "selected": false,
          "width": 384,
          "height": 507,
          "positionAbsolute": {
            "x": -685.5958262755294,
            "y": 1337.4077471189248
          },
          "dragging": false
        },
        {
          "id": "OllamaEmbeddings-hB3bu",
          "type": "genericNode",
          "position": {
            "x": -101.30007655143925,
            "y": 1176.5628658312257
          },
          "data": {
            "type": "OllamaEmbeddings",
            "node": {
              "template": {
                "base_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "http://localhost:11434",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "base_url",
                  "display_name": "Ollama Base URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_community.embeddings import OllamaEmbeddings\nfrom langchain_core.embeddings import Embeddings\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass OllamaEmbeddingsComponent(CustomComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Ollama Model\",\n            },\n            \"base_url\": {\"display_name\": \"Ollama Base URL\"},\n            \"temperature\": {\"display_name\": \"Model Temperature\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        model: str = \"llama2\",\n        base_url: str = \"http://localhost:11434\",\n        temperature: Optional[float] = None,\n    ) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(model=model, base_url=base_url, temperature=temperature)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama API.\") from e\n        return output\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "mistral",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model",
                  "display_name": "Ollama Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Model Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false,
                  "value": "0.7"
                },
                "_type": "CustomComponent"
              },
              "description": "Generate embeddings using Ollama models.",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "Ollama Embeddings",
              "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
              "custom_fields": {
                "model": null,
                "base_url": null,
                "temperature": null
              },
              "output_types": [
                "Embeddings"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "OllamaEmbeddings-hB3bu"
          },
          "selected": false,
          "width": 384,
          "height": 483,
          "positionAbsolute": {
            "x": -101.30007655143925,
            "y": 1176.5628658312257
          },
          "dragging": false
        },
        {
          "id": "Pinecone-qg66P",
          "type": "genericNode",
          "position": {
            "x": 394.6100178614387,
            "y": 1143.739771908792
          },
          "data": {
            "type": "Pinecone",
            "node": {
              "template": {
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "inputs": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "inputs",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nfrom langchain_core.documents import Document\nfrom langchain_core.retrievers import BaseRetriever\nfrom langchain_core.vectorstores import VectorStore\nfrom langchain_pinecone._utilities import DistanceStrategy\nfrom langchain_pinecone.vectorstores import PineconeVectorStore\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.schema import Record\n\n\nclass PineconeComponent(CustomComponent):\n    display_name = \"Pinecone\"\n    description = \"Construct Pinecone wrapper from raw documents.\"\n    icon = \"Pinecone\"\n    field_order = [\"index_name\", \"namespace\", \"distance_strategy\", \"pinecone_api_key\", \"documents\", \"embedding\"]\n\n    def build_config(self):\n        distance_options = [e.value.title().replace(\"_\", \" \") for e in DistanceStrategy]\n        distance_value = distance_options[0]\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"namespace\": {\"display_name\": \"Namespace\"},\n            \"text_key\": {\"display_name\": \"Text Key\"},\n            \"distance_strategy\": {\n                \"display_name\": \"Distance Strategy\",\n                # get values from enum\n                # and make them title case for display\n                \"options\": distance_options,\n                \"advanced\": True,\n                \"value\": distance_value,\n            },\n            \"pinecone_api_key\": {\n                \"display_name\": \"Pinecone API Key\",\n                \"default\": \"\",\n                \"password\": True,\n                \"required\": True,\n            },\n            \"pool_threads\": {\n                \"display_name\": \"Pool Threads\",\n                \"default\": 1,\n                \"advanced\": True,\n            },\n        }\n\n    def from_existing_index(\n        self,\n        index_name: str,\n        embedding: Embeddings,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        pool_threads: int = 4,\n    ) -> PineconeVectorStore:\n        \"\"\"Load pinecone vectorstore from index name.\"\"\"\n        pinecone_index = PineconeVectorStore.get_pinecone_index(\n            index_name, pool_threads, pinecone_api_key=pinecone_api_key\n        )\n        return PineconeVectorStore(\n            index=pinecone_index,\n            embedding=embedding,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n        )\n\n    def from_documents(\n        self,\n        documents: List[Document],\n        embedding: Embeddings,\n        index_name: str,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        pool_threads: int = 4,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        batch_size: int = 32,\n        upsert_kwargs: Optional[dict] = None,\n        embeddings_chunk_size: int = 1000,\n    ) -> PineconeVectorStore:\n        \"\"\"Create a new pinecone vectorstore from documents.\"\"\"\n        texts = [d.page_content for d in documents]\n        metadatas = [d.metadata for d in documents]\n        pinecone = self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n            pool_threads=pool_threads,\n        )\n        pinecone.add_texts(\n            texts,\n            metadatas=metadatas,\n            ids=None,\n            namespace=namespace,\n            batch_size=batch_size,\n            embedding_chunk_size=embeddings_chunk_size,\n            **(upsert_kwargs or {}),\n        )\n        return pinecone\n\n    def build(\n        self,\n        embedding: Embeddings,\n        distance_strategy: str,\n        inputs: Optional[List[Record]] = None,\n        text_key: str = \"text\",\n        pool_threads: int = 4,\n        index_name: Optional[str] = None,\n        pinecone_api_key: Optional[str] = None,\n        namespace: Optional[str] = \"default\",\n    ) -> Union[VectorStore, BaseRetriever]:\n        # get distance strategy from string\n        distance_strategy = distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n        if not index_name:\n            raise ValueError(\"Index Name is required.\")\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        if documents:\n            return self.from_documents(\n                documents=documents,\n                embedding=embedding,\n                index_name=index_name,\n                pinecone_api_key=pinecone_api_key,\n                text_key=text_key,\n                namespace=namespace,\n                distance_strategy=_distance_strategy,\n                pool_threads=pool_threads,\n            )\n\n        return self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=_distance_strategy,\n            pool_threads=pool_threads,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "distance_strategy": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Euclidean Distance",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Euclidean Distance",
                    "Max Inner Product",
                    "Cosine"
                  ],
                  "name": "distance_strategy",
                  "display_name": "Distance Strategy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "index_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "index_name",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "axiestudio"
                },
                "namespace": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "default",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "namespace",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "pinecone_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "pinecone_api_key",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "pool_threads": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 4,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pool_threads",
                  "display_name": "Pool Threads",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "text_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text_key",
                  "display_name": "Text Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Construct Pinecone wrapper from raw documents.",
              "icon": "Pinecone",
              "base_classes": [
                "BaseRetriever",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "VectorStore"
              ],
              "display_name": "Pinecone",
              "documentation": "",
              "custom_fields": {
                "embedding": null,
                "distance_strategy": null,
                "inputs": null,
                "text_key": null,
                "pool_threads": null,
                "index_name": null,
                "pinecone_api_key": null,
                "namespace": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "documents",
                "embedding"
              ],
              "beta": false
            },
            "id": "Pinecone-qg66P"
          },
          "selected": true,
          "width": 384,
          "height": 699,
          "positionAbsolute": {
            "x": 394.6100178614387,
            "y": 1143.739771908792
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "File-hDDVd",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-hDDVdœ}",
          "target": "RecursiveCharacterTextSplitter-uKIJV",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "inputs",
              "id": "RecursiveCharacterTextSplitter-uKIJV",
              "inputTypes": [
                "Document",
                "Record"
              ],
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "File",
              "id": "File-hDDVd"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "",
          "id": "reactflow__edge-File-hDDVd{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-hDDVdœ}-RecursiveCharacterTextSplitter-uKIJV{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
        },
        {
          "source": "OllamaEmbeddings-hB3bu",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-hB3buœ}",
          "target": "Pinecone-qg66P",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Pinecone-qg66P",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings"
              ],
              "dataType": "OllamaEmbeddings",
              "id": "OllamaEmbeddings-hB3bu"
            }
          },
          "id": "reactflow__edge-OllamaEmbeddings-hB3bu{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-hB3buœ}-Pinecone-qg66P{œfieldNameœ:œembeddingœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        },
        {
          "source": "RecursiveCharacterTextSplitter-uKIJV",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ}",
          "target": "Pinecone-qg66P",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "inputs",
              "id": "Pinecone-qg66P",
              "inputTypes": [
                "Document",
                "Record"
              ],
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "RecursiveCharacterTextSplitter",
              "id": "RecursiveCharacterTextSplitter-uKIJV"
            }
          },
          "id": "reactflow__edge-RecursiveCharacterTextSplitter-uKIJV{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-uKIJVœ}-Pinecone-qg66P{œfieldNameœ:œinputsœ,œidœ:œPinecone-qg66Pœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}"
        }
      ],
      "viewport": {
        "x": 170.13176751558092,
        "y": -583.3029820520352,
        "zoom": 0.5571620528168072
      }
    },
    "date_created": "2024-06-13T23:56:28.850Z",
    "date_updated": "2024-06-13T23:56:28.888Z",
    "status": "Public",
    "sort": null,
    "user_updated": "257afb1e-59d0-4be3-9699-9ad5e8e33ee8",
    "user_created": {
      "username": "opensmart",
      "first_name": "Victor",
      "last_name": "Lee",
      "id": "257afb1e-59d0-4be3-9699-9ad5e8e33ee8"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:04.829Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 26,
    "converter_version": "1.0.0"
  }
}