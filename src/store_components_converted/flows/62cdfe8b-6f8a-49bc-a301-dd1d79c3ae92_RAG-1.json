{
  "id": "62cdfe8b-6f8a-49bc-a301-dd1d79c3ae92",
  "name": "RAG-1",
  "description": "Create, Curate, Communicate with Langflow. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "alpha23",
    "first_name": "Duane",
    "last_name": "Webber",
    "id": "670a7528-f27b-408d-b340-27bfb37876b0",
    "full_name": "Duane Webber"
  },
  "store_url": "https://www.langflow.store/store/component/62cdfe8b-6f8a-49bc-a301-dd1d79c3ae92",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-27T23:52:42.463Z",
    "updated": "2024-05-27T23:52:42.529Z",
    "downloaded": "2025-08-19T17:50:05.407Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.12",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Data-PXeIa",
        "type": "genericNode",
        "position": {
          "x": 438.4257873275161,
          "y": -12.090638861545472
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_overlap": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Document\n\nclass RecursiveCharacterSplitterWithMetadata(CustomComponent):\n    display_name: str = \"RecursiveCharacterSplitterWithMetadata\"\n    description: str = \"Split documents into chunks with overlapping content.\"\n\n    field_config = {\n        \"documents\": {\n            \"display_name\": \"Documents\",\n            \"field_type\": \"List[Document]\",\n            \"required\": True,\n        },\n        \"chunk_size\": {\n            \"display_name\": \"Chunk Size\",\n            \"field_type\": \"int\",\n            \"required\": True,\n            \"value\": 1000,\n        },\n        \"chunk_overlap\": {\n            \"display_name\": \"Chunk Overlap\",\n            \"field_type\": \"int\",\n            \"required\": True,\n            \"value\": 200,\n        },\n        \"separator\": {\n            \"display_name\": \"Separator\",\n            \"field_type\": \"str\",\n            \"required\": True,\n            \"value\": \"\\n\",\n        }\n    }\n\n    def build_config(self):\n        return self.field_config\n\n    def _get_field_order(self):\n        return [\"documents\", \"chunk_size\", \"chunk_overlap\", \"separator\"]\n\n    def build(self, documents: List[Document], chunk_size: int, chunk_overlap: int, separator: str) -> List[Document]:\n        def split(document: Document) -> List[Document]:\n            chunks = []\n            content = document.page_content\n            metadata = document.metadata\n            start = 0\n            while start < len(content):\n                end = start + chunk_size\n                chunk = content[start:end]\n                if end < len(content):\n                    chunk = chunk.rsplit(separator, 1)[0]\n                chunks.append(Document(page_content=chunk, metadata=metadata))\n                start += chunk_size - chunk_overlap\n            return chunks\n        \n        results = []\n        for document in documents:\n            results.extend(split(document))\n        return results\n\n    def input(self, documents: List[Document]) -> List[Document]:\n        return self.build(\n            documents,\n            self.field_config['chunk_size']['value'],\n            self.field_config['chunk_overlap']['value'],\n            self.field_config['separator']['value']\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "separator": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "\\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Split documents into chunks with overlapping content.",
            "base_classes": [
              "Document"
            ],
            "display_name": "RecursiveCharacterSplitterWithMetadata",
            "documentation": "",
            "custom_fields": {
              "documents": null,
              "chunk_size": null,
              "chunk_overlap": null,
              "separator": null
            },
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-PXeIa",
          "description": "Split documents into chunks with overlapping content.",
          "display_name": "RecursiveCharacterSplitterWithMetadata"
        },
        "selected": false,
        "width": 384,
        "height": 615,
        "dragging": false,
        "positionAbsolute": {
          "x": 438.4257873275161,
          "y": -12.090638861545472
        }
      },
      {
        "id": "Weaviate-fBZhC",
        "type": "genericNode",
        "position": {
          "x": 1077.9785357957157,
          "y": -28.152342259572265
        },
        "data": {
          "type": "Weaviate",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "attributes": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "attributes",
                "display_name": "Attributes",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union, List\n\nimport weaviate  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore, Weaviate\n\nfrom axiestudio import CustomComponent\n\n\nclass WeaviateVectorStore(CustomComponent):\n    display_name: str = \"Weaviate\"\n    description: str = \"Implementation of Vector Store using Weaviate\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/weaviate\"\n    beta = True\n    field_config = {\n        \"url\": {\"display_name\": \"Weaviate URL\", \"value\": \"http://localhost:8080\"},\n        \"api_key\": {\n            \"display_name\": \"API Key\",\n            \"password\": True,\n            \"required\": False,\n        },\n        \"index_name\": {\n            \"display_name\": \"Index name\",\n            \"required\": False,\n        },\n        \"text_key\": {\"display_name\": \"Text Key\", \"required\": False, \"advanced\": True, \"value\": \"text\"},\n        \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n        \"embedding\": {\"display_name\": \"Embedding\"},\n        \"attributes\": {\n            \"display_name\": \"Attributes\",\n            \"required\": False,\n            \"is_list\": True,\n            \"field_type\": \"str\",\n            \"advanced\": True,\n        },\n        \"search_by_text\": {\"display_name\": \"Search By Text\", \"field_type\": \"bool\", \"advanced\": True},\n        \"code\": {\"show\": False},\n    }\n\n    def build(\n        self,\n        url: str,\n        search_by_text: bool = False,\n        api_key: Optional[str] = None,\n        index_name: Optional[str] = None,\n        text_key: str = \"text\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[List[Document]] = None,\n        attributes: Optional[list] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        if api_key:\n            auth_config = weaviate.AuthApiKey(api_key=api_key)\n            client = weaviate.Client(url=url, auth_client_secret=auth_config)\n        else:\n            client = weaviate.Client(url=url)\n\n        def _to_pascal_case(word: str):\n            if word and not word[0].isupper():\n                word = word.capitalize()\n\n            if word.isidentifier():\n                return word\n\n            word = word.replace(\"-\", \" \").replace(\"_\", \" \")\n            parts = word.split()\n            pascal_case_word = \"\".join([part.capitalize() for part in parts])\n\n            return pascal_case_word\n\n        index_name = _to_pascal_case(index_name) if index_name else None\n\n        if documents is not None and embedding is not None:\n            return Weaviate.from_documents(\n                client=client,\n                index_name=index_name,\n                documents=documents,\n                embedding=embedding,\n                by_text=search_by_text,\n            )\n\n        return Weaviate(\n            client=client,\n            index_name=index_name,\n            text_key=text_key,\n            embedding=embedding,\n            by_text=search_by_text,\n            # Ensure attributes are correctly handled and only passed once\n            attributes=attributes if attributes is not None else [],\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "index_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "index_name",
                "display_name": "Index name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "history"
              },
              "search_by_text": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "search_by_text",
                "display_name": "Search By Text",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "text_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text_key",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "http://192.168.1.208:8080",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "url",
                "display_name": "Weaviate URL",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Weaviate",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Weaviate",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/weaviate",
            "custom_fields": {
              "url": null,
              "search_by_text": null,
              "api_key": null,
              "index_name": null,
              "text_key": null,
              "embedding": null,
              "documents": null,
              "attributes": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Weaviate-fBZhC",
          "description": "Implementation of Vector Store using Weaviate",
          "display_name": "Weaviate"
        },
        "selected": false,
        "width": 384,
        "height": 659,
        "positionAbsolute": {
          "x": 1077.9785357957157,
          "y": -28.152342259572265
        },
        "dragging": false
      },
      {
        "id": "OpenAIEmbeddings-Puuy9",
        "type": "genericNode",
        "position": {
          "x": 445.3622358285246,
          "y": 615.9655849959479
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "allowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "allowed_special",
                "display_name": "Allowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "client",
                "display_name": "Client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "default_headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_headers",
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "default_query": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_query",
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "deployment",
                "display_name": "Deployment",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "disallowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [
                  "all"
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "disallowed_special",
                "display_name": "Disallowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding_ctx_length": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 8191,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding_ctx_length",
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 6,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-embedding-ada-002",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_version": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_organization": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_proxy": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "show_progress_bar": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "show_progress_bar",
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "skip_empty": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "skip_empty",
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_enable": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_enable",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_model_name",
                "display_name": "TikToken Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "OpenAI embedding models",
            "base_classes": [
              "OpenAIEmbeddings",
              "Embeddings",
              "Callable"
            ],
            "display_name": "OpenAIEmbeddings",
            "documentation": "",
            "custom_fields": {
              "default_headers": null,
              "default_query": null,
              "allowed_special": null,
              "disallowed_special": null,
              "chunk_size": null,
              "client": null,
              "deployment": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "output_types": [
              "OpenAIEmbeddings",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIEmbeddings-Puuy9"
        },
        "selected": false,
        "width": 384,
        "height": 635,
        "positionAbsolute": {
          "x": 445.3622358285246,
          "y": 615.9655849959479
        },
        "dragging": false
      },
      {
        "id": "ChatOpenAI-Ui5Xf",
        "type": "genericNode",
        "position": {
          "x": 1714.9421034518418,
          "y": -71.68242940052878
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4o\",\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4o\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 256,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": true
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-Ui5Xf",
          "description": "`OpenAI` Chat large language models API.",
          "display_name": "ChatOpenAI"
        },
        "selected": false,
        "width": 384,
        "height": 731,
        "dragging": false,
        "positionAbsolute": {
          "x": 1714.9421034518418,
          "y": -71.68242940052878
        }
      },
      {
        "id": "Data-ZGCPq",
        "type": "genericNode",
        "position": {
          "x": -203.82706169539915,
          "y": 53.800443049486944
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import os\nimport uuid\nimport glob\nfrom typing import Any, Dict, List\nfrom axiestudio import CustomComponent\nfrom langchain.schema import Document\n\nclass DirectoryLoaderWithMetadata(CustomComponent):\n    display_name: str = \"Directory Loader with Metadata\"\n    description: str = \"Load files from a directory and generate metadata including a GUID and file name.\"\n    beta = True\n\n    loaders_info: List[Dict[str, Any]] = [\n        {\n            \"loader\": \"AirbyteJSONLoader\",\n            \"name\": \"Airbyte JSON (.jsonl)\",\n            \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n            \"defaultFor\": [\"jsonl\"],\n            \"allowedTypes\": [\"jsonl\"],\n        },\n        {\n            \"loader\": \"JSONLoader\",\n            \"name\": \"JSON (.json)\",\n            \"import\": \"langchain.document_loaders.JSONLoader\",\n            \"defaultFor\": [\"json\"],\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"BSHTMLLoader\",\n            \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"CSVLoader\",\n            \"name\": \"CSV (.csv)\",\n            \"import\": \"langchain.document_loaders.CSVLoader\",\n            \"defaultFor\": [\"csv\"],\n            \"allowedTypes\": [\"csv\"],\n        },\n        {\n            \"loader\": \"CoNLLULoader\",\n            \"name\": \"CoNLL-U (.conllu)\",\n            \"import\": \"langchain.document_loaders.CoNLLULoader\",\n            \"defaultFor\": [\"conllu\"],\n            \"allowedTypes\": [\"conllu\"],\n        },\n        {\n            \"loader\": \"EverNoteLoader\",\n            \"name\": \"EverNote (.enex)\",\n            \"import\": \"langchain.document_loaders.EverNoteLoader\",\n            \"defaultFor\": [\"enex\"],\n            \"allowedTypes\": [\"enex\"],\n        },\n        {\n            \"loader\": \"FacebookChatLoader\",\n            \"name\": \"Facebook Chat (.json)\",\n            \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"OutlookMessageLoader\",\n            \"name\": \"Outlook Message (.msg)\",\n            \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n            \"defaultFor\": [\"msg\"],\n            \"allowedTypes\": [\"msg\"],\n        },\n        {\n            \"loader\": \"PyPDFLoader\",\n            \"name\": \"PyPDF (.pdf)\",\n            \"import\": \"langchain.document_loaders.PyPDFLoader\",\n            \"defaultFor\": [\"pdf\"],\n            \"allowedTypes\": [\"pdf\"],\n        },\n        {\n            \"loader\": \"STRLoader\",\n            \"name\": \"Subtitle (.srt)\",\n            \"import\": \"langchain.document_loaders.STRLoader\",\n            \"defaultFor\": [\"srt\"],\n            \"allowedTypes\": [\"srt\"],\n        },\n        {\n            \"loader\": \"TextLoader\",\n            \"name\": \"Text (.txt)\",\n            \"import\": \"langchain.document_loaders.TextLoader\",\n            \"defaultFor\": [\"txt\"],\n            \"allowedTypes\": [\"txt\"],\n        },\n        {\n            \"loader\": \"UnstructuredEmailLoader\",\n            \"name\": \"Unstructured Email (.eml)\",\n            \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n            \"defaultFor\": [\"eml\"],\n            \"allowedTypes\": [\"eml\"],\n        },\n        {\n            \"loader\": \"UnstructuredHTMLLoader\",\n            \"name\": \"Unstructured HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n            \"defaultFor\": [\"html\", \"htm\"],\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"UnstructuredMarkdownLoader\",\n            \"name\": \"Unstructured Markdown (.md)\",\n            \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n            \"defaultFor\": [\"md\"],\n            \"allowedTypes\": [\"md\"],\n        },\n        {\n            \"loader\": \"UnstructuredPowerPointLoader\",\n            \"name\": \"Unstructured PowerPoint (.pptx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n            \"defaultFor\": [\"pptx\"],\n            \"allowedTypes\": [\"pptx\"],\n        },\n        {\n            \"loader\": \"UnstructuredWordLoader\",\n            \"name\": \"Unstructured Word (.docx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n            \"defaultFor\": [\"docx\"],\n            \"allowedTypes\": [\"docx\"],\n        },\n    ]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        return {\n            \"directory_path\": {\n                \"display_name\": \"Directory Path\",\n                \"required\": True,\n                \"field_type\": \"str\",  # Update this if specific directory type is supported\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def load_file(self, file_path: str, loader: str) -> List[Document]:\n        file_type = file_path.split(\".\")[-1]\n\n        # Map the selected loader name to its information\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Automatically determine the loader based on the file extension\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n\n        loader_import: str = selected_loader_info[\"import\"]\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Dynamically import the loader\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path).load()\n        return result\n\n    def recursive_glob(self, directory_path, depth):\n        pattern = \"/**/*.*\" if depth > 0 else \"/*.*\"\n        return [file for file in glob.glob(directory_path + pattern, recursive=True) if file.count(os.sep) <= depth + directory_path.count(os.sep)]\n\n    def build(self, directory_path: str, loader: str, depth: int = 3) -> List[Document]:\n        # Check if the directory exists\n        if not os.path.exists(directory_path):\n            raise ValueError(f\"Directory not found: {directory_path}\")\n\n        suffixes = list(set([ext for loader_info in self.loaders_info for ext in loader_info[\"allowedTypes\"]]))\n\n        files = self.recursive_glob(directory_path, depth=depth)\n        files = [f for f in files if f.split('.')[-1] in suffixes]\n\n        docs = []\n        for file in files:\n            doc = self.load_file(file, loader)\n            guid = str(uuid.uuid4())\n            for d in doc:\n                d.metadata['document_id'] = guid\n                d.metadata['file_name'] = file\n            docs.extend(doc)\n        return docs\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "depth": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 3,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "depth",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "directory_path": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "directory_path",
                "display_name": "Directory Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "/home"
              },
              "loader": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Automatic",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Automatic",
                  "Airbyte JSON (.jsonl)",
                  "JSON (.json)",
                  "BeautifulSoup4 HTML (.html, .htm)",
                  "CSV (.csv)",
                  "CoNLL-U (.conllu)",
                  "EverNote (.enex)",
                  "Facebook Chat (.json)",
                  "Outlook Message (.msg)",
                  "PyPDF (.pdf)",
                  "Subtitle (.srt)",
                  "Text (.txt)",
                  "Unstructured Email (.eml)",
                  "Unstructured HTML (.html, .htm)",
                  "Unstructured Markdown (.md)",
                  "Unstructured PowerPoint (.pptx)",
                  "Unstructured Word (.docx)"
                ],
                "name": "loader",
                "display_name": "Loader",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Load files from a directory and generate metadata including a GUID and file name.",
            "base_classes": [
              "Document"
            ],
            "display_name": "Directory Loader with Metadata",
            "documentation": "",
            "custom_fields": {
              "directory_path": null,
              "loader": null,
              "depth": null
            },
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-ZGCPq",
          "description": "Load files from a directory and generate metadata including a GUID and file name.",
          "display_name": "Directory Loader with Metadata"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "dragging": false,
        "positionAbsolute": {
          "x": -203.82706169539915,
          "y": 53.800443049486944
        }
      },
      {
        "id": "Data-bqnMR",
        "type": "genericNode",
        "position": {
          "x": 1714.3541175006362,
          "y": 750.637945618878
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLLM",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "PromptTemplate",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "prompt",
                "display_name": "Prompt Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "vector_store": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vector_store",
                "display_name": "Vector Store",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLLM, PromptTemplate, VectorStore, Chain\nfrom langchain.chains import RetrievalQA\nfrom langchain.vectorstores import Weaviate\n\nclass WeaviateComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build(self, llm: BaseLLM, prompt: PromptTemplate, vector_store: VectorStore) -> Chain:\n        # Ensure the vector_store is an instance of Weaviate\n        if not isinstance(vector_store, Weaviate):\n            raise ValueError(\"vector_store must be an instance of Weaviate\")\n\n        # Create the retriever with the desired number of documents\n        retriever = vector_store.as_retriever(search_kwargs={\"k\": 10})  # Fetch top 10 relevant documents\n\n        # Create the RetrievalQA chain with the retriever and ensure source documents are returned\n        retrieval_qa = RetrievalQA.from_chain_type(\n            llm=llm,\n            chain_type=\"stuff\",  # You can change this as needed\n            retriever=retriever,\n            return_source_documents=True\n        )\n\n        # Define the chat flow class\n        class CustomConversationChain(Chain):\n            @property\n            def input_keys(self):\n                return [\"input\"]\n\n            @property\n            def output_keys(self):\n                return [\"result\", \"source_documents\"]\n\n            def _call(self, inputs):\n                query = inputs[\"input\"]\n                result = retrieval_qa({\"query\": query})\n                source_documents = result.get(\"source_documents\", [])\n                \n                if not source_documents:\n                    return {\n                        \"result\": \"No relevant documents found.\",\n                        \"source_documents\": []\n                    }\n\n                unique_sources = set(doc.metadata.get('file_name', 'Unknown') for doc in source_documents)\n                formatted_sources = \"\\n\".join(f\"- {source}\" for source in unique_sources)\n                response = result.get(\"result\", \"\")\n                \n                return {\n                    \"result\": f\"{response}\\n\\nSources:\\n{formatted_sources}\",\n                    \"source_documents\": source_documents\n                }\n\n        return CustomConversationChain()\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"prompt\": {\"display_name\": \"Prompt Template\"},\n            \"vector_store\": {\"display_name\": \"Vector Store\"},\n        }",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "base_classes": [
              "Chain"
            ],
            "display_name": "WeaviateComponent",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "llm": null,
              "prompt": null,
              "vector_store": null
            },
            "output_types": [
              "Chain"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-bqnMR",
          "display_name": "WeaviateComponent"
        },
        "selected": true,
        "width": 384,
        "height": 405,
        "dragging": false,
        "positionAbsolute": {
          "x": 1714.3541175006362,
          "y": 750.637945618878
        }
      },
      {
        "id": "Data-GCGsb",
        "type": "genericNode",
        "position": {
          "x": 1116.3241794870967,
          "y": 849.4366679869869
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import PromptTemplate\n\nclass CustomPromptTemplateComponent(CustomComponent):\n    display_name: str = \"CustomPromptTemplate\"\n    description: str = \"Prompt template including metadata in the response.\"\n\n    def build(self) -> PromptTemplate:\n        return PromptTemplate(\n            input_variables=[\"history\"],\n            template=\"\"\"\n            The following is a conversation with an AI assistant. The assistant is helpful and knowledgeable.\n        \n            History:\n            {history}\n        \n            User: {input}\n            AI:\n            \"\"\"\n        )\n\n    def build_config(self):\n        return {}\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Prompt template including metadata in the response.",
            "base_classes": [
              "PromptTemplate",
              "StringPromptTemplate",
              "BasePromptTemplate"
            ],
            "display_name": "CustomPromptTemplate",
            "documentation": "",
            "custom_fields": {},
            "output_types": [
              "PromptTemplate"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-GCGsb",
          "description": "Prompt template including metadata in the response.",
          "display_name": "CustomPromptTemplate"
        },
        "selected": false,
        "width": 384,
        "height": 281,
        "dragging": false,
        "positionAbsolute": {
          "x": 1116.3241794870967,
          "y": 849.4366679869869
        }
      }
    ],
    "edges": [
      {
        "source": "OpenAIEmbeddings-Puuy9",
        "sourceHandle": "{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-Puuy9œ}",
        "target": "Weaviate-fBZhC",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Weaviate-fBZhC",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "OpenAIEmbeddings",
              "Embeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-Puuy9"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-Puuy9{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-Puuy9œ}-Weaviate-fBZhC{œfieldNameœ:œembeddingœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "Data-ZGCPq",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-ZGCPqœ}",
        "target": "Data-PXeIa",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œData-PXeIaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Data-PXeIa",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "Data",
            "id": "Data-ZGCPq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-ZGCPq{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-ZGCPqœ}-Data-PXeIa{œfieldNameœ:œdocumentsœ,œidœ:œData-PXeIaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Data-PXeIa",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-PXeIaœ}",
        "target": "Weaviate-fBZhC",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Weaviate-fBZhC",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "Data",
            "id": "Data-PXeIa"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-PXeIa{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-PXeIaœ}-Weaviate-fBZhC{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "ChatOpenAI-Ui5Xf",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Ui5Xfœ}",
        "target": "Data-bqnMR",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œBaseLLMœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "Data-bqnMR",
            "inputTypes": null,
            "type": "BaseLLM"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-Ui5Xf"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-Ui5Xf{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Ui5Xfœ}-Data-bqnMR{œfieldNameœ:œllmœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œBaseLLMœ}"
      },
      {
        "source": "Weaviate-fBZhC",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œWeaviateœ,œidœ:œWeaviate-fBZhCœ}",
        "target": "Data-bqnMR",
        "targetHandle": "{œfieldNameœ:œvector_storeœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vector_store",
            "id": "Data-bqnMR",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Weaviate",
            "id": "Weaviate-fBZhC"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Weaviate-fBZhC{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œWeaviateœ,œidœ:œWeaviate-fBZhCœ}-Data-bqnMR{œfieldNameœ:œvector_storeœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
      },
      {
        "source": "Data-GCGsb",
        "sourceHandle": "{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œDataœ,œidœ:œData-GCGsbœ}",
        "target": "Data-bqnMR",
        "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "prompt",
            "id": "Data-bqnMR",
            "inputTypes": null,
            "type": "PromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "PromptTemplate",
              "StringPromptTemplate",
              "BasePromptTemplate"
            ],
            "dataType": "Data",
            "id": "Data-GCGsb"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-GCGsb{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œDataœ,œidœ:œData-GCGsbœ}-Data-bqnMR{œfieldNameœ:œpromptœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}"
      }
    ],
    "viewport": {
      "x": -1035.0626334997278,
      "y": -458.04638204948833,
      "zoom": 0.7364946217448269
    }
  },
  "metadata": {
    "Data": {
      "count": 4
    },
    "Weaviate": {
      "count": 1
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "ChatOpenAI": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "62cdfe8b-6f8a-49bc-a301-dd1d79c3ae92",
    "name": "RAG-1",
    "description": "Create, Curate, Communicate with Langflow.",
    "is_component": false,
    "liked_by_count": "3",
    "downloads_count": "33",
    "metadata": {
      "Data": {
        "count": 4
      },
      "Weaviate": {
        "count": 1
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "ChatOpenAI": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "0.6.12",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "Data-PXeIa",
          "type": "genericNode",
          "position": {
            "x": 438.4257873275161,
            "y": -12.090638861545472
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Document\n\nclass RecursiveCharacterSplitterWithMetadata(CustomComponent):\n    display_name: str = \"RecursiveCharacterSplitterWithMetadata\"\n    description: str = \"Split documents into chunks with overlapping content.\"\n\n    field_config = {\n        \"documents\": {\n            \"display_name\": \"Documents\",\n            \"field_type\": \"List[Document]\",\n            \"required\": True,\n        },\n        \"chunk_size\": {\n            \"display_name\": \"Chunk Size\",\n            \"field_type\": \"int\",\n            \"required\": True,\n            \"value\": 1000,\n        },\n        \"chunk_overlap\": {\n            \"display_name\": \"Chunk Overlap\",\n            \"field_type\": \"int\",\n            \"required\": True,\n            \"value\": 200,\n        },\n        \"separator\": {\n            \"display_name\": \"Separator\",\n            \"field_type\": \"str\",\n            \"required\": True,\n            \"value\": \"\\n\",\n        }\n    }\n\n    def build_config(self):\n        return self.field_config\n\n    def _get_field_order(self):\n        return [\"documents\", \"chunk_size\", \"chunk_overlap\", \"separator\"]\n\n    def build(self, documents: List[Document], chunk_size: int, chunk_overlap: int, separator: str) -> List[Document]:\n        def split(document: Document) -> List[Document]:\n            chunks = []\n            content = document.page_content\n            metadata = document.metadata\n            start = 0\n            while start < len(content):\n                end = start + chunk_size\n                chunk = content[start:end]\n                if end < len(content):\n                    chunk = chunk.rsplit(separator, 1)[0]\n                chunks.append(Document(page_content=chunk, metadata=metadata))\n                start += chunk_size - chunk_overlap\n            return chunks\n        \n        results = []\n        for document in documents:\n            results.extend(split(document))\n        return results\n\n    def input(self, documents: List[Document]) -> List[Document]:\n        return self.build(\n            documents,\n            self.field_config['chunk_size']['value'],\n            self.field_config['chunk_overlap']['value'],\n            self.field_config['separator']['value']\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "separator": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "\\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Split documents into chunks with overlapping content.",
              "base_classes": [
                "Document"
              ],
              "display_name": "RecursiveCharacterSplitterWithMetadata",
              "documentation": "",
              "custom_fields": {
                "documents": null,
                "chunk_size": null,
                "chunk_overlap": null,
                "separator": null
              },
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-PXeIa",
            "description": "Split documents into chunks with overlapping content.",
            "display_name": "RecursiveCharacterSplitterWithMetadata"
          },
          "selected": false,
          "width": 384,
          "height": 615,
          "dragging": false,
          "positionAbsolute": {
            "x": 438.4257873275161,
            "y": -12.090638861545472
          }
        },
        {
          "id": "Weaviate-fBZhC",
          "type": "genericNode",
          "position": {
            "x": 1077.9785357957157,
            "y": -28.152342259572265
          },
          "data": {
            "type": "Weaviate",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "attributes": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "attributes",
                  "display_name": "Attributes",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union, List\n\nimport weaviate  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore, Weaviate\n\nfrom axiestudio import CustomComponent\n\n\nclass WeaviateVectorStore(CustomComponent):\n    display_name: str = \"Weaviate\"\n    description: str = \"Implementation of Vector Store using Weaviate\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/weaviate\"\n    beta = True\n    field_config = {\n        \"url\": {\"display_name\": \"Weaviate URL\", \"value\": \"http://localhost:8080\"},\n        \"api_key\": {\n            \"display_name\": \"API Key\",\n            \"password\": True,\n            \"required\": False,\n        },\n        \"index_name\": {\n            \"display_name\": \"Index name\",\n            \"required\": False,\n        },\n        \"text_key\": {\"display_name\": \"Text Key\", \"required\": False, \"advanced\": True, \"value\": \"text\"},\n        \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n        \"embedding\": {\"display_name\": \"Embedding\"},\n        \"attributes\": {\n            \"display_name\": \"Attributes\",\n            \"required\": False,\n            \"is_list\": True,\n            \"field_type\": \"str\",\n            \"advanced\": True,\n        },\n        \"search_by_text\": {\"display_name\": \"Search By Text\", \"field_type\": \"bool\", \"advanced\": True},\n        \"code\": {\"show\": False},\n    }\n\n    def build(\n        self,\n        url: str,\n        search_by_text: bool = False,\n        api_key: Optional[str] = None,\n        index_name: Optional[str] = None,\n        text_key: str = \"text\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[List[Document]] = None,\n        attributes: Optional[list] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        if api_key:\n            auth_config = weaviate.AuthApiKey(api_key=api_key)\n            client = weaviate.Client(url=url, auth_client_secret=auth_config)\n        else:\n            client = weaviate.Client(url=url)\n\n        def _to_pascal_case(word: str):\n            if word and not word[0].isupper():\n                word = word.capitalize()\n\n            if word.isidentifier():\n                return word\n\n            word = word.replace(\"-\", \" \").replace(\"_\", \" \")\n            parts = word.split()\n            pascal_case_word = \"\".join([part.capitalize() for part in parts])\n\n            return pascal_case_word\n\n        index_name = _to_pascal_case(index_name) if index_name else None\n\n        if documents is not None and embedding is not None:\n            return Weaviate.from_documents(\n                client=client,\n                index_name=index_name,\n                documents=documents,\n                embedding=embedding,\n                by_text=search_by_text,\n            )\n\n        return Weaviate(\n            client=client,\n            index_name=index_name,\n            text_key=text_key,\n            embedding=embedding,\n            by_text=search_by_text,\n            # Ensure attributes are correctly handled and only passed once\n            attributes=attributes if attributes is not None else [],\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "index_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "index_name",
                  "display_name": "Index name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "history"
                },
                "search_by_text": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "search_by_text",
                  "display_name": "Search By Text",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "text_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text_key",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "http://192.168.1.208:8080",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "url",
                  "display_name": "Weaviate URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Weaviate",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Weaviate",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/weaviate",
              "custom_fields": {
                "url": null,
                "search_by_text": null,
                "api_key": null,
                "index_name": null,
                "text_key": null,
                "embedding": null,
                "documents": null,
                "attributes": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Weaviate-fBZhC",
            "description": "Implementation of Vector Store using Weaviate",
            "display_name": "Weaviate"
          },
          "selected": false,
          "width": 384,
          "height": 659,
          "positionAbsolute": {
            "x": 1077.9785357957157,
            "y": -28.152342259572265
          },
          "dragging": false
        },
        {
          "id": "OpenAIEmbeddings-Puuy9",
          "type": "genericNode",
          "position": {
            "x": 445.3622358285246,
            "y": 615.9655849959479
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "allowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "allowed_special",
                  "display_name": "Allowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "client",
                  "display_name": "Client",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "default_headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_headers",
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "default_query": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_query",
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "deployment",
                  "display_name": "Deployment",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "disallowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [
                    "all"
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "disallowed_special",
                  "display_name": "Disallowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding_ctx_length": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 8191,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding_ctx_length",
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 6,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-ada-002",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_type",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_version": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_version",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_organization": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_organization",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_proxy": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_proxy",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "show_progress_bar": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "show_progress_bar",
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "skip_empty": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "skip_empty",
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_enable": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_enable",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_model_name",
                  "display_name": "TikToken Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "OpenAI embedding models",
              "base_classes": [
                "OpenAIEmbeddings",
                "Embeddings",
                "Callable"
              ],
              "display_name": "OpenAIEmbeddings",
              "documentation": "",
              "custom_fields": {
                "default_headers": null,
                "default_query": null,
                "allowed_special": null,
                "disallowed_special": null,
                "chunk_size": null,
                "client": null,
                "deployment": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "output_types": [
                "OpenAIEmbeddings",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIEmbeddings-Puuy9"
          },
          "selected": false,
          "width": 384,
          "height": 635,
          "positionAbsolute": {
            "x": 445.3622358285246,
            "y": 615.9655849959479
          },
          "dragging": false
        },
        {
          "id": "ChatOpenAI-Ui5Xf",
          "type": "genericNode",
          "position": {
            "x": 1714.9421034518418,
            "y": -71.68242940052878
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4o\",\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4o\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 256,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": true
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-Ui5Xf",
            "description": "`OpenAI` Chat large language models API.",
            "display_name": "ChatOpenAI"
          },
          "selected": false,
          "width": 384,
          "height": 731,
          "dragging": false,
          "positionAbsolute": {
            "x": 1714.9421034518418,
            "y": -71.68242940052878
          }
        },
        {
          "id": "Data-ZGCPq",
          "type": "genericNode",
          "position": {
            "x": -203.82706169539915,
            "y": 53.800443049486944
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import os\nimport uuid\nimport glob\nfrom typing import Any, Dict, List\nfrom axiestudio import CustomComponent\nfrom langchain.schema import Document\n\nclass DirectoryLoaderWithMetadata(CustomComponent):\n    display_name: str = \"Directory Loader with Metadata\"\n    description: str = \"Load files from a directory and generate metadata including a GUID and file name.\"\n    beta = True\n\n    loaders_info: List[Dict[str, Any]] = [\n        {\n            \"loader\": \"AirbyteJSONLoader\",\n            \"name\": \"Airbyte JSON (.jsonl)\",\n            \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n            \"defaultFor\": [\"jsonl\"],\n            \"allowedTypes\": [\"jsonl\"],\n        },\n        {\n            \"loader\": \"JSONLoader\",\n            \"name\": \"JSON (.json)\",\n            \"import\": \"langchain.document_loaders.JSONLoader\",\n            \"defaultFor\": [\"json\"],\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"BSHTMLLoader\",\n            \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"CSVLoader\",\n            \"name\": \"CSV (.csv)\",\n            \"import\": \"langchain.document_loaders.CSVLoader\",\n            \"defaultFor\": [\"csv\"],\n            \"allowedTypes\": [\"csv\"],\n        },\n        {\n            \"loader\": \"CoNLLULoader\",\n            \"name\": \"CoNLL-U (.conllu)\",\n            \"import\": \"langchain.document_loaders.CoNLLULoader\",\n            \"defaultFor\": [\"conllu\"],\n            \"allowedTypes\": [\"conllu\"],\n        },\n        {\n            \"loader\": \"EverNoteLoader\",\n            \"name\": \"EverNote (.enex)\",\n            \"import\": \"langchain.document_loaders.EverNoteLoader\",\n            \"defaultFor\": [\"enex\"],\n            \"allowedTypes\": [\"enex\"],\n        },\n        {\n            \"loader\": \"FacebookChatLoader\",\n            \"name\": \"Facebook Chat (.json)\",\n            \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"OutlookMessageLoader\",\n            \"name\": \"Outlook Message (.msg)\",\n            \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n            \"defaultFor\": [\"msg\"],\n            \"allowedTypes\": [\"msg\"],\n        },\n        {\n            \"loader\": \"PyPDFLoader\",\n            \"name\": \"PyPDF (.pdf)\",\n            \"import\": \"langchain.document_loaders.PyPDFLoader\",\n            \"defaultFor\": [\"pdf\"],\n            \"allowedTypes\": [\"pdf\"],\n        },\n        {\n            \"loader\": \"STRLoader\",\n            \"name\": \"Subtitle (.srt)\",\n            \"import\": \"langchain.document_loaders.STRLoader\",\n            \"defaultFor\": [\"srt\"],\n            \"allowedTypes\": [\"srt\"],\n        },\n        {\n            \"loader\": \"TextLoader\",\n            \"name\": \"Text (.txt)\",\n            \"import\": \"langchain.document_loaders.TextLoader\",\n            \"defaultFor\": [\"txt\"],\n            \"allowedTypes\": [\"txt\"],\n        },\n        {\n            \"loader\": \"UnstructuredEmailLoader\",\n            \"name\": \"Unstructured Email (.eml)\",\n            \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n            \"defaultFor\": [\"eml\"],\n            \"allowedTypes\": [\"eml\"],\n        },\n        {\n            \"loader\": \"UnstructuredHTMLLoader\",\n            \"name\": \"Unstructured HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n            \"defaultFor\": [\"html\", \"htm\"],\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"UnstructuredMarkdownLoader\",\n            \"name\": \"Unstructured Markdown (.md)\",\n            \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n            \"defaultFor\": [\"md\"],\n            \"allowedTypes\": [\"md\"],\n        },\n        {\n            \"loader\": \"UnstructuredPowerPointLoader\",\n            \"name\": \"Unstructured PowerPoint (.pptx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n            \"defaultFor\": [\"pptx\"],\n            \"allowedTypes\": [\"pptx\"],\n        },\n        {\n            \"loader\": \"UnstructuredWordLoader\",\n            \"name\": \"Unstructured Word (.docx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n            \"defaultFor\": [\"docx\"],\n            \"allowedTypes\": [\"docx\"],\n        },\n    ]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        return {\n            \"directory_path\": {\n                \"display_name\": \"Directory Path\",\n                \"required\": True,\n                \"field_type\": \"str\",  # Update this if specific directory type is supported\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def load_file(self, file_path: str, loader: str) -> List[Document]:\n        file_type = file_path.split(\".\")[-1]\n\n        # Map the selected loader name to its information\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Automatically determine the loader based on the file extension\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n\n        loader_import: str = selected_loader_info[\"import\"]\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Dynamically import the loader\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path).load()\n        return result\n\n    def recursive_glob(self, directory_path, depth):\n        pattern = \"/**/*.*\" if depth > 0 else \"/*.*\"\n        return [file for file in glob.glob(directory_path + pattern, recursive=True) if file.count(os.sep) <= depth + directory_path.count(os.sep)]\n\n    def build(self, directory_path: str, loader: str, depth: int = 3) -> List[Document]:\n        # Check if the directory exists\n        if not os.path.exists(directory_path):\n            raise ValueError(f\"Directory not found: {directory_path}\")\n\n        suffixes = list(set([ext for loader_info in self.loaders_info for ext in loader_info[\"allowedTypes\"]]))\n\n        files = self.recursive_glob(directory_path, depth=depth)\n        files = [f for f in files if f.split('.')[-1] in suffixes]\n\n        docs = []\n        for file in files:\n            doc = self.load_file(file, loader)\n            guid = str(uuid.uuid4())\n            for d in doc:\n                d.metadata['document_id'] = guid\n                d.metadata['file_name'] = file\n            docs.extend(doc)\n        return docs\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "depth": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 3,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "depth",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "directory_path": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "directory_path",
                  "display_name": "Directory Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "/home"
                },
                "loader": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Automatic",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Automatic",
                    "Airbyte JSON (.jsonl)",
                    "JSON (.json)",
                    "BeautifulSoup4 HTML (.html, .htm)",
                    "CSV (.csv)",
                    "CoNLL-U (.conllu)",
                    "EverNote (.enex)",
                    "Facebook Chat (.json)",
                    "Outlook Message (.msg)",
                    "PyPDF (.pdf)",
                    "Subtitle (.srt)",
                    "Text (.txt)",
                    "Unstructured Email (.eml)",
                    "Unstructured HTML (.html, .htm)",
                    "Unstructured Markdown (.md)",
                    "Unstructured PowerPoint (.pptx)",
                    "Unstructured Word (.docx)"
                  ],
                  "name": "loader",
                  "display_name": "Loader",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Load files from a directory and generate metadata including a GUID and file name.",
              "base_classes": [
                "Document"
              ],
              "display_name": "Directory Loader with Metadata",
              "documentation": "",
              "custom_fields": {
                "directory_path": null,
                "loader": null,
                "depth": null
              },
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-ZGCPq",
            "description": "Load files from a directory and generate metadata including a GUID and file name.",
            "display_name": "Directory Loader with Metadata"
          },
          "selected": false,
          "width": 384,
          "height": 571,
          "dragging": false,
          "positionAbsolute": {
            "x": -203.82706169539915,
            "y": 53.800443049486944
          }
        },
        {
          "id": "Data-bqnMR",
          "type": "genericNode",
          "position": {
            "x": 1714.3541175006362,
            "y": 750.637945618878
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLLM",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "PromptTemplate",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "prompt",
                  "display_name": "Prompt Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "vector_store": {
                  "type": "VectorStore",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLLM, PromptTemplate, VectorStore, Chain\nfrom langchain.chains import RetrievalQA\nfrom langchain.vectorstores import Weaviate\n\nclass WeaviateComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build(self, llm: BaseLLM, prompt: PromptTemplate, vector_store: VectorStore) -> Chain:\n        # Ensure the vector_store is an instance of Weaviate\n        if not isinstance(vector_store, Weaviate):\n            raise ValueError(\"vector_store must be an instance of Weaviate\")\n\n        # Create the retriever with the desired number of documents\n        retriever = vector_store.as_retriever(search_kwargs={\"k\": 10})  # Fetch top 10 relevant documents\n\n        # Create the RetrievalQA chain with the retriever and ensure source documents are returned\n        retrieval_qa = RetrievalQA.from_chain_type(\n            llm=llm,\n            chain_type=\"stuff\",  # You can change this as needed\n            retriever=retriever,\n            return_source_documents=True\n        )\n\n        # Define the chat flow class\n        class CustomConversationChain(Chain):\n            @property\n            def input_keys(self):\n                return [\"input\"]\n\n            @property\n            def output_keys(self):\n                return [\"result\", \"source_documents\"]\n\n            def _call(self, inputs):\n                query = inputs[\"input\"]\n                result = retrieval_qa({\"query\": query})\n                source_documents = result.get(\"source_documents\", [])\n                \n                if not source_documents:\n                    return {\n                        \"result\": \"No relevant documents found.\",\n                        \"source_documents\": []\n                    }\n\n                unique_sources = set(doc.metadata.get('file_name', 'Unknown') for doc in source_documents)\n                formatted_sources = \"\\n\".join(f\"- {source}\" for source in unique_sources)\n                response = result.get(\"result\", \"\")\n                \n                return {\n                    \"result\": f\"{response}\\n\\nSources:\\n{formatted_sources}\",\n                    \"source_documents\": source_documents\n                }\n\n        return CustomConversationChain()\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"prompt\": {\"display_name\": \"Prompt Template\"},\n            \"vector_store\": {\"display_name\": \"Vector Store\"},\n        }",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "base_classes": [
                "Chain"
              ],
              "display_name": "WeaviateComponent",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "llm": null,
                "prompt": null,
                "vector_store": null
              },
              "output_types": [
                "Chain"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-bqnMR",
            "display_name": "WeaviateComponent"
          },
          "selected": true,
          "width": 384,
          "height": 405,
          "dragging": false,
          "positionAbsolute": {
            "x": 1714.3541175006362,
            "y": 750.637945618878
          }
        },
        {
          "id": "Data-GCGsb",
          "type": "genericNode",
          "position": {
            "x": 1116.3241794870967,
            "y": 849.4366679869869
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import PromptTemplate\n\nclass CustomPromptTemplateComponent(CustomComponent):\n    display_name: str = \"CustomPromptTemplate\"\n    description: str = \"Prompt template including metadata in the response.\"\n\n    def build(self) -> PromptTemplate:\n        return PromptTemplate(\n            input_variables=[\"history\"],\n            template=\"\"\"\n            The following is a conversation with an AI assistant. The assistant is helpful and knowledgeable.\n        \n            History:\n            {history}\n        \n            User: {input}\n            AI:\n            \"\"\"\n        )\n\n    def build_config(self):\n        return {}\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Prompt template including metadata in the response.",
              "base_classes": [
                "PromptTemplate",
                "StringPromptTemplate",
                "BasePromptTemplate"
              ],
              "display_name": "CustomPromptTemplate",
              "documentation": "",
              "custom_fields": {},
              "output_types": [
                "PromptTemplate"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-GCGsb",
            "description": "Prompt template including metadata in the response.",
            "display_name": "CustomPromptTemplate"
          },
          "selected": false,
          "width": 384,
          "height": 281,
          "dragging": false,
          "positionAbsolute": {
            "x": 1116.3241794870967,
            "y": 849.4366679869869
          }
        }
      ],
      "edges": [
        {
          "source": "OpenAIEmbeddings-Puuy9",
          "sourceHandle": "{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-Puuy9œ}",
          "target": "Weaviate-fBZhC",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Weaviate-fBZhC",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "OpenAIEmbeddings",
                "Embeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-Puuy9"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-Puuy9{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-Puuy9œ}-Weaviate-fBZhC{œfieldNameœ:œembeddingœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        },
        {
          "source": "Data-ZGCPq",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-ZGCPqœ}",
          "target": "Data-PXeIa",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œData-PXeIaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Data-PXeIa",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "Data",
              "id": "Data-ZGCPq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-ZGCPq{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-ZGCPqœ}-Data-PXeIa{œfieldNameœ:œdocumentsœ,œidœ:œData-PXeIaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "Data-PXeIa",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-PXeIaœ}",
          "target": "Weaviate-fBZhC",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Weaviate-fBZhC",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "Data",
              "id": "Data-PXeIa"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-PXeIa{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-PXeIaœ}-Weaviate-fBZhC{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-fBZhCœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "ChatOpenAI-Ui5Xf",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Ui5Xfœ}",
          "target": "Data-bqnMR",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œBaseLLMœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "Data-bqnMR",
              "inputTypes": null,
              "type": "BaseLLM"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-Ui5Xf"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatOpenAI-Ui5Xf{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Ui5Xfœ}-Data-bqnMR{œfieldNameœ:œllmœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œBaseLLMœ}"
        },
        {
          "source": "Weaviate-fBZhC",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œWeaviateœ,œidœ:œWeaviate-fBZhCœ}",
          "target": "Data-bqnMR",
          "targetHandle": "{œfieldNameœ:œvector_storeœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vector_store",
              "id": "Data-bqnMR",
              "inputTypes": null,
              "type": "VectorStore"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Weaviate",
              "id": "Weaviate-fBZhC"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Weaviate-fBZhC{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œWeaviateœ,œidœ:œWeaviate-fBZhCœ}-Data-bqnMR{œfieldNameœ:œvector_storeœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
        },
        {
          "source": "Data-GCGsb",
          "sourceHandle": "{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œDataœ,œidœ:œData-GCGsbœ}",
          "target": "Data-bqnMR",
          "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "prompt",
              "id": "Data-bqnMR",
              "inputTypes": null,
              "type": "PromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "PromptTemplate",
                "StringPromptTemplate",
                "BasePromptTemplate"
              ],
              "dataType": "Data",
              "id": "Data-GCGsb"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-GCGsb{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œDataœ,œidœ:œData-GCGsbœ}-Data-bqnMR{œfieldNameœ:œpromptœ,œidœ:œData-bqnMRœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}"
        }
      ],
      "viewport": {
        "x": -1035.0626334997278,
        "y": -458.04638204948833,
        "zoom": 0.7364946217448269
      }
    },
    "date_created": "2024-05-27T23:52:42.463Z",
    "date_updated": "2024-05-27T23:52:42.529Z",
    "status": "Public",
    "sort": null,
    "user_updated": "670a7528-f27b-408d-b340-27bfb37876b0",
    "user_created": {
      "username": "alpha23",
      "first_name": "Duane",
      "last_name": "Webber",
      "id": "670a7528-f27b-408d-b340-27bfb37876b0"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:59.046Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 28,
    "converter_version": "1.0.0"
  }
}