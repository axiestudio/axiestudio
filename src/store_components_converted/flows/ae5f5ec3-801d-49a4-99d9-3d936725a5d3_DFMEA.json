{
  "id": "ae5f5ec3-801d-49a4-99d9-3d936725a5d3",
  "name": "DFMEA",
  "description": "Perform a DFMEA review on provided source code (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "zion-tilley",
    "first_name": "Zion",
    "last_name": "Tilley",
    "id": "cc602ae9-7126-48c4-bfc5-ef49c42ed5c2",
    "full_name": "Zion Tilley"
  },
  "store_url": "https://www.langflow.store/store/component/ae5f5ec3-801d-49a4-99d9-3d936725a5d3",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-16T21:54:16.958Z",
    "updated": "2024-07-16T21:54:17.040Z",
    "downloaded": "2025-08-19T17:50:05.762Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a61",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatOutput-Mg3O5",
        "type": "genericNode",
        "position": {
          "x": 3123.587590548263,
          "y": 399.8403962291592
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "files": {
                "type": "file",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx",
                  ".jpg",
                  ".jpeg",
                  ".png",
                  ".bmp"
                ],
                "file_path": "",
                "password": false,
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "return_message": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_message",
                "display_name": "Return Message",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "AI-Assistant",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "display_name": "DFMEA Part 1 output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "files": null,
              "return_message": null
            },
            "output_types": [
              "Message",
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-Mg3O5",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "dragging": false,
        "positionAbsolute": {
          "x": 3123.587590548263,
          "y": 399.8403962291592
        }
      },
      {
        "id": "OpenAIModel-lUFfS",
        "type": "genericNode",
        "position": {
          "x": 2514.322004869007,
          "y": 345.0915211197454
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "1000",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": false,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.2",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false,
            "edited": true
          },
          "id": "OpenAIModel-lUFfS",
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "OpenAI",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 665,
        "dragging": false,
        "positionAbsolute": {
          "x": 2514.322004869007,
          "y": 345.0915211197454
        }
      },
      {
        "id": "ChatOutput-mDnKE",
        "type": "genericNode",
        "position": {
          "x": 4400.341849442737,
          "y": 1207.7107258979297
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "files": {
                "type": "file",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx",
                  ".jpg",
                  ".jpeg",
                  ".png",
                  ".bmp"
                ],
                "file_path": "",
                "password": false,
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "return_message": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_message",
                "display_name": "Return Message",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Answer",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "files": null,
              "return_message": null
            },
            "output_types": [
              "Message",
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-mDnKE",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": 4400.341849442737,
          "y": 1207.7107258979297
        },
        "dragging": false
      },
      {
        "id": "TextInput-wax8G",
        "type": "genericNode",
        "position": {
          "x": 1280.8790965087233,
          "y": 576.2994778826793
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "import { element } from \"angular\";\nimport template from \"./dashboard.html\";\nimport \"./dashboard.styl\";\nimport \"./draganddrop.component.css\";\n\nimport io from \"socket.io-client\";\n\nconst dashboardComponent = {\n  template,\n  bindings: {},\n  controller: /* @ngInject */ class DashboardController {\n    static get $inject() {\n      return [\n        \"$log\",\n        \"$state\",\n        \"$stateParams\",\n        \"$timeout\",\n        \"Title\",\n        \"Project\",\n        \"ProjectStatus\",\n        \"ListType\",\n        \"ListItem\",\n        \"Document\",\n        \"Comment\",\n        \"AuthenticatedUser\",\n        \"DocumentAssignment\",\n        \"ProjectDetail\",\n        \"DashboardSettingDialog\",\n        \"DashboardSetting\",\n      ];\n    }\n    constructor(\n      $log,\n      $state,\n      $stateParams,\n      $timeout,\n      Title,\n      Project,\n      ProjectStatus,\n      ListType,\n      ListItem,\n      Document,\n      Comment,\n      AuthenticatedUser,\n      DocumentAssignment,\n      ProjectDetail,\n      DashboardSettingDialog,\n      DashboardSetting\n    ) {\n      this.$log = $log;\n      this.$state = $state;\n      this.$stateParams = $stateParams;\n      this.$timeout = $timeout;\n      this.Title = Title;\n      this.Project = Project;\n      this.ProjectStatus = ProjectStatus;\n      this.ListType = ListType;\n      this.ListItem = ListItem;\n      this.Document = Document;\n      this.Comment = Comment;\n      this.AuthenticatedUser = AuthenticatedUser;\n      this.DocumentAssignment = DocumentAssignment;\n      this.ProjectDetail = ProjectDetail;\n      this.DashboardSetting = DashboardSetting;\n      this.DashboardSettingDialog = DashboardSettingDialog;\n\n      this.Title.updateTitle(\"DSH\");\n      this.projectByMonth = [];\n      this.chartType1 = \"LineChart\";\n      this.chartType2 = \"BarChart\";\n      this.chartType3 = \"PieChart\";\n\n      this.chartName2 = \"project\";\n      this.chartName3 = \"assignment\";\n      this.completedProjects = [];\n      this.needIntakeList = [];\n      this.awaitingIntake = [];\n      this.recentProjects = [];\n\n      this.canViewIntake = this.AuthenticatedUser.canView(\"Intake\");\n      this.loadIntakeProjects = this.loadIntakeProjects.bind(this);\n      this.loadCycleCompleteProjects =\n        this.loadCycleCompleteProjects.bind(this);\n      this.getIntakeCount = this.getIntakeCount.bind(this);\n      this.getCycleCount = this.getCycleCount.bind(this);\n      this.loadRecentProjects = this.loadRecentProjects.bind(this);\n      this.getRecentProjectsCount = this.getRecentProjectsCount.bind(this);\n\n      this.is_RecentlyViewedProjects_visible = false;\n      this.is_ProjectsAwaitingIntake_visible = false;\n      this.is_ProjectsInCycleComplete_visible = false;\n      this.is_OpenProjects_visible = false;\n      this.is_MyAssignments_visible = false;\n      this.is_OpenComments_visible = false;\n      this.onRefreshIntake = this.reloadIntake.bind(this);\n      this.setUpdatedIntake = this.setUpdatedIntake.bind(this);\n      this.updatedIntake = false;\n      this.onRefreshCycleComplete = this.reloadCycleComplete.bind(this);\n      this.setUpdatedCycleComplete = this.setUpdatedCycleComplete.bind(this);\n      this.updatedCycleComplete = false;\n\n      this.openProjectsOrder = \"order1\";\n      this.myAssignmentsOrder = \"order2\";\n      this.openCommentsOrder = \"order3\";\n      this.awaitingIntakeOrder = \"order4\";\n      this.recentlyViewProjectsOrder = \"order5\";\n      this.projectsInCycleOrder = \"order6\";\n    }\n\n    $onInit() {\n      this.setTable();\n      this.isLoadingData = true;\n      this.setDashboardSetting();\n      this.callInit = this.$timeout(() => {\n        // this.loadWidgets().finally(() => {\n        //   this.isLoadingData = false;\n        // });\n        this.loadOpenProjectWidget();\n        this.loadMyAssignmentWidget();\n\n        this.loadIntakeProjects();\n        this.loadCycleCompleteProjects();\n        this.loadRecentProjects();\n        this.loadOpenCommentByGroupWidget();\n      }, 1000);\n    }\n\n    $onDestroy() {\n      this.$timeout.cancel(this.callInit);\n    }\n\n    reloadIntake() {\n      this.$timeout(() => {\n        this.updatedIntake = true;\n      });\n    }\n\n    setUpdatedIntake(value) {\n      this.updatedIntake = value;\n    }\n\n    reloadCycleComplete() {\n      this.$timeout(() => {\n        this.updatedCycleComplete = true;\n      });\n    }\n\n    setUpdatedCycleComplete(value) {\n      this.updatedCycleComplete = value;\n    }\n\n    setTable() {\n      this.query = {\n        order: [\"dueDate\", \"status_LIID\", \"projectNumber\"],\n        limit: 100,\n        page: 1,\n      };\n      this.rows = [];\n      this.pageName = \"projectsAwaitingIntake\";\n      this.disabled = {\n        projectNumber: true,\n        status: true,\n      };\n      this.initialColumns = {\n        serviceArea: true,\n        projectNumber: true,\n        name: true,\n        status: true,\n        startDate: true,\n        dueDate: true,\n        control: true,\n      };\n      this.headers = [\n        {\n          eplanListType: \"ProjectStatusExternal\",\n          translate: \"projectList.status\",\n          key: \"status\",\n          filterKey: \"status.abbreviation\",\n          sortKey: \"status.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          listItemOptions: {\n            style: \"outline\",\n          },\n          width: 5,\n        },\n        {\n          translate: \"projectList.number\",\n          key: \"projectNumber\",\n          filterKey: \"project.projectNumber\",\n          width: 15,\n        },\n        {\n          translate: \"projectList.location\",\n          //key: 'address.formatted.short.streetAddress',\n          //filterKey: 'address.formatted.short.streetAddress',\n          key: \"address\",\n          filterKey: `CONCAT(address.streetNumber, ' ', address.streetName, ', ', address.city, ' ', address.state, ' ', address.zipCode )`,\n          width: 20,\n        },\n        {\n          eplanListType: \"ProjectServiceArea\",\n          translate: \"projectList.serviceArea\",\n          key: \"serviceArea\",\n          filterKey: \"area.abbreviation\",\n          sortKey: \"area.abbreviation\",\n          align: \"center\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.name\",\n          key: \"name\",\n          filterKey: \"project.name\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.partnerId\",\n          key: \"vendor_id\",\n          filterKey: \"project.vendor_id\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.referenceNumber\",\n          key: \"referenceNumber\",\n          filterKey: \"project.referenceNumber\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectType\",\n          translate: \"projectList.projectType\",\n          key: \"projectType\",\n          filterKey: \"type.abbreviation\",\n          sortKey: \"type.abbreviation\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectApplicationType\",\n          translate: \"projectList.applicationType\",\n          key: \"application\",\n          filterKey: \"application.abbreviation\",\n          sortKey: \"aapplication.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.projectManager\",\n          key: \"managerFullname\",\n          filterKey: \"manager.managerFullname\",\n          width: 10,\n        },\n        {\n          eplanListType: \"ProjectCycle\",\n          translate: \"projectList.cycle\",\n          key: \"cycle\",\n          filterKey: \"cycle.abbreviation\",\n          sortKey: \"cycle.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectPriority\",\n          translate: \"projectList.priority\",\n          key: \"priority\",\n          filterKey: \"priority.abbreviation\",\n          sortKey: \"priority.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.valuationAmount\",\n          key: \"valuationAmount\",\n          filterKey: \"project.valuationAmount\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.squareFootage\",\n          key: \"squareFootage\",\n          filterKey: \"project.squareFootage\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.buildingHeight\",\n          key: \"buildingHeight\",\n          filterKey: \"project.buildingHeight\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.fees\",\n          key: \"fees\",\n          filterKey: \"project.fees\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.createdAt\",\n          key: \"createdAt\",\n          filterKey: `DATE_FORMAT(project.createdAt, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.startDate\",\n          key: \"startDate\",\n          filterKey: `DATE_FORMAT(project.startDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.dueDate\",\n          key: \"dueDate\",\n          filterKey: `DATE_FORMAT(project.dueDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n      ];\n      if (this.canViewIntake) {\n        this.headers.push({\n          translate: \"Actions\",\n          key: \"control\",\n          type: \"control\",\n          width: 5,\n          controlItems: [\n            {\n              type: \"icon\",\n              src: \"arrow-right-box\",\n              description: \"Go to Project Intake\",\n              func: this.goToIntake.bind(this),\n            },\n          ],\n        });\n      }\n      this.pageName1 = \"projectsInCycleComplete\";\n      this.disabled1 = {\n        projectNumber: true,\n        status: true,\n      };\n      this.initialColumns1 = {\n        serviceArea: true,\n        projectNumber: true,\n        name: true,\n        staatus: true,\n        startDate: true,\n        dueDate: true,\n        control: true,\n      };\n      this.headers1 = [\n        {\n          eplanListType: \"ProjectStatusExternal\",\n          translate: \"projectList.status\",\n          key: \"status\",\n          filterKey: \"status.abbreviation\",\n          sortKey: \"status.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          listItemOptions: {\n            style: \"outline\",\n          },\n          width: 5,\n        },\n        {\n          translate: \"projectList.number\",\n          key: \"projectNumber\",\n          filterKey: \"project.projectNumber\",\n          width: 15,\n        },\n        {\n          translate: \"projectList.location\",\n          key: \"address\",\n          filterKey: `CONCAT(address.streetNumber, ' ', address.streetName, ', ', address.city, ' ', address.state, ' ', address.zipCode )`,\n          width: 20,\n        },\n        {\n          eplanListType: \"ProjectServiceArea\",\n          translate: \"projectList.serviceArea\",\n          key: \"serviceArea\",\n          filterKey: \"area.abbreviation\",\n          sortKey: \"area.abbreviation\",\n          align: \"center\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.name\",\n          key: \"name\",\n          filterKey: \"project.name\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.partnerId\",\n          key: \"vendor_id\",\n          filterKey: \"project.vendor_id\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.referenceNumber\",\n          key: \"referenceNumber\",\n          filterKey: \"project.referenceNumber\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectType\",\n          translate: \"projectList.projectType\",\n          key: \"projectType\",\n          filterKey: \"type.abbreviation\",\n          sortKey: \"type.abbreviation\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectApplicationType\",\n          translate: \"projectList.applicationType\",\n          key: \"application\",\n          filterKey: \"application.abbreviation\",\n          sortKey: \"application.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.projectManager\",\n          key: \"managerFullname\",\n          filterKey: \"manager.managerFullname\",\n          width: 10,\n        },\n        {\n          eplanListType: \"ProjectCycle\",\n          translate: \"projectList.cycle\",\n          key: \"cycle\",\n          filterKey: \"cycle.abbreviation\",\n          sortKey: \"cycle.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectPriority\",\n          translate: \"projectList.priority\",\n          key: \"priority\",\n          filterKey: \"priority.abbreviation\",\n          sortKey: \"priority.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.valuationAmount\",\n          key: \"valuationAmount\",\n          filterKey: \"project.valuationAmount\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.squareFootage\",\n          key: \"squareFootage\",\n          filterKey: \"project.squareFootage\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.buildingHeight\",\n          key: \"buildingHeight\",\n          filterKey: \"project.buildingHeight\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.fees\",\n          key: \"fees\",\n          filterKey: \"project.fees\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.createdAt\",\n          key: \"createdAt\",\n          filterKey: `DATE_FORMAT(project.createdAt, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.startDate\",\n          key: \"startDate\",\n          filterKey: `DATE_FORMAT(project.startDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.dueDate\",\n          key: \"dueDate\",\n          filterKey: `DATE_FORMAT(project.dueDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n      ];\n\n      this.pageName2 = \"recentProjects\";\n      this.disabled2 = {\n        projectNumber: true,\n        status: true,\n      };\n      this.initialColumns2 = {\n        serviceArea: true,\n        projectNumber: true,\n        name: true,\n        staatus: true,\n        startDate: true,\n        dueDate: true,\n        control: true,\n      };\n      this.headers2 = [\n        {\n          eplanListType: \"ProjectStatusExternal\",\n          translate: \"projectList.status\",\n          key: \"status\",\n          filterKey: \"status.abbreviation\",\n          sortKey: \"status.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          listItemOptions: {\n            style: \"outline\",\n          },\n          width: 5,\n        },\n        {\n          translate: \"projectList.number\",\n          key: \"projectNumber\",\n          filterKey: \"project.projectNumber\",\n          width: 15,\n        },\n        {\n          translate: \"projectList.location\",\n          // address ends up being an object in the current Recent Projects response from the server\n          // vs string in other responses\n          // this field appears to be the best fit for the column\n          //key: \"address\",\n          key: 'address.formatted.short.streetAddress',          \n          filterKey: `CONCAT(address.streetNumber, ' ', address.streetName, ', ', address.city, ' ', address.state, ' ', address.zipCode )`,\n          width: 20,\n        },\n        {\n          eplanListType: \"ProjectServiceArea\",\n          translate: \"projectList.serviceArea\",\n          key: \"serviceArea\",\n          filterKey: \"area.abbreviation\",\n          sortKey: \"area.abbreviation\",\n          align: \"center\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.name\",\n          key: \"name\",\n          filterKey: \"project.name\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.partnerId\",\n          key: \"vendor_id\",\n          filterKey: \"project.vendor_id\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.referenceNumber\",\n          key: \"referenceNumber\",\n          filterKey: \"project.referenceNumber\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectType\",\n          translate: \"projectList.projectType\",\n          key: \"projectType\",\n          filterKey: \"type.abbreviation\",\n          sortKey: \"type.abbreviation\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectApplicationType\",\n          translate: \"projectList.applicationType\",\n          key: \"application\",\n          filterKey: \"application.abbreviation\",\n          sortKey: \"application.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.projectManager\",\n          key: \"managerFullname\",\n          filterKey: \"manager.managerFullname\",\n          width: 10,\n        },\n        {\n          eplanListType: \"ProjectCycle\",\n          translate: \"projectList.cycle\",\n          key: \"cycle\",\n          filterKey: \"cycle.abbreviation\",\n          sortKey: \"cycle.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectPriority\",\n          translate: \"projectList.priority\",\n          key: \"priority\",\n          filterKey: \"priority.abbreviation\",\n          sortKey: \"priority.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.valuationAmount\",\n          key: \"valuationAmount\",\n          filterKey: \"project.valuationAmount\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.squareFootage\",\n          key: \"squareFootage\",\n          filterKey: \"project.squareFootage\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.buildingHeight\",\n          key: \"buildingHeight\",\n          filterKey: \"project.buildingHeight\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.fees\",\n          key: \"fees\",\n          filterKey: \"project.fees\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.createdAt\",\n          key: \"createdAt\",\n          filterKey: `DATE_FORMAT(project.createdAt, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.startDate\",\n          key: \"startDate\",\n          filterKey: `DATE_FORMAT(project.startDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.dueDate\",\n          key: \"dueDate\",\n          filterKey: `DATE_FORMAT(project.dueDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"Actions\",\n          key: \"control\",\n          type: \"control\",\n          width: 5,\n          controlItems: [\n            {\n              type: \"icon\",\n              src: \"arrow-right-box\",\n              description: \"Go to Project Details\",\n              func: this.goToProjectDetail.bind(this),\n            },\n          ],\n        },\n      ];\n      if (this.AuthenticatedUser.canView(\"ProjectDeliverablePage\")) {\n        this.headers1.push({\n          translate: \"Actions\",\n          key: \"control\",\n          type: \"control\",\n          width: 5,\n          controlItems: [\n            {\n              type: \"icon\",\n              src: \"arrow-right-box\",\n              description: \"Go to Project Deliverables\",\n              func: this.goToDeliverable.bind(this),\n            },\n          ],\n        });\n      }\n    }\n\n    loadIntakeProjects(\n      limit = 10,\n      page = 0,\n      order = { id: \"order-id\", desc: true, key: \"id\" },\n      filter = {},\n      viewFilterObject = {}\n    ) {\n      Object.assign(filter, viewFilterObject);\n      if (!order) {\n        order = { id: \"order-id\", desc: true, key: \"id\" };\n      }\n      if (!order.key) {\n        order.key = \"id\";\n      }\n      // const orderId = order['id'].split('-');\n      const viewOrder = order.desc ? \"DESC\" : \"ASC\";\n      const orderString = order.key + \" \" + viewOrder;\n\n      return this.Project.Intake.query({\n        applyFilter: true,\n        page,\n        limit,\n        order: orderString,\n        raw: true,\n        ...filter,\n      }).$promise.then((results) => {\n        return results;\n        // this.projectAwaitingIntake = results;\n      });\n    }\n\n    async getIntakeCount(filter) {\n      return this.Project.Intake.query({\n        applyFilter: true,\n        count: true,\n        raw: true,\n        ...filter,\n      })\n        .$promise.then((count) => {\n          return count[0];\n          // this.projectAwaitingIntake = results;\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    async getCycleCount(filter) {\n      return this.Project.Cycle.query({\n        applyFilter: true,\n        count: true,\n        raw: true,\n        ...filter,\n      })\n        .$promise.then((count) => {\n          return count[0];\n          // this.projectAwaitingIntake = results;\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    loadCycleCompleteProjects(\n      limit = 10,\n      page = 0,\n      order = { id: \"order-id\", desc: true, key: \"id\" },\n      filter = {},\n      viewFilterObject = {}\n    ) {\n      Object.assign(filter, viewFilterObject);\n      if (!order) {\n        order = { id: \"order-id\", desc: true, key: \"id\" };\n      }\n\n      if (!order.key) {\n        order.key = \"id\";\n      }\n      // const orderId = order['id'].split('-');\n      const viewOrder = order.desc ? \"DESC\" : \"ASC\";\n      const orderString = order.key + \" \" + viewOrder;\n      return this.Project.Cycle.query({\n        applyFilter: true,\n        page,\n        limit,\n        order: orderString,\n        raw: true,\n        ...filter,\n      })\n        .$promise.then((results) => {\n          this.projectInCycleComplete = results;\n          return results;\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    loadRecentProjects(limit = 10, page = 0) {\n      return this.Project.Recent.query()\n        .$promise.then((results) => {\n          const offset = page * limit || 0;\n          return results.slice(offset, offset + limit);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    async getRecentProjectsCount() {\n      return this.Project.Recent.query({ count: true })\n        .$promise.then((count) => {\n          return count[0];\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    loadWidgets() {\n      this.isLoadingData = true;\n      return this.Project.Widget.get({ user_id: this.AuthenticatedUser.id })\n        .$promise.then((res) => {\n          const { charts, tables } = res;\n          this.$timeout(() => {\n            this.openProjectByDueDate = charts.openProjectByDueDate;\n            this.myAsssignmentByDueDate = charts.myAsssignmentByDueDate;\n\n            this.openCommentsByGroup = charts.openCommentByGroup.data;\n            this.openCommentsByGroupOptions = charts.openCommentByGroup.options;\n\n            // this.openCommentsByUser = charts.openCommentByUser.data;\n            // this.openCommentsByUserOptions = charts.openCommentByUser.options;\n          });\n          // this.$timeout(() => {\n          //     // this.projectAwaitingIntake = tables.projectAwaitingIntake;\n          //     // this.projectInCycleComplete = tables.projectInCycleComplete;\n          // }, 2000);\n        })\n        .catch(console.log);\n    }\n\n    loadOpenProjectWidget() {\n      try {\n        this.isLoadingOpenProjectData = true;\n        return this.Project.OpenProjectWidget.get().$promise.then((res) => {\n          this.openProjectByDueDate = res.openProjectByDueDate;\n          this.isLoadingOpenProjectData = false;\n        });\n      } catch (error) {\n        console.log(\"error: \", error);\n      }\n    }\n\n    loadMyAssignmentWidget() {\n      try {\n        this.isLoadingMyAssignmentData = true;\n        return this.Project.MyAssignmentWidget.get({\n          user_id: this.AuthenticatedUser.id,\n        }).$promise.then((res) => {\n          this.myAsssignmentByDueDate = res.myAsssignmentByDueDate;\n          this.isLoadingMyAssignmentData = false;\n        });\n      } catch (error) {\n        console.log(\"error: \", error);\n      }\n    }\n\n    loadOpenCommentByGroupWidget() {\n      try {\n        this.isLoadingOpenCommentByGroupData = true;\n        return this.Project.OpenCommentByGroupWidget.get({}).$promise.then(\n          (res) => {\n            this.openCommentsByGroup = res.data;\n            this.openCommentsByGroupOptions = res.options;\n            this.isLoadingOpenCommentByGroupData = false;\n          }\n        );\n      } catch (error) {\n        console.log(\"error: \", error);\n      }\n    }\n\n    getDefaultDashboardSetting() {\n      return [\n        {\n          id: 1,\n          value: true,\n          label: \"Open Projects by Due Date Graph\",\n        },\n        {\n          id: 2,\n          value: true,\n          label: \"My Open Assignments by Due Date Graph\",\n        },\n        {\n          id: 3,\n          value: true,\n          label: \"Open Comments by Group Graph\",\n        },\n        {\n          id: 4,\n          value: true,\n          label: \"Recently Viewed Projects\",\n        },\n        {\n          id: 5,\n          value: true,\n          label: \"Projects Awaiting Intake\",\n        },\n        {\n          id: 6,\n          value: true,\n          label: \"Projects in Cycle Complete\",\n        },\n      ];\n    }\n\n    setDashboardSetting() {\n      this.DashboardSetting.fetch({\n        id: this.AuthenticatedUser.id,\n      }).$promise.then((data) => {\n        if (data && data.data && data.data.dashboard) {\n          this.dashboardSetting = JSON.parse(data.data.dashboard);\n        } else {\n          this.dashboardSetting = this.getDefaultDashboardSetting();\n        }\n        var i = 1;\n        for (let setting of this.dashboardSetting) {\n          switch (setting.id) {\n            case 1:\n              this.is_OpenProjects_visible = setting.value;\n              this.openProjectsOrder = \"order\" + i;\n              break;\n            case 2:\n              this.is_MyAssignments_visible = setting.value;\n              this.myAssignmentsOrder = \"order\" + i;\n              break;\n            case 3:\n              this.is_OpenComments_visible = setting.value;\n              this.openCommentsOrder = \"order\" + i;\n              break;\n            case 4:\n              this.is_RecentlyViewedProjects_visible = setting.value;\n              this.recentlyViewProjectsOrder = \"order\" + i;\n              break;\n            case 5:\n              this.is_ProjectsAwaitingIntake_visible = setting.value;\n              this.awaitingIntakeOrder = \"order\" + i;\n              break;\n            case 6:\n              this.is_ProjectsInCycleComplete_visible = setting.value;\n              this.projectsInCycleOrder = \"order\" + i;\n              break;\n          }\n          i++;\n        }\n      });\n    }\n\n    openSettingDialog() {\n      this.DashboardSettingDialog({\n        user_id: this.AuthenticatedUser.id,\n        settings: this.dashboardSetting,\n      })\n        .then(() => {\n          this.setDashboardSetting();\n        })\n        .finally(() => {\n          setTimeout(() => {\n            document.getElementById(\"dashboardSettingDialogButton\").focus();\n          }, 0);\n        });\n    }\n\n    select(row) {\n      this.$state.go(\"projects.project\", {\n        project_id: row.id,\n      });\n    }\n\n    goToIntake(row) {\n      window.open(`/#!/projects/${row.id}/intake`);\n    }\n\n    goToDeliverable(row) {\n      window.open(`/#!/projects/${row.id}/deliverables`);\n    }\n\n    goToProjectDetail(row) {\n      window.open(`/#!/projects/${row.id}/details/info`);\n    }\n  },\n};\nexport default dashboardComponent;\n\n/* Original HTML for non DnD dashboard\n\n    <div layout=\"row\" layout-wrap=\"true\" class=\"widget-container\">\n      <!-- <div flex-gt-lg=\"25\"\n               flex-gt-md=\"33\"\n               flex-gt-sm=\"50\"\n               flex-gt-xs=\"100\"\n              class=\"card-container\">\n              <md-card>\n                  <h3>Project By Month</h3>\n                  <react-Chart data=\"$ctrl.projectByMonth\"\n                               type=\"$ctrl.chartType1\"\n                               width=\"350\"\n                               height=\"200\"></react-Chart>\n              </md-card>\n          </div> -->\n      <div\n        ng-if=\"$ctrl.is_OpenProjects_visible\"\n        flex-gt-lg=\"33\"\n        flex-gt-md=\"33\"\n        flex-gt-sm=\"50\"\n        flex-gt-xs=\"100\"\n        class=\"card-container\"\n      >\n        <md-card ng-if=\"$ctrl.is_OpenProjects_visible\">\n          <h2 id=\"label1\">Open Projects by Due Date</h2>\n  \n          <react-Chart\n            data=\"$ctrl.openProjectByDueDate\"\n            loading=\"$ctrl.isLoadingOpenProjectData\"\n            type=\"$ctrl.chartType2\"\n            name=\"$ctrl.chartName2\"\n            width=\"350\"\n            height=\"200\"\n            alt=\"Figure for number of open projects by Due Date\"\n            aria-labelledby=\"label1\"\n            role=\"img\"\n          >\n          </react-Chart>\n        </md-card>\n      </div>\n      <div\n        ng-if=\"$ctrl.is_MyAssignments_visible\"\n        flex-gt-lg=\"33\"\n        flex-gt-md=\"33\"\n        flex-gt-sm=\"50\"\n        flex-gt-xs=\"100\"\n        class=\"card-container\"\n      >\n        <md-card ng-if=\"$ctrl.is_MyAssignments_visible\">\n          <h2 id=\"label2\">My Open Assignments by Due Date</h2>\n          <react-Chart\n            data=\"$ctrl.myAsssignmentByDueDate\"\n            loading=\"$ctrl.isLoadingMyAssignmentData\"\n            type=\"$ctrl.chartType2\"\n            name=\"$ctrl.chartName3\"\n            width=\"350\"\n            height=\"200\"\n            alt=\"Figure for number of my assignments by Due Date\"\n            aria-labelledby=\"label2\"\n            role=\"img\"\n          >\n          </react-Chart>\n        </md-card>\n      </div>\n      <div\n        ng-if=\"$ctrl.is_OpenComments_visible\"\n        flex-gt-lg=\"33\"\n        flex-gt-md=\"33\"\n        flex-gt-sm=\"50\"\n        flex-gt-xs=\"100\"\n        class=\"card-container\"\n      >\n        <md-card ng-if=\"$ctrl.is_OpenComments_visible\">\n          <h2 id=\"label3\">Open Comments by Group</h2>\n  \n          <react-Chart\n            data=\"$ctrl.openCommentsByGroup\"\n            loading=\"$ctrl.isLoadingOpenCommentByGroupData\"\n            type=\"$ctrl.chartType2\"\n            name=\"'comment'\"\n            options=\"$ctrl.openCommentsByGroupOptions\"\n            width=\"350\"\n            height=\"200\"\n            alt=\"Figure for number of open comments by Group\"\n            aria-labelledby=\"label3\"\n            role=\"img\"\n          >\n          </react-Chart>\n        </md-card>\n      </div>\n      <!-- <div flex-gt-lg=\"25\"\n               flex-gt-md=\"33\"\n               flex-gt-sm=\"50\"\n               flex-gt-xs=\"100\"\n               class=\"card-container\">\n              <md-card>\n                  <h3>Open Comments by User</h3>\n                  <react-Chart data=\"$ctrl.openCommentsByUser\"\n                               type=\"$ctrl.chartType2\"\n                               name=\"'comment'\"\n                               options=\"$ctrl.openCommentsByUserOptions\"\n                               width=\"350\"\n                               height=\"200\">\n                  </react-Chart>\n              </md-card>\n          </div> -->\n    </div>\n    <div>\n      <md-card\n        ng-if=\"$ctrl.recentProjects && $ctrl.is_RecentlyViewedProjects_visible\"\n        class=\"table-container\"\n      >\n        <h2 class=\"eplan-records-table-title\">Recently Viewed Projects</h2>\n        <eplan-records-table\n          headers=\"$ctrl.headers2\"\n          page-name=\"$ctrl.pageName2\"\n          disabled=\"$ctrl.disabled2\"\n          initial-columns=\"$ctrl.initialColumns2\"\n          reset=\"$ctrl.reset\"\n          query=\"$ctrl.query\"\n          selectable=\"false\"\n          is-clickable=\"false\"\n          layout=\"column\"\n          server-side-pagination=\"true\"\n          get-data=\"$ctrl.loadRecentProjects\"\n          get-count=\"$ctrl.getRecentProjectsCount\"\n          sortable=\"false\"\n          recent-projects=\"true\"\n          flex\n        >\n        </eplan-records-table>\n      </md-card>\n    </div>\n    <div>\n      <md-card\n        ng-if=\"$ctrl.rows && $ctrl.is_ProjectsAwaitingIntake_visible\"\n        class=\"table-container\"\n      >\n        <h2 class=\"eplan-records-table-title\">Projects Awaiting Intake</h2>\n        <eplan-records-table\n          rows=\"$ctrl.projectAwaitingIntake\"\n          headers=\"$ctrl.headers\"\n          page-name=\"$ctrl.pageName\"\n          disabled=\"$ctrl.disabled\"\n          initial-columns=\"$ctrl.initialColumns\"\n          reset=\"$ctrl.reset\"\n          query=\"$ctrl.query\"\n          selectable=\"false\"\n          is-clickable=\"false\"\n          layout=\"column\"\n          server-side-pagination=\"true\"\n          get-data=\"$ctrl.loadIntakeProjects\"\n          get-count=\"$ctrl.getIntakeCount\"\n          on-refresh=\"$ctrl.onRefreshIntake\"\n          updated=\"$ctrl.updatedIntake\"\n          set-updated=\"$ctrl.setUpdatedIntake\"\n          flex\n        >\n        </eplan-records-table>\n      </md-card>\n    </div>\n    <div>\n      <md-card\n        ng-if=\"$ctrl.completedProjects && $ctrl.is_ProjectsInCycleComplete_visible\"\n        class=\"table-container\"\n      >\n        <h2 class=\"eplan-records-table-title\">Projects in Cycle Complete</h2>\n        <eplan-records-table\n          rows=\"$ctrl.projectInCycleComplete\"\n          headers=\"$ctrl.headers1\"\n          page-name=\"$ctrl.pageName1\"\n          disabled=\"$ctrl.disabled1\"\n          initial-columns=\"$ctrl.initialColumns1\"\n          reset=\"$ctrl.reset\"\n          query=\"$ctrl.query\"\n          selectable=\"false\"\n          is-clickable=\"false\"\n          layout=\"column\"\n          server-side-pagination=\"true\"\n          get-data=\"$ctrl.loadCycleCompleteProjects\"\n          get-count=\"$ctrl.getCycleCount\"\n          on-refresh=\"$ctrl.onRefreshCycleComplete\"\n          updated=\"$ctrl.updatedCycleComplete\"\n          set-updated=\"$ctrl.setUpdatedCycleComplete\"\n          flex\n        >\n        </eplan-records-table>\n      </md-card>\n    </div>\n*/\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "source code",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true
          },
          "id": "TextInput-wax8G",
          "description": "Get text inputs from the Playground.",
          "display_name": "Question",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": 1280.8790965087233,
          "y": 576.2994778826793
        },
        "dragging": false
      },
      {
        "id": "Prompt-ijt8p",
        "type": "genericNode",
        "position": {
          "x": 1866.457184724657,
          "y": 288.53125352603445
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Empty Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Creating a Design Failure Mode and Effects Analysis (DFMEA) for a mobile iOS app involves identifying potential failure modes, their causes, and effects, and then prioritizing them to implement corrective actions. \n<DFMEA_steps>\n1. List Components and Functions\n\n\t•\tBreak down the app into its main components and functions. Examples include:\n\t•\tUser Interface (UI)\n\t•\tAuthentication\n\t•\tData Management\n\t•\tNetwork Communication\n\t•\tNotifications\n\n2. Identify Potential Failure Modes\n\n\t•\tFor each component/function, identify potential failure modes. Examples include:\n\t•\tUI: Inconsistent user interface elements\n\t•\tAuthentication: Failure to log in\n\t•\tData Management: Data loss or corruption\n\t•\tNetwork Communication: Poor connectivity or server downtime\n\t•\tNotifications: Failure to send or receive notifications\n\n3. Determine the Effects of Failures\n\n\t•\tAssess the impact of each failure mode on the user and the system. Examples include:\n\t•\tUser frustration\n\t•\tSecurity risks\n\t•\tData loss\n\t•\tDecreased app performance\n\n4. Identify Causes of Failures\n\n\t•\tIdentify the root causes of each failure mode. Examples include:\n\t•\tUI: Inadequate testing on different devices\n\t•\tAuthentication: Weak encryption methods\n\t•\tData Management: Insufficient backup mechanisms\n\t•\tNetwork Communication: Server configuration issues\n\t•\tNotifications: API limitations.\n</DFMEA_steps>\n\nYour job is to focus on items DFMEA steps 1 and 2 ONLY:\n1. List Components and Functions\n2. Identify Potential Failure Modes\n\nAnalyze the provided source code below in the context of steps 1 and 2 with respect to a DFMEA review and analysis:\nUse Chain-Of-Thought reasoning and think out loud using critical thinking skills to think about all the possible design failures, potential errors and their effects on the user in such failures scenarios and error conditions.\nRespond with a well structured and detailed list of findings and relevant information necessary for documenting a DFMEA\n\nSource Code for DFMEA analysis: \n```{source_code}```\n\nYou may begin your analysis  for steps 1 and 2 which are: \n1. List Components and Functions\nAND\n2. Identify Potential Failure Modes\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "source_code": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "source_code",
                "display_name": "source_code",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Prompt",
              "Record"
            ],
            "name": "",
            "display_name": "DFMEA Part 1",
            "documentation": "",
            "custom_fields": {
              "template": [
                "source_code"
              ]
            },
            "output_types": [
              "Prompt"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-ijt8p",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "DFMEA Part 1"
        },
        "selected": false,
        "width": 384,
        "height": 419,
        "positionAbsolute": {
          "x": 1866.457184724657,
          "y": 288.53125352603445
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-vfGgd",
        "type": "genericNode",
        "position": {
          "x": 2515.3715160549937,
          "y": 1048.7809996828198
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "1000",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": false,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.2",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false,
            "edited": true
          },
          "id": "OpenAIModel-vfGgd",
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "OpenAI",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 665,
        "positionAbsolute": {
          "x": 2515.3715160549937,
          "y": 1048.7809996828198
        },
        "dragging": false
      },
      {
        "id": "Prompt-vet70",
        "type": "genericNode",
        "position": {
          "x": 1864.3231246798318,
          "y": 937.1833779567255
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Empty Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Creating a Design Failure Mode and Effects Analysis (DFMEA) for a mobile iOS app involves identifying potential failure modes, their causes, and effects, and then prioritizing them to implement corrective actions. \n<DFMEA_steps>\n1. List Components and Functions\n\n\t•\tBreak down the app into its main components and functions. Examples include:\n\t•\tUser Interface (UI)\n\t•\tAuthentication\n\t•\tData Management\n\t•\tNetwork Communication\n\t•\tNotifications\n\n2. Identify Potential Failure Modes\n\n\t•\tFor each component/function, identify potential failure modes. Examples include:\n\t•\tUI: Inconsistent user interface elements\n\t•\tAuthentication: Failure to log in\n\t•\tData Management: Data loss or corruption\n\t•\tNetwork Communication: Poor connectivity or server downtime\n\t•\tNotifications: Failure to send or receive notifications\n\t•\tLoss of power: Device or required system component loses power or battery depletion\n\t•\tSynchronicity/chronological inaccuracies : Errors or missing data around time sensitive and time dependent components\n\n\n3. Determine the Effects of Failures\n\n\t•\tAssess the impact of each failure mode on the user and the system. Examples include:\n\t•\tUser frustration\n\t•\tSecurity risks\n\t•\tData loss\n\t•\tDecreased app performance\n\n4. Identify Causes of Failures\n\n\t•\tIdentify the root causes of each failure mode. Examples include:\n\t•\tUI: Inadequate testing on different devices\n\t•\tAuthentication: Weak encryption methods\n\t•\tData Management: Insufficient backup mechanisms\n\t•\tNetwork Communication: Server configuration issues\n\t•\tNotifications: API limitations.\n</DFMEA_steps>\n\nYour job is to focus on items DFMEA steps 3 and 4 ONLY:\n    3. Determine the Effects of Failures\n    4. Identify Causes of Failures\n\nAnalyze the provided source code below in the context of steps 3 and 4 with respect to a DFMEA review and analysis:\nUse Chain-Of-Thought reasoning and think out loud using critical thinking skills to think about all the possible design failures, potential errors and their effects on the user in such failures scenarios and error conditions.\nRespond with a well structure and detailed list of findings and relevant information necessary for documenting a DFMEA\n\nSource Code for DFMEA analysis: \n```{source_code}```\n\nYou may begin your analysis  for steps 3 and 4 which are: \n 3. Determine the Effects of Failures\nAND\n 4. Identify Causes of Failures",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "source_code": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "source_code",
                "display_name": "source_code",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Prompt",
              "Record"
            ],
            "name": "",
            "display_name": "DFMEA Part 2",
            "documentation": "",
            "custom_fields": {
              "template": [
                "source_code"
              ]
            },
            "output_types": [
              "Prompt"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-vet70",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "DFMEA Part 2"
        },
        "selected": true,
        "width": 384,
        "height": 419,
        "positionAbsolute": {
          "x": 1864.3231246798318,
          "y": 937.1833779567255
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-YHEPs",
        "type": "genericNode",
        "position": {
          "x": 3234.281684351259,
          "y": 1670.080506144559
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "files": {
                "type": "file",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx",
                  ".jpg",
                  ".jpeg",
                  ".png",
                  ".bmp"
                ],
                "file_path": "",
                "password": false,
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "return_message": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_message",
                "display_name": "Return Message",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "AI-Assistant",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "files": null,
              "return_message": null
            },
            "output_types": [
              "Message",
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-YHEPs",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": 3234.281684351259,
          "y": 1670.080506144559
        },
        "dragging": false
      },
      {
        "id": "Prompt-DocyB",
        "type": "genericNode",
        "position": {
          "x": 3352.6097570367915,
          "y": 966.4257835674148
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Empty Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "You are tasked with creating a DFMEA matrix in the form of a CSV file from the following 4 part analysis of given source code:\n\nPart 1 Analysis:\n{dfmea_analysis_part1}\n\nPart 2 Analysis:\n{dfmea_analysis_part2}\n\nYou will need to assign the following ratings using your best judgement and rationale:\n  -Assign Severity, Occurrence, and Detection Ratings\n\n\t•\tSeverity (S): Rate the seriousness of the effect (1-10).\n\t•\tOccurrence (O): Rate the likelihood of the failure occurring (1-10).\n\t•\tDetection (D): Rate the ability to detect the failure before it reaches the user (1-10).\n\nGenerate the DFMEA Risk analysis in the form a CSV file which contains the following columns:\nA) Component/Function\nB) Potential Failure Mode\nC) Potential Effect of Failure\nD) Severity (S)\nE) Potential Cause(s) of Failure\nF) Occurrence (O)\nG) Current Controls\nH) Detection (D)\nI) RPN (Severity × Occurrence × Detection)\nJ) Recommended Actions\n\nEach row represents an identified potential failure mode with it's accompanying values for each column identified above.\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "dfmea_analysis_part1": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "dfmea_analysis_part1",
                "display_name": "dfmea_analysis_part1",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "dfmea_analysis_part2": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "dfmea_analysis_part2",
                "display_name": "dfmea_analysis_part2",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Prompt",
              "Record"
            ],
            "name": "",
            "display_name": "Merge Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "dfmea_analysis_part1",
                "dfmea_analysis_part2"
              ]
            },
            "output_types": [
              "Prompt"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-DocyB",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Merge Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 513,
        "dragging": false,
        "positionAbsolute": {
          "x": 3352.6097570367915,
          "y": 966.4257835674148
        }
      },
      {
        "id": "OpenAIModel-5yR6D",
        "type": "genericNode",
        "position": {
          "x": 3885.924145546861,
          "y": 961.4736358177399
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4000",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "OpenAIModel-5yR6D"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "positionAbsolute": {
          "x": 3885.924145546861,
          "y": 961.4736358177399
        },
        "dragging": false
      },
      {
        "id": "File-ENpB2",
        "type": "genericNode",
        "position": {
          "x": 1282.1847438866928,
          "y": 984.2053081035815
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx"
                ],
                "file_path": "",
                "password": false,
                "name": "path",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "silent_errors",
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Record"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {
              "path": null,
              "silent_errors": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "File-ENpB2"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 1282.1847438866928,
          "y": 984.2053081035815
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Prompt-ijt8p",
        "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-ijt8pœ}",
        "target": "OpenAIModel-lUFfS",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-lUFfSœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-lUFfS",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Prompt",
              "Record"
            ],
            "dataType": "Prompt",
            "id": "Prompt-ijt8p"
          }
        },
        "id": "reactflow__edge-Prompt-ijt8p{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-ijt8pœ}-OpenAIModel-lUFfS{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-lUFfSœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-lUFfS",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}",
        "target": "ChatOutput-Mg3O5",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Mg3O5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Mg3O5",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-lUFfS"
          }
        },
        "id": "reactflow__edge-OpenAIModel-lUFfS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}-ChatOutput-Mg3O5{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Mg3O5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-vet70",
        "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-vet70œ}",
        "target": "OpenAIModel-vfGgd",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-vfGgdœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-vfGgd",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Prompt",
              "Record"
            ],
            "dataType": "Prompt",
            "id": "Prompt-vet70"
          }
        },
        "id": "reactflow__edge-Prompt-vet70{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-vet70œ}-OpenAIModel-vfGgd{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-vfGgdœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-wax8G",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}",
        "target": "Prompt-ijt8p",
        "targetHandle": "{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-ijt8pœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "source_code",
            "id": "Prompt-ijt8p",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-wax8G"
          }
        },
        "id": "reactflow__edge-TextInput-wax8G{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}-Prompt-ijt8p{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-ijt8pœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-wax8G",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}",
        "target": "Prompt-vet70",
        "targetHandle": "{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-vet70œ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "source_code",
            "id": "Prompt-vet70",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-wax8G"
          }
        },
        "id": "reactflow__edge-TextInput-wax8G{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}-Prompt-vet70{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-vet70œ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-vfGgd",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}",
        "target": "ChatOutput-YHEPs",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YHEPsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-YHEPs",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-vfGgd"
          }
        },
        "id": "reactflow__edge-OpenAIModel-vfGgd{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}-ChatOutput-YHEPs{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YHEPsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-lUFfS",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}",
        "target": "Prompt-DocyB",
        "targetHandle": "{œfieldNameœ:œdfmea_analysis_part1œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "dfmea_analysis_part1",
            "id": "Prompt-DocyB",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-lUFfS"
          }
        },
        "id": "reactflow__edge-OpenAIModel-lUFfS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}-Prompt-DocyB{œfieldNameœ:œdfmea_analysis_part1œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-vfGgd",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}",
        "target": "Prompt-DocyB",
        "targetHandle": "{œfieldNameœ:œdfmea_analysis_part2œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "dfmea_analysis_part2",
            "id": "Prompt-DocyB",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-vfGgd"
          }
        },
        "id": "reactflow__edge-OpenAIModel-vfGgd{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}-Prompt-DocyB{œfieldNameœ:œdfmea_analysis_part2œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "Prompt-DocyB",
        "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-DocyBœ}",
        "target": "OpenAIModel-5yR6D",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-5yR6Dœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-5yR6D",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Prompt",
              "Record"
            ],
            "dataType": "Prompt",
            "id": "Prompt-DocyB"
          }
        },
        "id": "reactflow__edge-Prompt-DocyB{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-DocyBœ}-OpenAIModel-5yR6D{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-5yR6Dœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-5yR6D",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-5yR6Dœ}",
        "target": "ChatOutput-mDnKE",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mDnKEœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-mDnKE",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-5yR6D"
          }
        },
        "id": "reactflow__edge-OpenAIModel-5yR6D{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-5yR6Dœ}-ChatOutput-mDnKE{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mDnKEœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "className": "",
        "selected": false
      }
    ],
    "viewport": {
      "x": -653.6626079168332,
      "y": -66.85120894394913,
      "zoom": 0.6312733139498762
    }
  },
  "metadata": {
    "ChatOutput": {
      "count": 3
    },
    "OpenAIModel": {
      "count": 3
    },
    "TextInput": {
      "count": 1
    },
    "Prompt": {
      "count": 3
    },
    "File": {
      "count": 1
    },
    "total": 11
  },
  "original": {
    "id": "ae5f5ec3-801d-49a4-99d9-3d936725a5d3",
    "name": "DFMEA",
    "description": "Perform a DFMEA review on provided source code",
    "is_component": false,
    "liked_by_count": "2",
    "downloads_count": "18",
    "metadata": {
      "ChatOutput": {
        "count": 3
      },
      "OpenAIModel": {
        "count": 3
      },
      "TextInput": {
        "count": 1
      },
      "Prompt": {
        "count": 3
      },
      "File": {
        "count": 1
      },
      "total": 11
    },
    "last_tested_version": "1.0.0a61",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatOutput-Mg3O5",
          "type": "genericNode",
          "position": {
            "x": 3123.587590548263,
            "y": 399.8403962291592
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "files": {
                  "type": "file",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx",
                    ".jpg",
                    ".jpeg",
                    ".png",
                    ".bmp"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "return_message": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_message",
                  "display_name": "Return Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "AI-Assistant",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "display_name": "DFMEA Part 1 output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "files": null,
                "return_message": null
              },
              "output_types": [
                "Message",
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true
            },
            "id": "ChatOutput-Mg3O5",
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "dragging": false,
          "positionAbsolute": {
            "x": 3123.587590548263,
            "y": 399.8403962291592
          }
        },
        {
          "id": "OpenAIModel-lUFfS",
          "type": "genericNode",
          "position": {
            "x": 2514.322004869007,
            "y": 345.0915211197454
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "1000",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.2",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false,
              "edited": true
            },
            "id": "OpenAIModel-lUFfS",
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 665,
          "dragging": false,
          "positionAbsolute": {
            "x": 2514.322004869007,
            "y": 345.0915211197454
          }
        },
        {
          "id": "ChatOutput-mDnKE",
          "type": "genericNode",
          "position": {
            "x": 4400.341849442737,
            "y": 1207.7107258979297
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "files": {
                  "type": "file",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx",
                    ".jpg",
                    ".jpeg",
                    ".png",
                    ".bmp"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "return_message": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_message",
                  "display_name": "Return Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Answer",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "files": null,
                "return_message": null
              },
              "output_types": [
                "Message",
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true
            },
            "id": "ChatOutput-mDnKE",
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": 4400.341849442737,
            "y": 1207.7107258979297
          },
          "dragging": false
        },
        {
          "id": "TextInput-wax8G",
          "type": "genericNode",
          "position": {
            "x": 1280.8790965087233,
            "y": 576.2994778826793
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "import { element } from \"angular\";\nimport template from \"./dashboard.html\";\nimport \"./dashboard.styl\";\nimport \"./draganddrop.component.css\";\n\nimport io from \"socket.io-client\";\n\nconst dashboardComponent = {\n  template,\n  bindings: {},\n  controller: /* @ngInject */ class DashboardController {\n    static get $inject() {\n      return [\n        \"$log\",\n        \"$state\",\n        \"$stateParams\",\n        \"$timeout\",\n        \"Title\",\n        \"Project\",\n        \"ProjectStatus\",\n        \"ListType\",\n        \"ListItem\",\n        \"Document\",\n        \"Comment\",\n        \"AuthenticatedUser\",\n        \"DocumentAssignment\",\n        \"ProjectDetail\",\n        \"DashboardSettingDialog\",\n        \"DashboardSetting\",\n      ];\n    }\n    constructor(\n      $log,\n      $state,\n      $stateParams,\n      $timeout,\n      Title,\n      Project,\n      ProjectStatus,\n      ListType,\n      ListItem,\n      Document,\n      Comment,\n      AuthenticatedUser,\n      DocumentAssignment,\n      ProjectDetail,\n      DashboardSettingDialog,\n      DashboardSetting\n    ) {\n      this.$log = $log;\n      this.$state = $state;\n      this.$stateParams = $stateParams;\n      this.$timeout = $timeout;\n      this.Title = Title;\n      this.Project = Project;\n      this.ProjectStatus = ProjectStatus;\n      this.ListType = ListType;\n      this.ListItem = ListItem;\n      this.Document = Document;\n      this.Comment = Comment;\n      this.AuthenticatedUser = AuthenticatedUser;\n      this.DocumentAssignment = DocumentAssignment;\n      this.ProjectDetail = ProjectDetail;\n      this.DashboardSetting = DashboardSetting;\n      this.DashboardSettingDialog = DashboardSettingDialog;\n\n      this.Title.updateTitle(\"DSH\");\n      this.projectByMonth = [];\n      this.chartType1 = \"LineChart\";\n      this.chartType2 = \"BarChart\";\n      this.chartType3 = \"PieChart\";\n\n      this.chartName2 = \"project\";\n      this.chartName3 = \"assignment\";\n      this.completedProjects = [];\n      this.needIntakeList = [];\n      this.awaitingIntake = [];\n      this.recentProjects = [];\n\n      this.canViewIntake = this.AuthenticatedUser.canView(\"Intake\");\n      this.loadIntakeProjects = this.loadIntakeProjects.bind(this);\n      this.loadCycleCompleteProjects =\n        this.loadCycleCompleteProjects.bind(this);\n      this.getIntakeCount = this.getIntakeCount.bind(this);\n      this.getCycleCount = this.getCycleCount.bind(this);\n      this.loadRecentProjects = this.loadRecentProjects.bind(this);\n      this.getRecentProjectsCount = this.getRecentProjectsCount.bind(this);\n\n      this.is_RecentlyViewedProjects_visible = false;\n      this.is_ProjectsAwaitingIntake_visible = false;\n      this.is_ProjectsInCycleComplete_visible = false;\n      this.is_OpenProjects_visible = false;\n      this.is_MyAssignments_visible = false;\n      this.is_OpenComments_visible = false;\n      this.onRefreshIntake = this.reloadIntake.bind(this);\n      this.setUpdatedIntake = this.setUpdatedIntake.bind(this);\n      this.updatedIntake = false;\n      this.onRefreshCycleComplete = this.reloadCycleComplete.bind(this);\n      this.setUpdatedCycleComplete = this.setUpdatedCycleComplete.bind(this);\n      this.updatedCycleComplete = false;\n\n      this.openProjectsOrder = \"order1\";\n      this.myAssignmentsOrder = \"order2\";\n      this.openCommentsOrder = \"order3\";\n      this.awaitingIntakeOrder = \"order4\";\n      this.recentlyViewProjectsOrder = \"order5\";\n      this.projectsInCycleOrder = \"order6\";\n    }\n\n    $onInit() {\n      this.setTable();\n      this.isLoadingData = true;\n      this.setDashboardSetting();\n      this.callInit = this.$timeout(() => {\n        // this.loadWidgets().finally(() => {\n        //   this.isLoadingData = false;\n        // });\n        this.loadOpenProjectWidget();\n        this.loadMyAssignmentWidget();\n\n        this.loadIntakeProjects();\n        this.loadCycleCompleteProjects();\n        this.loadRecentProjects();\n        this.loadOpenCommentByGroupWidget();\n      }, 1000);\n    }\n\n    $onDestroy() {\n      this.$timeout.cancel(this.callInit);\n    }\n\n    reloadIntake() {\n      this.$timeout(() => {\n        this.updatedIntake = true;\n      });\n    }\n\n    setUpdatedIntake(value) {\n      this.updatedIntake = value;\n    }\n\n    reloadCycleComplete() {\n      this.$timeout(() => {\n        this.updatedCycleComplete = true;\n      });\n    }\n\n    setUpdatedCycleComplete(value) {\n      this.updatedCycleComplete = value;\n    }\n\n    setTable() {\n      this.query = {\n        order: [\"dueDate\", \"status_LIID\", \"projectNumber\"],\n        limit: 100,\n        page: 1,\n      };\n      this.rows = [];\n      this.pageName = \"projectsAwaitingIntake\";\n      this.disabled = {\n        projectNumber: true,\n        status: true,\n      };\n      this.initialColumns = {\n        serviceArea: true,\n        projectNumber: true,\n        name: true,\n        status: true,\n        startDate: true,\n        dueDate: true,\n        control: true,\n      };\n      this.headers = [\n        {\n          eplanListType: \"ProjectStatusExternal\",\n          translate: \"projectList.status\",\n          key: \"status\",\n          filterKey: \"status.abbreviation\",\n          sortKey: \"status.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          listItemOptions: {\n            style: \"outline\",\n          },\n          width: 5,\n        },\n        {\n          translate: \"projectList.number\",\n          key: \"projectNumber\",\n          filterKey: \"project.projectNumber\",\n          width: 15,\n        },\n        {\n          translate: \"projectList.location\",\n          //key: 'address.formatted.short.streetAddress',\n          //filterKey: 'address.formatted.short.streetAddress',\n          key: \"address\",\n          filterKey: `CONCAT(address.streetNumber, ' ', address.streetName, ', ', address.city, ' ', address.state, ' ', address.zipCode )`,\n          width: 20,\n        },\n        {\n          eplanListType: \"ProjectServiceArea\",\n          translate: \"projectList.serviceArea\",\n          key: \"serviceArea\",\n          filterKey: \"area.abbreviation\",\n          sortKey: \"area.abbreviation\",\n          align: \"center\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.name\",\n          key: \"name\",\n          filterKey: \"project.name\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.partnerId\",\n          key: \"vendor_id\",\n          filterKey: \"project.vendor_id\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.referenceNumber\",\n          key: \"referenceNumber\",\n          filterKey: \"project.referenceNumber\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectType\",\n          translate: \"projectList.projectType\",\n          key: \"projectType\",\n          filterKey: \"type.abbreviation\",\n          sortKey: \"type.abbreviation\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectApplicationType\",\n          translate: \"projectList.applicationType\",\n          key: \"application\",\n          filterKey: \"application.abbreviation\",\n          sortKey: \"aapplication.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.projectManager\",\n          key: \"managerFullname\",\n          filterKey: \"manager.managerFullname\",\n          width: 10,\n        },\n        {\n          eplanListType: \"ProjectCycle\",\n          translate: \"projectList.cycle\",\n          key: \"cycle\",\n          filterKey: \"cycle.abbreviation\",\n          sortKey: \"cycle.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectPriority\",\n          translate: \"projectList.priority\",\n          key: \"priority\",\n          filterKey: \"priority.abbreviation\",\n          sortKey: \"priority.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.valuationAmount\",\n          key: \"valuationAmount\",\n          filterKey: \"project.valuationAmount\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.squareFootage\",\n          key: \"squareFootage\",\n          filterKey: \"project.squareFootage\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.buildingHeight\",\n          key: \"buildingHeight\",\n          filterKey: \"project.buildingHeight\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.fees\",\n          key: \"fees\",\n          filterKey: \"project.fees\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.createdAt\",\n          key: \"createdAt\",\n          filterKey: `DATE_FORMAT(project.createdAt, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.startDate\",\n          key: \"startDate\",\n          filterKey: `DATE_FORMAT(project.startDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.dueDate\",\n          key: \"dueDate\",\n          filterKey: `DATE_FORMAT(project.dueDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n      ];\n      if (this.canViewIntake) {\n        this.headers.push({\n          translate: \"Actions\",\n          key: \"control\",\n          type: \"control\",\n          width: 5,\n          controlItems: [\n            {\n              type: \"icon\",\n              src: \"arrow-right-box\",\n              description: \"Go to Project Intake\",\n              func: this.goToIntake.bind(this),\n            },\n          ],\n        });\n      }\n      this.pageName1 = \"projectsInCycleComplete\";\n      this.disabled1 = {\n        projectNumber: true,\n        status: true,\n      };\n      this.initialColumns1 = {\n        serviceArea: true,\n        projectNumber: true,\n        name: true,\n        staatus: true,\n        startDate: true,\n        dueDate: true,\n        control: true,\n      };\n      this.headers1 = [\n        {\n          eplanListType: \"ProjectStatusExternal\",\n          translate: \"projectList.status\",\n          key: \"status\",\n          filterKey: \"status.abbreviation\",\n          sortKey: \"status.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          listItemOptions: {\n            style: \"outline\",\n          },\n          width: 5,\n        },\n        {\n          translate: \"projectList.number\",\n          key: \"projectNumber\",\n          filterKey: \"project.projectNumber\",\n          width: 15,\n        },\n        {\n          translate: \"projectList.location\",\n          key: \"address\",\n          filterKey: `CONCAT(address.streetNumber, ' ', address.streetName, ', ', address.city, ' ', address.state, ' ', address.zipCode )`,\n          width: 20,\n        },\n        {\n          eplanListType: \"ProjectServiceArea\",\n          translate: \"projectList.serviceArea\",\n          key: \"serviceArea\",\n          filterKey: \"area.abbreviation\",\n          sortKey: \"area.abbreviation\",\n          align: \"center\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.name\",\n          key: \"name\",\n          filterKey: \"project.name\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.partnerId\",\n          key: \"vendor_id\",\n          filterKey: \"project.vendor_id\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.referenceNumber\",\n          key: \"referenceNumber\",\n          filterKey: \"project.referenceNumber\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectType\",\n          translate: \"projectList.projectType\",\n          key: \"projectType\",\n          filterKey: \"type.abbreviation\",\n          sortKey: \"type.abbreviation\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectApplicationType\",\n          translate: \"projectList.applicationType\",\n          key: \"application\",\n          filterKey: \"application.abbreviation\",\n          sortKey: \"application.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.projectManager\",\n          key: \"managerFullname\",\n          filterKey: \"manager.managerFullname\",\n          width: 10,\n        },\n        {\n          eplanListType: \"ProjectCycle\",\n          translate: \"projectList.cycle\",\n          key: \"cycle\",\n          filterKey: \"cycle.abbreviation\",\n          sortKey: \"cycle.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectPriority\",\n          translate: \"projectList.priority\",\n          key: \"priority\",\n          filterKey: \"priority.abbreviation\",\n          sortKey: \"priority.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.valuationAmount\",\n          key: \"valuationAmount\",\n          filterKey: \"project.valuationAmount\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.squareFootage\",\n          key: \"squareFootage\",\n          filterKey: \"project.squareFootage\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.buildingHeight\",\n          key: \"buildingHeight\",\n          filterKey: \"project.buildingHeight\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.fees\",\n          key: \"fees\",\n          filterKey: \"project.fees\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.createdAt\",\n          key: \"createdAt\",\n          filterKey: `DATE_FORMAT(project.createdAt, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.startDate\",\n          key: \"startDate\",\n          filterKey: `DATE_FORMAT(project.startDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.dueDate\",\n          key: \"dueDate\",\n          filterKey: `DATE_FORMAT(project.dueDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n      ];\n\n      this.pageName2 = \"recentProjects\";\n      this.disabled2 = {\n        projectNumber: true,\n        status: true,\n      };\n      this.initialColumns2 = {\n        serviceArea: true,\n        projectNumber: true,\n        name: true,\n        staatus: true,\n        startDate: true,\n        dueDate: true,\n        control: true,\n      };\n      this.headers2 = [\n        {\n          eplanListType: \"ProjectStatusExternal\",\n          translate: \"projectList.status\",\n          key: \"status\",\n          filterKey: \"status.abbreviation\",\n          sortKey: \"status.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          listItemOptions: {\n            style: \"outline\",\n          },\n          width: 5,\n        },\n        {\n          translate: \"projectList.number\",\n          key: \"projectNumber\",\n          filterKey: \"project.projectNumber\",\n          width: 15,\n        },\n        {\n          translate: \"projectList.location\",\n          // address ends up being an object in the current Recent Projects response from the server\n          // vs string in other responses\n          // this field appears to be the best fit for the column\n          //key: \"address\",\n          key: 'address.formatted.short.streetAddress',          \n          filterKey: `CONCAT(address.streetNumber, ' ', address.streetName, ', ', address.city, ' ', address.state, ' ', address.zipCode )`,\n          width: 20,\n        },\n        {\n          eplanListType: \"ProjectServiceArea\",\n          translate: \"projectList.serviceArea\",\n          key: \"serviceArea\",\n          filterKey: \"area.abbreviation\",\n          sortKey: \"area.abbreviation\",\n          align: \"center\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.name\",\n          key: \"name\",\n          filterKey: \"project.name\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.partnerId\",\n          key: \"vendor_id\",\n          filterKey: \"project.vendor_id\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.referenceNumber\",\n          key: \"referenceNumber\",\n          filterKey: \"project.referenceNumber\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectType\",\n          translate: \"projectList.projectType\",\n          key: \"projectType\",\n          filterKey: \"type.abbreviation\",\n          sortKey: \"type.abbreviation\",\n          type: \"listitem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectApplicationType\",\n          translate: \"projectList.applicationType\",\n          key: \"application\",\n          filterKey: \"application.abbreviation\",\n          sortKey: \"application.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.projectManager\",\n          key: \"managerFullname\",\n          filterKey: \"manager.managerFullname\",\n          width: 10,\n        },\n        {\n          eplanListType: \"ProjectCycle\",\n          translate: \"projectList.cycle\",\n          key: \"cycle\",\n          filterKey: \"cycle.abbreviation\",\n          sortKey: \"cycle.abbreviation\",\n          align: \"center\",\n          type: \"listItem\",\n          width: 5,\n        },\n        {\n          eplanListType: \"ProjectPriority\",\n          translate: \"projectList.priority\",\n          key: \"priority\",\n          filterKey: \"priority.abbreviation\",\n          sortKey: \"priority.abbreviation\",\n          type: \"listitem\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.valuationAmount\",\n          key: \"valuationAmount\",\n          filterKey: \"project.valuationAmount\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.squareFootage\",\n          key: \"squareFootage\",\n          filterKey: \"project.squareFootage\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.buildingHeight\",\n          key: \"buildingHeight\",\n          filterKey: \"project.buildingHeight\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.fees\",\n          key: \"fees\",\n          filterKey: \"project.fees\",\n          filter: \"currency\",\n          width: 5,\n        },\n        {\n          translate: \"projectList.createdAt\",\n          key: \"createdAt\",\n          filterKey: `DATE_FORMAT(project.createdAt, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.startDate\",\n          key: \"startDate\",\n          filterKey: `DATE_FORMAT(project.startDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"projectList.dueDate\",\n          key: \"dueDate\",\n          filterKey: `DATE_FORMAT(project.dueDate, '%d %b %Y')`,\n          filter: \"eplanDate:false\",\n          width: 10,\n        },\n        {\n          translate: \"Actions\",\n          key: \"control\",\n          type: \"control\",\n          width: 5,\n          controlItems: [\n            {\n              type: \"icon\",\n              src: \"arrow-right-box\",\n              description: \"Go to Project Details\",\n              func: this.goToProjectDetail.bind(this),\n            },\n          ],\n        },\n      ];\n      if (this.AuthenticatedUser.canView(\"ProjectDeliverablePage\")) {\n        this.headers1.push({\n          translate: \"Actions\",\n          key: \"control\",\n          type: \"control\",\n          width: 5,\n          controlItems: [\n            {\n              type: \"icon\",\n              src: \"arrow-right-box\",\n              description: \"Go to Project Deliverables\",\n              func: this.goToDeliverable.bind(this),\n            },\n          ],\n        });\n      }\n    }\n\n    loadIntakeProjects(\n      limit = 10,\n      page = 0,\n      order = { id: \"order-id\", desc: true, key: \"id\" },\n      filter = {},\n      viewFilterObject = {}\n    ) {\n      Object.assign(filter, viewFilterObject);\n      if (!order) {\n        order = { id: \"order-id\", desc: true, key: \"id\" };\n      }\n      if (!order.key) {\n        order.key = \"id\";\n      }\n      // const orderId = order['id'].split('-');\n      const viewOrder = order.desc ? \"DESC\" : \"ASC\";\n      const orderString = order.key + \" \" + viewOrder;\n\n      return this.Project.Intake.query({\n        applyFilter: true,\n        page,\n        limit,\n        order: orderString,\n        raw: true,\n        ...filter,\n      }).$promise.then((results) => {\n        return results;\n        // this.projectAwaitingIntake = results;\n      });\n    }\n\n    async getIntakeCount(filter) {\n      return this.Project.Intake.query({\n        applyFilter: true,\n        count: true,\n        raw: true,\n        ...filter,\n      })\n        .$promise.then((count) => {\n          return count[0];\n          // this.projectAwaitingIntake = results;\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    async getCycleCount(filter) {\n      return this.Project.Cycle.query({\n        applyFilter: true,\n        count: true,\n        raw: true,\n        ...filter,\n      })\n        .$promise.then((count) => {\n          return count[0];\n          // this.projectAwaitingIntake = results;\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    loadCycleCompleteProjects(\n      limit = 10,\n      page = 0,\n      order = { id: \"order-id\", desc: true, key: \"id\" },\n      filter = {},\n      viewFilterObject = {}\n    ) {\n      Object.assign(filter, viewFilterObject);\n      if (!order) {\n        order = { id: \"order-id\", desc: true, key: \"id\" };\n      }\n\n      if (!order.key) {\n        order.key = \"id\";\n      }\n      // const orderId = order['id'].split('-');\n      const viewOrder = order.desc ? \"DESC\" : \"ASC\";\n      const orderString = order.key + \" \" + viewOrder;\n      return this.Project.Cycle.query({\n        applyFilter: true,\n        page,\n        limit,\n        order: orderString,\n        raw: true,\n        ...filter,\n      })\n        .$promise.then((results) => {\n          this.projectInCycleComplete = results;\n          return results;\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    loadRecentProjects(limit = 10, page = 0) {\n      return this.Project.Recent.query()\n        .$promise.then((results) => {\n          const offset = page * limit || 0;\n          return results.slice(offset, offset + limit);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    async getRecentProjectsCount() {\n      return this.Project.Recent.query({ count: true })\n        .$promise.then((count) => {\n          return count[0];\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n\n    loadWidgets() {\n      this.isLoadingData = true;\n      return this.Project.Widget.get({ user_id: this.AuthenticatedUser.id })\n        .$promise.then((res) => {\n          const { charts, tables } = res;\n          this.$timeout(() => {\n            this.openProjectByDueDate = charts.openProjectByDueDate;\n            this.myAsssignmentByDueDate = charts.myAsssignmentByDueDate;\n\n            this.openCommentsByGroup = charts.openCommentByGroup.data;\n            this.openCommentsByGroupOptions = charts.openCommentByGroup.options;\n\n            // this.openCommentsByUser = charts.openCommentByUser.data;\n            // this.openCommentsByUserOptions = charts.openCommentByUser.options;\n          });\n          // this.$timeout(() => {\n          //     // this.projectAwaitingIntake = tables.projectAwaitingIntake;\n          //     // this.projectInCycleComplete = tables.projectInCycleComplete;\n          // }, 2000);\n        })\n        .catch(console.log);\n    }\n\n    loadOpenProjectWidget() {\n      try {\n        this.isLoadingOpenProjectData = true;\n        return this.Project.OpenProjectWidget.get().$promise.then((res) => {\n          this.openProjectByDueDate = res.openProjectByDueDate;\n          this.isLoadingOpenProjectData = false;\n        });\n      } catch (error) {\n        console.log(\"error: \", error);\n      }\n    }\n\n    loadMyAssignmentWidget() {\n      try {\n        this.isLoadingMyAssignmentData = true;\n        return this.Project.MyAssignmentWidget.get({\n          user_id: this.AuthenticatedUser.id,\n        }).$promise.then((res) => {\n          this.myAsssignmentByDueDate = res.myAsssignmentByDueDate;\n          this.isLoadingMyAssignmentData = false;\n        });\n      } catch (error) {\n        console.log(\"error: \", error);\n      }\n    }\n\n    loadOpenCommentByGroupWidget() {\n      try {\n        this.isLoadingOpenCommentByGroupData = true;\n        return this.Project.OpenCommentByGroupWidget.get({}).$promise.then(\n          (res) => {\n            this.openCommentsByGroup = res.data;\n            this.openCommentsByGroupOptions = res.options;\n            this.isLoadingOpenCommentByGroupData = false;\n          }\n        );\n      } catch (error) {\n        console.log(\"error: \", error);\n      }\n    }\n\n    getDefaultDashboardSetting() {\n      return [\n        {\n          id: 1,\n          value: true,\n          label: \"Open Projects by Due Date Graph\",\n        },\n        {\n          id: 2,\n          value: true,\n          label: \"My Open Assignments by Due Date Graph\",\n        },\n        {\n          id: 3,\n          value: true,\n          label: \"Open Comments by Group Graph\",\n        },\n        {\n          id: 4,\n          value: true,\n          label: \"Recently Viewed Projects\",\n        },\n        {\n          id: 5,\n          value: true,\n          label: \"Projects Awaiting Intake\",\n        },\n        {\n          id: 6,\n          value: true,\n          label: \"Projects in Cycle Complete\",\n        },\n      ];\n    }\n\n    setDashboardSetting() {\n      this.DashboardSetting.fetch({\n        id: this.AuthenticatedUser.id,\n      }).$promise.then((data) => {\n        if (data && data.data && data.data.dashboard) {\n          this.dashboardSetting = JSON.parse(data.data.dashboard);\n        } else {\n          this.dashboardSetting = this.getDefaultDashboardSetting();\n        }\n        var i = 1;\n        for (let setting of this.dashboardSetting) {\n          switch (setting.id) {\n            case 1:\n              this.is_OpenProjects_visible = setting.value;\n              this.openProjectsOrder = \"order\" + i;\n              break;\n            case 2:\n              this.is_MyAssignments_visible = setting.value;\n              this.myAssignmentsOrder = \"order\" + i;\n              break;\n            case 3:\n              this.is_OpenComments_visible = setting.value;\n              this.openCommentsOrder = \"order\" + i;\n              break;\n            case 4:\n              this.is_RecentlyViewedProjects_visible = setting.value;\n              this.recentlyViewProjectsOrder = \"order\" + i;\n              break;\n            case 5:\n              this.is_ProjectsAwaitingIntake_visible = setting.value;\n              this.awaitingIntakeOrder = \"order\" + i;\n              break;\n            case 6:\n              this.is_ProjectsInCycleComplete_visible = setting.value;\n              this.projectsInCycleOrder = \"order\" + i;\n              break;\n          }\n          i++;\n        }\n      });\n    }\n\n    openSettingDialog() {\n      this.DashboardSettingDialog({\n        user_id: this.AuthenticatedUser.id,\n        settings: this.dashboardSetting,\n      })\n        .then(() => {\n          this.setDashboardSetting();\n        })\n        .finally(() => {\n          setTimeout(() => {\n            document.getElementById(\"dashboardSettingDialogButton\").focus();\n          }, 0);\n        });\n    }\n\n    select(row) {\n      this.$state.go(\"projects.project\", {\n        project_id: row.id,\n      });\n    }\n\n    goToIntake(row) {\n      window.open(`/#!/projects/${row.id}/intake`);\n    }\n\n    goToDeliverable(row) {\n      window.open(`/#!/projects/${row.id}/deliverables`);\n    }\n\n    goToProjectDetail(row) {\n      window.open(`/#!/projects/${row.id}/details/info`);\n    }\n  },\n};\nexport default dashboardComponent;\n\n/* Original HTML for non DnD dashboard\n\n    <div layout=\"row\" layout-wrap=\"true\" class=\"widget-container\">\n      <!-- <div flex-gt-lg=\"25\"\n               flex-gt-md=\"33\"\n               flex-gt-sm=\"50\"\n               flex-gt-xs=\"100\"\n              class=\"card-container\">\n              <md-card>\n                  <h3>Project By Month</h3>\n                  <react-Chart data=\"$ctrl.projectByMonth\"\n                               type=\"$ctrl.chartType1\"\n                               width=\"350\"\n                               height=\"200\"></react-Chart>\n              </md-card>\n          </div> -->\n      <div\n        ng-if=\"$ctrl.is_OpenProjects_visible\"\n        flex-gt-lg=\"33\"\n        flex-gt-md=\"33\"\n        flex-gt-sm=\"50\"\n        flex-gt-xs=\"100\"\n        class=\"card-container\"\n      >\n        <md-card ng-if=\"$ctrl.is_OpenProjects_visible\">\n          <h2 id=\"label1\">Open Projects by Due Date</h2>\n  \n          <react-Chart\n            data=\"$ctrl.openProjectByDueDate\"\n            loading=\"$ctrl.isLoadingOpenProjectData\"\n            type=\"$ctrl.chartType2\"\n            name=\"$ctrl.chartName2\"\n            width=\"350\"\n            height=\"200\"\n            alt=\"Figure for number of open projects by Due Date\"\n            aria-labelledby=\"label1\"\n            role=\"img\"\n          >\n          </react-Chart>\n        </md-card>\n      </div>\n      <div\n        ng-if=\"$ctrl.is_MyAssignments_visible\"\n        flex-gt-lg=\"33\"\n        flex-gt-md=\"33\"\n        flex-gt-sm=\"50\"\n        flex-gt-xs=\"100\"\n        class=\"card-container\"\n      >\n        <md-card ng-if=\"$ctrl.is_MyAssignments_visible\">\n          <h2 id=\"label2\">My Open Assignments by Due Date</h2>\n          <react-Chart\n            data=\"$ctrl.myAsssignmentByDueDate\"\n            loading=\"$ctrl.isLoadingMyAssignmentData\"\n            type=\"$ctrl.chartType2\"\n            name=\"$ctrl.chartName3\"\n            width=\"350\"\n            height=\"200\"\n            alt=\"Figure for number of my assignments by Due Date\"\n            aria-labelledby=\"label2\"\n            role=\"img\"\n          >\n          </react-Chart>\n        </md-card>\n      </div>\n      <div\n        ng-if=\"$ctrl.is_OpenComments_visible\"\n        flex-gt-lg=\"33\"\n        flex-gt-md=\"33\"\n        flex-gt-sm=\"50\"\n        flex-gt-xs=\"100\"\n        class=\"card-container\"\n      >\n        <md-card ng-if=\"$ctrl.is_OpenComments_visible\">\n          <h2 id=\"label3\">Open Comments by Group</h2>\n  \n          <react-Chart\n            data=\"$ctrl.openCommentsByGroup\"\n            loading=\"$ctrl.isLoadingOpenCommentByGroupData\"\n            type=\"$ctrl.chartType2\"\n            name=\"'comment'\"\n            options=\"$ctrl.openCommentsByGroupOptions\"\n            width=\"350\"\n            height=\"200\"\n            alt=\"Figure for number of open comments by Group\"\n            aria-labelledby=\"label3\"\n            role=\"img\"\n          >\n          </react-Chart>\n        </md-card>\n      </div>\n      <!-- <div flex-gt-lg=\"25\"\n               flex-gt-md=\"33\"\n               flex-gt-sm=\"50\"\n               flex-gt-xs=\"100\"\n               class=\"card-container\">\n              <md-card>\n                  <h3>Open Comments by User</h3>\n                  <react-Chart data=\"$ctrl.openCommentsByUser\"\n                               type=\"$ctrl.chartType2\"\n                               name=\"'comment'\"\n                               options=\"$ctrl.openCommentsByUserOptions\"\n                               width=\"350\"\n                               height=\"200\">\n                  </react-Chart>\n              </md-card>\n          </div> -->\n    </div>\n    <div>\n      <md-card\n        ng-if=\"$ctrl.recentProjects && $ctrl.is_RecentlyViewedProjects_visible\"\n        class=\"table-container\"\n      >\n        <h2 class=\"eplan-records-table-title\">Recently Viewed Projects</h2>\n        <eplan-records-table\n          headers=\"$ctrl.headers2\"\n          page-name=\"$ctrl.pageName2\"\n          disabled=\"$ctrl.disabled2\"\n          initial-columns=\"$ctrl.initialColumns2\"\n          reset=\"$ctrl.reset\"\n          query=\"$ctrl.query\"\n          selectable=\"false\"\n          is-clickable=\"false\"\n          layout=\"column\"\n          server-side-pagination=\"true\"\n          get-data=\"$ctrl.loadRecentProjects\"\n          get-count=\"$ctrl.getRecentProjectsCount\"\n          sortable=\"false\"\n          recent-projects=\"true\"\n          flex\n        >\n        </eplan-records-table>\n      </md-card>\n    </div>\n    <div>\n      <md-card\n        ng-if=\"$ctrl.rows && $ctrl.is_ProjectsAwaitingIntake_visible\"\n        class=\"table-container\"\n      >\n        <h2 class=\"eplan-records-table-title\">Projects Awaiting Intake</h2>\n        <eplan-records-table\n          rows=\"$ctrl.projectAwaitingIntake\"\n          headers=\"$ctrl.headers\"\n          page-name=\"$ctrl.pageName\"\n          disabled=\"$ctrl.disabled\"\n          initial-columns=\"$ctrl.initialColumns\"\n          reset=\"$ctrl.reset\"\n          query=\"$ctrl.query\"\n          selectable=\"false\"\n          is-clickable=\"false\"\n          layout=\"column\"\n          server-side-pagination=\"true\"\n          get-data=\"$ctrl.loadIntakeProjects\"\n          get-count=\"$ctrl.getIntakeCount\"\n          on-refresh=\"$ctrl.onRefreshIntake\"\n          updated=\"$ctrl.updatedIntake\"\n          set-updated=\"$ctrl.setUpdatedIntake\"\n          flex\n        >\n        </eplan-records-table>\n      </md-card>\n    </div>\n    <div>\n      <md-card\n        ng-if=\"$ctrl.completedProjects && $ctrl.is_ProjectsInCycleComplete_visible\"\n        class=\"table-container\"\n      >\n        <h2 class=\"eplan-records-table-title\">Projects in Cycle Complete</h2>\n        <eplan-records-table\n          rows=\"$ctrl.projectInCycleComplete\"\n          headers=\"$ctrl.headers1\"\n          page-name=\"$ctrl.pageName1\"\n          disabled=\"$ctrl.disabled1\"\n          initial-columns=\"$ctrl.initialColumns1\"\n          reset=\"$ctrl.reset\"\n          query=\"$ctrl.query\"\n          selectable=\"false\"\n          is-clickable=\"false\"\n          layout=\"column\"\n          server-side-pagination=\"true\"\n          get-data=\"$ctrl.loadCycleCompleteProjects\"\n          get-count=\"$ctrl.getCycleCount\"\n          on-refresh=\"$ctrl.onRefreshCycleComplete\"\n          updated=\"$ctrl.updatedCycleComplete\"\n          set-updated=\"$ctrl.setUpdatedCycleComplete\"\n          flex\n        >\n        </eplan-records-table>\n      </md-card>\n    </div>\n*/\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "source code",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true
            },
            "id": "TextInput-wax8G",
            "description": "Get text inputs from the Playground.",
            "display_name": "Question",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": 1280.8790965087233,
            "y": 576.2994778826793
          },
          "dragging": false
        },
        {
          "id": "Prompt-ijt8p",
          "type": "genericNode",
          "position": {
            "x": 1866.457184724657,
            "y": 288.53125352603445
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Empty Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Creating a Design Failure Mode and Effects Analysis (DFMEA) for a mobile iOS app involves identifying potential failure modes, their causes, and effects, and then prioritizing them to implement corrective actions. \n<DFMEA_steps>\n1. List Components and Functions\n\n\t•\tBreak down the app into its main components and functions. Examples include:\n\t•\tUser Interface (UI)\n\t•\tAuthentication\n\t•\tData Management\n\t•\tNetwork Communication\n\t•\tNotifications\n\n2. Identify Potential Failure Modes\n\n\t•\tFor each component/function, identify potential failure modes. Examples include:\n\t•\tUI: Inconsistent user interface elements\n\t•\tAuthentication: Failure to log in\n\t•\tData Management: Data loss or corruption\n\t•\tNetwork Communication: Poor connectivity or server downtime\n\t•\tNotifications: Failure to send or receive notifications\n\n3. Determine the Effects of Failures\n\n\t•\tAssess the impact of each failure mode on the user and the system. Examples include:\n\t•\tUser frustration\n\t•\tSecurity risks\n\t•\tData loss\n\t•\tDecreased app performance\n\n4. Identify Causes of Failures\n\n\t•\tIdentify the root causes of each failure mode. Examples include:\n\t•\tUI: Inadequate testing on different devices\n\t•\tAuthentication: Weak encryption methods\n\t•\tData Management: Insufficient backup mechanisms\n\t•\tNetwork Communication: Server configuration issues\n\t•\tNotifications: API limitations.\n</DFMEA_steps>\n\nYour job is to focus on items DFMEA steps 1 and 2 ONLY:\n1. List Components and Functions\n2. Identify Potential Failure Modes\n\nAnalyze the provided source code below in the context of steps 1 and 2 with respect to a DFMEA review and analysis:\nUse Chain-Of-Thought reasoning and think out loud using critical thinking skills to think about all the possible design failures, potential errors and their effects on the user in such failures scenarios and error conditions.\nRespond with a well structured and detailed list of findings and relevant information necessary for documenting a DFMEA\n\nSource Code for DFMEA analysis: \n```{source_code}```\n\nYou may begin your analysis  for steps 1 and 2 which are: \n1. List Components and Functions\nAND\n2. Identify Potential Failure Modes\n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "source_code": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "source_code",
                  "display_name": "source_code",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Prompt",
                "Record"
              ],
              "name": "",
              "display_name": "DFMEA Part 1",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "source_code"
                ]
              },
              "output_types": [
                "Prompt"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-ijt8p",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "DFMEA Part 1"
          },
          "selected": false,
          "width": 384,
          "height": 419,
          "positionAbsolute": {
            "x": 1866.457184724657,
            "y": 288.53125352603445
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-vfGgd",
          "type": "genericNode",
          "position": {
            "x": 2515.3715160549937,
            "y": 1048.7809996828198
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "1000",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.2",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false,
              "edited": true
            },
            "id": "OpenAIModel-vfGgd",
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 665,
          "positionAbsolute": {
            "x": 2515.3715160549937,
            "y": 1048.7809996828198
          },
          "dragging": false
        },
        {
          "id": "Prompt-vet70",
          "type": "genericNode",
          "position": {
            "x": 1864.3231246798318,
            "y": 937.1833779567255
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Empty Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Creating a Design Failure Mode and Effects Analysis (DFMEA) for a mobile iOS app involves identifying potential failure modes, their causes, and effects, and then prioritizing them to implement corrective actions. \n<DFMEA_steps>\n1. List Components and Functions\n\n\t•\tBreak down the app into its main components and functions. Examples include:\n\t•\tUser Interface (UI)\n\t•\tAuthentication\n\t•\tData Management\n\t•\tNetwork Communication\n\t•\tNotifications\n\n2. Identify Potential Failure Modes\n\n\t•\tFor each component/function, identify potential failure modes. Examples include:\n\t•\tUI: Inconsistent user interface elements\n\t•\tAuthentication: Failure to log in\n\t•\tData Management: Data loss or corruption\n\t•\tNetwork Communication: Poor connectivity or server downtime\n\t•\tNotifications: Failure to send or receive notifications\n\t•\tLoss of power: Device or required system component loses power or battery depletion\n\t•\tSynchronicity/chronological inaccuracies : Errors or missing data around time sensitive and time dependent components\n\n\n3. Determine the Effects of Failures\n\n\t•\tAssess the impact of each failure mode on the user and the system. Examples include:\n\t•\tUser frustration\n\t•\tSecurity risks\n\t•\tData loss\n\t•\tDecreased app performance\n\n4. Identify Causes of Failures\n\n\t•\tIdentify the root causes of each failure mode. Examples include:\n\t•\tUI: Inadequate testing on different devices\n\t•\tAuthentication: Weak encryption methods\n\t•\tData Management: Insufficient backup mechanisms\n\t•\tNetwork Communication: Server configuration issues\n\t•\tNotifications: API limitations.\n</DFMEA_steps>\n\nYour job is to focus on items DFMEA steps 3 and 4 ONLY:\n    3. Determine the Effects of Failures\n    4. Identify Causes of Failures\n\nAnalyze the provided source code below in the context of steps 3 and 4 with respect to a DFMEA review and analysis:\nUse Chain-Of-Thought reasoning and think out loud using critical thinking skills to think about all the possible design failures, potential errors and their effects on the user in such failures scenarios and error conditions.\nRespond with a well structure and detailed list of findings and relevant information necessary for documenting a DFMEA\n\nSource Code for DFMEA analysis: \n```{source_code}```\n\nYou may begin your analysis  for steps 3 and 4 which are: \n 3. Determine the Effects of Failures\nAND\n 4. Identify Causes of Failures",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "source_code": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "source_code",
                  "display_name": "source_code",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Prompt",
                "Record"
              ],
              "name": "",
              "display_name": "DFMEA Part 2",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "source_code"
                ]
              },
              "output_types": [
                "Prompt"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-vet70",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "DFMEA Part 2"
          },
          "selected": true,
          "width": 384,
          "height": 419,
          "positionAbsolute": {
            "x": 1864.3231246798318,
            "y": 937.1833779567255
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-YHEPs",
          "type": "genericNode",
          "position": {
            "x": 3234.281684351259,
            "y": 1670.080506144559
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "files": {
                  "type": "file",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx",
                    ".jpg",
                    ".jpeg",
                    ".png",
                    ".bmp"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "return_message": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_message",
                  "display_name": "Return Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "AI-Assistant",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "files": null,
                "return_message": null
              },
              "output_types": [
                "Message",
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true
            },
            "id": "ChatOutput-YHEPs",
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": 3234.281684351259,
            "y": 1670.080506144559
          },
          "dragging": false
        },
        {
          "id": "Prompt-DocyB",
          "type": "genericNode",
          "position": {
            "x": 3352.6097570367915,
            "y": 966.4257835674148
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Empty Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)  # type: ignore\n        self.status = prompt.format_text()\n        return prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "You are tasked with creating a DFMEA matrix in the form of a CSV file from the following 4 part analysis of given source code:\n\nPart 1 Analysis:\n{dfmea_analysis_part1}\n\nPart 2 Analysis:\n{dfmea_analysis_part2}\n\nYou will need to assign the following ratings using your best judgement and rationale:\n  -Assign Severity, Occurrence, and Detection Ratings\n\n\t•\tSeverity (S): Rate the seriousness of the effect (1-10).\n\t•\tOccurrence (O): Rate the likelihood of the failure occurring (1-10).\n\t•\tDetection (D): Rate the ability to detect the failure before it reaches the user (1-10).\n\nGenerate the DFMEA Risk analysis in the form a CSV file which contains the following columns:\nA) Component/Function\nB) Potential Failure Mode\nC) Potential Effect of Failure\nD) Severity (S)\nE) Potential Cause(s) of Failure\nF) Occurrence (O)\nG) Current Controls\nH) Detection (D)\nI) RPN (Severity × Occurrence × Detection)\nJ) Recommended Actions\n\nEach row represents an identified potential failure mode with it's accompanying values for each column identified above.\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "dfmea_analysis_part1": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "dfmea_analysis_part1",
                  "display_name": "dfmea_analysis_part1",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "dfmea_analysis_part2": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "dfmea_analysis_part2",
                  "display_name": "dfmea_analysis_part2",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Prompt",
                "Record"
              ],
              "name": "",
              "display_name": "Merge Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "dfmea_analysis_part1",
                  "dfmea_analysis_part2"
                ]
              },
              "output_types": [
                "Prompt"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-DocyB",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Merge Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 513,
          "dragging": false,
          "positionAbsolute": {
            "x": 3352.6097570367915,
            "y": 966.4257835674148
          }
        },
        {
          "id": "OpenAIModel-5yR6D",
          "type": "genericNode",
          "position": {
            "x": 3885.924145546861,
            "y": 961.4736358177399
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4000",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "OpenAIModel-5yR6D"
          },
          "selected": false,
          "width": 384,
          "height": 571,
          "positionAbsolute": {
            "x": 3885.924145546861,
            "y": 961.4736358177399
          },
          "dragging": false
        },
        {
          "id": "File-ENpB2",
          "type": "genericNode",
          "position": {
            "x": 1282.1847438866928,
            "y": 984.2053081035815
          },
          "data": {
            "type": "File",
            "node": {
              "template": {
                "path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "path",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "silent_errors",
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "A generic file loader.",
              "icon": "file-text",
              "base_classes": [
                "Record"
              ],
              "display_name": "File",
              "documentation": "",
              "custom_fields": {
                "path": null,
                "silent_errors": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "File-ENpB2"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 1282.1847438866928,
            "y": 984.2053081035815
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "Prompt-ijt8p",
          "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-ijt8pœ}",
          "target": "OpenAIModel-lUFfS",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-lUFfSœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-lUFfS",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Prompt",
                "Record"
              ],
              "dataType": "Prompt",
              "id": "Prompt-ijt8p"
            }
          },
          "id": "reactflow__edge-Prompt-ijt8p{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-ijt8pœ}-OpenAIModel-lUFfS{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-lUFfSœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "OpenAIModel-lUFfS",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}",
          "target": "ChatOutput-Mg3O5",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Mg3O5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-Mg3O5",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-lUFfS"
            }
          },
          "id": "reactflow__edge-OpenAIModel-lUFfS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}-ChatOutput-Mg3O5{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Mg3O5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "Prompt-vet70",
          "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-vet70œ}",
          "target": "OpenAIModel-vfGgd",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-vfGgdœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-vfGgd",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Prompt",
                "Record"
              ],
              "dataType": "Prompt",
              "id": "Prompt-vet70"
            }
          },
          "id": "reactflow__edge-Prompt-vet70{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-vet70œ}-OpenAIModel-vfGgd{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-vfGgdœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "TextInput-wax8G",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}",
          "target": "Prompt-ijt8p",
          "targetHandle": "{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-ijt8pœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "source_code",
              "id": "Prompt-ijt8p",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-wax8G"
            }
          },
          "id": "reactflow__edge-TextInput-wax8G{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}-Prompt-ijt8p{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-ijt8pœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-wax8G",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}",
          "target": "Prompt-vet70",
          "targetHandle": "{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-vet70œ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "source_code",
              "id": "Prompt-vet70",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-wax8G"
            }
          },
          "id": "reactflow__edge-TextInput-wax8G{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-wax8Gœ}-Prompt-vet70{œfieldNameœ:œsource_codeœ,œidœ:œPrompt-vet70œ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "OpenAIModel-vfGgd",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}",
          "target": "ChatOutput-YHEPs",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YHEPsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-YHEPs",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-vfGgd"
            }
          },
          "id": "reactflow__edge-OpenAIModel-vfGgd{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}-ChatOutput-YHEPs{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-YHEPsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "OpenAIModel-lUFfS",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}",
          "target": "Prompt-DocyB",
          "targetHandle": "{œfieldNameœ:œdfmea_analysis_part1œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "dfmea_analysis_part1",
              "id": "Prompt-DocyB",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-lUFfS"
            }
          },
          "id": "reactflow__edge-OpenAIModel-lUFfS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-lUFfSœ}-Prompt-DocyB{œfieldNameœ:œdfmea_analysis_part1œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "OpenAIModel-vfGgd",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}",
          "target": "Prompt-DocyB",
          "targetHandle": "{œfieldNameœ:œdfmea_analysis_part2œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "dfmea_analysis_part2",
              "id": "Prompt-DocyB",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-vfGgd"
            }
          },
          "id": "reactflow__edge-OpenAIModel-vfGgd{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vfGgdœ}-Prompt-DocyB{œfieldNameœ:œdfmea_analysis_part2œ,œidœ:œPrompt-DocyBœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "Prompt-DocyB",
          "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-DocyBœ}",
          "target": "OpenAIModel-5yR6D",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-5yR6Dœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-5yR6D",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Prompt",
                "Record"
              ],
              "dataType": "Prompt",
              "id": "Prompt-DocyB"
            }
          },
          "id": "reactflow__edge-Prompt-DocyB{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-DocyBœ}-OpenAIModel-5yR6D{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-5yR6Dœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "OpenAIModel-5yR6D",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-5yR6Dœ}",
          "target": "ChatOutput-mDnKE",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mDnKEœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-mDnKE",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-5yR6D"
            }
          },
          "id": "reactflow__edge-OpenAIModel-5yR6D{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-5yR6Dœ}-ChatOutput-mDnKE{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mDnKEœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "className": "",
          "selected": false
        }
      ],
      "viewport": {
        "x": -653.6626079168332,
        "y": -66.85120894394913,
        "zoom": 0.6312733139498762
      }
    },
    "date_created": "2024-07-16T21:54:16.958Z",
    "date_updated": "2024-07-16T21:54:17.040Z",
    "status": "Public",
    "sort": null,
    "user_updated": "cc602ae9-7126-48c4-bfc5-ef49c42ed5c2",
    "user_created": {
      "username": "zion-tilley",
      "first_name": "Zion",
      "last_name": "Tilley",
      "id": "cc602ae9-7126-48c4-bfc5-ef49c42ed5c2"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:03.817Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 70,
    "converter_version": "1.0.0"
  }
}