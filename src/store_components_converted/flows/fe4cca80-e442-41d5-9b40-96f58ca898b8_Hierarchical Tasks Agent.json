{
  "id": "fe4cca80-e442-41d5-9b40-96f58ca898b8",
  "name": "Hierarchical Tasks Agent",
  "description": "This Agentic Flow has a Manager and a couple Workers. The manager can answer the user's question straightaway or delegate the task to other agents. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Alan",
    "first_name": "Alan",
    "last_name": "Santana",
    "id": "86b907ba-afc7-4987-b509-670bc384a020",
    "full_name": "Alan Santana"
  },
  "store_url": "https://www.langflow.store/store/component/fe4cca80-e442-41d5-9b40-96f58ca898b8",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-08T09:46:37.199Z",
    "updated": "2024-09-08T22:18:31.534Z",
    "downloaded": "2025-08-19T17:50:06.683Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Represents a group of agents, defining how they should collaborate and the tasks they should perform.",
          "display_name": "Hierarchical Crew",
          "id": "HierarchicalCrewComponent-TDLe8",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Represents a group of agents, defining how they should collaborate and the tasks they should perform.",
            "display_name": "Hierarchical Crew",
            "documentation": "",
            "edited": false,
            "field_order": [
              "verbose",
              "memory",
              "use_cache",
              "max_rpm",
              "share_crew",
              "function_calling_llm",
              "agents",
              "tasks",
              "manager_llm",
              "manager_agent"
            ],
            "frozen": false,
            "icon": "CrewAI",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Output",
                "method": "build_output",
                "name": "output",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "agents": {
                "advanced": false,
                "display_name": "Agents",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Agent"
                ],
                "list": true,
                "name": "agents",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from crewai import Crew, Process  # type: ignore\n\nfrom axiestudio.base.agents.crewai.crew import BaseCrewComponent\nfrom axiestudio.io import HandleInput\n\n\nclass HierarchicalCrewComponent(BaseCrewComponent):\n    display_name: str = \"Hierarchical Crew\"\n    description: str = (\n        \"Represents a group of agents, defining how they should collaborate and the tasks they should perform.\"\n    )\n    documentation: str = \"https://docs.crewai.com/how-to/Hierarchical/\"\n    icon = \"CrewAI\"\n\n    inputs = BaseCrewComponent._base_inputs + [\n        HandleInput(name=\"agents\", display_name=\"Agents\", input_types=[\"Agent\"], is_list=True),\n        HandleInput(name=\"tasks\", display_name=\"Tasks\", input_types=[\"HierarchicalTask\"], is_list=True),\n        HandleInput(name=\"manager_llm\", display_name=\"Manager LLM\", input_types=[\"LanguageModel\"], required=False),\n        HandleInput(name=\"manager_agent\", display_name=\"Manager Agent\", input_types=[\"Agent\"], required=False),\n    ]\n\n    def build_crew(self) -> Crew:\n        tasks, agents = self.get_tasks_and_agents()\n        crew = Crew(\n            agents=agents,\n            tasks=tasks,\n            process=Process.hierarchical,\n            verbose=self.verbose,\n            memory=self.memory,\n            cache=self.use_cache,\n            max_rpm=self.max_rpm,\n            share_crew=self.share_crew,\n            function_calling_llm=self.function_calling_llm,\n            manager_agent=self.manager_agent,\n            manager_llm=self.manager_llm,\n            step_callback=self.get_step_callback(),\n            task_callback=self.get_task_callback(),\n        )\n        return crew\n"
              },
              "function_calling_llm": {
                "advanced": true,
                "display_name": "Function Calling LLM",
                "dynamic": false,
                "info": "Turns the ReAct CrewAI agent into a function-calling agent",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "name": "function_calling_llm",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "manager_agent": {
                "advanced": false,
                "display_name": "Manager Agent",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Agent"
                ],
                "list": false,
                "name": "manager_agent",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "manager_llm": {
                "advanced": false,
                "display_name": "Manager LLM",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "name": "manager_llm",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "max_rpm": {
                "advanced": true,
                "display_name": "Max RPM",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "max_rpm",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "memory": {
                "advanced": true,
                "display_name": "Memory",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "share_crew": {
                "advanced": true,
                "display_name": "Share Crew",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "share_crew",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "tasks": {
                "advanced": false,
                "display_name": "Tasks",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "HierarchicalTask"
                ],
                "list": true,
                "name": "tasks",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "use_cache": {
                "advanced": true,
                "display_name": "Cache",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "use_cache",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "verbose": {
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              }
            },
            "lf_version": "1.0.17"
          },
          "type": "HierarchicalCrewComponent"
        },
        "dragging": false,
        "height": 457,
        "id": "HierarchicalCrewComponent-TDLe8",
        "position": {
          "x": 602.4791470999934,
          "y": 293.6284512626677
        },
        "selected": false,
        "type": "genericNode",
        "width": 384,
        "positionAbsolute": {
          "x": 602.4791470999934,
          "y": 293.6284512626677
        }
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-PZ9l4",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "frozen": false,
            "icon": "ChatOutput",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
              },
              "data_template": {
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "lf_version": "1.0.17"
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 300,
        "id": "ChatOutput-PZ9l4",
        "position": {
          "x": 1070.9148596889393,
          "y": 499.80777483894144
        },
        "positionAbsolute": {
          "x": 1070.9148596889393,
          "y": 499.80777483894144
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Each task must have a description, an expected output and an agent responsible for execution.",
          "display_name": "Hierarchical Task",
          "id": "HierarchicalTaskComponent-dOKaE",
          "node": {
            "base_classes": [
              "HierarchicalTask"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Each task must have a description, an expected output and an agent responsible for execution.",
            "display_name": "Hierarchical Task",
            "documentation": "",
            "edited": false,
            "field_order": [
              "task_description",
              "expected_output",
              "tools"
            ],
            "frozen": false,
            "icon": "CrewAI",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Task",
                "method": "build_task",
                "name": "task_output",
                "selected": "HierarchicalTask",
                "types": [
                  "HierarchicalTask"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.agents.crewai.tasks import HierarchicalTask\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, MultilineInput, Output\n\n\nclass HierarchicalTaskComponent(Component):\n    display_name: str = \"Hierarchical Task\"\n    description: str = \"Each task must have a description, an expected output and an agent responsible for execution.\"\n    icon = \"CrewAI\"\n    inputs = [\n        MultilineInput(\n            name=\"task_description\",\n            display_name=\"Description\",\n            info=\"Descriptive text detailing task's purpose and execution.\",\n        ),\n        MultilineInput(\n            name=\"expected_output\",\n            display_name=\"Expected Output\",\n            info=\"Clear definition of expected task outcome.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"List of tools/resources limited for task execution. Uses the Agent tools by default.\",\n            required=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Task\", name=\"task_output\", method=\"build_task\"),\n    ]\n\n    def build_task(self) -> HierarchicalTask:\n        task = HierarchicalTask(\n            description=self.task_description,\n            expected_output=self.expected_output,\n            tools=self.tools or [],\n        )\n        self.status = task\n        return task\n"
              },
              "expected_output": {
                "advanced": false,
                "display_name": "Expected Output",
                "dynamic": false,
                "info": "Clear definition of expected task outcome.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "expected_output",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Receive user queries and determine whether the query is about general financial news or specific market data.\nStart using Date Agent to check for the current date, addressing the issue of outdated information and enhancing the overall relevance and accuracy of the agents' outputs.\nEmphasis on Brazilian news.\nFilter out older news and ensure the information is current and relevant to the user's query.\nDelegate tasks to the News Research Agent for news-related queries about economy and finances not related to asset prices and to the Market Data Agent for specific asset price queries. Always check for the current date, using Date Agent addressing the issue of outdated information and enhancing the overall relevance and accuracy of the agents' outputs. Informations shouldn´t be outdated. Informations provided by Market Data Agent has priority when the query is about a specific asset price queries. Informations provided by News Research Agent has priority in other cases using current date provided by Date Agent. \nAnswer in portuguese.\n"
              },
              "task_description": {
                "advanced": false,
                "display_name": "Description",
                "dynamic": false,
                "info": "Descriptive text detailing task's purpose and execution.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "task_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools": {
                "advanced": true,
                "display_name": "Tools",
                "dynamic": false,
                "info": "List of tools/resources limited for task execution. Uses the Agent tools by default.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "lf_version": "1.0.17"
          },
          "type": "HierarchicalTaskComponent"
        },
        "dragging": false,
        "height": 411,
        "id": "HierarchicalTaskComponent-dOKaE",
        "position": {
          "x": 4.22628074978536,
          "y": -265.0172709027561
        },
        "positionAbsolute": {
          "x": 4.22628074978536,
          "y": -265.0172709027561
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Represents an agent of CrewAI.",
          "display_name": "CrewAI Agent",
          "id": "CrewAIAgentComponent-462HS",
          "node": {
            "base_classes": [
              "Agent"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Represents an agent of CrewAI.",
            "display_name": "CrewAI Agent",
            "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
            "edited": false,
            "field_order": [
              "role",
              "goal",
              "backstory",
              "tools",
              "llm",
              "memory",
              "verbose",
              "allow_delegation",
              "allow_code_execution",
              "kwargs"
            ],
            "frozen": false,
            "icon": "CrewAI",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Agent",
                "method": "build_output",
                "name": "output",
                "selected": "Agent",
                "types": [
                  "Agent"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "allow_code_execution": {
                "advanced": true,
                "display_name": "Allow Code Execution",
                "dynamic": false,
                "info": "Whether the agent is allowed to execute code.",
                "list": false,
                "name": "allow_code_execution",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "allow_delegation": {
                "advanced": false,
                "display_name": "Allow Delegation",
                "dynamic": false,
                "info": "Whether the agent is allowed to delegate tasks to other agents.",
                "list": false,
                "name": "allow_delegation",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "backstory": {
                "advanced": false,
                "display_name": "Backstory",
                "dynamic": false,
                "info": "The backstory of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "backstory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Proficient in using search tools and identifying credible sources for financial news."
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n"
              },
              "goal": {
                "advanced": false,
                "display_name": "Goal",
                "dynamic": false,
                "info": "The objective of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "goal",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "To provide users with the most relevant breaking news articles and insights from trusted financial sources."
              },
              "kwargs": {
                "advanced": true,
                "display_name": "kwargs",
                "dynamic": false,
                "info": "kwargs of agent.",
                "list": true,
                "name": "kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "llm": {
                "advanced": false,
                "display_name": "Language Model",
                "dynamic": false,
                "info": "Language model that will run the agent.",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "name": "llm",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "memory": {
                "advanced": true,
                "display_name": "Memory",
                "dynamic": false,
                "info": "Whether the agent should have memory or not",
                "list": false,
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "role": {
                "advanced": false,
                "display_name": "Role",
                "dynamic": false,
                "info": "The role of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "role",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "News Research Agent\n"
              },
              "tools": {
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "Tools at agents disposal",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": []
              },
              "verbose": {
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              }
            },
            "lf_version": "1.0.17"
          },
          "type": "CrewAIAgentComponent"
        },
        "dragging": false,
        "height": 638,
        "id": "CrewAIAgentComponent-462HS",
        "position": {
          "x": -563.3353402319818,
          "y": 124.86485699239273
        },
        "positionAbsolute": {
          "x": -563.3353402319818,
          "y": 124.86485699239273
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Represents an agent of CrewAI.",
          "display_name": "CrewAI Agent",
          "id": "CrewAIAgentComponent-FfiP5",
          "node": {
            "base_classes": [
              "Agent"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Represents an agent of CrewAI.",
            "display_name": "CrewAI Agent",
            "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
            "edited": false,
            "field_order": [
              "role",
              "goal",
              "backstory",
              "tools",
              "llm",
              "memory",
              "verbose",
              "allow_delegation",
              "allow_code_execution",
              "kwargs"
            ],
            "frozen": false,
            "icon": "CrewAI",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Agent",
                "method": "build_output",
                "name": "output",
                "selected": "Agent",
                "types": [
                  "Agent"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "allow_code_execution": {
                "advanced": true,
                "display_name": "Allow Code Execution",
                "dynamic": false,
                "info": "Whether the agent is allowed to execute code.",
                "list": false,
                "name": "allow_code_execution",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "allow_delegation": {
                "advanced": false,
                "display_name": "Allow Delegation",
                "dynamic": false,
                "info": "Whether the agent is allowed to delegate tasks to other agents.",
                "list": false,
                "name": "allow_delegation",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "backstory": {
                "advanced": false,
                "display_name": "Backstory",
                "dynamic": false,
                "info": "The backstory of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "backstory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Experienced in managing information flow and task delegation in financial contexts."
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n"
              },
              "goal": {
                "advanced": false,
                "display_name": "Goal",
                "dynamic": false,
                "info": "The objective of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "goal",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Delegate tasks to the News Research Agent for news-related queries about economy and finances not related to asset prices and to the Market Data Agent for specific asset price queries. Always check for the current date, using Date Agent addressing the issue of outdated information and enhancing the overall relevance and accuracy of the agents' outputs. Informations shouldn´t be outdated. Informations provided by Market Data Agent has priority when the query is about a specific asset price queries. Informations provided by News Research Agent has priority in other cases using current date provided by Date Agent. \n"
              },
              "kwargs": {
                "advanced": true,
                "display_name": "kwargs",
                "dynamic": false,
                "info": "kwargs of agent.",
                "list": true,
                "name": "kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "llm": {
                "advanced": false,
                "display_name": "Language Model",
                "dynamic": false,
                "info": "Language model that will run the agent.",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "name": "llm",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "memory": {
                "advanced": true,
                "display_name": "Memory",
                "dynamic": false,
                "info": "Whether the agent should have memory or not",
                "list": false,
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "role": {
                "advanced": false,
                "display_name": "Role",
                "dynamic": false,
                "info": "The role of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "role",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Manager\n"
              },
              "tools": {
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "Tools at agents disposal",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": []
              },
              "verbose": {
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              }
            },
            "lf_version": "1.0.17"
          },
          "type": "CrewAIAgentComponent"
        },
        "dragging": false,
        "height": 638,
        "id": "CrewAIAgentComponent-FfiP5",
        "position": {
          "x": -618.1495915085297,
          "y": 1604.5564005012882
        },
        "positionAbsolute": {
          "x": -618.1495915085297,
          "y": 1604.5564005012882
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-3mx54",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "query": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "query",
                "display_name": "query",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "User's query:\n{query}\n"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "query"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 415,
        "id": "Prompt-3mx54",
        "position": {
          "x": -561.9017558579421,
          "y": -433.5913161630874
        },
        "positionAbsolute": {
          "x": -561.9017558579421,
          "y": -433.5913161630874
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "ChatInput-P175U",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "frozen": false,
            "icon": "ChatInput",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "qual a situação dos juros no Brasil?"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "lf_version": "1.0.17"
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 300,
        "id": "ChatInput-P175U",
        "position": {
          "x": -1227.1161422332996,
          "y": -380.26504479310324
        },
        "positionAbsolute": {
          "x": -1227.1161422332996,
          "y": -380.26504479310324
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Represents an agent of CrewAI.",
          "display_name": "CrewAI Agent",
          "id": "CrewAIAgentComponent-zbXh4",
          "node": {
            "base_classes": [
              "Agent"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Represents an agent of CrewAI.",
            "display_name": "CrewAI Agent",
            "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
            "edited": false,
            "field_order": [
              "role",
              "goal",
              "backstory",
              "tools",
              "llm",
              "memory",
              "verbose",
              "allow_delegation",
              "allow_code_execution",
              "kwargs"
            ],
            "frozen": false,
            "icon": "CrewAI",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Agent",
                "method": "build_output",
                "name": "output",
                "selected": "Agent",
                "types": [
                  "Agent"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "allow_code_execution": {
                "advanced": true,
                "display_name": "Allow Code Execution",
                "dynamic": false,
                "info": "Whether the agent is allowed to execute code.",
                "list": false,
                "name": "allow_code_execution",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "allow_delegation": {
                "advanced": false,
                "display_name": "Allow Delegation",
                "dynamic": false,
                "info": "Whether the agent is allowed to delegate tasks to other agents.",
                "list": false,
                "name": "allow_delegation",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "backstory": {
                "advanced": false,
                "display_name": "Backstory",
                "dynamic": false,
                "info": "The backstory of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "backstory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": " Skilled in financial data retrieval and analysis.\nTask Description:\nUse the Yahoo Finance Ticker Tool to find the latest prices for specific assets mentioned in user queries.\n"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n"
              },
              "goal": {
                "advanced": false,
                "display_name": "Goal",
                "dynamic": false,
                "info": "The objective of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "goal",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "To provide accurate and up-to-date market prices for assets like stocks and commodities using Yahoo Finance Ticker Tool."
              },
              "kwargs": {
                "advanced": true,
                "display_name": "kwargs",
                "dynamic": false,
                "info": "kwargs of agent.",
                "list": true,
                "name": "kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "llm": {
                "advanced": false,
                "display_name": "Language Model",
                "dynamic": false,
                "info": "Language model that will run the agent.",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "name": "llm",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "memory": {
                "advanced": true,
                "display_name": "Memory",
                "dynamic": false,
                "info": "Whether the agent should have memory or not",
                "list": false,
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "role": {
                "advanced": false,
                "display_name": "Role",
                "dynamic": false,
                "info": "The role of the agent.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "role",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Market Data Agent\n"
              },
              "tools": {
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "Tools at agents disposal",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": []
              },
              "verbose": {
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              }
            },
            "lf_version": "1.0.17"
          },
          "type": "CrewAIAgentComponent"
        },
        "dragging": false,
        "height": 638,
        "id": "CrewAIAgentComponent-zbXh4",
        "position": {
          "x": -519.2349149959462,
          "y": 876.6317151017497
        },
        "positionAbsolute": {
          "x": -519.2349149959462,
          "y": 876.6317151017497
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "id": "AIMLModel-TUJkN",
        "type": "genericNode",
        "position": {
          "x": -1632.9940687650244,
          "y": 1966.4706000843546
        },
        "data": {
          "type": "AIMLModel",
          "node": {
            "template": {
              "_type": "Component",
              "aiml_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aiml_api_base",
                "value": "",
                "display_name": "AIML API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "AIML API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The AIML API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.aiml_constants import AIML_CHAT_MODELS\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass AIMLModelComponent(LCModelComponent):\n    display_name = \"AIML\"\n    description = \"Generates text using AIML LLMs.\"\n    icon = \"AIML\"\n    name = \"AIMLModel\"\n    documentation = \"https://docs.aimlapi.com/api-reference\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=AIML_CHAT_MODELS,\n            value=AIML_CHAT_MODELS[0],\n        ),\n        StrInput(\n            name=\"aiml_api_base\",\n            display_name=\"AIML API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"AIML API Key\",\n            info=\"The AIML API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"AIML_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        aiml_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        aiml_api_base = self.aiml_api_base or \"https://api.aimlapi.com\"\n        seed = self.seed\n\n        if isinstance(aiml_api_key, SecretStr):\n            openai_api_key = aiml_api_key.get_secret_value()\n        else:\n            openai_api_key = aiml_api_key\n\n        model = ChatOpenAI(\n            model=model_name,\n            temperature=temperature,\n            api_key=openai_api_key,\n            base_url=aiml_api_base,\n            max_tokens=max_tokens or None,\n            seed=seed,\n            **model_kwargs,\n        )\n\n        return model  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai.error import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.json_body.get(\"error\", {}).get(\"message\", \"\")  # type: ignore\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "zero-one-ai/Yi-34B-Chat",
                  "allenai/OLMo-7B-Instruct",
                  "allenai/OLMo-7B-Twin-2T",
                  "allenai/OLMo-7B",
                  "Austism/chronos-hermes-13b",
                  "cognitivecomputations/dolphin-2.5-mixtral-8x7b",
                  "deepseek-ai/deepseek-coder-33b-instruct",
                  "deepseek-ai/deepseek-llm-67b-chat",
                  "garage-bAInd/Platypus2-70B-instruct",
                  "google/gemma-2b-it",
                  "google/gemma-7b-it",
                  "Gryphe/MythoMax-L2-13b",
                  "lmsys/vicuna-13b-v1.5",
                  "lmsys/vicuna-7b-v1.5",
                  "codellama/CodeLlama-13b-Instruct-hf",
                  "codellama/CodeLlama-34b-Instruct-hf",
                  "codellama/CodeLlama-70b-Instruct-hf",
                  "codellama/CodeLlama-7b-Instruct-hf",
                  "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
                  "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
                  "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                  "meta-llama/Llama-2-70b-chat-hf",
                  "meta-llama/Llama-2-13b-chat-hf",
                  "meta-llama/Llama-2-7b-chat-hf",
                  "mistralai/Mistral-7B-Instruct-v0.1",
                  "mistralai/Mistral-7B-Instruct-v0.2",
                  "mistralai/Mixtral-8x7B-Instruct-v0.1",
                  "NousResearch/Nous-Capybara-7B-V1p9",
                  "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
                  "NousResearch/Nous-Hermes-2-Mixtral-8x7B-SFT",
                  "NousResearch/Nous-Hermes-llama-2-7b",
                  "NousResearch/Nous-Hermes-Llama2-13b",
                  "NousResearch/Nous-Hermes-2-Yi-34B",
                  "openchat/openchat-3.5-1210",
                  "Open-Orca/Mistral-7B-OpenOrca",
                  "togethercomputer/Qwen-7B-Chat",
                  "Qwen/Qwen1.5-0.5B-Chat",
                  "Qwen/Qwen1.5-1.8B-Chat",
                  "Qwen/Qwen1.5-4B-Chat",
                  "Qwen/Qwen1.5-7B-Chat",
                  "Qwen/Qwen1.5-14B-Chat",
                  "Qwen/Qwen1.5-72B-Chat",
                  "snorkelai/Snorkel-Mistral-PairRM-DPO",
                  "togethercomputer/alpaca-7b",
                  "teknium/OpenHermes-2-Mistral-7B",
                  "teknium/OpenHermes-2p5-Mistral-7B",
                  "togethercomputer/falcon-40b-instruct",
                  "togethercomputer/falcon-7b-instruct",
                  "togethercomputer/Llama-2-7B-32K-Instruct",
                  "togethercomputer/RedPajama-INCITE-Chat-3B-v1",
                  "togethercomputer/RedPajama-INCITE-7B-Chat",
                  "togethercomputer/StripedHyena-Nous-7B",
                  "Undi95/ReMM-SLERP-L2-13B",
                  "Undi95/Toppy-M-7B",
                  "WizardLM/WizardLM-13B-V1.2",
                  "upstage/SOLAR-10.7B-Instruct-v1.0",
                  "gpt-4",
                  "gpt-4-turbo",
                  "gpt-4-0613",
                  "gpt-4-32k",
                  "gpt-4-32k-0613",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-1106",
                  "gpt-3.5-turbo-instruct",
                  "gpt-3.5-turbo-16k",
                  "gpt-3.5-turbo-0613",
                  "gpt-3.5-turbo-16k-0613",
                  "gpt-4o",
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using AIML LLMs.",
            "icon": "AIML",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "AIML",
            "documentation": "https://docs.aimlapi.com/api-reference",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "model_name",
              "aiml_api_base",
              "api_key",
              "temperature",
              "seed"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "AIMLModel-TUJkN"
        },
        "selected": false,
        "width": 384,
        "height": 606,
        "dragging": false
      },
      {
        "id": "AIMLModel-a8LJn",
        "type": "genericNode",
        "position": {
          "x": -1782.6395194701413,
          "y": 818.0678716394693
        },
        "data": {
          "type": "AIMLModel",
          "node": {
            "template": {
              "_type": "Component",
              "aiml_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aiml_api_base",
                "value": "",
                "display_name": "AIML API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "AIML API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The AIML API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.aiml_constants import AIML_CHAT_MODELS\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass AIMLModelComponent(LCModelComponent):\n    display_name = \"AIML\"\n    description = \"Generates text using AIML LLMs.\"\n    icon = \"AIML\"\n    name = \"AIMLModel\"\n    documentation = \"https://docs.aimlapi.com/api-reference\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=AIML_CHAT_MODELS,\n            value=AIML_CHAT_MODELS[0],\n        ),\n        StrInput(\n            name=\"aiml_api_base\",\n            display_name=\"AIML API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"AIML API Key\",\n            info=\"The AIML API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"AIML_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        aiml_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        aiml_api_base = self.aiml_api_base or \"https://api.aimlapi.com\"\n        seed = self.seed\n\n        if isinstance(aiml_api_key, SecretStr):\n            openai_api_key = aiml_api_key.get_secret_value()\n        else:\n            openai_api_key = aiml_api_key\n\n        model = ChatOpenAI(\n            model=model_name,\n            temperature=temperature,\n            api_key=openai_api_key,\n            base_url=aiml_api_base,\n            max_tokens=max_tokens or None,\n            seed=seed,\n            **model_kwargs,\n        )\n\n        return model  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai.error import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.json_body.get(\"error\", {}).get(\"message\", \"\")  # type: ignore\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "zero-one-ai/Yi-34B-Chat",
                  "allenai/OLMo-7B-Instruct",
                  "allenai/OLMo-7B-Twin-2T",
                  "allenai/OLMo-7B",
                  "Austism/chronos-hermes-13b",
                  "cognitivecomputations/dolphin-2.5-mixtral-8x7b",
                  "deepseek-ai/deepseek-coder-33b-instruct",
                  "deepseek-ai/deepseek-llm-67b-chat",
                  "garage-bAInd/Platypus2-70B-instruct",
                  "google/gemma-2b-it",
                  "google/gemma-7b-it",
                  "Gryphe/MythoMax-L2-13b",
                  "lmsys/vicuna-13b-v1.5",
                  "lmsys/vicuna-7b-v1.5",
                  "codellama/CodeLlama-13b-Instruct-hf",
                  "codellama/CodeLlama-34b-Instruct-hf",
                  "codellama/CodeLlama-70b-Instruct-hf",
                  "codellama/CodeLlama-7b-Instruct-hf",
                  "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
                  "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
                  "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                  "meta-llama/Llama-2-70b-chat-hf",
                  "meta-llama/Llama-2-13b-chat-hf",
                  "meta-llama/Llama-2-7b-chat-hf",
                  "mistralai/Mistral-7B-Instruct-v0.1",
                  "mistralai/Mistral-7B-Instruct-v0.2",
                  "mistralai/Mixtral-8x7B-Instruct-v0.1",
                  "NousResearch/Nous-Capybara-7B-V1p9",
                  "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
                  "NousResearch/Nous-Hermes-2-Mixtral-8x7B-SFT",
                  "NousResearch/Nous-Hermes-llama-2-7b",
                  "NousResearch/Nous-Hermes-Llama2-13b",
                  "NousResearch/Nous-Hermes-2-Yi-34B",
                  "openchat/openchat-3.5-1210",
                  "Open-Orca/Mistral-7B-OpenOrca",
                  "togethercomputer/Qwen-7B-Chat",
                  "Qwen/Qwen1.5-0.5B-Chat",
                  "Qwen/Qwen1.5-1.8B-Chat",
                  "Qwen/Qwen1.5-4B-Chat",
                  "Qwen/Qwen1.5-7B-Chat",
                  "Qwen/Qwen1.5-14B-Chat",
                  "Qwen/Qwen1.5-72B-Chat",
                  "snorkelai/Snorkel-Mistral-PairRM-DPO",
                  "togethercomputer/alpaca-7b",
                  "teknium/OpenHermes-2-Mistral-7B",
                  "teknium/OpenHermes-2p5-Mistral-7B",
                  "togethercomputer/falcon-40b-instruct",
                  "togethercomputer/falcon-7b-instruct",
                  "togethercomputer/Llama-2-7B-32K-Instruct",
                  "togethercomputer/RedPajama-INCITE-Chat-3B-v1",
                  "togethercomputer/RedPajama-INCITE-7B-Chat",
                  "togethercomputer/StripedHyena-Nous-7B",
                  "Undi95/ReMM-SLERP-L2-13B",
                  "Undi95/Toppy-M-7B",
                  "WizardLM/WizardLM-13B-V1.2",
                  "upstage/SOLAR-10.7B-Instruct-v1.0",
                  "gpt-4",
                  "gpt-4-turbo",
                  "gpt-4-0613",
                  "gpt-4-32k",
                  "gpt-4-32k-0613",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-1106",
                  "gpt-3.5-turbo-instruct",
                  "gpt-3.5-turbo-16k",
                  "gpt-3.5-turbo-0613",
                  "gpt-3.5-turbo-16k-0613",
                  "gpt-4o",
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using AIML LLMs.",
            "icon": "AIML",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "AIML",
            "documentation": "https://docs.aimlapi.com/api-reference",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "model_name",
              "aiml_api_base",
              "api_key",
              "temperature",
              "seed"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "AIMLModel-a8LJn"
        },
        "selected": false,
        "width": 384,
        "height": 606,
        "dragging": false
      },
      {
        "id": "YahooFinanceAPI-4C5QP",
        "type": "genericNode",
        "position": {
          "x": -1208.1849267440684,
          "y": 830.0957886854302
        },
        "data": {
          "type": "YahooFinanceAPI",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Union, List, Optional\r\nfrom langchain_core.tools import Tool\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.schema import Data\r\nfrom datetime import datetime, timedelta\r\n\r\nclass YahooFinanceAPIComponent(LCToolComponent):\r\n    display_name = \"Yahoo Finance Stock Data\"\r\n    description = \"Retrieves detailed stock data for a specific ticker or a list of tickers using Yahoo Finance.\"\r\n    name = \"YahooFinanceAPI\"\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"ticker\",\r\n        ),\r\n    ]\r\n\r\n    def run_model(self, ticker: Optional[str] = None) -> Union[Data, List[Data]]:\r\n        if ticker is None:\r\n            ticker = self.ticker\r\n        if not ticker:\r\n            raise ValueError(\"No ticker provided and self.ticker is empty.\")\r\n            \r\n        wrapper = self._build_wrapper()\r\n        \r\n        tickers = [t.strip() for t in ticker.split(\",\")]\r\n        \r\n        stock_data = []\r\n        for t in tickers:\r\n            stock = wrapper.Ticker(t)\r\n            info = stock.info\r\n            \r\n            # Get historical data\r\n            end_date = datetime.now()\r\n            start_date = end_date - timedelta(days=365)\r\n            history = stock.history(start=start_date, end=end_date)\r\n            \r\n            current_price = info.get(\"currentPrice\", \"N/A\")\r\n            \r\n            result = {\r\n                \"ticker\": t,\r\n                \"current_price\": current_price,\r\n                \"company_name\": info.get(\"longName\", \"N/A\"),\r\n                \"sector\": info.get(\"sector\", \"N/A\"),\r\n                \"market_cap\": info.get(\"marketCap\", \"N/A\"),\r\n                \"pe_ratio\": info.get(\"trailingPE\", \"N/A\"),\r\n                \"dividend_yield\": info.get(\"dividendYield\", \"N/A\"),\r\n                \"52_week_high\": info.get(\"fiftyTwoWeekHigh\", \"N/A\"),\r\n                \"52_week_low\": info.get(\"fiftyTwoWeekLow\", \"N/A\"),\r\n                \"day_change\": self._calculate_change(history, '1d'),\r\n                \"week_change\": self._calculate_change(history, '1w'),\r\n                \"month_change\": self._calculate_change(history, '1m'),\r\n                \"year_change\": self._calculate_change(history, '1y'),\r\n                \"average_volume\": info.get(\"averageVolume\", \"N/A\"),\r\n            }\r\n            stock_data.append(result)\r\n        \r\n        data = [Data(data=result, text=f\"{result['ticker']}: {result['company_name']} - Current Price: ${result['current_price']}, Day Change: {result['day_change']}%\") for result in stock_data]\r\n        \r\n        return data\r\n\r\n    def _calculate_change(self, history, period):\r\n        if history.empty:\r\n            return \"N/A\"\r\n        \r\n        if period == '1d':\r\n            if len(history) < 2:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[-2]\r\n            new_price = history['Close'].iloc[-1]\r\n        elif period == '1w':\r\n            if len(history) < 5:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[-5]\r\n            new_price = history['Close'].iloc[-1]\r\n        elif period == '1m':\r\n            if len(history) < 20:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[-20]\r\n            new_price = history['Close'].iloc[-1]\r\n        elif period == '1y':\r\n            if len(history) < 252:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[0]\r\n            new_price = history['Close'].iloc[-1]\r\n        else:\r\n            return \"N/A\"\r\n        \r\n        change = ((new_price - old_price) / old_price) * 100\r\n        return f\"{change:.2f}%\"\r\n\r\n    def build_tool(self) -> Tool:\r\n        return Tool(\r\n            name=\"yahoo_finance\",\r\n            description=\"Retrieve detailed stock data for a specific ticker or a list of tickers using Yahoo Finance.\",\r\n            func=self.run_model,\r\n        )\r\n\r\n    def _build_wrapper(self):\r\n        try:\r\n            import yfinance as yf\r\n        except ImportError:\r\n            raise ImportError(\"Please install yfinance to use YahooFinanceAPIComponent.\")\r\n        return yf\r\n        ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "ticker": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ticker",
                "value": "",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Retrieves detailed stock data for a specific ticker or a list of tickers using Yahoo Finance.",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "Yahoo Finance Ticker Tool",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "ticker"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "YahooFinanceAPI-4C5QP"
        },
        "selected": false,
        "width": 384,
        "height": 373,
        "positionAbsolute": {
          "x": -1208.1849267440684,
          "y": 830.0957886854302
        },
        "dragging": false
      },
      {
        "id": "SearchAPI-ojFP9",
        "type": "genericNode",
        "position": {
          "x": -1427.2031813758322,
          "y": -96.21012482859095
        },
        "data": {
          "type": "SearchAPI",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "SearchAPI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Union\n\nfrom langchain_community.utilities.searchapi import SearchApiAPIWrapper\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import SecretStrInput, MultilineInput, DictInput, MessageTextInput\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Tool\n\n\nclass SearchAPIComponent(LCToolComponent):\n    display_name: str = \"Search API\"\n    description: str = \"Call the searchapi.io API\"\n    name = \"SearchAPI\"\n    documentation: str = \"https://www.searchapi.io/docs/google\"\n\n    inputs = [\n        MessageTextInput(name=\"engine\", display_name=\"Engine\", value=\"google\"),\n        SecretStrInput(name=\"api_key\", display_name=\"SearchAPI API Key\", required=True),\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        DictInput(name=\"search_params\", display_name=\"Search parameters\", advanced=True, is_list=True),\n    ]\n\n    def run_model(self) -> Union[Data, list[Data]]:\n        wrapper = self._build_wrapper()\n        results = wrapper.results(query=self.input_value, **(self.search_params or {}))\n        list_results = results.get(\"organic_results\", [])\n        data = [Data(data=result, text=result[\"snippet\"]) for result in list_results]\n        self.status = data\n        return data\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return Tool(\n            name=\"search_api\",\n            description=\"Search for recent results.\",\n            func=lambda x: wrapper.run(query=x, **(self.search_params or {})),\n        )\n\n    def _build_wrapper(self):\n        return SearchApiAPIWrapper(engine=self.engine, searchapi_api_key=self.api_key)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "engine": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "engine",
                "value": "google",
                "display_name": "Engine",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "search_params": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_params",
                "value": {},
                "display_name": "Search parameters",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Call the searchapi.io API",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "Search API",
            "documentation": "https://www.searchapi.io/docs/google",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "engine",
              "api_key",
              "input_value",
              "search_params"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "SearchAPI-ojFP9"
        },
        "selected": false,
        "width": 384,
        "height": 519,
        "positionAbsolute": {
          "x": -1427.2031813758322,
          "y": -96.21012482859095
        },
        "dragging": false
      },
      {
        "id": "CrewAIAgentComponent-tPPBX",
        "type": "genericNode",
        "position": {
          "x": 417.7690151487485,
          "y": 1281.8008729678531
        },
        "data": {
          "type": "CrewAIAgentComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "Language model that will run the agent.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": [],
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "Tools at agents disposal",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "allow_code_execution": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "allow_code_execution",
                "value": true,
                "display_name": "Allow Code Execution",
                "advanced": true,
                "dynamic": false,
                "info": "Whether the agent is allowed to execute code.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "allow_delegation": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "allow_delegation",
                "value": true,
                "display_name": "Allow Delegation",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the agent is allowed to delegate tasks to other agents.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "backstory": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "backstory",
                "value": " Simple utility agent designed to fetch and provide the current date.  Provides the current date to ensure all operations are based on the latest information.",
                "display_name": "Backstory",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The backstory of the agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "goal": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "goal",
                "value": "To supply the current date to other agents for contextually accurate operations using the site https://datadehoje.com/",
                "display_name": "Goal",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The objective of the agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "kwargs": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "kwargs",
                "value": {},
                "display_name": "kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "kwargs of agent.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": true,
                "display_name": "Memory",
                "advanced": true,
                "dynamic": false,
                "info": "Whether the agent should have memory or not",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "role": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "role",
                "value": "Date Agent",
                "display_name": "Role",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The role of the agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": false,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Represents an agent of CrewAI.",
            "icon": "CrewAI",
            "base_classes": [
              "Agent"
            ],
            "display_name": "CrewAI Agent",
            "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Agent"
                ],
                "selected": "Agent",
                "name": "output",
                "display_name": "Agent",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "role",
              "goal",
              "backstory",
              "tools",
              "llm",
              "memory",
              "verbose",
              "allow_delegation",
              "allow_code_execution",
              "kwargs"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "CrewAIAgentComponent-tPPBX"
        },
        "selected": false,
        "width": 384,
        "height": 638,
        "positionAbsolute": {
          "x": 417.7690151487485,
          "y": 1281.8008729678531
        },
        "dragging": false
      },
      {
        "id": "firecrawl_scrape_api-kWZDA",
        "type": "genericNode",
        "position": {
          "x": 1029.6166144032643,
          "y": 1682.795334064698
        },
        "data": {
          "type": "firecrawl_scrape_api",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The API key to use Firecrawl API.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, IntInput, DictInput, SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass FirecrawlScrapeApiComponent(LCToolComponent):\r\n    display_name: str = \"Firecrawl Scrape API\"\r\n    description: str = \"Scrape web content using Firecrawl API.\"\r\n    name = \"firecrawl_scrape_api\"\r\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\r\n    icon = \"FirecrawlCrawlApi\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"The API key to use Firecrawl API.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"The URL to scrape.\",\r\n        ),\r\n        IntInput(\r\n            name=\"timeout\",\r\n            display_name=\"Timeout\",\r\n            info=\"Timeout in milliseconds for the request.\",\r\n            value=10000,\r\n        ),\r\n        DictInput(\r\n            name=\"pageOptions\",\r\n            display_name=\"Page Options\",\r\n            info=\"The page options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n        DictInput(\r\n            name=\"extractorOptions\",\r\n            display_name=\"Extractor Options\",\r\n            info=\"The extractor options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    class FirecrawlScrapeApiSchema(BaseModel):\r\n        url: str = Field(..., description=\"The URL to scrape\")\r\n        timeout: int = Field(default=10000, description=\"Timeout in milliseconds for the request\")\r\n        pageOptions: Optional[dict] = Field(default=None, description=\"The page options to send with the request\")\r\n        extractorOptions: Optional[dict] = Field(default=None, description=\"The extractor options to send with the request\")\r\n\r\n    def run_model(self) -> Data:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            self.url,\r\n            {\r\n                \"timeout\": str(self.timeout),\r\n                \"extractorOptions\": self.extractorOptions or {},\r\n                \"pageOptions\": self.pageOptions or {},\r\n            },\r\n        )\r\n\r\n        data = Data(data=results)\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"firecrawl_scrape_api\",\r\n            description=\"Scrape web content using Firecrawl API. Input should be a dictionary with 'url' and optional 'timeout', 'pageOptions', and 'extractorOptions'.\",\r\n            func=self._scrape_url,\r\n            args_schema=self.FirecrawlScrapeApiSchema,\r\n        )\r\n\r\n    def _scrape_url(self, url: str, timeout: int = 10000, pageOptions: Optional[dict] = None, extractorOptions: Optional[dict] = None) -> dict:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            url,\r\n            {\r\n                \"timeout\": str(timeout),\r\n                \"extractorOptions\": extractorOptions or {},\r\n                \"pageOptions\": pageOptions or {},\r\n            },\r\n        )\r\n\r\n        return results",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "extractorOptions": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "extractorOptions",
                "display_name": "Extractor Options",
                "advanced": true,
                "dynamic": false,
                "info": "The extractor options to send with the request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "pageOptions": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "pageOptions",
                "display_name": "Page Options",
                "advanced": true,
                "dynamic": false,
                "info": "The page options to send with the request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 10000,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "Timeout in milliseconds for the request.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "https://datadehoje.com/",
                "name": "url",
                "display_name": "URL",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The URL to scrape.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Scrape web content using Firecrawl API.",
            "icon": "FirecrawlCrawlApi",
            "base_classes": [
              "Data",
              "list",
              "Tool"
            ],
            "display_name": "FirecrawlScrape Tool",
            "documentation": "https://docs.firecrawl.dev/api-reference/endpoint/scrape",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data",
                  "list"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "api_key",
              "url",
              "timeout",
              "pageOptions",
              "extractorOptions"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17",
            "official": false
          },
          "id": "firecrawl_scrape_api-kWZDA"
        },
        "selected": false,
        "width": 384,
        "height": 515,
        "positionAbsolute": {
          "x": 1029.6166144032643,
          "y": 1682.795334064698
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "HierarchicalCrewComponent",
            "id": "HierarchicalCrewComponent-TDLe8",
            "name": "output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-PZ9l4",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-HierarchicalCrewComponent-TDLe8{œdataTypeœ:œHierarchicalCrewComponentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-PZ9l4{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PZ9l4œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "HierarchicalCrewComponent-TDLe8",
        "sourceHandle": "{œdataTypeœ:œHierarchicalCrewComponentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-PZ9l4",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PZ9l4œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "HierarchicalTaskComponent",
            "id": "HierarchicalTaskComponent-dOKaE",
            "name": "task_output",
            "output_types": [
              "HierarchicalTask"
            ]
          },
          "targetHandle": {
            "fieldName": "tasks",
            "id": "HierarchicalCrewComponent-TDLe8",
            "inputTypes": [
              "HierarchicalTask"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-HierarchicalTaskComponent-dOKaE{œdataTypeœ:œHierarchicalTaskComponentœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œHierarchicalTaskœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œtasksœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œHierarchicalTaskœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "HierarchicalTaskComponent-dOKaE",
        "sourceHandle": "{œdataTypeœ:œHierarchicalTaskComponentœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œHierarchicalTaskœ]}",
        "target": "HierarchicalCrewComponent-TDLe8",
        "targetHandle": "{œfieldNameœ:œtasksœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œHierarchicalTaskœ],œtypeœ:œotherœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CrewAIAgentComponent",
            "id": "CrewAIAgentComponent-462HS",
            "name": "output",
            "output_types": [
              "Agent"
            ]
          },
          "targetHandle": {
            "fieldName": "agents",
            "id": "HierarchicalCrewComponent-TDLe8",
            "inputTypes": [
              "Agent"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-CrewAIAgentComponent-462HS{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-462HSœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CrewAIAgentComponent-462HS",
        "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-462HSœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
        "target": "HierarchicalCrewComponent-TDLe8",
        "targetHandle": "{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CrewAIAgentComponent",
            "id": "CrewAIAgentComponent-FfiP5",
            "name": "output",
            "output_types": [
              "Agent"
            ]
          },
          "targetHandle": {
            "fieldName": "manager_agent",
            "id": "HierarchicalCrewComponent-TDLe8",
            "inputTypes": [
              "Agent"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-CrewAIAgentComponent-FfiP5{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œmanager_agentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CrewAIAgentComponent-FfiP5",
        "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
        "target": "HierarchicalCrewComponent-TDLe8",
        "targetHandle": "{œfieldNameœ:œmanager_agentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-3mx54",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "task_description",
            "id": "HierarchicalTaskComponent-dOKaE",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-3mx54{œdataTypeœ:œPromptœ,œidœ:œPrompt-3mx54œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-HierarchicalTaskComponent-dOKaE{œfieldNameœ:œtask_descriptionœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "Prompt-3mx54",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-3mx54œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "HierarchicalTaskComponent-dOKaE",
        "targetHandle": "{œfieldNameœ:œtask_descriptionœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-P175U",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "query",
            "id": "Prompt-3mx54",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-P175U{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P175Uœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-3mx54{œfieldNameœ:œqueryœ,œidœ:œPrompt-3mx54œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "source": "ChatInput-P175U",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P175Uœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-3mx54",
        "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œPrompt-3mx54œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CrewAIAgentComponent",
            "id": "CrewAIAgentComponent-zbXh4",
            "name": "output",
            "output_types": [
              "Agent"
            ]
          },
          "targetHandle": {
            "fieldName": "agents",
            "id": "HierarchicalCrewComponent-TDLe8",
            "inputTypes": [
              "Agent"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-CrewAIAgentComponent-zbXh4{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
        "source": "CrewAIAgentComponent-zbXh4",
        "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
        "target": "HierarchicalCrewComponent-TDLe8",
        "targetHandle": "{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}"
      },
      {
        "source": "AIMLModel-TUJkN",
        "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-TUJkNœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "CrewAIAgentComponent-FfiP5",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CrewAIAgentComponent-FfiP5",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AIMLModel",
            "id": "AIMLModel-TUJkN",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-AIMLModel-TUJkN{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-TUJkNœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-FfiP5{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "AIMLModel-a8LJn",
        "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "CrewAIAgentComponent-zbXh4",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CrewAIAgentComponent-zbXh4",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AIMLModel",
            "id": "AIMLModel-a8LJn",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-zbXh4{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "AIMLModel-a8LJn",
        "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "CrewAIAgentComponent-462HS",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CrewAIAgentComponent-462HS",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AIMLModel",
            "id": "AIMLModel-a8LJn",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-462HS{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "YahooFinanceAPI-4C5QP",
        "sourceHandle": "{œdataTypeœ:œYahooFinanceAPIœ,œidœ:œYahooFinanceAPI-4C5QPœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CrewAIAgentComponent-zbXh4",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CrewAIAgentComponent-zbXh4",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "YahooFinanceAPI",
            "id": "YahooFinanceAPI-4C5QP",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-YahooFinanceAPI-4C5QP{œdataTypeœ:œYahooFinanceAPIœ,œidœ:œYahooFinanceAPI-4C5QPœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-zbXh4{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "SearchAPI-ojFP9",
        "sourceHandle": "{œdataTypeœ:œSearchAPIœ,œidœ:œSearchAPI-ojFP9œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CrewAIAgentComponent-462HS",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CrewAIAgentComponent-462HS",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SearchAPI",
            "id": "SearchAPI-ojFP9",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "className": "",
        "id": "reactflow__edge-SearchAPI-ojFP9{œdataTypeœ:œSearchAPIœ,œidœ:œSearchAPI-ojFP9œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-462HS{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "source": "AIMLModel-a8LJn",
        "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "CrewAIAgentComponent-tPPBX",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CrewAIAgentComponent-tPPBX",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AIMLModel",
            "id": "AIMLModel-a8LJn",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-tPPBX{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "AIMLModel-a8LJn",
        "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "HierarchicalCrewComponent-TDLe8",
        "targetHandle": "{œfieldNameœ:œmanager_llmœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "manager_llm",
            "id": "HierarchicalCrewComponent-TDLe8",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AIMLModel",
            "id": "AIMLModel-a8LJn",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œmanager_llmœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "firecrawl_scrape_api-kWZDA",
        "sourceHandle": "{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-kWZDAœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CrewAIAgentComponent-tPPBX",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CrewAIAgentComponent-tPPBX",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "firecrawl_scrape_api",
            "id": "firecrawl_scrape_api-kWZDA",
            "name": "api_build_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-firecrawl_scrape_api-kWZDA{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-kWZDAœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-tPPBX{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "viewport": {
      "x": 1528.4071670955695,
      "y": 376.75465419814736,
      "zoom": 0.5947390955130242
    }
  },
  "metadata": {
    "HierarchicalCrewComponent": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "HierarchicalTaskComponent": {
      "count": 1
    },
    "CrewAIAgentComponent": {
      "count": 4
    },
    "Prompt": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "AIMLModel": {
      "count": 2
    },
    "YahooFinanceAPI": {
      "count": 1
    },
    "SearchAPI": {
      "count": 1
    },
    "firecrawl_scrape_api": {
      "count": 1
    },
    "total": 14
  },
  "original": {
    "id": "fe4cca80-e442-41d5-9b40-96f58ca898b8",
    "name": "Hierarchical Tasks Agent",
    "description": "This Agentic Flow has a Manager and a couple Workers. The manager can answer the user's question straightaway or delegate the task to other agents.",
    "is_component": false,
    "liked_by_count": "4",
    "downloads_count": "42",
    "metadata": {
      "HierarchicalCrewComponent": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "HierarchicalTaskComponent": {
        "count": 1
      },
      "CrewAIAgentComponent": {
        "count": 4
      },
      "Prompt": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "AIMLModel": {
        "count": 2
      },
      "YahooFinanceAPI": {
        "count": 1
      },
      "SearchAPI": {
        "count": 1
      },
      "firecrawl_scrape_api": {
        "count": 1
      },
      "total": 14
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "description": "Represents a group of agents, defining how they should collaborate and the tasks they should perform.",
            "display_name": "Hierarchical Crew",
            "id": "HierarchicalCrewComponent-TDLe8",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Represents a group of agents, defining how they should collaborate and the tasks they should perform.",
              "display_name": "Hierarchical Crew",
              "documentation": "",
              "edited": false,
              "field_order": [
                "verbose",
                "memory",
                "use_cache",
                "max_rpm",
                "share_crew",
                "function_calling_llm",
                "agents",
                "tasks",
                "manager_llm",
                "manager_agent"
              ],
              "frozen": false,
              "icon": "CrewAI",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Output",
                  "method": "build_output",
                  "name": "output",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "agents": {
                  "advanced": false,
                  "display_name": "Agents",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Agent"
                  ],
                  "list": true,
                  "name": "agents",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from crewai import Crew, Process  # type: ignore\n\nfrom axiestudio.base.agents.crewai.crew import BaseCrewComponent\nfrom axiestudio.io import HandleInput\n\n\nclass HierarchicalCrewComponent(BaseCrewComponent):\n    display_name: str = \"Hierarchical Crew\"\n    description: str = (\n        \"Represents a group of agents, defining how they should collaborate and the tasks they should perform.\"\n    )\n    documentation: str = \"https://docs.crewai.com/how-to/Hierarchical/\"\n    icon = \"CrewAI\"\n\n    inputs = BaseCrewComponent._base_inputs + [\n        HandleInput(name=\"agents\", display_name=\"Agents\", input_types=[\"Agent\"], is_list=True),\n        HandleInput(name=\"tasks\", display_name=\"Tasks\", input_types=[\"HierarchicalTask\"], is_list=True),\n        HandleInput(name=\"manager_llm\", display_name=\"Manager LLM\", input_types=[\"LanguageModel\"], required=False),\n        HandleInput(name=\"manager_agent\", display_name=\"Manager Agent\", input_types=[\"Agent\"], required=False),\n    ]\n\n    def build_crew(self) -> Crew:\n        tasks, agents = self.get_tasks_and_agents()\n        crew = Crew(\n            agents=agents,\n            tasks=tasks,\n            process=Process.hierarchical,\n            verbose=self.verbose,\n            memory=self.memory,\n            cache=self.use_cache,\n            max_rpm=self.max_rpm,\n            share_crew=self.share_crew,\n            function_calling_llm=self.function_calling_llm,\n            manager_agent=self.manager_agent,\n            manager_llm=self.manager_llm,\n            step_callback=self.get_step_callback(),\n            task_callback=self.get_task_callback(),\n        )\n        return crew\n"
                },
                "function_calling_llm": {
                  "advanced": true,
                  "display_name": "Function Calling LLM",
                  "dynamic": false,
                  "info": "Turns the ReAct CrewAI agent into a function-calling agent",
                  "input_types": [
                    "LanguageModel"
                  ],
                  "list": false,
                  "name": "function_calling_llm",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "manager_agent": {
                  "advanced": false,
                  "display_name": "Manager Agent",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Agent"
                  ],
                  "list": false,
                  "name": "manager_agent",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "manager_llm": {
                  "advanced": false,
                  "display_name": "Manager LLM",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "LanguageModel"
                  ],
                  "list": false,
                  "name": "manager_llm",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "max_rpm": {
                  "advanced": true,
                  "display_name": "Max RPM",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "max_rpm",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 15
                },
                "memory": {
                  "advanced": true,
                  "display_name": "Memory",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "memory",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                },
                "share_crew": {
                  "advanced": true,
                  "display_name": "Share Crew",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "share_crew",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                },
                "tasks": {
                  "advanced": false,
                  "display_name": "Tasks",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "HierarchicalTask"
                  ],
                  "list": true,
                  "name": "tasks",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "use_cache": {
                  "advanced": true,
                  "display_name": "Cache",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "use_cache",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                },
                "verbose": {
                  "advanced": true,
                  "display_name": "Verbose",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "verbose",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 0
                }
              },
              "lf_version": "1.0.17"
            },
            "type": "HierarchicalCrewComponent"
          },
          "dragging": false,
          "height": 457,
          "id": "HierarchicalCrewComponent-TDLe8",
          "position": {
            "x": 602.4791470999934,
            "y": 293.6284512626677
          },
          "selected": false,
          "type": "genericNode",
          "width": 384,
          "positionAbsolute": {
            "x": 602.4791470999934,
            "y": 293.6284512626677
          }
        },
        {
          "data": {
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "id": "ChatOutput-PZ9l4",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Display a chat message in the Playground.",
              "display_name": "Chat Output",
              "documentation": "",
              "edited": false,
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "frozen": false,
              "icon": "ChatOutput",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Message",
                  "method": "message_response",
                  "name": "message",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
                },
                "data_template": {
                  "advanced": true,
                  "display_name": "Data Template",
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "data_template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{text}"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "input_value",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                },
                "sender": {
                  "advanced": true,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "info": "Type of sender.",
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Machine"
                },
                "sender_name": {
                  "advanced": true,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "sender_name",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "AI"
                },
                "session_id": {
                  "advanced": true,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "session_id",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                },
                "should_store_message": {
                  "advanced": true,
                  "display_name": "Store Messages",
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "list": false,
                  "name": "should_store_message",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                }
              },
              "lf_version": "1.0.17"
            },
            "type": "ChatOutput"
          },
          "dragging": false,
          "height": 300,
          "id": "ChatOutput-PZ9l4",
          "position": {
            "x": 1070.9148596889393,
            "y": 499.80777483894144
          },
          "positionAbsolute": {
            "x": 1070.9148596889393,
            "y": 499.80777483894144
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Each task must have a description, an expected output and an agent responsible for execution.",
            "display_name": "Hierarchical Task",
            "id": "HierarchicalTaskComponent-dOKaE",
            "node": {
              "base_classes": [
                "HierarchicalTask"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Each task must have a description, an expected output and an agent responsible for execution.",
              "display_name": "Hierarchical Task",
              "documentation": "",
              "edited": false,
              "field_order": [
                "task_description",
                "expected_output",
                "tools"
              ],
              "frozen": false,
              "icon": "CrewAI",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Task",
                  "method": "build_task",
                  "name": "task_output",
                  "selected": "HierarchicalTask",
                  "types": [
                    "HierarchicalTask"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.base.agents.crewai.tasks import HierarchicalTask\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, MultilineInput, Output\n\n\nclass HierarchicalTaskComponent(Component):\n    display_name: str = \"Hierarchical Task\"\n    description: str = \"Each task must have a description, an expected output and an agent responsible for execution.\"\n    icon = \"CrewAI\"\n    inputs = [\n        MultilineInput(\n            name=\"task_description\",\n            display_name=\"Description\",\n            info=\"Descriptive text detailing task's purpose and execution.\",\n        ),\n        MultilineInput(\n            name=\"expected_output\",\n            display_name=\"Expected Output\",\n            info=\"Clear definition of expected task outcome.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"List of tools/resources limited for task execution. Uses the Agent tools by default.\",\n            required=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Task\", name=\"task_output\", method=\"build_task\"),\n    ]\n\n    def build_task(self) -> HierarchicalTask:\n        task = HierarchicalTask(\n            description=self.task_description,\n            expected_output=self.expected_output,\n            tools=self.tools or [],\n        )\n        self.status = task\n        return task\n"
                },
                "expected_output": {
                  "advanced": false,
                  "display_name": "Expected Output",
                  "dynamic": false,
                  "info": "Clear definition of expected task outcome.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "expected_output",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Receive user queries and determine whether the query is about general financial news or specific market data.\nStart using Date Agent to check for the current date, addressing the issue of outdated information and enhancing the overall relevance and accuracy of the agents' outputs.\nEmphasis on Brazilian news.\nFilter out older news and ensure the information is current and relevant to the user's query.\nDelegate tasks to the News Research Agent for news-related queries about economy and finances not related to asset prices and to the Market Data Agent for specific asset price queries. Always check for the current date, using Date Agent addressing the issue of outdated information and enhancing the overall relevance and accuracy of the agents' outputs. Informations shouldn´t be outdated. Informations provided by Market Data Agent has priority when the query is about a specific asset price queries. Informations provided by News Research Agent has priority in other cases using current date provided by Date Agent. \nAnswer in portuguese.\n"
                },
                "task_description": {
                  "advanced": false,
                  "display_name": "Description",
                  "dynamic": false,
                  "info": "Descriptive text detailing task's purpose and execution.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "task_description",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                },
                "tools": {
                  "advanced": true,
                  "display_name": "Tools",
                  "dynamic": false,
                  "info": "List of tools/resources limited for task execution. Uses the Agent tools by default.",
                  "input_types": [
                    "Tool"
                  ],
                  "list": true,
                  "name": "tools",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                }
              },
              "lf_version": "1.0.17"
            },
            "type": "HierarchicalTaskComponent"
          },
          "dragging": false,
          "height": 411,
          "id": "HierarchicalTaskComponent-dOKaE",
          "position": {
            "x": 4.22628074978536,
            "y": -265.0172709027561
          },
          "positionAbsolute": {
            "x": 4.22628074978536,
            "y": -265.0172709027561
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Represents an agent of CrewAI.",
            "display_name": "CrewAI Agent",
            "id": "CrewAIAgentComponent-462HS",
            "node": {
              "base_classes": [
                "Agent"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Represents an agent of CrewAI.",
              "display_name": "CrewAI Agent",
              "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
              "edited": false,
              "field_order": [
                "role",
                "goal",
                "backstory",
                "tools",
                "llm",
                "memory",
                "verbose",
                "allow_delegation",
                "allow_code_execution",
                "kwargs"
              ],
              "frozen": false,
              "icon": "CrewAI",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Agent",
                  "method": "build_output",
                  "name": "output",
                  "selected": "Agent",
                  "types": [
                    "Agent"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "allow_code_execution": {
                  "advanced": true,
                  "display_name": "Allow Code Execution",
                  "dynamic": false,
                  "info": "Whether the agent is allowed to execute code.",
                  "list": false,
                  "name": "allow_code_execution",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                },
                "allow_delegation": {
                  "advanced": false,
                  "display_name": "Allow Delegation",
                  "dynamic": false,
                  "info": "Whether the agent is allowed to delegate tasks to other agents.",
                  "list": false,
                  "name": "allow_delegation",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                },
                "backstory": {
                  "advanced": false,
                  "display_name": "Backstory",
                  "dynamic": false,
                  "info": "The backstory of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "backstory",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Proficient in using search tools and identifying credible sources for financial news."
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n"
                },
                "goal": {
                  "advanced": false,
                  "display_name": "Goal",
                  "dynamic": false,
                  "info": "The objective of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "goal",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "To provide users with the most relevant breaking news articles and insights from trusted financial sources."
                },
                "kwargs": {
                  "advanced": true,
                  "display_name": "kwargs",
                  "dynamic": false,
                  "info": "kwargs of agent.",
                  "list": true,
                  "name": "kwargs",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "dict",
                  "value": {}
                },
                "llm": {
                  "advanced": false,
                  "display_name": "Language Model",
                  "dynamic": false,
                  "info": "Language model that will run the agent.",
                  "input_types": [
                    "LanguageModel"
                  ],
                  "list": false,
                  "name": "llm",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "memory": {
                  "advanced": true,
                  "display_name": "Memory",
                  "dynamic": false,
                  "info": "Whether the agent should have memory or not",
                  "list": false,
                  "name": "memory",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                },
                "role": {
                  "advanced": false,
                  "display_name": "Role",
                  "dynamic": false,
                  "info": "The role of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "role",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "News Research Agent\n"
                },
                "tools": {
                  "advanced": false,
                  "display_name": "Tools",
                  "dynamic": false,
                  "info": "Tools at agents disposal",
                  "input_types": [
                    "Tool"
                  ],
                  "list": true,
                  "name": "tools",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": []
                },
                "verbose": {
                  "advanced": true,
                  "display_name": "Verbose",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "verbose",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                }
              },
              "lf_version": "1.0.17"
            },
            "type": "CrewAIAgentComponent"
          },
          "dragging": false,
          "height": 638,
          "id": "CrewAIAgentComponent-462HS",
          "position": {
            "x": -563.3353402319818,
            "y": 124.86485699239273
          },
          "positionAbsolute": {
            "x": -563.3353402319818,
            "y": 124.86485699239273
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Represents an agent of CrewAI.",
            "display_name": "CrewAI Agent",
            "id": "CrewAIAgentComponent-FfiP5",
            "node": {
              "base_classes": [
                "Agent"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Represents an agent of CrewAI.",
              "display_name": "CrewAI Agent",
              "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
              "edited": false,
              "field_order": [
                "role",
                "goal",
                "backstory",
                "tools",
                "llm",
                "memory",
                "verbose",
                "allow_delegation",
                "allow_code_execution",
                "kwargs"
              ],
              "frozen": false,
              "icon": "CrewAI",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Agent",
                  "method": "build_output",
                  "name": "output",
                  "selected": "Agent",
                  "types": [
                    "Agent"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "allow_code_execution": {
                  "advanced": true,
                  "display_name": "Allow Code Execution",
                  "dynamic": false,
                  "info": "Whether the agent is allowed to execute code.",
                  "list": false,
                  "name": "allow_code_execution",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                },
                "allow_delegation": {
                  "advanced": false,
                  "display_name": "Allow Delegation",
                  "dynamic": false,
                  "info": "Whether the agent is allowed to delegate tasks to other agents.",
                  "list": false,
                  "name": "allow_delegation",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                },
                "backstory": {
                  "advanced": false,
                  "display_name": "Backstory",
                  "dynamic": false,
                  "info": "The backstory of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "backstory",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Experienced in managing information flow and task delegation in financial contexts."
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n"
                },
                "goal": {
                  "advanced": false,
                  "display_name": "Goal",
                  "dynamic": false,
                  "info": "The objective of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "goal",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Delegate tasks to the News Research Agent for news-related queries about economy and finances not related to asset prices and to the Market Data Agent for specific asset price queries. Always check for the current date, using Date Agent addressing the issue of outdated information and enhancing the overall relevance and accuracy of the agents' outputs. Informations shouldn´t be outdated. Informations provided by Market Data Agent has priority when the query is about a specific asset price queries. Informations provided by News Research Agent has priority in other cases using current date provided by Date Agent. \n"
                },
                "kwargs": {
                  "advanced": true,
                  "display_name": "kwargs",
                  "dynamic": false,
                  "info": "kwargs of agent.",
                  "list": true,
                  "name": "kwargs",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "dict",
                  "value": {}
                },
                "llm": {
                  "advanced": false,
                  "display_name": "Language Model",
                  "dynamic": false,
                  "info": "Language model that will run the agent.",
                  "input_types": [
                    "LanguageModel"
                  ],
                  "list": false,
                  "name": "llm",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "memory": {
                  "advanced": true,
                  "display_name": "Memory",
                  "dynamic": false,
                  "info": "Whether the agent should have memory or not",
                  "list": false,
                  "name": "memory",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                },
                "role": {
                  "advanced": false,
                  "display_name": "Role",
                  "dynamic": false,
                  "info": "The role of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "role",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Manager\n"
                },
                "tools": {
                  "advanced": false,
                  "display_name": "Tools",
                  "dynamic": false,
                  "info": "Tools at agents disposal",
                  "input_types": [
                    "Tool"
                  ],
                  "list": true,
                  "name": "tools",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": []
                },
                "verbose": {
                  "advanced": true,
                  "display_name": "Verbose",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "verbose",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                }
              },
              "lf_version": "1.0.17"
            },
            "type": "CrewAIAgentComponent"
          },
          "dragging": false,
          "height": 638,
          "id": "CrewAIAgentComponent-FfiP5",
          "position": {
            "x": -618.1495915085297,
            "y": 1604.5564005012882
          },
          "positionAbsolute": {
            "x": -618.1495915085297,
            "y": 1604.5564005012882
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "id": "Prompt-3mx54",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                },
                "query": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "query",
                  "display_name": "query",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "prompt",
                  "value": "User's query:\n{query}\n"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "query"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "type": "Prompt"
          },
          "dragging": false,
          "height": 415,
          "id": "Prompt-3mx54",
          "position": {
            "x": -561.9017558579421,
            "y": -433.5913161630874
          },
          "positionAbsolute": {
            "x": -561.9017558579421,
            "y": -433.5913161630874
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "ChatInput-P175U",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Get chat inputs from the Playground.",
              "display_name": "Chat Input",
              "documentation": "",
              "edited": false,
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "frozen": false,
              "icon": "ChatInput",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Message",
                  "method": "message_response",
                  "name": "message",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
                },
                "files": {
                  "advanced": true,
                  "display_name": "Files",
                  "dynamic": false,
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "file_path": "",
                  "info": "Files to be sent with the message.",
                  "list": true,
                  "name": "files",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "file",
                  "value": ""
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "input_value",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "qual a situação dos juros no Brasil?"
                },
                "sender": {
                  "advanced": true,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "info": "Type of sender.",
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "User"
                },
                "sender_name": {
                  "advanced": true,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "sender_name",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "User"
                },
                "session_id": {
                  "advanced": true,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "session_id",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                },
                "should_store_message": {
                  "advanced": true,
                  "display_name": "Store Messages",
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "list": false,
                  "name": "should_store_message",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                }
              },
              "lf_version": "1.0.17"
            },
            "type": "ChatInput"
          },
          "dragging": false,
          "height": 300,
          "id": "ChatInput-P175U",
          "position": {
            "x": -1227.1161422332996,
            "y": -380.26504479310324
          },
          "positionAbsolute": {
            "x": -1227.1161422332996,
            "y": -380.26504479310324
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Represents an agent of CrewAI.",
            "display_name": "CrewAI Agent",
            "id": "CrewAIAgentComponent-zbXh4",
            "node": {
              "base_classes": [
                "Agent"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Represents an agent of CrewAI.",
              "display_name": "CrewAI Agent",
              "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
              "edited": false,
              "field_order": [
                "role",
                "goal",
                "backstory",
                "tools",
                "llm",
                "memory",
                "verbose",
                "allow_delegation",
                "allow_code_execution",
                "kwargs"
              ],
              "frozen": false,
              "icon": "CrewAI",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Agent",
                  "method": "build_output",
                  "name": "output",
                  "selected": "Agent",
                  "types": [
                    "Agent"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "allow_code_execution": {
                  "advanced": true,
                  "display_name": "Allow Code Execution",
                  "dynamic": false,
                  "info": "Whether the agent is allowed to execute code.",
                  "list": false,
                  "name": "allow_code_execution",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                },
                "allow_delegation": {
                  "advanced": false,
                  "display_name": "Allow Delegation",
                  "dynamic": false,
                  "info": "Whether the agent is allowed to delegate tasks to other agents.",
                  "list": false,
                  "name": "allow_delegation",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                },
                "backstory": {
                  "advanced": false,
                  "display_name": "Backstory",
                  "dynamic": false,
                  "info": "The backstory of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "backstory",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": " Skilled in financial data retrieval and analysis.\nTask Description:\nUse the Yahoo Finance Ticker Tool to find the latest prices for specific assets mentioned in user queries.\n"
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n"
                },
                "goal": {
                  "advanced": false,
                  "display_name": "Goal",
                  "dynamic": false,
                  "info": "The objective of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "goal",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "To provide accurate and up-to-date market prices for assets like stocks and commodities using Yahoo Finance Ticker Tool."
                },
                "kwargs": {
                  "advanced": true,
                  "display_name": "kwargs",
                  "dynamic": false,
                  "info": "kwargs of agent.",
                  "list": true,
                  "name": "kwargs",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "dict",
                  "value": {}
                },
                "llm": {
                  "advanced": false,
                  "display_name": "Language Model",
                  "dynamic": false,
                  "info": "Language model that will run the agent.",
                  "input_types": [
                    "LanguageModel"
                  ],
                  "list": false,
                  "name": "llm",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "memory": {
                  "advanced": true,
                  "display_name": "Memory",
                  "dynamic": false,
                  "info": "Whether the agent should have memory or not",
                  "list": false,
                  "name": "memory",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                },
                "role": {
                  "advanced": false,
                  "display_name": "Role",
                  "dynamic": false,
                  "info": "The role of the agent.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "role",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Market Data Agent\n"
                },
                "tools": {
                  "advanced": false,
                  "display_name": "Tools",
                  "dynamic": false,
                  "info": "Tools at agents disposal",
                  "input_types": [
                    "Tool"
                  ],
                  "list": true,
                  "name": "tools",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": []
                },
                "verbose": {
                  "advanced": true,
                  "display_name": "Verbose",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "verbose",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                }
              },
              "lf_version": "1.0.17"
            },
            "type": "CrewAIAgentComponent"
          },
          "dragging": false,
          "height": 638,
          "id": "CrewAIAgentComponent-zbXh4",
          "position": {
            "x": -519.2349149959462,
            "y": 876.6317151017497
          },
          "positionAbsolute": {
            "x": -519.2349149959462,
            "y": 876.6317151017497
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "id": "AIMLModel-TUJkN",
          "type": "genericNode",
          "position": {
            "x": -1632.9940687650244,
            "y": 1966.4706000843546
          },
          "data": {
            "type": "AIMLModel",
            "node": {
              "template": {
                "_type": "Component",
                "aiml_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aiml_api_base",
                  "value": "",
                  "display_name": "AIML API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "AIML API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The AIML API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.aiml_constants import AIML_CHAT_MODELS\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass AIMLModelComponent(LCModelComponent):\n    display_name = \"AIML\"\n    description = \"Generates text using AIML LLMs.\"\n    icon = \"AIML\"\n    name = \"AIMLModel\"\n    documentation = \"https://docs.aimlapi.com/api-reference\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=AIML_CHAT_MODELS,\n            value=AIML_CHAT_MODELS[0],\n        ),\n        StrInput(\n            name=\"aiml_api_base\",\n            display_name=\"AIML API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"AIML API Key\",\n            info=\"The AIML API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"AIML_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        aiml_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        aiml_api_base = self.aiml_api_base or \"https://api.aimlapi.com\"\n        seed = self.seed\n\n        if isinstance(aiml_api_key, SecretStr):\n            openai_api_key = aiml_api_key.get_secret_value()\n        else:\n            openai_api_key = aiml_api_key\n\n        model = ChatOpenAI(\n            model=model_name,\n            temperature=temperature,\n            api_key=openai_api_key,\n            base_url=aiml_api_base,\n            max_tokens=max_tokens or None,\n            seed=seed,\n            **model_kwargs,\n        )\n\n        return model  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai.error import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.json_body.get(\"error\", {}).get(\"message\", \"\")  # type: ignore\n            if message:\n                return message\n        return None\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "zero-one-ai/Yi-34B-Chat",
                    "allenai/OLMo-7B-Instruct",
                    "allenai/OLMo-7B-Twin-2T",
                    "allenai/OLMo-7B",
                    "Austism/chronos-hermes-13b",
                    "cognitivecomputations/dolphin-2.5-mixtral-8x7b",
                    "deepseek-ai/deepseek-coder-33b-instruct",
                    "deepseek-ai/deepseek-llm-67b-chat",
                    "garage-bAInd/Platypus2-70B-instruct",
                    "google/gemma-2b-it",
                    "google/gemma-7b-it",
                    "Gryphe/MythoMax-L2-13b",
                    "lmsys/vicuna-13b-v1.5",
                    "lmsys/vicuna-7b-v1.5",
                    "codellama/CodeLlama-13b-Instruct-hf",
                    "codellama/CodeLlama-34b-Instruct-hf",
                    "codellama/CodeLlama-70b-Instruct-hf",
                    "codellama/CodeLlama-7b-Instruct-hf",
                    "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
                    "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
                    "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                    "meta-llama/Llama-2-70b-chat-hf",
                    "meta-llama/Llama-2-13b-chat-hf",
                    "meta-llama/Llama-2-7b-chat-hf",
                    "mistralai/Mistral-7B-Instruct-v0.1",
                    "mistralai/Mistral-7B-Instruct-v0.2",
                    "mistralai/Mixtral-8x7B-Instruct-v0.1",
                    "NousResearch/Nous-Capybara-7B-V1p9",
                    "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
                    "NousResearch/Nous-Hermes-2-Mixtral-8x7B-SFT",
                    "NousResearch/Nous-Hermes-llama-2-7b",
                    "NousResearch/Nous-Hermes-Llama2-13b",
                    "NousResearch/Nous-Hermes-2-Yi-34B",
                    "openchat/openchat-3.5-1210",
                    "Open-Orca/Mistral-7B-OpenOrca",
                    "togethercomputer/Qwen-7B-Chat",
                    "Qwen/Qwen1.5-0.5B-Chat",
                    "Qwen/Qwen1.5-1.8B-Chat",
                    "Qwen/Qwen1.5-4B-Chat",
                    "Qwen/Qwen1.5-7B-Chat",
                    "Qwen/Qwen1.5-14B-Chat",
                    "Qwen/Qwen1.5-72B-Chat",
                    "snorkelai/Snorkel-Mistral-PairRM-DPO",
                    "togethercomputer/alpaca-7b",
                    "teknium/OpenHermes-2-Mistral-7B",
                    "teknium/OpenHermes-2p5-Mistral-7B",
                    "togethercomputer/falcon-40b-instruct",
                    "togethercomputer/falcon-7b-instruct",
                    "togethercomputer/Llama-2-7B-32K-Instruct",
                    "togethercomputer/RedPajama-INCITE-Chat-3B-v1",
                    "togethercomputer/RedPajama-INCITE-7B-Chat",
                    "togethercomputer/StripedHyena-Nous-7B",
                    "Undi95/ReMM-SLERP-L2-13B",
                    "Undi95/Toppy-M-7B",
                    "WizardLM/WizardLM-13B-V1.2",
                    "upstage/SOLAR-10.7B-Instruct-v1.0",
                    "gpt-4",
                    "gpt-4-turbo",
                    "gpt-4-0613",
                    "gpt-4-32k",
                    "gpt-4-32k-0613",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-1106",
                    "gpt-3.5-turbo-instruct",
                    "gpt-3.5-turbo-16k",
                    "gpt-3.5-turbo-0613",
                    "gpt-3.5-turbo-16k-0613",
                    "gpt-4o",
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gpt-4o",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "seed",
                  "value": 1,
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using AIML LLMs.",
              "icon": "AIML",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "AIML",
              "documentation": "https://docs.aimlapi.com/api-reference",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "model_name",
                "aiml_api_base",
                "api_key",
                "temperature",
                "seed"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "AIMLModel-TUJkN"
          },
          "selected": false,
          "width": 384,
          "height": 606,
          "dragging": false
        },
        {
          "id": "AIMLModel-a8LJn",
          "type": "genericNode",
          "position": {
            "x": -1782.6395194701413,
            "y": 818.0678716394693
          },
          "data": {
            "type": "AIMLModel",
            "node": {
              "template": {
                "_type": "Component",
                "aiml_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aiml_api_base",
                  "value": "",
                  "display_name": "AIML API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "AIML API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The AIML API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.aiml_constants import AIML_CHAT_MODELS\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass AIMLModelComponent(LCModelComponent):\n    display_name = \"AIML\"\n    description = \"Generates text using AIML LLMs.\"\n    icon = \"AIML\"\n    name = \"AIMLModel\"\n    documentation = \"https://docs.aimlapi.com/api-reference\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=AIML_CHAT_MODELS,\n            value=AIML_CHAT_MODELS[0],\n        ),\n        StrInput(\n            name=\"aiml_api_base\",\n            display_name=\"AIML API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs like JinaChat, LocalAI e Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"AIML API Key\",\n            info=\"The AIML API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"AIML_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        aiml_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        aiml_api_base = self.aiml_api_base or \"https://api.aimlapi.com\"\n        seed = self.seed\n\n        if isinstance(aiml_api_key, SecretStr):\n            openai_api_key = aiml_api_key.get_secret_value()\n        else:\n            openai_api_key = aiml_api_key\n\n        model = ChatOpenAI(\n            model=model_name,\n            temperature=temperature,\n            api_key=openai_api_key,\n            base_url=aiml_api_base,\n            max_tokens=max_tokens or None,\n            seed=seed,\n            **model_kwargs,\n        )\n\n        return model  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai.error import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.json_body.get(\"error\", {}).get(\"message\", \"\")  # type: ignore\n            if message:\n                return message\n        return None\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "zero-one-ai/Yi-34B-Chat",
                    "allenai/OLMo-7B-Instruct",
                    "allenai/OLMo-7B-Twin-2T",
                    "allenai/OLMo-7B",
                    "Austism/chronos-hermes-13b",
                    "cognitivecomputations/dolphin-2.5-mixtral-8x7b",
                    "deepseek-ai/deepseek-coder-33b-instruct",
                    "deepseek-ai/deepseek-llm-67b-chat",
                    "garage-bAInd/Platypus2-70B-instruct",
                    "google/gemma-2b-it",
                    "google/gemma-7b-it",
                    "Gryphe/MythoMax-L2-13b",
                    "lmsys/vicuna-13b-v1.5",
                    "lmsys/vicuna-7b-v1.5",
                    "codellama/CodeLlama-13b-Instruct-hf",
                    "codellama/CodeLlama-34b-Instruct-hf",
                    "codellama/CodeLlama-70b-Instruct-hf",
                    "codellama/CodeLlama-7b-Instruct-hf",
                    "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
                    "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
                    "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                    "meta-llama/Llama-2-70b-chat-hf",
                    "meta-llama/Llama-2-13b-chat-hf",
                    "meta-llama/Llama-2-7b-chat-hf",
                    "mistralai/Mistral-7B-Instruct-v0.1",
                    "mistralai/Mistral-7B-Instruct-v0.2",
                    "mistralai/Mixtral-8x7B-Instruct-v0.1",
                    "NousResearch/Nous-Capybara-7B-V1p9",
                    "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
                    "NousResearch/Nous-Hermes-2-Mixtral-8x7B-SFT",
                    "NousResearch/Nous-Hermes-llama-2-7b",
                    "NousResearch/Nous-Hermes-Llama2-13b",
                    "NousResearch/Nous-Hermes-2-Yi-34B",
                    "openchat/openchat-3.5-1210",
                    "Open-Orca/Mistral-7B-OpenOrca",
                    "togethercomputer/Qwen-7B-Chat",
                    "Qwen/Qwen1.5-0.5B-Chat",
                    "Qwen/Qwen1.5-1.8B-Chat",
                    "Qwen/Qwen1.5-4B-Chat",
                    "Qwen/Qwen1.5-7B-Chat",
                    "Qwen/Qwen1.5-14B-Chat",
                    "Qwen/Qwen1.5-72B-Chat",
                    "snorkelai/Snorkel-Mistral-PairRM-DPO",
                    "togethercomputer/alpaca-7b",
                    "teknium/OpenHermes-2-Mistral-7B",
                    "teknium/OpenHermes-2p5-Mistral-7B",
                    "togethercomputer/falcon-40b-instruct",
                    "togethercomputer/falcon-7b-instruct",
                    "togethercomputer/Llama-2-7B-32K-Instruct",
                    "togethercomputer/RedPajama-INCITE-Chat-3B-v1",
                    "togethercomputer/RedPajama-INCITE-7B-Chat",
                    "togethercomputer/StripedHyena-Nous-7B",
                    "Undi95/ReMM-SLERP-L2-13B",
                    "Undi95/Toppy-M-7B",
                    "WizardLM/WizardLM-13B-V1.2",
                    "upstage/SOLAR-10.7B-Instruct-v1.0",
                    "gpt-4",
                    "gpt-4-turbo",
                    "gpt-4-0613",
                    "gpt-4-32k",
                    "gpt-4-32k-0613",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-1106",
                    "gpt-3.5-turbo-instruct",
                    "gpt-3.5-turbo-16k",
                    "gpt-3.5-turbo-0613",
                    "gpt-3.5-turbo-16k-0613",
                    "gpt-4o",
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gpt-4",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "seed",
                  "value": 1,
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using AIML LLMs.",
              "icon": "AIML",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "AIML",
              "documentation": "https://docs.aimlapi.com/api-reference",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "model_name",
                "aiml_api_base",
                "api_key",
                "temperature",
                "seed"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "AIMLModel-a8LJn"
          },
          "selected": false,
          "width": 384,
          "height": 606,
          "dragging": false
        },
        {
          "id": "YahooFinanceAPI-4C5QP",
          "type": "genericNode",
          "position": {
            "x": -1208.1849267440684,
            "y": 830.0957886854302
          },
          "data": {
            "type": "YahooFinanceAPI",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Union, List, Optional\r\nfrom langchain_core.tools import Tool\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.schema import Data\r\nfrom datetime import datetime, timedelta\r\n\r\nclass YahooFinanceAPIComponent(LCToolComponent):\r\n    display_name = \"Yahoo Finance Stock Data\"\r\n    description = \"Retrieves detailed stock data for a specific ticker or a list of tickers using Yahoo Finance.\"\r\n    name = \"YahooFinanceAPI\"\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"ticker\",\r\n        ),\r\n    ]\r\n\r\n    def run_model(self, ticker: Optional[str] = None) -> Union[Data, List[Data]]:\r\n        if ticker is None:\r\n            ticker = self.ticker\r\n        if not ticker:\r\n            raise ValueError(\"No ticker provided and self.ticker is empty.\")\r\n            \r\n        wrapper = self._build_wrapper()\r\n        \r\n        tickers = [t.strip() for t in ticker.split(\",\")]\r\n        \r\n        stock_data = []\r\n        for t in tickers:\r\n            stock = wrapper.Ticker(t)\r\n            info = stock.info\r\n            \r\n            # Get historical data\r\n            end_date = datetime.now()\r\n            start_date = end_date - timedelta(days=365)\r\n            history = stock.history(start=start_date, end=end_date)\r\n            \r\n            current_price = info.get(\"currentPrice\", \"N/A\")\r\n            \r\n            result = {\r\n                \"ticker\": t,\r\n                \"current_price\": current_price,\r\n                \"company_name\": info.get(\"longName\", \"N/A\"),\r\n                \"sector\": info.get(\"sector\", \"N/A\"),\r\n                \"market_cap\": info.get(\"marketCap\", \"N/A\"),\r\n                \"pe_ratio\": info.get(\"trailingPE\", \"N/A\"),\r\n                \"dividend_yield\": info.get(\"dividendYield\", \"N/A\"),\r\n                \"52_week_high\": info.get(\"fiftyTwoWeekHigh\", \"N/A\"),\r\n                \"52_week_low\": info.get(\"fiftyTwoWeekLow\", \"N/A\"),\r\n                \"day_change\": self._calculate_change(history, '1d'),\r\n                \"week_change\": self._calculate_change(history, '1w'),\r\n                \"month_change\": self._calculate_change(history, '1m'),\r\n                \"year_change\": self._calculate_change(history, '1y'),\r\n                \"average_volume\": info.get(\"averageVolume\", \"N/A\"),\r\n            }\r\n            stock_data.append(result)\r\n        \r\n        data = [Data(data=result, text=f\"{result['ticker']}: {result['company_name']} - Current Price: ${result['current_price']}, Day Change: {result['day_change']}%\") for result in stock_data]\r\n        \r\n        return data\r\n\r\n    def _calculate_change(self, history, period):\r\n        if history.empty:\r\n            return \"N/A\"\r\n        \r\n        if period == '1d':\r\n            if len(history) < 2:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[-2]\r\n            new_price = history['Close'].iloc[-1]\r\n        elif period == '1w':\r\n            if len(history) < 5:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[-5]\r\n            new_price = history['Close'].iloc[-1]\r\n        elif period == '1m':\r\n            if len(history) < 20:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[-20]\r\n            new_price = history['Close'].iloc[-1]\r\n        elif period == '1y':\r\n            if len(history) < 252:\r\n                return \"N/A\"\r\n            old_price = history['Close'].iloc[0]\r\n            new_price = history['Close'].iloc[-1]\r\n        else:\r\n            return \"N/A\"\r\n        \r\n        change = ((new_price - old_price) / old_price) * 100\r\n        return f\"{change:.2f}%\"\r\n\r\n    def build_tool(self) -> Tool:\r\n        return Tool(\r\n            name=\"yahoo_finance\",\r\n            description=\"Retrieve detailed stock data for a specific ticker or a list of tickers using Yahoo Finance.\",\r\n            func=self.run_model,\r\n        )\r\n\r\n    def _build_wrapper(self):\r\n        try:\r\n            import yfinance as yf\r\n        except ImportError:\r\n            raise ImportError(\"Please install yfinance to use YahooFinanceAPIComponent.\")\r\n        return yf\r\n        ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "ticker": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ticker",
                  "value": "",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Retrieves detailed stock data for a specific ticker or a list of tickers using Yahoo Finance.",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "Yahoo Finance Ticker Tool",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "ticker"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "YahooFinanceAPI-4C5QP"
          },
          "selected": false,
          "width": 384,
          "height": 373,
          "positionAbsolute": {
            "x": -1208.1849267440684,
            "y": 830.0957886854302
          },
          "dragging": false
        },
        {
          "id": "SearchAPI-ojFP9",
          "type": "genericNode",
          "position": {
            "x": -1427.2031813758322,
            "y": -96.21012482859095
          },
          "data": {
            "type": "SearchAPI",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "SearchAPI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Union\n\nfrom langchain_community.utilities.searchapi import SearchApiAPIWrapper\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import SecretStrInput, MultilineInput, DictInput, MessageTextInput\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Tool\n\n\nclass SearchAPIComponent(LCToolComponent):\n    display_name: str = \"Search API\"\n    description: str = \"Call the searchapi.io API\"\n    name = \"SearchAPI\"\n    documentation: str = \"https://www.searchapi.io/docs/google\"\n\n    inputs = [\n        MessageTextInput(name=\"engine\", display_name=\"Engine\", value=\"google\"),\n        SecretStrInput(name=\"api_key\", display_name=\"SearchAPI API Key\", required=True),\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        DictInput(name=\"search_params\", display_name=\"Search parameters\", advanced=True, is_list=True),\n    ]\n\n    def run_model(self) -> Union[Data, list[Data]]:\n        wrapper = self._build_wrapper()\n        results = wrapper.results(query=self.input_value, **(self.search_params or {}))\n        list_results = results.get(\"organic_results\", [])\n        data = [Data(data=result, text=result[\"snippet\"]) for result in list_results]\n        self.status = data\n        return data\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return Tool(\n            name=\"search_api\",\n            description=\"Search for recent results.\",\n            func=lambda x: wrapper.run(query=x, **(self.search_params or {})),\n        )\n\n    def _build_wrapper(self):\n        return SearchApiAPIWrapper(engine=self.engine, searchapi_api_key=self.api_key)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "engine": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "engine",
                  "value": "google",
                  "display_name": "Engine",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "search_params": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_params",
                  "value": {},
                  "display_name": "Search parameters",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                }
              },
              "description": "Call the searchapi.io API",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "Search API",
              "documentation": "https://www.searchapi.io/docs/google",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "engine",
                "api_key",
                "input_value",
                "search_params"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "SearchAPI-ojFP9"
          },
          "selected": false,
          "width": 384,
          "height": 519,
          "positionAbsolute": {
            "x": -1427.2031813758322,
            "y": -96.21012482859095
          },
          "dragging": false
        },
        {
          "id": "CrewAIAgentComponent-tPPBX",
          "type": "genericNode",
          "position": {
            "x": 417.7690151487485,
            "y": 1281.8008729678531
          },
          "data": {
            "type": "CrewAIAgentComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "Language model that will run the agent.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tools",
                  "value": [],
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool"
                  ],
                  "dynamic": false,
                  "info": "Tools at agents disposal",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "allow_code_execution": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "allow_code_execution",
                  "value": true,
                  "display_name": "Allow Code Execution",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Whether the agent is allowed to execute code.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "allow_delegation": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "allow_delegation",
                  "value": true,
                  "display_name": "Allow Delegation",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Whether the agent is allowed to delegate tasks to other agents.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "backstory": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "backstory",
                  "value": " Simple utility agent designed to fetch and provide the current date.  Provides the current date to ensure all operations are based on the latest information.",
                  "display_name": "Backstory",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The backstory of the agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from crewai import Agent  # type: ignore\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "goal": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "goal",
                  "value": "To supply the current date to other agents for contextually accurate operations using the site https://datadehoje.com/",
                  "display_name": "Goal",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The objective of the agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "kwargs": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "kwargs",
                  "value": {},
                  "display_name": "kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "kwargs of agent.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "memory": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "memory",
                  "value": true,
                  "display_name": "Memory",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Whether the agent should have memory or not",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "role": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "role",
                  "value": "Date Agent",
                  "display_name": "Role",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The role of the agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "verbose",
                  "value": false,
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Represents an agent of CrewAI.",
              "icon": "CrewAI",
              "base_classes": [
                "Agent"
              ],
              "display_name": "CrewAI Agent",
              "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Agent"
                  ],
                  "selected": "Agent",
                  "name": "output",
                  "display_name": "Agent",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "role",
                "goal",
                "backstory",
                "tools",
                "llm",
                "memory",
                "verbose",
                "allow_delegation",
                "allow_code_execution",
                "kwargs"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "CrewAIAgentComponent-tPPBX"
          },
          "selected": false,
          "width": 384,
          "height": 638,
          "positionAbsolute": {
            "x": 417.7690151487485,
            "y": 1281.8008729678531
          },
          "dragging": false
        },
        {
          "id": "firecrawl_scrape_api-kWZDA",
          "type": "genericNode",
          "position": {
            "x": 1029.6166144032643,
            "y": 1682.795334064698
          },
          "data": {
            "type": "firecrawl_scrape_api",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The API key to use Firecrawl API.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, IntInput, DictInput, SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass FirecrawlScrapeApiComponent(LCToolComponent):\r\n    display_name: str = \"Firecrawl Scrape API\"\r\n    description: str = \"Scrape web content using Firecrawl API.\"\r\n    name = \"firecrawl_scrape_api\"\r\n    documentation: str = \"https://docs.firecrawl.dev/api-reference/endpoint/scrape\"\r\n    icon = \"FirecrawlCrawlApi\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"The API key to use Firecrawl API.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"The URL to scrape.\",\r\n        ),\r\n        IntInput(\r\n            name=\"timeout\",\r\n            display_name=\"Timeout\",\r\n            info=\"Timeout in milliseconds for the request.\",\r\n            value=10000,\r\n        ),\r\n        DictInput(\r\n            name=\"pageOptions\",\r\n            display_name=\"Page Options\",\r\n            info=\"The page options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n        DictInput(\r\n            name=\"extractorOptions\",\r\n            display_name=\"Extractor Options\",\r\n            info=\"The extractor options to send with the request.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    class FirecrawlScrapeApiSchema(BaseModel):\r\n        url: str = Field(..., description=\"The URL to scrape\")\r\n        timeout: int = Field(default=10000, description=\"Timeout in milliseconds for the request\")\r\n        pageOptions: Optional[dict] = Field(default=None, description=\"The page options to send with the request\")\r\n        extractorOptions: Optional[dict] = Field(default=None, description=\"The extractor options to send with the request\")\r\n\r\n    def run_model(self) -> Data:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            self.url,\r\n            {\r\n                \"timeout\": str(self.timeout),\r\n                \"extractorOptions\": self.extractorOptions or {},\r\n                \"pageOptions\": self.pageOptions or {},\r\n            },\r\n        )\r\n\r\n        data = Data(data=results)\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"firecrawl_scrape_api\",\r\n            description=\"Scrape web content using Firecrawl API. Input should be a dictionary with 'url' and optional 'timeout', 'pageOptions', and 'extractorOptions'.\",\r\n            func=self._scrape_url,\r\n            args_schema=self.FirecrawlScrapeApiSchema,\r\n        )\r\n\r\n    def _scrape_url(self, url: str, timeout: int = 10000, pageOptions: Optional[dict] = None, extractorOptions: Optional[dict] = None) -> dict:\r\n        try:\r\n            from firecrawl.firecrawl import FirecrawlApp\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import firecrawl integration package. \"\r\n                \"Please install it with `pip install firecrawl-py`.\"\r\n            )\r\n\r\n        app = FirecrawlApp(api_key=self.api_key)\r\n        results = app.scrape_url(\r\n            url,\r\n            {\r\n                \"timeout\": str(timeout),\r\n                \"extractorOptions\": extractorOptions or {},\r\n                \"pageOptions\": pageOptions or {},\r\n            },\r\n        )\r\n\r\n        return results",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "extractorOptions": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "extractorOptions",
                  "display_name": "Extractor Options",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The extractor options to send with the request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "pageOptions": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "pageOptions",
                  "display_name": "Page Options",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The page options to send with the request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 10000,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Timeout in milliseconds for the request.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "url": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "https://datadehoje.com/",
                  "name": "url",
                  "display_name": "URL",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The URL to scrape.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Scrape web content using Firecrawl API.",
              "icon": "FirecrawlCrawlApi",
              "base_classes": [
                "Data",
                "list",
                "Tool"
              ],
              "display_name": "FirecrawlScrape Tool",
              "documentation": "https://docs.firecrawl.dev/api-reference/endpoint/scrape",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "list"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "api_key",
                "url",
                "timeout",
                "pageOptions",
                "extractorOptions"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17",
              "official": false
            },
            "id": "firecrawl_scrape_api-kWZDA"
          },
          "selected": false,
          "width": 384,
          "height": 515,
          "positionAbsolute": {
            "x": 1029.6166144032643,
            "y": 1682.795334064698
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "HierarchicalCrewComponent",
              "id": "HierarchicalCrewComponent-TDLe8",
              "name": "output",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-PZ9l4",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-HierarchicalCrewComponent-TDLe8{œdataTypeœ:œHierarchicalCrewComponentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-PZ9l4{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PZ9l4œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "selected": false,
          "source": "HierarchicalCrewComponent-TDLe8",
          "sourceHandle": "{œdataTypeœ:œHierarchicalCrewComponentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-PZ9l4",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PZ9l4œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "HierarchicalTaskComponent",
              "id": "HierarchicalTaskComponent-dOKaE",
              "name": "task_output",
              "output_types": [
                "HierarchicalTask"
              ]
            },
            "targetHandle": {
              "fieldName": "tasks",
              "id": "HierarchicalCrewComponent-TDLe8",
              "inputTypes": [
                "HierarchicalTask"
              ],
              "type": "other"
            }
          },
          "id": "reactflow__edge-HierarchicalTaskComponent-dOKaE{œdataTypeœ:œHierarchicalTaskComponentœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œHierarchicalTaskœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œtasksœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œHierarchicalTaskœ],œtypeœ:œotherœ}",
          "selected": false,
          "source": "HierarchicalTaskComponent-dOKaE",
          "sourceHandle": "{œdataTypeœ:œHierarchicalTaskComponentœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œHierarchicalTaskœ]}",
          "target": "HierarchicalCrewComponent-TDLe8",
          "targetHandle": "{œfieldNameœ:œtasksœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œHierarchicalTaskœ],œtypeœ:œotherœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "CrewAIAgentComponent",
              "id": "CrewAIAgentComponent-462HS",
              "name": "output",
              "output_types": [
                "Agent"
              ]
            },
            "targetHandle": {
              "fieldName": "agents",
              "id": "HierarchicalCrewComponent-TDLe8",
              "inputTypes": [
                "Agent"
              ],
              "type": "other"
            }
          },
          "id": "reactflow__edge-CrewAIAgentComponent-462HS{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-462HSœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
          "selected": false,
          "source": "CrewAIAgentComponent-462HS",
          "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-462HSœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
          "target": "HierarchicalCrewComponent-TDLe8",
          "targetHandle": "{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "CrewAIAgentComponent",
              "id": "CrewAIAgentComponent-FfiP5",
              "name": "output",
              "output_types": [
                "Agent"
              ]
            },
            "targetHandle": {
              "fieldName": "manager_agent",
              "id": "HierarchicalCrewComponent-TDLe8",
              "inputTypes": [
                "Agent"
              ],
              "type": "other"
            }
          },
          "id": "reactflow__edge-CrewAIAgentComponent-FfiP5{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œmanager_agentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
          "selected": false,
          "source": "CrewAIAgentComponent-FfiP5",
          "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
          "target": "HierarchicalCrewComponent-TDLe8",
          "targetHandle": "{œfieldNameœ:œmanager_agentœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-3mx54",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "task_description",
              "id": "HierarchicalTaskComponent-dOKaE",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-Prompt-3mx54{œdataTypeœ:œPromptœ,œidœ:œPrompt-3mx54œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-HierarchicalTaskComponent-dOKaE{œfieldNameœ:œtask_descriptionœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "source": "Prompt-3mx54",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-3mx54œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "HierarchicalTaskComponent-dOKaE",
          "targetHandle": "{œfieldNameœ:œtask_descriptionœ,œidœ:œHierarchicalTaskComponent-dOKaEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-P175U",
              "name": "message",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "query",
              "id": "Prompt-3mx54",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-ChatInput-P175U{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P175Uœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-3mx54{œfieldNameœ:œqueryœ,œidœ:œPrompt-3mx54œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "source": "ChatInput-P175U",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P175Uœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-3mx54",
          "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œPrompt-3mx54œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "CrewAIAgentComponent",
              "id": "CrewAIAgentComponent-zbXh4",
              "name": "output",
              "output_types": [
                "Agent"
              ]
            },
            "targetHandle": {
              "fieldName": "agents",
              "id": "HierarchicalCrewComponent-TDLe8",
              "inputTypes": [
                "Agent"
              ],
              "type": "other"
            }
          },
          "id": "reactflow__edge-CrewAIAgentComponent-zbXh4{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
          "source": "CrewAIAgentComponent-zbXh4",
          "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
          "target": "HierarchicalCrewComponent-TDLe8",
          "targetHandle": "{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}"
        },
        {
          "source": "AIMLModel-TUJkN",
          "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-TUJkNœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "CrewAIAgentComponent-FfiP5",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CrewAIAgentComponent-FfiP5",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AIMLModel",
              "id": "AIMLModel-TUJkN",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-AIMLModel-TUJkN{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-TUJkNœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-FfiP5{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-FfiP5œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "AIMLModel-a8LJn",
          "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "CrewAIAgentComponent-zbXh4",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CrewAIAgentComponent-zbXh4",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AIMLModel",
              "id": "AIMLModel-a8LJn",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-zbXh4{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "AIMLModel-a8LJn",
          "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "CrewAIAgentComponent-462HS",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CrewAIAgentComponent-462HS",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AIMLModel",
              "id": "AIMLModel-a8LJn",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-462HS{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "YahooFinanceAPI-4C5QP",
          "sourceHandle": "{œdataTypeœ:œYahooFinanceAPIœ,œidœ:œYahooFinanceAPI-4C5QPœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CrewAIAgentComponent-zbXh4",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CrewAIAgentComponent-zbXh4",
              "inputTypes": [
                "Tool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "YahooFinanceAPI",
              "id": "YahooFinanceAPI-4C5QP",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-YahooFinanceAPI-4C5QP{œdataTypeœ:œYahooFinanceAPIœ,œidœ:œYahooFinanceAPI-4C5QPœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-zbXh4{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-zbXh4œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "SearchAPI-ojFP9",
          "sourceHandle": "{œdataTypeœ:œSearchAPIœ,œidœ:œSearchAPI-ojFP9œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CrewAIAgentComponent-462HS",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CrewAIAgentComponent-462HS",
              "inputTypes": [
                "Tool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "SearchAPI",
              "id": "SearchAPI-ojFP9",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "className": "",
          "id": "reactflow__edge-SearchAPI-ojFP9{œdataTypeœ:œSearchAPIœ,œidœ:œSearchAPI-ojFP9œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-462HS{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-462HSœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
        },
        {
          "source": "AIMLModel-a8LJn",
          "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "CrewAIAgentComponent-tPPBX",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CrewAIAgentComponent-tPPBX",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AIMLModel",
              "id": "AIMLModel-a8LJn",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-tPPBX{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "AIMLModel-a8LJn",
          "sourceHandle": "{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "HierarchicalCrewComponent-TDLe8",
          "targetHandle": "{œfieldNameœ:œmanager_llmœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "manager_llm",
              "id": "HierarchicalCrewComponent-TDLe8",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AIMLModel",
              "id": "AIMLModel-a8LJn",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-AIMLModel-a8LJn{œdataTypeœ:œAIMLModelœ,œidœ:œAIMLModel-a8LJnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-HierarchicalCrewComponent-TDLe8{œfieldNameœ:œmanager_llmœ,œidœ:œHierarchicalCrewComponent-TDLe8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "firecrawl_scrape_api-kWZDA",
          "sourceHandle": "{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-kWZDAœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CrewAIAgentComponent-tPPBX",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CrewAIAgentComponent-tPPBX",
              "inputTypes": [
                "Tool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "firecrawl_scrape_api",
              "id": "firecrawl_scrape_api-kWZDA",
              "name": "api_build_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-firecrawl_scrape_api-kWZDA{œdataTypeœ:œfirecrawl_scrape_apiœ,œidœ:œfirecrawl_scrape_api-kWZDAœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-tPPBX{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-tPPBXœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
        }
      ],
      "viewport": {
        "x": 1528.4071670955695,
        "y": 376.75465419814736,
        "zoom": 0.5947390955130242
      }
    },
    "date_created": "2024-09-08T09:46:37.199Z",
    "date_updated": "2024-09-08T22:18:31.534Z",
    "status": "Public",
    "sort": null,
    "user_updated": "86b907ba-afc7-4987-b509-670bc384a020",
    "user_created": {
      "username": "Alan",
      "first_name": "Alan",
      "last_name": "Santana",
      "id": "86b907ba-afc7-4987-b509-670bc384a020"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:08.618Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 106,
    "converter_version": "1.0.0"
  }
}