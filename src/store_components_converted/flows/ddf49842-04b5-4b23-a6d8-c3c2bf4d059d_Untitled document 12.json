{
  "id": "ddf49842-04b5-4b23-a6d8-c3c2bf4d059d",
  "name": "Untitled document (12)",
  "description": "Language Architect at Work! (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "ad22",
    "first_name": "aditya",
    "last_name": "",
    "id": "b4a38c4b-06a2-4cc9-b803-e7bc90658fe0",
    "full_name": "aditya"
  },
  "store_url": "https://www.langflow.store/store/component/ddf49842-04b5-4b23-a6d8-c3c2bf4d059d",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-29T05:30:20.313Z",
    "updated": "2024-08-29T05:30:20.354Z",
    "downloaded": "2025-08-19T17:50:06.659Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "TextInput-PHZA6",
        "type": "genericNode",
        "position": {
          "x": 62.556830169524744,
          "y": 108.00068614733297
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false
          },
          "id": "TextInput-PHZA6"
        },
        "selected": false,
        "width": 384,
        "height": 298,
        "positionAbsolute": {
          "x": 62.556830169524744,
          "y": 108.00068614733297
        },
        "dragging": false
      },
      {
        "id": "HuggingFaceModel-xWXJk",
        "type": "genericNode",
        "position": {
          "x": 568.1113017075924,
          "y": -20.887926376657916
        },
        "data": {
          "type": "HuggingFaceModel",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from tenacity import retry, stop_after_attempt, wait_fixed\nfrom langchain_community.llms.huggingface_endpoint import HuggingFaceEndpoint\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DictInput, DropdownInput, SecretStrInput, StrInput, IntInput\n\n\nclass HuggingFaceEndpointsComponent(LCModelComponent):\n    display_name: str = \"HuggingFace\"\n    description: str = \"Generate text using Hugging Face Inference APIs.\"\n    icon = \"HuggingFace\"\n    name = \"HuggingFaceModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            value=\"openai-community/gpt2\",\n        ),\n        DropdownInput(\n            name=\"task\",\n            display_name=\"Task\",\n            options=[\"text2text-generation\", \"text-generation\", \"summarization\", \"translation\"],\n            value=\"text-generation\",\n        ),\n        SecretStrInput(name=\"huggingfacehub_api_token\", display_name=\"API Token\", password=True),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Keyword Arguments\", advanced=True),\n        IntInput(name=\"retry_attempts\", display_name=\"Retry Attempts\", value=1, advanced=True),\n    ]\n\n    def create_huggingface_endpoint(\n        self, model_id: str, task: str, huggingfacehub_api_token: str, model_kwargs: dict\n    ) -> HuggingFaceEndpoint:\n        retry_attempts = self.retry_attempts  # Access the retry attempts input\n        endpoint_url = f\"https://api-inference.huggingface.co/models/{model_id}\"\n\n        @retry(stop=stop_after_attempt(retry_attempts), wait=wait_fixed(2))\n        def _attempt_create():\n            return HuggingFaceEndpoint(\n                endpoint_url=endpoint_url,\n                task=task,\n                huggingfacehub_api_token=huggingfacehub_api_token,\n                model_kwargs=model_kwargs,\n            )\n\n        return _attempt_create()\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        model_id = self.model_id\n        task = self.task\n        huggingfacehub_api_token = self.huggingfacehub_api_token\n        model_kwargs = self.model_kwargs or {}\n\n        try:\n            llm = self.create_huggingface_endpoint(model_id, task, huggingfacehub_api_token, model_kwargs)\n        except Exception as e:\n            raise ValueError(\"Could not connect to HuggingFace Endpoints API.\") from e\n\n        return llm\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "huggingfacehub_api_token": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "huggingfacehub_api_token",
                "value": "",
                "display_name": "API Token",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "model_id": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_id",
                "value": "openai-community/gpt2",
                "display_name": "Model ID",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Keyword Arguments",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "retry_attempts": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "retry_attempts",
                "value": 1,
                "display_name": "Retry Attempts",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "task": {
                "trace_as_metadata": true,
                "options": [
                  "text2text-generation",
                  "text-generation",
                  "summarization",
                  "translation"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "text-generation",
                "display_name": "Task",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Generate text using Hugging Face Inference APIs.",
            "icon": "HuggingFace",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "HuggingFace",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "model_id",
              "task",
              "huggingfacehub_api_token",
              "model_kwargs",
              "retry_attempts"
            ],
            "beta": false,
            "edited": false
          },
          "id": "HuggingFaceModel-xWXJk"
        },
        "selected": true,
        "width": 384,
        "height": 631,
        "positionAbsolute": {
          "x": 568.1113017075924,
          "y": -20.887926376657916
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "TextInput-PHZA6",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-PHZA6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "HuggingFaceModel-xWXJk",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œHuggingFaceModel-xWXJkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "HuggingFaceModel-xWXJk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-PHZA6",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-PHZA6{œdataTypeœ:œTextInputœ,œidœ:œTextInput-PHZA6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-HuggingFaceModel-xWXJk{œfieldNameœ:œinput_valueœ,œidœ:œHuggingFaceModel-xWXJkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 66.69873212566279,
      "y": 9.799174048376926,
      "zoom": 0.9000019297935118
    }
  },
  "metadata": {
    "TextInput": {
      "count": 1
    },
    "HuggingFaceModel": {
      "count": 1
    },
    "total": 2
  },
  "original": {
    "id": "ddf49842-04b5-4b23-a6d8-c3c2bf4d059d",
    "name": "Untitled document (12)",
    "description": "Language Architect at Work!",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "2",
    "metadata": {
      "TextInput": {
        "count": 1
      },
      "HuggingFaceModel": {
        "count": 1
      },
      "total": 2
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "TextInput-PHZA6",
          "type": "genericNode",
          "position": {
            "x": 62.556830169524744,
            "y": 108.00068614733297
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false
            },
            "id": "TextInput-PHZA6"
          },
          "selected": false,
          "width": 384,
          "height": 298,
          "positionAbsolute": {
            "x": 62.556830169524744,
            "y": 108.00068614733297
          },
          "dragging": false
        },
        {
          "id": "HuggingFaceModel-xWXJk",
          "type": "genericNode",
          "position": {
            "x": 568.1113017075924,
            "y": -20.887926376657916
          },
          "data": {
            "type": "HuggingFaceModel",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from tenacity import retry, stop_after_attempt, wait_fixed\nfrom langchain_community.llms.huggingface_endpoint import HuggingFaceEndpoint\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DictInput, DropdownInput, SecretStrInput, StrInput, IntInput\n\n\nclass HuggingFaceEndpointsComponent(LCModelComponent):\n    display_name: str = \"HuggingFace\"\n    description: str = \"Generate text using Hugging Face Inference APIs.\"\n    icon = \"HuggingFace\"\n    name = \"HuggingFaceModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            value=\"openai-community/gpt2\",\n        ),\n        DropdownInput(\n            name=\"task\",\n            display_name=\"Task\",\n            options=[\"text2text-generation\", \"text-generation\", \"summarization\", \"translation\"],\n            value=\"text-generation\",\n        ),\n        SecretStrInput(name=\"huggingfacehub_api_token\", display_name=\"API Token\", password=True),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Keyword Arguments\", advanced=True),\n        IntInput(name=\"retry_attempts\", display_name=\"Retry Attempts\", value=1, advanced=True),\n    ]\n\n    def create_huggingface_endpoint(\n        self, model_id: str, task: str, huggingfacehub_api_token: str, model_kwargs: dict\n    ) -> HuggingFaceEndpoint:\n        retry_attempts = self.retry_attempts  # Access the retry attempts input\n        endpoint_url = f\"https://api-inference.huggingface.co/models/{model_id}\"\n\n        @retry(stop=stop_after_attempt(retry_attempts), wait=wait_fixed(2))\n        def _attempt_create():\n            return HuggingFaceEndpoint(\n                endpoint_url=endpoint_url,\n                task=task,\n                huggingfacehub_api_token=huggingfacehub_api_token,\n                model_kwargs=model_kwargs,\n            )\n\n        return _attempt_create()\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        model_id = self.model_id\n        task = self.task\n        huggingfacehub_api_token = self.huggingfacehub_api_token\n        model_kwargs = self.model_kwargs or {}\n\n        try:\n            llm = self.create_huggingface_endpoint(model_id, task, huggingfacehub_api_token, model_kwargs)\n        except Exception as e:\n            raise ValueError(\"Could not connect to HuggingFace Endpoints API.\") from e\n\n        return llm\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "huggingfacehub_api_token": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "huggingfacehub_api_token",
                  "value": "",
                  "display_name": "API Token",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "model_id": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_id",
                  "value": "openai-community/gpt2",
                  "display_name": "Model ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Keyword Arguments",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "retry_attempts": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "retry_attempts",
                  "value": 1,
                  "display_name": "Retry Attempts",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "task": {
                  "trace_as_metadata": true,
                  "options": [
                    "text2text-generation",
                    "text-generation",
                    "summarization",
                    "translation"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "task",
                  "value": "text-generation",
                  "display_name": "Task",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                }
              },
              "description": "Generate text using Hugging Face Inference APIs.",
              "icon": "HuggingFace",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "HuggingFace",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "model_id",
                "task",
                "huggingfacehub_api_token",
                "model_kwargs",
                "retry_attempts"
              ],
              "beta": false,
              "edited": false
            },
            "id": "HuggingFaceModel-xWXJk"
          },
          "selected": true,
          "width": 384,
          "height": 631,
          "positionAbsolute": {
            "x": 568.1113017075924,
            "y": -20.887926376657916
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "TextInput-PHZA6",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-PHZA6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "HuggingFaceModel-xWXJk",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œHuggingFaceModel-xWXJkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "HuggingFaceModel-xWXJk",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-PHZA6",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-PHZA6{œdataTypeœ:œTextInputœ,œidœ:œTextInput-PHZA6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-HuggingFaceModel-xWXJk{œfieldNameœ:œinput_valueœ,œidœ:œHuggingFaceModel-xWXJkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 66.69873212566279,
        "y": 9.799174048376926,
        "zoom": 0.9000019297935118
      }
    },
    "date_created": "2024-08-29T05:30:20.313Z",
    "date_updated": "2024-08-29T05:30:20.354Z",
    "status": "Public",
    "sort": null,
    "user_updated": "b4a38c4b-06a2-4cc9-b803-e7bc90658fe0",
    "user_created": {
      "username": "ad22",
      "first_name": "aditya",
      "last_name": null,
      "id": "b4a38c4b-06a2-4cc9-b803-e7bc90658fe0"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:06.767Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 12,
    "converter_version": "1.0.0"
  }
}