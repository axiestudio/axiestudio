{
  "id": "b83a7930-20df-4afe-b328-87bf8f3cdea6",
  "name": "JBL flow - Claude",
  "description": "",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "m8dhouse",
    "first_name": "Christophe",
    "last_name": "Mes",
    "id": "2e236c01-2509-45e3-8b42-cff9058e8b28",
    "full_name": "Christophe Mes"
  },
  "store_url": "https://www.langflow.store/store/component/b83a7930-20df-4afe-b328-87bf8f3cdea6",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-15T07:47:49.466Z",
    "updated": "2024-06-15T07:48:30.388Z",
    "downloaded": "2025-08-19T17:50:05.602Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Agent",
        "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.0a57",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "TextInput-WwCKR",
        "type": "genericNode",
        "position": {
          "x": -16.510344276903993,
          "y": 897.2087888097453
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "UserInput",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-WwCKR"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": -16.510344276903993,
          "y": 897.2087888097453
        },
        "dragging": false
      },
      {
        "id": "AnthropicModel-VuC86",
        "type": "genericNode",
        "position": {
          "x": 2117.196878854743,
          "y": 638.9370861729667
        },
        "data": {
          "type": "AnthropicModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "anthropic_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "anthropic_api_key",
                "display_name": "Anthropic API Key",
                "advanced": false,
                "dynamic": false,
                "info": "Your Anthropic API key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "anthropic_api_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "anthropic_api_url",
                "display_name": "Anthropic API URL",
                "advanced": true,
                "dynamic": false,
                "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false,
                "value": "2048"
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "claude-3-haiku-20240307",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307",
                  "claude-2.1",
                  "claude-2.0",
                  "claude-instant-1.2",
                  "claude-instant-1"
                ],
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.1",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate text using Anthropic Chat&Completion LLMs.",
            "icon": "Anthropic",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Anthropic",
            "documentation": "",
            "custom_fields": {
              "model": null,
              "input_value": null,
              "system_message": null,
              "anthropic_api_key": null,
              "max_tokens": null,
              "temperature": null,
              "anthropic_api_url": null,
              "stream": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "model",
              "anthropic_api_key",
              "max_tokens",
              "temperature",
              "anthropic_api_url",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "AnthropicModel-VuC86"
        },
        "selected": false,
        "width": 384,
        "height": 599,
        "positionAbsolute": {
          "x": 2117.196878854743,
          "y": 638.9370861729667
        },
        "dragging": false
      },
      {
        "id": "TextOutput-zuLyL",
        "type": "genericNode",
        "position": {
          "x": 2793.6658712890576,
          "y": 556.2273748333532
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Output-H",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-zuLyL"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "dragging": false,
        "positionAbsolute": {
          "x": 2793.6658712890576,
          "y": 556.2273748333532
        }
      },
      {
        "id": "AnthropicModel-XB4vI",
        "type": "genericNode",
        "position": {
          "x": 1061.4510080721798,
          "y": 730.0927464138887
        },
        "data": {
          "type": "AnthropicModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "anthropic_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "anthropic_api_key",
                "display_name": "Anthropic API Key",
                "advanced": false,
                "dynamic": false,
                "info": "Your Anthropic API key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "anthropic_api_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "anthropic_api_url",
                "display_name": "Anthropic API URL",
                "advanced": true,
                "dynamic": false,
                "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false,
                "value": "2048"
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "claude-3-haiku-20240307",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307",
                  "claude-2.1",
                  "claude-2.0",
                  "claude-instant-1.2",
                  "claude-instant-1"
                ],
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate text using Anthropic Chat&Completion LLMs.",
            "icon": "Anthropic",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Anthropic",
            "documentation": "",
            "custom_fields": {
              "model": null,
              "input_value": null,
              "system_message": null,
              "anthropic_api_key": null,
              "max_tokens": null,
              "temperature": null,
              "anthropic_api_url": null,
              "stream": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "model",
              "anthropic_api_key",
              "max_tokens",
              "temperature",
              "anthropic_api_url",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "AnthropicModel-XB4vI"
        },
        "selected": false,
        "width": 384,
        "height": 599,
        "positionAbsolute": {
          "x": 1061.4510080721798,
          "y": 730.0927464138887
        },
        "dragging": false
      },
      {
        "id": "Prompt-rcFrj",
        "type": "genericNode",
        "position": {
          "x": 1554.9087229600755,
          "y": 753.1356203811797
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "You as an AI take the prompt provided below in the tag <usercleaned_prompt> and need to do the following tasks:\n- The output is used to describe an image for a generative AI model. So be detailed.\n- Include details from all the specified topics: To ensure that the generated image meets your expectations, it is important to include as much detail as possible in your instructions. This means including information from all the specified topics, such as color, objects, arrangement, style, mood, background, and lighting.\n- Add visual scene property details: To make your instructions more specific, you can include details about the visual properties of the scene, such as the time of day, the weather, and the overall setting. This can help the image generation system to better understand the context of the image and generate a more accurate representation.\n- Add camera standpoint details: To make your instructions even more specific, you can include details about the camera's perspective, such as the angle, the distance, and the orientation. This can help the image generation system to better understand the perspective of the image and generate a more accurate representation.\n- Avoid details using product names and brand names: To make your instructions more general and less specific to a particular product or brand, avoid using product names and brand names in your instructions. Instead, focus on describing the desired output in more general terms, such as the color, the style, or the mood.\n\n\n<usercleaned_prompt>\n{usercleaned_prompt} \n</usercleaned_prompt>\n\nReturn only the prompt result without any other introduction, repetition of the original text or details.",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "usercleaned_prompt": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "usercleaned_prompt",
                "display_name": "usercleaned_prompt",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Prompt",
              "Record"
            ],
            "name": "",
            "display_name": "Conversion2-H",
            "documentation": "",
            "custom_fields": {
              "template": [
                "usercleaned_prompt"
              ]
            },
            "output_types": [
              "Prompt"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-rcFrj",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Conversion2-H"
        },
        "selected": true,
        "width": 384,
        "height": 419,
        "positionAbsolute": {
          "x": 1554.9087229600755,
          "y": 753.1356203811797
        },
        "dragging": false
      },
      {
        "id": "Prompt-rDe6R",
        "type": "genericNode",
        "position": {
          "x": 579.1545129261286,
          "y": 796.7563244689319
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "You as an AI take the prompt provided below in the tag <userprompt> and need to do the following tasks:\n-remove person given names\n-remove names from famous people and artists\n-remove product names \n-remove company names\n-finally return the cleaned prompt\n\n<userprompt>\n{userprompt} \n</userprompt>\n\nReturn the prompt result, and only that, between tags <usercleaned_prompt>",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "userprompt": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "userprompt",
                "display_name": "userprompt",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Prompt",
              "Record"
            ],
            "name": "",
            "display_name": "Conversion1-H",
            "documentation": "",
            "custom_fields": {
              "template": [
                "userprompt"
              ]
            },
            "output_types": [
              "Prompt"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-rDe6R",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Conversion1-H"
        },
        "selected": false,
        "width": 384,
        "height": 419,
        "positionAbsolute": {
          "x": 579.1545129261286,
          "y": 796.7563244689319
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "AnthropicModel-VuC86",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-VuC86œ}",
        "target": "TextOutput-zuLyL",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-zuLyLœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-zuLyL",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-VuC86"
          }
        },
        "id": "reactflow__edge-AnthropicModel-VuC86{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-VuC86œ}-TextOutput-zuLyL{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-zuLyLœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "AnthropicModel-XB4vI",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-XB4vIœ}",
        "target": "Prompt-rcFrj",
        "targetHandle": "{œfieldNameœ:œusercleaned_promptœ,œidœ:œPrompt-rcFrjœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "usercleaned_prompt",
            "id": "Prompt-rcFrj",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-XB4vI"
          }
        },
        "id": "reactflow__edge-AnthropicModel-XB4vI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-XB4vIœ}-Prompt-rcFrj{œfieldNameœ:œusercleaned_promptœ,œidœ:œPrompt-rcFrjœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Prompt-rcFrj",
        "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rcFrjœ}",
        "target": "AnthropicModel-VuC86",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-VuC86œ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "AnthropicModel-VuC86",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Prompt",
              "Record"
            ],
            "dataType": "Prompt",
            "id": "Prompt-rcFrj"
          }
        },
        "id": "reactflow__edge-Prompt-rcFrj{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rcFrjœ}-AnthropicModel-VuC86{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-VuC86œ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Prompt-rDe6R",
        "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rDe6Rœ}",
        "target": "AnthropicModel-XB4vI",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-XB4vIœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "AnthropicModel-XB4vI",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Prompt",
              "Record"
            ],
            "dataType": "Prompt",
            "id": "Prompt-rDe6R"
          }
        },
        "id": "reactflow__edge-Prompt-rDe6R{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rDe6Rœ}-AnthropicModel-XB4vI{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-XB4vIœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-WwCKR",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-WwCKRœ}",
        "target": "Prompt-rDe6R",
        "targetHandle": "{œfieldNameœ:œuserpromptœ,œidœ:œPrompt-rDe6Rœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "userprompt",
            "id": "Prompt-rDe6R",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-WwCKR"
          }
        },
        "id": "reactflow__edge-TextInput-WwCKR{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-WwCKRœ}-Prompt-rDe6R{œfieldNameœ:œuserpromptœ,œidœ:œPrompt-rDe6Rœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": -883.7811909382949,
      "y": -232.20465369501198,
      "zoom": 0.7579172800272297
    }
  },
  "metadata": {
    "TextInput": {
      "count": 1
    },
    "AnthropicModel": {
      "count": 2
    },
    "TextOutput": {
      "count": 1
    },
    "Prompt": {
      "count": 2
    },
    "total": 6
  },
  "original": {
    "id": "b83a7930-20df-4afe-b328-87bf8f3cdea6",
    "name": "JBL flow - Claude",
    "description": "",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "TextInput": {
        "count": 1
      },
      "AnthropicModel": {
        "count": 2
      },
      "TextOutput": {
        "count": 1
      },
      "Prompt": {
        "count": 2
      },
      "total": 6
    },
    "last_tested_version": "1.0.0a57",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "TextInput-WwCKR",
          "type": "genericNode",
          "position": {
            "x": -16.510344276903993,
            "y": 897.2087888097453
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "UserInput",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-WwCKR"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": -16.510344276903993,
            "y": 897.2087888097453
          },
          "dragging": false
        },
        {
          "id": "AnthropicModel-VuC86",
          "type": "genericNode",
          "position": {
            "x": 2117.196878854743,
            "y": 638.9370861729667
          },
          "data": {
            "type": "AnthropicModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "anthropic_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "anthropic_api_key",
                  "display_name": "Anthropic API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Anthropic API key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "anthropic_api_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "anthropic_api_url",
                  "display_name": "Anthropic API URL",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "2048"
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "claude-3-haiku-20240307",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307",
                    "claude-2.1",
                    "claude-2.0",
                    "claude-instant-1.2",
                    "claude-instant-1"
                  ],
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.1",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate text using Anthropic Chat&Completion LLMs.",
              "icon": "Anthropic",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Anthropic",
              "documentation": "",
              "custom_fields": {
                "model": null,
                "input_value": null,
                "system_message": null,
                "anthropic_api_key": null,
                "max_tokens": null,
                "temperature": null,
                "anthropic_api_url": null,
                "stream": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "model",
                "anthropic_api_key",
                "max_tokens",
                "temperature",
                "anthropic_api_url",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "AnthropicModel-VuC86"
          },
          "selected": false,
          "width": 384,
          "height": 599,
          "positionAbsolute": {
            "x": 2117.196878854743,
            "y": 638.9370861729667
          },
          "dragging": false
        },
        {
          "id": "TextOutput-zuLyL",
          "type": "genericNode",
          "position": {
            "x": 2793.6658712890576,
            "y": 556.2273748333532
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Output-H",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-zuLyL"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "dragging": false,
          "positionAbsolute": {
            "x": 2793.6658712890576,
            "y": 556.2273748333532
          }
        },
        {
          "id": "AnthropicModel-XB4vI",
          "type": "genericNode",
          "position": {
            "x": 1061.4510080721798,
            "y": 730.0927464138887
          },
          "data": {
            "type": "AnthropicModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "anthropic_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "anthropic_api_key",
                  "display_name": "Anthropic API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Anthropic API key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "anthropic_api_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "anthropic_api_url",
                  "display_name": "Anthropic API URL",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "2048"
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "claude-3-haiku-20240307",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307",
                    "claude-2.1",
                    "claude-2.0",
                    "claude-instant-1.2",
                    "claude-instant-1"
                  ],
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate text using Anthropic Chat&Completion LLMs.",
              "icon": "Anthropic",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Anthropic",
              "documentation": "",
              "custom_fields": {
                "model": null,
                "input_value": null,
                "system_message": null,
                "anthropic_api_key": null,
                "max_tokens": null,
                "temperature": null,
                "anthropic_api_url": null,
                "stream": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "model",
                "anthropic_api_key",
                "max_tokens",
                "temperature",
                "anthropic_api_url",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "AnthropicModel-XB4vI"
          },
          "selected": false,
          "width": 384,
          "height": 599,
          "positionAbsolute": {
            "x": 1061.4510080721798,
            "y": 730.0927464138887
          },
          "dragging": false
        },
        {
          "id": "Prompt-rcFrj",
          "type": "genericNode",
          "position": {
            "x": 1554.9087229600755,
            "y": 753.1356203811797
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "You as an AI take the prompt provided below in the tag <usercleaned_prompt> and need to do the following tasks:\n- The output is used to describe an image for a generative AI model. So be detailed.\n- Include details from all the specified topics: To ensure that the generated image meets your expectations, it is important to include as much detail as possible in your instructions. This means including information from all the specified topics, such as color, objects, arrangement, style, mood, background, and lighting.\n- Add visual scene property details: To make your instructions more specific, you can include details about the visual properties of the scene, such as the time of day, the weather, and the overall setting. This can help the image generation system to better understand the context of the image and generate a more accurate representation.\n- Add camera standpoint details: To make your instructions even more specific, you can include details about the camera's perspective, such as the angle, the distance, and the orientation. This can help the image generation system to better understand the perspective of the image and generate a more accurate representation.\n- Avoid details using product names and brand names: To make your instructions more general and less specific to a particular product or brand, avoid using product names and brand names in your instructions. Instead, focus on describing the desired output in more general terms, such as the color, the style, or the mood.\n\n\n<usercleaned_prompt>\n{usercleaned_prompt} \n</usercleaned_prompt>\n\nReturn only the prompt result without any other introduction, repetition of the original text or details.",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "usercleaned_prompt": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "usercleaned_prompt",
                  "display_name": "usercleaned_prompt",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Prompt",
                "Record"
              ],
              "name": "",
              "display_name": "Conversion2-H",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "usercleaned_prompt"
                ]
              },
              "output_types": [
                "Prompt"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-rcFrj",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Conversion2-H"
          },
          "selected": true,
          "width": 384,
          "height": 419,
          "positionAbsolute": {
            "x": 1554.9087229600755,
            "y": 753.1356203811797
          },
          "dragging": false
        },
        {
          "id": "Prompt-rDe6R",
          "type": "genericNode",
          "position": {
            "x": 579.1545129261286,
            "y": 796.7563244689319
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "You as an AI take the prompt provided below in the tag <userprompt> and need to do the following tasks:\n-remove person given names\n-remove names from famous people and artists\n-remove product names \n-remove company names\n-finally return the cleaned prompt\n\n<userprompt>\n{userprompt} \n</userprompt>\n\nReturn the prompt result, and only that, between tags <usercleaned_prompt>",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "userprompt": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "userprompt",
                  "display_name": "userprompt",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Prompt",
                "Record"
              ],
              "name": "",
              "display_name": "Conversion1-H",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "userprompt"
                ]
              },
              "output_types": [
                "Prompt"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-rDe6R",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Conversion1-H"
          },
          "selected": false,
          "width": 384,
          "height": 419,
          "positionAbsolute": {
            "x": 579.1545129261286,
            "y": 796.7563244689319
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "AnthropicModel-VuC86",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-VuC86œ}",
          "target": "TextOutput-zuLyL",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-zuLyLœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-zuLyL",
              "inputTypes": [
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-VuC86"
            }
          },
          "id": "reactflow__edge-AnthropicModel-VuC86{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-VuC86œ}-TextOutput-zuLyL{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-zuLyLœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "AnthropicModel-XB4vI",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-XB4vIœ}",
          "target": "Prompt-rcFrj",
          "targetHandle": "{œfieldNameœ:œusercleaned_promptœ,œidœ:œPrompt-rcFrjœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "usercleaned_prompt",
              "id": "Prompt-rcFrj",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-XB4vI"
            }
          },
          "id": "reactflow__edge-AnthropicModel-XB4vI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-XB4vIœ}-Prompt-rcFrj{œfieldNameœ:œusercleaned_promptœ,œidœ:œPrompt-rcFrjœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Prompt-rcFrj",
          "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rcFrjœ}",
          "target": "AnthropicModel-VuC86",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-VuC86œ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "AnthropicModel-VuC86",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Prompt",
                "Record"
              ],
              "dataType": "Prompt",
              "id": "Prompt-rcFrj"
            }
          },
          "id": "reactflow__edge-Prompt-rcFrj{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rcFrjœ}-AnthropicModel-VuC86{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-VuC86œ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Prompt-rDe6R",
          "sourceHandle": "{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rDe6Rœ}",
          "target": "AnthropicModel-XB4vI",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-XB4vIœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "AnthropicModel-XB4vI",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Prompt",
                "Record"
              ],
              "dataType": "Prompt",
              "id": "Prompt-rDe6R"
            }
          },
          "id": "reactflow__edge-Prompt-rDe6R{œbaseClassesœ:[œPromptœ,œRecordœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-rDe6Rœ}-AnthropicModel-XB4vI{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-XB4vIœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-WwCKR",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-WwCKRœ}",
          "target": "Prompt-rDe6R",
          "targetHandle": "{œfieldNameœ:œuserpromptœ,œidœ:œPrompt-rDe6Rœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "userprompt",
              "id": "Prompt-rDe6R",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-WwCKR"
            }
          },
          "id": "reactflow__edge-TextInput-WwCKR{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-WwCKRœ}-Prompt-rDe6R{œfieldNameœ:œuserpromptœ,œidœ:œPrompt-rDe6Rœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": -883.7811909382949,
        "y": -232.20465369501198,
        "zoom": 0.7579172800272297
      }
    },
    "date_created": "2024-06-15T07:47:49.466Z",
    "date_updated": "2024-06-15T07:48:30.388Z",
    "status": "Public",
    "sort": null,
    "user_updated": "2e236c01-2509-45e3-8b42-cff9058e8b28",
    "user_created": {
      "username": "m8dhouse",
      "first_name": "Christophe",
      "last_name": "Mes",
      "id": "2e236c01-2509-45e3-8b42-cff9058e8b28"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Agent",
          "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:04.483Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 32,
    "converter_version": "1.0.0"
  }
}