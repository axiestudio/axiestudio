{
  "id": "c7230a04-4d1d-4051-bbda-bf6d8cfd6460",
  "name": "HydraGen-Test",
  "description": "Hydragen Graph Generation - Requirements Diagram (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Mimr_0",
    "first_name": "Milan",
    "last_name": "Mrdenovic",
    "id": "4d6acd51-154b-427e-af47-512b44b0c1ba",
    "full_name": "Milan Mrdenovic"
  },
  "store_url": "https://www.langflow.store/store/component/c7230a04-4d1d-4051-bbda-bf6d8cfd6460",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-10T13:53:07.883Z",
    "updated": "2024-06-10T13:54:00.188Z",
    "downloaded": "2025-08-19T17:50:05.411Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a49",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CustomComponent-B7oVN",
        "type": "genericNode",
        "position": {
          "x": 811.5605979800916,
          "y": -414.1736288508548
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "apikey": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "apikey",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "API uses API keys for authentication.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n#from axiestudio import CustomComponent\nfrom axiestudio import custom\nfrom langchain.schema import Document\nfrom typing import Optional\nfrom langchain.llms.base import BaseLLM\nfrom langchain_ibm import WatsonxLLM\n\n\nclass Watsonx(CustomComponent):\n    display_name = \"Watsonx\"\n    description = \"Watsonx foundation models\"\n    \n    def build_config(self) -> dict:\n        model_options = [\n            # Part of the officially supported foundation models in watsonx.ai\n            'mistralai/mixtral-8x7b-instruct-v01',\n            'meta-llama/llama-3-8b-instruct',\n            'meta-llama/llama-3-70b-instruct',\n            'meta-llama/llama-2-13b-chat',\n            'meta-llama/llama-2-70b-chat',\n            'ibm-mistralai/merlinite-7b',\n            'codellama/codellama-34b-instruct-hf',\n            'google/flan-t5-xl',\n            'google/flan-t5-xxl',\n            'google/flan-ul2',\n            'ibm/granite-13b-chat-v2',\n            'ibm/granite-13b-instruct-v2',\n            'ibm/granite-20b-code-instruct',\n            'ibm/granite-20b-multilingual',\n            'ibm/granite-34b-code-instruct',\n            'ibm/granite-7b-lab',\n            'ibm/granite-8b-code-instruct',\n            'bigscience/mt0-xxl',\n        ]\n\n        decoding_options = [\n            \"greedy\",\n            \"sample\"\n        ]\n        \n        url_options = [      \n            \"https://us-south.ml.cloud.ibm.com\",\n            \"https://eu-gb.ml.cloud.ibm.com\",\n            \"https://eu-de.ml.cloud.ibm.com\",\n            \"https://jp-tok.ml.cloud.ibm.com\"\n        ]\n\n        stp_sequences = [  \n            \"</s>\",\n            \"<|end_of_text|>\"\n        ]\n \n\n        return {\n            \"model_id\": {\n                \"display_name\": \"Model Name\",\n                \"options\": model_options,\n                \"value\": model_options[2],\n                \"info\": \"The ID of the model or tune to be used for this request.\",\n            },\n            \"url\": {\n                \"display_name\": \"Url Endpoint\",\n                \"info\": \"Url endpoint for watsonx\",\n                \"options\": url_options,\n                \"value\": url_options[2],\n            },\n            \"apikey\": {\n                \"display_name\": \"API Key\",\n                \"password\": True,\n                \"info\": \"API uses API keys for authentication.\",\n                \"value\": \"HPsQWoh12PnzXwOdPYWZl8q6GusQX9T4vxsvhS-vcdIs\",  ###placeholder\n                \"required\": True\n            },\n            \"project_id\": {\n                \"display_name\": \"Project_id\",\n                \"info\": \"Project Id necessary to run inference.\",\n                \"value\": \"f275d991-68a4-47d9-b6e8-c8c052f63b33\",  ###placeholder\n                \"required\": True\n            },\n            # \"api_endpoint\": { \"display_name\": \"API Endpoint\", \"value\": \"https://bam-api.res.ibm.com/v1/\" },\n            \"decoding_method\": {\n                \"display_name\": \"Decoding Method\",\n                \"options\": decoding_options,\n                \"value\": decoding_options[0],\n                \"info\": \"Represents the strategy used for picking the tokens during generation of the output text.\"\n            },\n            \"stop_sequences\": {\n                \"display_name\": \"Stopping Sequences\",\n                \"options\": stp_sequences,\n                \"value\": stp_sequences[0],\n                \"info\": \"Encountering these strings will cause the model to stop generation.\",\n            },\n            \"min_new_tokens\": {\n                \"display_name\": \"Minimum New Tokens\",\n                \"value\": 5,\n                \"info\": \"The minimum number of new tokens to be generated.\"\n            },\n            \"max_new_tokens\": {\n                \"display_name\": \"Max New Tokens\",\n                \"value\": 4000,\n                \"info\": \"The maximum number of new tokens to be generated.\"\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.7,\n                \"info\": \"A value used to modify the next-token probabilities in sampling mode.\"\n            },\n            \"repetition_penalty\": {\n                \"display_name\": \"Repetition Penalty\",\n                \"value\": 1,\n                \"info\": \"Defaults to 1\"\n            },\n            \"random_seed\": {\n                \"display_name\": \"Random Seed\",\n                \"value\": 1,\n                \"info\": \"Defaults to 1.\"\n            },\n            \"top_p\": {\n                \"display_name\": \"Top_P\",\n                \"value\": 1,\n                \"info\": \"Defaults to 1.\"\n            },\n            \"top_k\": {\n                \"display_name\": \"Top_K\",\n                \"value\": 50,\n                \"info\": \"Defaults to 50.\"\n            },\n            \"code\": {\"show\": False}\n        }\n\n    def build(\n            self,\n            model_id: str,\n            apikey: str,\n            url: str,\n            project_id: str,\n            decoding_method: str,\n            stop_sequences: str,\n            repetition_penalty: float,\n            max_new_tokens: int,\n            min_new_tokens: int,\n            temperature: float,\n            random_seed: int,\n            top_p: float,\n            top_k: int,\n        ) -> BaseLLM:\n            from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams\n            #creds = APIClient(apikey, url)\n            stop_seq = [seq.strip() for seq in stop_sequences.splitlines()]\n            params = {\n                GenParams.TEMPERATURE: temperature,\n                GenParams.MAX_NEW_TOKENS: max_new_tokens,\n                GenParams.MIN_NEW_TOKENS: min_new_tokens,\n                GenParams.DECODING_METHOD: decoding_method,\n                GenParams.REPETITION_PENALTY: repetition_penalty,\n                GenParams.TOP_K: top_k,\n                GenParams.TOP_P: top_p,\n                GenParams.STOP_SEQUENCES: stop_seq,\n                GenParams.RANDOM_SEED: random_seed,\n            }\n            print(params)\n            model = WatsonxLLM(model_id=model_id, params=params, apikey=apikey, url=url, project_id=project_id, streaming=True)\n            return model\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "decoding_method": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "greedy",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "greedy",
                  "sample"
                ],
                "name": "decoding_method",
                "display_name": "Decoding Method",
                "advanced": false,
                "dynamic": false,
                "info": "Represents the strategy used for picking the tokens during generation of the output text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "max_new_tokens": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 4000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_new_tokens",
                "display_name": "Max New Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of new tokens to be generated.",
                "load_from_db": false,
                "title_case": false
              },
              "min_new_tokens": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "min_new_tokens",
                "display_name": "Minimum New Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "The minimum number of new tokens to be generated.",
                "load_from_db": false,
                "title_case": false
              },
              "model_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "mistralai/mixtral-8x7b-instruct-v01",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "mistralai/mixtral-8x7b-instruct-v01",
                  "meta-llama/llama-3-8b-instruct",
                  "meta-llama/llama-3-70b-instruct",
                  "meta-llama/llama-2-13b-chat",
                  "meta-llama/llama-2-70b-chat",
                  "ibm-mistralai/merlinite-7b",
                  "codellama/codellama-34b-instruct-hf",
                  "google/flan-t5-xl",
                  "google/flan-t5-xxl",
                  "google/flan-ul2",
                  "ibm/granite-13b-chat-v2",
                  "ibm/granite-13b-instruct-v2",
                  "ibm/granite-20b-code-instruct",
                  "ibm/granite-20b-multilingual",
                  "ibm/granite-34b-code-instruct",
                  "ibm/granite-7b-lab",
                  "ibm/granite-8b-code-instruct",
                  "bigscience/mt0-xxl"
                ],
                "name": "model_id",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "The ID of the model or tune to be used for this request.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "project_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "f275d991-68a4-47d9-b6e8-c8c052f63b33",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "project_id",
                "display_name": "Project_id",
                "advanced": false,
                "dynamic": false,
                "info": "Project Id necessary to run inference.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "random_seed": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "random_seed",
                "display_name": "Random Seed",
                "advanced": false,
                "dynamic": false,
                "info": "Defaults to 1.",
                "load_from_db": false,
                "title_case": false
              },
              "repetition_penalty": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "repetition_penalty",
                "display_name": "Repetition Penalty",
                "advanced": false,
                "dynamic": false,
                "info": "Defaults to 1",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "stop_sequences": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "</s>",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "</s>",
                  "<|end_of_text|>"
                ],
                "name": "stop_sequences",
                "display_name": "Stopping Sequences",
                "advanced": false,
                "dynamic": false,
                "info": "Encountering these strings will cause the model to stop generation.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "A value used to modify the next-token probabilities in sampling mode.",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "top_k": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 50,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_k",
                "display_name": "Top_K",
                "advanced": false,
                "dynamic": false,
                "info": "Defaults to 50.",
                "load_from_db": false,
                "title_case": false
              },
              "top_p": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_p",
                "display_name": "Top_P",
                "advanced": false,
                "dynamic": false,
                "info": "Defaults to 1.",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "https://eu-de.ml.cloud.ibm.com",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "https://us-south.ml.cloud.ibm.com",
                  "https://eu-gb.ml.cloud.ibm.com",
                  "https://eu-de.ml.cloud.ibm.com",
                  "https://jp-tok.ml.cloud.ibm.com"
                ],
                "name": "url",
                "display_name": "Url Endpoint",
                "advanced": false,
                "dynamic": false,
                "info": "Url endpoint for watsonx",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Watsonx foundation models",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable"
            ],
            "display_name": "watsonx.ai",
            "documentation": "",
            "custom_fields": {
              "model_id": null,
              "apikey": null,
              "url": null,
              "project_id": null,
              "decoding_method": null,
              "stop_sequences": null,
              "repetition_penalty": null,
              "max_new_tokens": null,
              "min_new_tokens": null,
              "temperature": null,
              "random_seed": null,
              "top_p": null,
              "top_k": null
            },
            "output_types": [
              "BaseLLM"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-B7oVN",
          "description": "Watsonx foundation models",
          "display_name": "watsonx.ai"
        },
        "selected": false,
        "width": 384,
        "height": 1359,
        "dragging": false,
        "positionAbsolute": {
          "x": 811.5605979800916,
          "y": -414.1736288508548
        }
      },
      {
        "id": "ConversationChain-N61Ou",
        "type": "genericNode",
        "position": {
          "x": 1584.5188016396496,
          "y": 805.8227501360524
        },
        "data": {
          "type": "ConversationChain",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "The input value to pass to the chain.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "Memory to load context from. If none is provided, a ConversationBufferMemory will be used.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain.chains import ConversationChain\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Text\n\n\nclass ConversationChainComponent(CustomComponent):\n    display_name = \"ConversationChain\"\n    description = \"Chain to have a conversation and load context from memory.\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\n                \"display_name\": \"Memory\",\n                \"info\": \"Memory to load context from. If none is provided, a ConversationBufferMemory will be used.\",\n            },\n            \"input_value\": {\n                \"display_name\": \"Input Value\",\n                \"info\": \"The input value to pass to the chain.\",\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Text:\n        if memory is None:\n            chain = ConversationChain(llm=llm)\n        else:\n            chain = ConversationChain(llm=llm, memory=memory)\n        result = chain.invoke({\"input\": input_value})\n        if isinstance(result, dict):\n            result = result.get(chain.output_key, \"\")  # type: ignore\n\n        elif isinstance(result, str):\n            result = result\n        else:\n            result = result.get(\"response\")\n        self.status = result\n        return str(result)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Chain to have a conversation and load context from memory.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "ConversationChain",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "llm": null,
              "memory": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ConversationChain-N61Ou"
        },
        "selected": false,
        "width": 384,
        "height": 405,
        "dragging": false,
        "positionAbsolute": {
          "x": 1584.5188016396496,
          "y": 805.8227501360524
        }
      },
      {
        "id": "Prompt-XdlOv",
        "type": "genericNode",
        "position": {
          "x": 811.339197978529,
          "y": 1102.6710314151844
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{syntax_sys_start}\nUse this documentation as context for future instructions.\n\nDocumentation Context: {diagram_context}\n\n{syntax_sys_end}{syntax_user_start} Provide Mermaid graph markdown outputs connecting the entities that are related to each other.\nUsers will provide instructions, alongside the data to be processed which will be with \"Data: <text>\"\n\nAdded Instructions: {added_instructions}\n\nDiagram Instructions: {diagram_instructions}\n\nData: {text}\n{syntax_user_end}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "syntax_sys_start": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": " <s> [INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_sys_start",
                "display_name": "syntax_sys_start",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "diagram_context": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[General Syntax Tips]\nSyntax Structure\nOne would notice that all Diagrams definitions begin with a declaration of the diagram type, followed by the definitions of the diagram and its contents. This declaration notifies the parser which kind of diagram the code is supposed to generate.\nExample : The code below is for an Entity Relationship Diagram, specified by the erDiagram declaration. What follows is the definition of the different Entities represented in it.\nCode Example:\nerDiagram\n          CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n          CUSTOMER ||--o{ ORDER : places\n          CUSTOMER ||--o{ INVOICE : \"liable for\"\n          DELIVERY-ADDRESS ||--o{ ORDER : receives\n          INVOICE ||--|{ ORDER : covers\n          ORDER ||--|{ ORDER-ITEM : includes\n          PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n          PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\n\nDiagram Breaking\nOne should beware the use of some words or symbols that can break diagrams. These words or symbols are few and often only affect specific types of diagrams. \nThe table below will continuously be updated.\nDiagram Breakers\tReason\tSolution\nComments\t\t\n%%{``}%%\nSimilar to Directives confuses the renderer.\tIn comments using %%, avoid using \"{}\".\nFlow-Charts\t\t\n'end'\tThe word \"End\" can cause Flowcharts and Sequence diagrams to break\tWrap them in quotation marks to prevent breakage.\nNodes inside Nodes\nMermaid gets confused with nested shapes\twrap them in quotation marks to prevent breaking\n\n[C4 Diagram Diagram Documentation]\n    C4 Diagrams\nC4 Diagram: This is an experimental diagram for now. The syntax and properties can change in future releases. Proper documentation will be provided when the syntax is stable.\nMermaid's C4 diagram syntax is compatible with plantUML. See example below:\n\nCode:\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n\nFor an example, see the source code demos/index.html\n5 types of C4 charts are supported.\n•\tSystem Context (C4Context)\n•\tContainer diagram (C4Container)\n•\tComponent diagram (C4Component)\n•\tDynamic diagram (C4Dynamic)\n•\tDeployment diagram (C4Deployment)\nPlease refer to the linked document C4-PlantUML syntax for how to write the C4 diagram.\nC4 diagram is fixed style, such as css color, so different css is not provided under different skins. updateElementStyle and UpdateElementStyle are written in the diagram last part. updateElementStyle is inconsistent with the original definition and updates the style of the relationship, including the offset of the text label relative to the original position.\nThe layout does not use a fully automated layout algorithm. The position of shapes is adjusted by changing the order in which statements are written. So there is no plan to support the following Layout statements. The number of shapes per row and the number of boundaries can be adjusted using UpdateLayoutConfig.\n•\tLayout\n•\tLay_U, Lay_Up\n•\tLay_D, Lay_Down\n•\tLay_L, Lay_Left\n•\tLay_R, Lay_Right\nThe following unfinished features are not supported in the short term.\n•\t[ ] sprite\n•\t[ ] tags\n•\t[ ] link\n•\t[ ] Legend\n•\t[x] System Context\n•\t[x] Person(alias, label, ?descr, ?sprite, ?tags, $link)\n•\t[x] Person_Ext\n•\t[x] System(alias, label, ?descr, ?sprite, ?tags, $link)\n•\t[x] SystemDb\n•\t[x] SystemQueue\n•\t[x] System_Ext\n•\t[x] SystemDb_Ext\n•\t[x] SystemQueue_Ext\n•\t[x] Boundary(alias, label, ?type, ?tags, $link)\n•\t[x] Enterprise_Boundary(alias, label, ?tags, $link)\n•\t[x] System_Boundary\n•\t[x] Container diagram\n•\t[x] Container(alias, label, ?techn, ?descr, ?sprite, ?tags, $link)\n•\t[x] ContainerDb\n•\t[x] ContainerQueue\n•\t[x] Container_Ext\n•\t[x] ContainerDb_Ext\n•\t[x] ContainerQueue_Ext\n•\t[x] Container_Boundary(alias, label, ?tags, $link)\n•\t[x] Component diagram\n•\t[x] Component(alias, label, ?techn, ?descr, ?sprite, ?tags, $link)\n•\t[x] ComponentDb\n•\t[x] ComponentQueue\n•\t[x] Component_Ext\n•\t[x] ComponentDb_Ext\n•\t[x] ComponentQueue_Ext\n•\t[x] Dynamic diagram\n•\t[x] RelIndex(index, from, to, label, ?tags, $link)\n•\t[x] Deployment diagram\n•\t[x] Deployment_Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link)\n•\t[x] Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link): short name of Deployment_Node()\n•\t[x] Node_L(alias, label, ?type, ?descr, ?sprite, ?tags, $link): left aligned Node()\n•\t[x] Node_R(alias, label, ?type, ?descr, ?sprite, ?tags, $link): right aligned Node()\n•\t[x] Relationship Types\n•\t[x] Rel(from, to, label, ?techn, ?descr, ?sprite, ?tags, $link)\n•\t[x] BiRel (bidirectional relationship)\n•\t[x] Rel_U, Rel_Up\n•\t[x] Rel_D, Rel_Down\n•\t[x] Rel_L, Rel_Left\n•\t[x] Rel_R, Rel_Right\n•\t[x] Rel_Back\n•\t[x] RelIndex * Compatible with C4-PlantUML syntax, but ignores the index parameter. The sequence number is determined by the order in which the rel statements are written.\n•\t[ ] Custom tags/stereotypes support and skin param updates\n•\t[ ] AddElementTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new element tag. The styles of the tagged elements are updated and the tag is displayed in the calculated legend.\n•\t[ ] AddRelTag(tagStereo, ?textColor, ?lineColor, ?lineStyle, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new Relationship tag. The styles of the tagged relationships are updated and the tag is displayed in the calculated legend.\n•\t[x] UpdateElementStyle(elementName, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): This call updates the default style of the elements (component, ...) and creates no additional legend entry.\n•\t[x] UpdateRelStyle(from, to, ?textColor, ?lineColor, ?offsetX, ?offsetY): This call updates the default relationship colors and creates no additional legend entry. Two new parameters, offsetX and offsetY, are added to set the offset of the original position of the text.\n•\t[ ] RoundedBoxShape(): This call returns the name of the rounded box shape and can be used as ?shape argument.\n•\t[ ] EightSidedShape(): This call returns the name of the eight sided shape and can be used as ?shape argument.\n•\t[ ] DashedLine(): This call returns the name of the dashed line and can be used as ?lineStyle argument.\n•\t[ ] DottedLine(): This call returns the name of the dotted line and can be used as ?lineStyle argument.\n•\t[ ] BoldLine(): This call returns the name of the bold line and can be used as ?lineStyle argument.\n•\t[x] UpdateLayoutConfig(?c4ShapeInRow, ?c4BoundaryInRow): New. This call updates the default c4ShapeInRow(4) and c4BoundaryInRow(2).\nThere are two ways to assign parameters with question marks. One uses the non-named parameter assignment method in the order of the parameters, and the other uses the named parameter assignment method, where the name must start with a $ symbol.\nExample: UpdateRelStyle(from, to, ?textColor, ?lineColor, ?offsetX, ?offsetY)\nC4 System Context Diagram (C4Context)\nCode:\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n\nC4 Container diagram (C4Container)\nCode:\n    C4Container\n    title Container diagram for Internet Banking System\n\n    System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\")\n    Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\")\n\n    Container_Boundary(c1, \"Internet Banking\") {\n        Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\")\n        Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n        Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n        ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n        ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n\n    }\n\n    System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Rel(customer, web_app, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\")\n    Rel(customer, spa, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, spa, $offsetY=\"-40\")\n    Rel(customer, mobile_app, \"Uses\")\n    UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\")\n\n    Rel(web_app, spa, \"Delivers\")\n    UpdateRelStyle(web_app, spa, $offsetX=\"130\")\n    Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\n    Rel(email_system, customer, \"Sends e-mails to\")\n    UpdateRelStyle(email_system, customer, $offsetX=\"-45\")\n    Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\")\n    UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\")\n    Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n    UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")\n\nC4 Component diagram (C4Component)\nCode:\n    C4Component\n    title Component diagram for Internet Banking System - API Application\n\n    Container(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\")\n    Container(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset to the internet banking functionality to customers via their mobile mobile device.\")\n    ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    System_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Container_Boundary(api, \"API Application\") {\n        Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\")\n        Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\")\n        Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\")\n        Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\")\n\n        Rel(sign, security, \"Uses\")\n        Rel(accounts, mbsfacade, \"Uses\")\n        Rel(security, db, \"Read & write to\", \"JDBC\")\n        Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\")\n    }\n\n    Rel_Back(spa, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(spa, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    Rel(ma, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(ma, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    UpdateRelStyle(spa, sign, $offsetY=\"-40\")\n    UpdateRelStyle(spa, accounts, $offsetX=\"40\", $offsetY=\"40\")\n\n    UpdateRelStyle(ma, sign, $offsetX=\"-90\", $offsetY=\"40\")\n    UpdateRelStyle(ma, accounts, $offsetY=\"-40\")\n\n        UpdateRelStyle(sign, security, $offsetX=\"-160\", $offsetY=\"10\")\n        UpdateRelStyle(accounts, mbsfacade, $offsetX=\"140\", $offsetY=\"10\")\n        UpdateRelStyle(security, db, $offsetY=\"-40\")\n        UpdateRelStyle(mbsfacade, mbs, $offsetY=\"-40\")\n\nC4 Dynamic diagram (C4Dynamic)\nCode:\n    C4Dynamic\n    title Dynamic diagram for Internet Banking System - API Application\n\n    ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\")\n    Container_Boundary(b, \"API Application\") {\n      Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\")\n      Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\")\n    }\n    Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\")\n    Rel(c2, c3, \"Calls isAuthenticated() on\")\n    Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\")\n\n    UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\")\n    UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\")\n    UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")\n\nC4 Deployment diagram (C4Deployment)\nCode:\n    C4Deployment\n    title Deployment Diagram for Internet Banking System - Live\n\n    Deployment_Node(mob, \"Customer's mobile device\", \"Apple IOS or Android\"){\n        Container(mobile, \"Mobile App\", \"Xamarin\", \"Provides a limited subset of the Internet Banking functionality to customers via their mobile device.\")\n    }\n\n    Deployment_Node(comp, \"Customer's computer\", \"Microsoft Windows or Apple macOS\"){\n        Deployment_Node(browser, \"Web Browser\", \"Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge\"){\n            Container(spa, \"Single Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet Banking functionality to customers via their web browser.\")\n        }\n    }\n\n    Deployment_Node(plc, \"Big Bank plc\", \"Big Bank plc data center\"){\n        Deployment_Node(dn, \"bigbank-api*** x8\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(api, \"API Application\", \"Java and Spring MVC\", \"Provides Internet Banking functionality via a JSON/HTTPS API.\")\n            }\n        }\n        Deployment_Node(bb2, \"bigbank-web*** x4\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache2, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(web, \"Web Application\", \"Java and Spring MVC\", \"Delivers the static content and the Internet Banking single page application.\")\n            }\n        }\n        Deployment_Node(bigbankdb01, \"bigbank-db01\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(oracle, \"Oracle - Primary\", \"Oracle 12c\"){\n                ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n        Deployment_Node(bigbankdb02, \"bigbank-db02\", \"Ubuntu 16.04 LTS\") {\n            Deployment_Node(oracle2, \"Oracle - Secondary\", \"Oracle 12c\") {\n                ContainerDb(db2, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n    }\n\n    Rel(mobile, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel(spa, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel_U(web, spa, \"Delivers to the customer's web browser\")\n    Rel(api, db, \"Reads from and writes to\", \"JDBC\")\n    Rel(api, db2, \"Reads from and writes to\", \"JDBC\")\n    Rel_R(db, db2, \"Replicates data to\")\n\n    UpdateRelStyle(spa, api, $offsetY=\"-40\")\n    UpdateRelStyle(web, spa, $offsetY=\"-40\")\n    UpdateRelStyle(api, db, $offsetY=\"-20\", $offsetX=\"5\")\n    UpdateRelStyle(api, db2, $offsetX=\"-40\", $offsetY=\"-20\")\n    UpdateRelStyle(db, db2, $offsetY=\"-10\")\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "diagram_context",
                "display_name": "diagram_context",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "syntax_sys_end": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[/INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_sys_end",
                "display_name": "syntax_sys_end",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "syntax_user_start": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_user_start",
                "display_name": "syntax_user_start",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "added_instructions": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "Markdown formatting, use descriptive connections.",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "added_instructions",
                "display_name": "added_instructions",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "diagram_instructions": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "Extract the main elements discussed in the text and create a functional C4 diagram with relationships.",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "diagram_instructions",
                "display_name": "diagram_instructions",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "text": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text",
                "display_name": "text",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "syntax_user_end": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[/INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_user_end",
                "display_name": "syntax_user_end",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "syntax_sys_start",
                "diagram_context",
                "syntax_sys_end",
                "syntax_user_start",
                "added_instructions",
                "diagram_instructions",
                "text",
                "syntax_user_end"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-XdlOv",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": true,
        "width": 384,
        "height": 1041,
        "positionAbsolute": {
          "x": 811.339197978529,
          "y": 1102.6710314151844
        },
        "dragging": false
      },
      {
        "id": "ChatInput-YfDna",
        "type": "genericNode",
        "position": {
          "x": 116.29944941597626,
          "y": 1692.9826864921617
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-YfDna"
        },
        "selected": false,
        "width": 384,
        "height": 375,
        "positionAbsolute": {
          "x": 116.29944941597626,
          "y": 1692.9826864921617
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-qa5jU",
        "type": "genericNode",
        "position": {
          "x": 4122.714417433226,
          "y": -525.5454087202888
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass Component(CustomComponent):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Parameter\"}}\n\n    def build(self, param: str) -> Record:\n        return Record(data=param)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "param": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "param",
                "display_name": "Parameter",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Use as a template to create your own component.",
            "icon": "custom_components",
            "base_classes": [
              "Record"
            ],
            "display_name": "Custom Component",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "param": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-qa5jU",
          "description": "Use as a template to create your own component.",
          "display_name": "Custom Component"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "dragging": false
      },
      {
        "id": "ChatOutput-xGXej",
        "type": "genericNode",
        "position": {
          "x": 2274.1370424870024,
          "y": 765.3923738508435
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-xGXej"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 2274.1370424870024,
          "y": 765.3923738508435
        },
        "dragging": false
      },
      {
        "id": "Prompt-0TeMw",
        "type": "genericNode",
        "position": {
          "x": 2155.784912606142,
          "y": 1756.8361429464062
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{syntax_sys_start}\nUse this documentation as context for future instructions.\n\nDocumentation Context: {diagram_context}\n\n{syntax_sys_end}{syntax_user_start} Provide Mermaid graph markdown outputs connecting the entities that are related to each other.\nUsers will provide instructions, alongside the data to be processed which will be with \"Data: <text>\"\n\nAdded Instructions: {added_instructions}\n\nDiagram Instructions: {diagram_instructions}\n\nData: {text}\n{syntax_user_end}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "syntax_sys_start": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": " <s> [INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_sys_start",
                "display_name": "syntax_sys_start",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "diagram_context": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[General Syntax Tips]\nSyntax Structure\nOne would notice that all Diagrams definitions begin with a declaration of the diagram type, followed by the definitions of the diagram and its contents. This declaration notifies the parser which kind of diagram the code is supposed to generate.\nExample : The code below is for an Entity Relationship Diagram, specified by the erDiagram declaration. What follows is the definition of the different Entities represented in it.\nCode Example:\nerDiagram\n          CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n          CUSTOMER ||--o{ ORDER : places\n          CUSTOMER ||--o{ INVOICE : \"liable for\"\n          DELIVERY-ADDRESS ||--o{ ORDER : receives\n          INVOICE ||--|{ ORDER : covers\n          ORDER ||--|{ ORDER-ITEM : includes\n          PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n          PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\n\nDiagram Breaking\nOne should beware the use of some words or symbols that can break diagrams. These words or symbols are few and often only affect specific types of diagrams. \nThe table below will continuously be updated.\nDiagram Breakers\tReason\tSolution\nComments\t\t\n%%{``}%%\nSimilar to Directives confuses the renderer.\tIn comments using %%, avoid using \"{}\".\nFlow-Charts\t\t\n'end'\tThe word \"End\" can cause Flowcharts and Sequence diagrams to break\tWrap them in quotation marks to prevent breakage.\nNodes inside Nodes\nMermaid gets confused with nested shapes\twrap them in quotation marks to prevent breaking\n\n[Requirements Diagram Documentation]\nRequirement Diagram\nA Requirement diagram provides a visualization for requirements and their connections, to each other and other documented elements. The modeling specs follow those defined by SysML v1.6.\nRendering requirements is straightforward.\nExample Code:\n\n    requirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    test_entity - satisfies -> test_req\n\nSyntax\nThere are three types of components to a requirement diagram: requirement, element, and relationship.\nThe grammar for defining each is defined below. Words denoted in angle brackets, such as <word>, are enumerated keywords that have options elaborated in a table. user_defined_... is use in any place where user input is expected.\nAn important note on user text: all input can be surrounded in quotes or not. For example, both Id: \"here is an example\" and Id: here is an example are both valid. However, users must be careful with unquoted input. The parser will fail if another keyword is detected.\n\nRequirement\nA requirement definition contains a requirement type, name, id, text, risk, and verification method. The syntax follows:\n<type> user_defined_name {\n    id: user_defined_id\n    text: user_defined text\n    risk: <risk>\n    verifymethod: <method>\n}\nType, risk, and method are enumerations defined in SysML.\nKeyword\tOptions\nType\trequirement, functionalRequirement, interfaceRequirement, performanceRequirement, physicalRequirement, designConstraint\nRisk\tLow, Medium, High\nVerificationMethod\tAnalysis, Inspection, Test, Demonstration\n\nElement\nAn element definition contains an element name, type, and document reference. These three are all user defined. The element feature is intended to be lightweight but allow requirements to be connected to portions of other documents.\nelement user_defined_name {\n    type: user_defined_type\n    docref: user_defined_ref\n}\nRelationship\nRelationships are comprised of a source node, destination node, and relationship type.\nEach follows the definition format of\n{name of source} - <type> -> {name of destination}\nor\n{name of destination} <- <type> - {name of source}\n\"name of source\" and \"name of destination\" should be names of requirement or element nodes defined elsewhere.\nA relationship type can be one of contains, copies, derives, satisfies, verifies, refines, or traces.\nEach relationship is labeled in the diagram.\n\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "diagram_context",
                "display_name": "diagram_context",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "syntax_sys_end": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[/INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_sys_end",
                "display_name": "syntax_sys_end",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "syntax_user_start": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_user_start",
                "display_name": "syntax_user_start",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "added_instructions": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "Markdown formatting, use descriptive connections.",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "added_instructions",
                "display_name": "added_instructions",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "diagram_instructions": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "Extract the main elements discussed in the text and create a diagram with relationships.",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "diagram_instructions",
                "display_name": "diagram_instructions",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "text": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text",
                "display_name": "text",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "syntax_user_end": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "[/INST]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "syntax_user_end",
                "display_name": "syntax_user_end",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "syntax_sys_start",
                "diagram_context",
                "syntax_sys_end",
                "syntax_user_start",
                "added_instructions",
                "diagram_instructions",
                "text",
                "syntax_user_end"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-0TeMw",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 1041,
        "positionAbsolute": {
          "x": 2155.784912606142,
          "y": 1756.8361429464062
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "CustomComponent-B7oVN",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-B7oVNœ}",
        "target": "ConversationChain-N61Ou",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ConversationChain-N61Ou",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-B7oVN"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-B7oVN{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-B7oVNœ}-ConversationChain-N61Ou{œfieldNameœ:œllmœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "ChatInput-YfDna",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-YfDnaœ}",
        "target": "Prompt-XdlOv",
        "targetHandle": "{œfieldNameœ:œtextœ,œidœ:œPrompt-XdlOvœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "text",
            "id": "Prompt-XdlOv",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-YfDna"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground stroke-connection",
        "id": "reactflow__edge-ChatInput-YfDna{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-YfDnaœ}-Prompt-XdlOv{œfieldNameœ:œtextœ,œidœ:œPrompt-XdlOvœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-XdlOv",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-XdlOvœ}",
        "target": "ConversationChain-N61Ou",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ConversationChain-N61Ou",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-XdlOv"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground stroke-connection",
        "id": "reactflow__edge-Prompt-XdlOv{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-XdlOvœ}-ConversationChain-N61Ou{œfieldNameœ:œinput_valueœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "ConversationChain-N61Ou",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-N61Ouœ}",
        "target": "ChatOutput-xGXej",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xGXejœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-xGXej",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "ConversationChain",
            "id": "ConversationChain-N61Ou"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground stroke-connection",
        "id": "reactflow__edge-ConversationChain-N61Ou{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-N61Ouœ}-ChatOutput-xGXej{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xGXejœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 304.0142295119431,
      "y": -56.55341335443836,
      "zoom": 0.3268032040172611
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 2
    },
    "ConversationChain": {
      "count": 1
    },
    "Prompt": {
      "count": 2
    },
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "c7230a04-4d1d-4051-bbda-bf6d8cfd6460",
    "name": "HydraGen-Test",
    "description": "Hydragen Graph Generation - Requirements Diagram",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "1",
    "metadata": {
      "CustomComponent": {
        "count": 2
      },
      "ConversationChain": {
        "count": 1
      },
      "Prompt": {
        "count": 2
      },
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "1.0.0a49",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "CustomComponent-B7oVN",
          "type": "genericNode",
          "position": {
            "x": 811.5605979800916,
            "y": -414.1736288508548
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "apikey": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "apikey",
                  "display_name": "API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "API uses API keys for authentication.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n#from axiestudio import CustomComponent\nfrom axiestudio import custom\nfrom langchain.schema import Document\nfrom typing import Optional\nfrom langchain.llms.base import BaseLLM\nfrom langchain_ibm import WatsonxLLM\n\n\nclass Watsonx(CustomComponent):\n    display_name = \"Watsonx\"\n    description = \"Watsonx foundation models\"\n    \n    def build_config(self) -> dict:\n        model_options = [\n            # Part of the officially supported foundation models in watsonx.ai\n            'mistralai/mixtral-8x7b-instruct-v01',\n            'meta-llama/llama-3-8b-instruct',\n            'meta-llama/llama-3-70b-instruct',\n            'meta-llama/llama-2-13b-chat',\n            'meta-llama/llama-2-70b-chat',\n            'ibm-mistralai/merlinite-7b',\n            'codellama/codellama-34b-instruct-hf',\n            'google/flan-t5-xl',\n            'google/flan-t5-xxl',\n            'google/flan-ul2',\n            'ibm/granite-13b-chat-v2',\n            'ibm/granite-13b-instruct-v2',\n            'ibm/granite-20b-code-instruct',\n            'ibm/granite-20b-multilingual',\n            'ibm/granite-34b-code-instruct',\n            'ibm/granite-7b-lab',\n            'ibm/granite-8b-code-instruct',\n            'bigscience/mt0-xxl',\n        ]\n\n        decoding_options = [\n            \"greedy\",\n            \"sample\"\n        ]\n        \n        url_options = [      \n            \"https://us-south.ml.cloud.ibm.com\",\n            \"https://eu-gb.ml.cloud.ibm.com\",\n            \"https://eu-de.ml.cloud.ibm.com\",\n            \"https://jp-tok.ml.cloud.ibm.com\"\n        ]\n\n        stp_sequences = [  \n            \"</s>\",\n            \"<|end_of_text|>\"\n        ]\n \n\n        return {\n            \"model_id\": {\n                \"display_name\": \"Model Name\",\n                \"options\": model_options,\n                \"value\": model_options[2],\n                \"info\": \"The ID of the model or tune to be used for this request.\",\n            },\n            \"url\": {\n                \"display_name\": \"Url Endpoint\",\n                \"info\": \"Url endpoint for watsonx\",\n                \"options\": url_options,\n                \"value\": url_options[2],\n            },\n            \"apikey\": {\n                \"display_name\": \"API Key\",\n                \"password\": True,\n                \"info\": \"API uses API keys for authentication.\",\n                \"value\": \"HPsQWoh12PnzXwOdPYWZl8q6GusQX9T4vxsvhS-vcdIs\",  ###placeholder\n                \"required\": True\n            },\n            \"project_id\": {\n                \"display_name\": \"Project_id\",\n                \"info\": \"Project Id necessary to run inference.\",\n                \"value\": \"f275d991-68a4-47d9-b6e8-c8c052f63b33\",  ###placeholder\n                \"required\": True\n            },\n            # \"api_endpoint\": { \"display_name\": \"API Endpoint\", \"value\": \"https://bam-api.res.ibm.com/v1/\" },\n            \"decoding_method\": {\n                \"display_name\": \"Decoding Method\",\n                \"options\": decoding_options,\n                \"value\": decoding_options[0],\n                \"info\": \"Represents the strategy used for picking the tokens during generation of the output text.\"\n            },\n            \"stop_sequences\": {\n                \"display_name\": \"Stopping Sequences\",\n                \"options\": stp_sequences,\n                \"value\": stp_sequences[0],\n                \"info\": \"Encountering these strings will cause the model to stop generation.\",\n            },\n            \"min_new_tokens\": {\n                \"display_name\": \"Minimum New Tokens\",\n                \"value\": 5,\n                \"info\": \"The minimum number of new tokens to be generated.\"\n            },\n            \"max_new_tokens\": {\n                \"display_name\": \"Max New Tokens\",\n                \"value\": 4000,\n                \"info\": \"The maximum number of new tokens to be generated.\"\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.7,\n                \"info\": \"A value used to modify the next-token probabilities in sampling mode.\"\n            },\n            \"repetition_penalty\": {\n                \"display_name\": \"Repetition Penalty\",\n                \"value\": 1,\n                \"info\": \"Defaults to 1\"\n            },\n            \"random_seed\": {\n                \"display_name\": \"Random Seed\",\n                \"value\": 1,\n                \"info\": \"Defaults to 1.\"\n            },\n            \"top_p\": {\n                \"display_name\": \"Top_P\",\n                \"value\": 1,\n                \"info\": \"Defaults to 1.\"\n            },\n            \"top_k\": {\n                \"display_name\": \"Top_K\",\n                \"value\": 50,\n                \"info\": \"Defaults to 50.\"\n            },\n            \"code\": {\"show\": False}\n        }\n\n    def build(\n            self,\n            model_id: str,\n            apikey: str,\n            url: str,\n            project_id: str,\n            decoding_method: str,\n            stop_sequences: str,\n            repetition_penalty: float,\n            max_new_tokens: int,\n            min_new_tokens: int,\n            temperature: float,\n            random_seed: int,\n            top_p: float,\n            top_k: int,\n        ) -> BaseLLM:\n            from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams\n            #creds = APIClient(apikey, url)\n            stop_seq = [seq.strip() for seq in stop_sequences.splitlines()]\n            params = {\n                GenParams.TEMPERATURE: temperature,\n                GenParams.MAX_NEW_TOKENS: max_new_tokens,\n                GenParams.MIN_NEW_TOKENS: min_new_tokens,\n                GenParams.DECODING_METHOD: decoding_method,\n                GenParams.REPETITION_PENALTY: repetition_penalty,\n                GenParams.TOP_K: top_k,\n                GenParams.TOP_P: top_p,\n                GenParams.STOP_SEQUENCES: stop_seq,\n                GenParams.RANDOM_SEED: random_seed,\n            }\n            print(params)\n            model = WatsonxLLM(model_id=model_id, params=params, apikey=apikey, url=url, project_id=project_id, streaming=True)\n            return model\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "decoding_method": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "greedy",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "greedy",
                    "sample"
                  ],
                  "name": "decoding_method",
                  "display_name": "Decoding Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Represents the strategy used for picking the tokens during generation of the output text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "max_new_tokens": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 4000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_new_tokens",
                  "display_name": "Max New Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of new tokens to be generated.",
                  "load_from_db": false,
                  "title_case": false
                },
                "min_new_tokens": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "min_new_tokens",
                  "display_name": "Minimum New Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The minimum number of new tokens to be generated.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "mistralai/mixtral-8x7b-instruct-v01",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "mistralai/mixtral-8x7b-instruct-v01",
                    "meta-llama/llama-3-8b-instruct",
                    "meta-llama/llama-3-70b-instruct",
                    "meta-llama/llama-2-13b-chat",
                    "meta-llama/llama-2-70b-chat",
                    "ibm-mistralai/merlinite-7b",
                    "codellama/codellama-34b-instruct-hf",
                    "google/flan-t5-xl",
                    "google/flan-t5-xxl",
                    "google/flan-ul2",
                    "ibm/granite-13b-chat-v2",
                    "ibm/granite-13b-instruct-v2",
                    "ibm/granite-20b-code-instruct",
                    "ibm/granite-20b-multilingual",
                    "ibm/granite-34b-code-instruct",
                    "ibm/granite-7b-lab",
                    "ibm/granite-8b-code-instruct",
                    "bigscience/mt0-xxl"
                  ],
                  "name": "model_id",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The ID of the model or tune to be used for this request.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "project_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "f275d991-68a4-47d9-b6e8-c8c052f63b33",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "project_id",
                  "display_name": "Project_id",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Project Id necessary to run inference.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "random_seed": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "random_seed",
                  "display_name": "Random Seed",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Defaults to 1.",
                  "load_from_db": false,
                  "title_case": false
                },
                "repetition_penalty": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "repetition_penalty",
                  "display_name": "Repetition Penalty",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Defaults to 1",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "stop_sequences": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "</s>",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "</s>",
                    "<|end_of_text|>"
                  ],
                  "name": "stop_sequences",
                  "display_name": "Stopping Sequences",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Encountering these strings will cause the model to stop generation.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "A value used to modify the next-token probabilities in sampling mode.",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "top_k": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 50,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "top_k",
                  "display_name": "Top_K",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Defaults to 50.",
                  "load_from_db": false,
                  "title_case": false
                },
                "top_p": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "top_p",
                  "display_name": "Top_P",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Defaults to 1.",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "https://eu-de.ml.cloud.ibm.com",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "https://us-south.ml.cloud.ibm.com",
                    "https://eu-gb.ml.cloud.ibm.com",
                    "https://eu-de.ml.cloud.ibm.com",
                    "https://jp-tok.ml.cloud.ibm.com"
                  ],
                  "name": "url",
                  "display_name": "Url Endpoint",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Url endpoint for watsonx",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Watsonx foundation models",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable"
              ],
              "display_name": "watsonx.ai",
              "documentation": "",
              "custom_fields": {
                "model_id": null,
                "apikey": null,
                "url": null,
                "project_id": null,
                "decoding_method": null,
                "stop_sequences": null,
                "repetition_penalty": null,
                "max_new_tokens": null,
                "min_new_tokens": null,
                "temperature": null,
                "random_seed": null,
                "top_p": null,
                "top_k": null
              },
              "output_types": [
                "BaseLLM"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-B7oVN",
            "description": "Watsonx foundation models",
            "display_name": "watsonx.ai"
          },
          "selected": false,
          "width": 384,
          "height": 1359,
          "dragging": false,
          "positionAbsolute": {
            "x": 811.5605979800916,
            "y": -414.1736288508548
          }
        },
        {
          "id": "ConversationChain-N61Ou",
          "type": "genericNode",
          "position": {
            "x": 1584.5188016396496,
            "y": 805.8227501360524
          },
          "data": {
            "type": "ConversationChain",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input Value",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The input value to pass to the chain.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Memory to load context from. If none is provided, a ConversationBufferMemory will be used.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain.chains import ConversationChain\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Text\n\n\nclass ConversationChainComponent(CustomComponent):\n    display_name = \"ConversationChain\"\n    description = \"Chain to have a conversation and load context from memory.\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\n                \"display_name\": \"Memory\",\n                \"info\": \"Memory to load context from. If none is provided, a ConversationBufferMemory will be used.\",\n            },\n            \"input_value\": {\n                \"display_name\": \"Input Value\",\n                \"info\": \"The input value to pass to the chain.\",\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Text:\n        if memory is None:\n            chain = ConversationChain(llm=llm)\n        else:\n            chain = ConversationChain(llm=llm, memory=memory)\n        result = chain.invoke({\"input\": input_value})\n        if isinstance(result, dict):\n            result = result.get(chain.output_key, \"\")  # type: ignore\n\n        elif isinstance(result, str):\n            result = result\n        else:\n            result = result.get(\"response\")\n        self.status = result\n        return str(result)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Chain to have a conversation and load context from memory.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "ConversationChain",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "llm": null,
                "memory": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ConversationChain-N61Ou"
          },
          "selected": false,
          "width": 384,
          "height": 405,
          "dragging": false,
          "positionAbsolute": {
            "x": 1584.5188016396496,
            "y": 805.8227501360524
          }
        },
        {
          "id": "Prompt-XdlOv",
          "type": "genericNode",
          "position": {
            "x": 811.339197978529,
            "y": 1102.6710314151844
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{syntax_sys_start}\nUse this documentation as context for future instructions.\n\nDocumentation Context: {diagram_context}\n\n{syntax_sys_end}{syntax_user_start} Provide Mermaid graph markdown outputs connecting the entities that are related to each other.\nUsers will provide instructions, alongside the data to be processed which will be with \"Data: <text>\"\n\nAdded Instructions: {added_instructions}\n\nDiagram Instructions: {diagram_instructions}\n\nData: {text}\n{syntax_user_end}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "syntax_sys_start": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": " <s> [INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_sys_start",
                  "display_name": "syntax_sys_start",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "diagram_context": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[General Syntax Tips]\nSyntax Structure\nOne would notice that all Diagrams definitions begin with a declaration of the diagram type, followed by the definitions of the diagram and its contents. This declaration notifies the parser which kind of diagram the code is supposed to generate.\nExample : The code below is for an Entity Relationship Diagram, specified by the erDiagram declaration. What follows is the definition of the different Entities represented in it.\nCode Example:\nerDiagram\n          CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n          CUSTOMER ||--o{ ORDER : places\n          CUSTOMER ||--o{ INVOICE : \"liable for\"\n          DELIVERY-ADDRESS ||--o{ ORDER : receives\n          INVOICE ||--|{ ORDER : covers\n          ORDER ||--|{ ORDER-ITEM : includes\n          PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n          PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\n\nDiagram Breaking\nOne should beware the use of some words or symbols that can break diagrams. These words or symbols are few and often only affect specific types of diagrams. \nThe table below will continuously be updated.\nDiagram Breakers\tReason\tSolution\nComments\t\t\n%%{``}%%\nSimilar to Directives confuses the renderer.\tIn comments using %%, avoid using \"{}\".\nFlow-Charts\t\t\n'end'\tThe word \"End\" can cause Flowcharts and Sequence diagrams to break\tWrap them in quotation marks to prevent breakage.\nNodes inside Nodes\nMermaid gets confused with nested shapes\twrap them in quotation marks to prevent breaking\n\n[C4 Diagram Diagram Documentation]\n    C4 Diagrams\nC4 Diagram: This is an experimental diagram for now. The syntax and properties can change in future releases. Proper documentation will be provided when the syntax is stable.\nMermaid's C4 diagram syntax is compatible with plantUML. See example below:\n\nCode:\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n\nFor an example, see the source code demos/index.html\n5 types of C4 charts are supported.\n•\tSystem Context (C4Context)\n•\tContainer diagram (C4Container)\n•\tComponent diagram (C4Component)\n•\tDynamic diagram (C4Dynamic)\n•\tDeployment diagram (C4Deployment)\nPlease refer to the linked document C4-PlantUML syntax for how to write the C4 diagram.\nC4 diagram is fixed style, such as css color, so different css is not provided under different skins. updateElementStyle and UpdateElementStyle are written in the diagram last part. updateElementStyle is inconsistent with the original definition and updates the style of the relationship, including the offset of the text label relative to the original position.\nThe layout does not use a fully automated layout algorithm. The position of shapes is adjusted by changing the order in which statements are written. So there is no plan to support the following Layout statements. The number of shapes per row and the number of boundaries can be adjusted using UpdateLayoutConfig.\n•\tLayout\n•\tLay_U, Lay_Up\n•\tLay_D, Lay_Down\n•\tLay_L, Lay_Left\n•\tLay_R, Lay_Right\nThe following unfinished features are not supported in the short term.\n•\t[ ] sprite\n•\t[ ] tags\n•\t[ ] link\n•\t[ ] Legend\n•\t[x] System Context\n•\t[x] Person(alias, label, ?descr, ?sprite, ?tags, $link)\n•\t[x] Person_Ext\n•\t[x] System(alias, label, ?descr, ?sprite, ?tags, $link)\n•\t[x] SystemDb\n•\t[x] SystemQueue\n•\t[x] System_Ext\n•\t[x] SystemDb_Ext\n•\t[x] SystemQueue_Ext\n•\t[x] Boundary(alias, label, ?type, ?tags, $link)\n•\t[x] Enterprise_Boundary(alias, label, ?tags, $link)\n•\t[x] System_Boundary\n•\t[x] Container diagram\n•\t[x] Container(alias, label, ?techn, ?descr, ?sprite, ?tags, $link)\n•\t[x] ContainerDb\n•\t[x] ContainerQueue\n•\t[x] Container_Ext\n•\t[x] ContainerDb_Ext\n•\t[x] ContainerQueue_Ext\n•\t[x] Container_Boundary(alias, label, ?tags, $link)\n•\t[x] Component diagram\n•\t[x] Component(alias, label, ?techn, ?descr, ?sprite, ?tags, $link)\n•\t[x] ComponentDb\n•\t[x] ComponentQueue\n•\t[x] Component_Ext\n•\t[x] ComponentDb_Ext\n•\t[x] ComponentQueue_Ext\n•\t[x] Dynamic diagram\n•\t[x] RelIndex(index, from, to, label, ?tags, $link)\n•\t[x] Deployment diagram\n•\t[x] Deployment_Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link)\n•\t[x] Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link): short name of Deployment_Node()\n•\t[x] Node_L(alias, label, ?type, ?descr, ?sprite, ?tags, $link): left aligned Node()\n•\t[x] Node_R(alias, label, ?type, ?descr, ?sprite, ?tags, $link): right aligned Node()\n•\t[x] Relationship Types\n•\t[x] Rel(from, to, label, ?techn, ?descr, ?sprite, ?tags, $link)\n•\t[x] BiRel (bidirectional relationship)\n•\t[x] Rel_U, Rel_Up\n•\t[x] Rel_D, Rel_Down\n•\t[x] Rel_L, Rel_Left\n•\t[x] Rel_R, Rel_Right\n•\t[x] Rel_Back\n•\t[x] RelIndex * Compatible with C4-PlantUML syntax, but ignores the index parameter. The sequence number is determined by the order in which the rel statements are written.\n•\t[ ] Custom tags/stereotypes support and skin param updates\n•\t[ ] AddElementTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new element tag. The styles of the tagged elements are updated and the tag is displayed in the calculated legend.\n•\t[ ] AddRelTag(tagStereo, ?textColor, ?lineColor, ?lineStyle, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new Relationship tag. The styles of the tagged relationships are updated and the tag is displayed in the calculated legend.\n•\t[x] UpdateElementStyle(elementName, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): This call updates the default style of the elements (component, ...) and creates no additional legend entry.\n•\t[x] UpdateRelStyle(from, to, ?textColor, ?lineColor, ?offsetX, ?offsetY): This call updates the default relationship colors and creates no additional legend entry. Two new parameters, offsetX and offsetY, are added to set the offset of the original position of the text.\n•\t[ ] RoundedBoxShape(): This call returns the name of the rounded box shape and can be used as ?shape argument.\n•\t[ ] EightSidedShape(): This call returns the name of the eight sided shape and can be used as ?shape argument.\n•\t[ ] DashedLine(): This call returns the name of the dashed line and can be used as ?lineStyle argument.\n•\t[ ] DottedLine(): This call returns the name of the dotted line and can be used as ?lineStyle argument.\n•\t[ ] BoldLine(): This call returns the name of the bold line and can be used as ?lineStyle argument.\n•\t[x] UpdateLayoutConfig(?c4ShapeInRow, ?c4BoundaryInRow): New. This call updates the default c4ShapeInRow(4) and c4BoundaryInRow(2).\nThere are two ways to assign parameters with question marks. One uses the non-named parameter assignment method in the order of the parameters, and the other uses the named parameter assignment method, where the name must start with a $ symbol.\nExample: UpdateRelStyle(from, to, ?textColor, ?lineColor, ?offsetX, ?offsetY)\nC4 System Context Diagram (C4Context)\nCode:\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n\nC4 Container diagram (C4Container)\nCode:\n    C4Container\n    title Container diagram for Internet Banking System\n\n    System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\")\n    Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\")\n\n    Container_Boundary(c1, \"Internet Banking\") {\n        Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\")\n        Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n        Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n        ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n        ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n\n    }\n\n    System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Rel(customer, web_app, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\")\n    Rel(customer, spa, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, spa, $offsetY=\"-40\")\n    Rel(customer, mobile_app, \"Uses\")\n    UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\")\n\n    Rel(web_app, spa, \"Delivers\")\n    UpdateRelStyle(web_app, spa, $offsetX=\"130\")\n    Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\n    Rel(email_system, customer, \"Sends e-mails to\")\n    UpdateRelStyle(email_system, customer, $offsetX=\"-45\")\n    Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\")\n    UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\")\n    Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n    UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")\n\nC4 Component diagram (C4Component)\nCode:\n    C4Component\n    title Component diagram for Internet Banking System - API Application\n\n    Container(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\")\n    Container(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset to the internet banking functionality to customers via their mobile mobile device.\")\n    ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    System_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Container_Boundary(api, \"API Application\") {\n        Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\")\n        Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\")\n        Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\")\n        Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\")\n\n        Rel(sign, security, \"Uses\")\n        Rel(accounts, mbsfacade, \"Uses\")\n        Rel(security, db, \"Read & write to\", \"JDBC\")\n        Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\")\n    }\n\n    Rel_Back(spa, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(spa, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    Rel(ma, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(ma, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    UpdateRelStyle(spa, sign, $offsetY=\"-40\")\n    UpdateRelStyle(spa, accounts, $offsetX=\"40\", $offsetY=\"40\")\n\n    UpdateRelStyle(ma, sign, $offsetX=\"-90\", $offsetY=\"40\")\n    UpdateRelStyle(ma, accounts, $offsetY=\"-40\")\n\n        UpdateRelStyle(sign, security, $offsetX=\"-160\", $offsetY=\"10\")\n        UpdateRelStyle(accounts, mbsfacade, $offsetX=\"140\", $offsetY=\"10\")\n        UpdateRelStyle(security, db, $offsetY=\"-40\")\n        UpdateRelStyle(mbsfacade, mbs, $offsetY=\"-40\")\n\nC4 Dynamic diagram (C4Dynamic)\nCode:\n    C4Dynamic\n    title Dynamic diagram for Internet Banking System - API Application\n\n    ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\")\n    Container_Boundary(b, \"API Application\") {\n      Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\")\n      Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\")\n    }\n    Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\")\n    Rel(c2, c3, \"Calls isAuthenticated() on\")\n    Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\")\n\n    UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\")\n    UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\")\n    UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")\n\nC4 Deployment diagram (C4Deployment)\nCode:\n    C4Deployment\n    title Deployment Diagram for Internet Banking System - Live\n\n    Deployment_Node(mob, \"Customer's mobile device\", \"Apple IOS or Android\"){\n        Container(mobile, \"Mobile App\", \"Xamarin\", \"Provides a limited subset of the Internet Banking functionality to customers via their mobile device.\")\n    }\n\n    Deployment_Node(comp, \"Customer's computer\", \"Microsoft Windows or Apple macOS\"){\n        Deployment_Node(browser, \"Web Browser\", \"Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge\"){\n            Container(spa, \"Single Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet Banking functionality to customers via their web browser.\")\n        }\n    }\n\n    Deployment_Node(plc, \"Big Bank plc\", \"Big Bank plc data center\"){\n        Deployment_Node(dn, \"bigbank-api*** x8\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(api, \"API Application\", \"Java and Spring MVC\", \"Provides Internet Banking functionality via a JSON/HTTPS API.\")\n            }\n        }\n        Deployment_Node(bb2, \"bigbank-web*** x4\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache2, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(web, \"Web Application\", \"Java and Spring MVC\", \"Delivers the static content and the Internet Banking single page application.\")\n            }\n        }\n        Deployment_Node(bigbankdb01, \"bigbank-db01\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(oracle, \"Oracle - Primary\", \"Oracle 12c\"){\n                ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n        Deployment_Node(bigbankdb02, \"bigbank-db02\", \"Ubuntu 16.04 LTS\") {\n            Deployment_Node(oracle2, \"Oracle - Secondary\", \"Oracle 12c\") {\n                ContainerDb(db2, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n    }\n\n    Rel(mobile, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel(spa, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel_U(web, spa, \"Delivers to the customer's web browser\")\n    Rel(api, db, \"Reads from and writes to\", \"JDBC\")\n    Rel(api, db2, \"Reads from and writes to\", \"JDBC\")\n    Rel_R(db, db2, \"Replicates data to\")\n\n    UpdateRelStyle(spa, api, $offsetY=\"-40\")\n    UpdateRelStyle(web, spa, $offsetY=\"-40\")\n    UpdateRelStyle(api, db, $offsetY=\"-20\", $offsetX=\"5\")\n    UpdateRelStyle(api, db2, $offsetX=\"-40\", $offsetY=\"-20\")\n    UpdateRelStyle(db, db2, $offsetY=\"-10\")\n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "diagram_context",
                  "display_name": "diagram_context",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "syntax_sys_end": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[/INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_sys_end",
                  "display_name": "syntax_sys_end",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "syntax_user_start": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_user_start",
                  "display_name": "syntax_user_start",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "added_instructions": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "Markdown formatting, use descriptive connections.",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "added_instructions",
                  "display_name": "added_instructions",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "diagram_instructions": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "Extract the main elements discussed in the text and create a functional C4 diagram with relationships.",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "diagram_instructions",
                  "display_name": "diagram_instructions",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "text": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text",
                  "display_name": "text",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "syntax_user_end": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[/INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_user_end",
                  "display_name": "syntax_user_end",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "syntax_sys_start",
                  "diagram_context",
                  "syntax_sys_end",
                  "syntax_user_start",
                  "added_instructions",
                  "diagram_instructions",
                  "text",
                  "syntax_user_end"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-XdlOv",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": true,
          "width": 384,
          "height": 1041,
          "positionAbsolute": {
            "x": 811.339197978529,
            "y": 1102.6710314151844
          },
          "dragging": false
        },
        {
          "id": "ChatInput-YfDna",
          "type": "genericNode",
          "position": {
            "x": 116.29944941597626,
            "y": 1692.9826864921617
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-YfDna"
          },
          "selected": false,
          "width": 384,
          "height": 375,
          "positionAbsolute": {
            "x": 116.29944941597626,
            "y": 1692.9826864921617
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-qa5jU",
          "type": "genericNode",
          "position": {
            "x": 4122.714417433226,
            "y": -525.5454087202888
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass Component(CustomComponent):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Parameter\"}}\n\n    def build(self, param: str) -> Record:\n        return Record(data=param)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "param": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "param",
                  "display_name": "Parameter",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Use as a template to create your own component.",
              "icon": "custom_components",
              "base_classes": [
                "Record"
              ],
              "display_name": "Custom Component",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "param": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-qa5jU",
            "description": "Use as a template to create your own component.",
            "display_name": "Custom Component"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "dragging": false
        },
        {
          "id": "ChatOutput-xGXej",
          "type": "genericNode",
          "position": {
            "x": 2274.1370424870024,
            "y": 765.3923738508435
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-xGXej"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 2274.1370424870024,
            "y": 765.3923738508435
          },
          "dragging": false
        },
        {
          "id": "Prompt-0TeMw",
          "type": "genericNode",
          "position": {
            "x": 2155.784912606142,
            "y": 1756.8361429464062
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{syntax_sys_start}\nUse this documentation as context for future instructions.\n\nDocumentation Context: {diagram_context}\n\n{syntax_sys_end}{syntax_user_start} Provide Mermaid graph markdown outputs connecting the entities that are related to each other.\nUsers will provide instructions, alongside the data to be processed which will be with \"Data: <text>\"\n\nAdded Instructions: {added_instructions}\n\nDiagram Instructions: {diagram_instructions}\n\nData: {text}\n{syntax_user_end}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "syntax_sys_start": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": " <s> [INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_sys_start",
                  "display_name": "syntax_sys_start",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "diagram_context": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[General Syntax Tips]\nSyntax Structure\nOne would notice that all Diagrams definitions begin with a declaration of the diagram type, followed by the definitions of the diagram and its contents. This declaration notifies the parser which kind of diagram the code is supposed to generate.\nExample : The code below is for an Entity Relationship Diagram, specified by the erDiagram declaration. What follows is the definition of the different Entities represented in it.\nCode Example:\nerDiagram\n          CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n          CUSTOMER ||--o{ ORDER : places\n          CUSTOMER ||--o{ INVOICE : \"liable for\"\n          DELIVERY-ADDRESS ||--o{ ORDER : receives\n          INVOICE ||--|{ ORDER : covers\n          ORDER ||--|{ ORDER-ITEM : includes\n          PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n          PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\n\nDiagram Breaking\nOne should beware the use of some words or symbols that can break diagrams. These words or symbols are few and often only affect specific types of diagrams. \nThe table below will continuously be updated.\nDiagram Breakers\tReason\tSolution\nComments\t\t\n%%{``}%%\nSimilar to Directives confuses the renderer.\tIn comments using %%, avoid using \"{}\".\nFlow-Charts\t\t\n'end'\tThe word \"End\" can cause Flowcharts and Sequence diagrams to break\tWrap them in quotation marks to prevent breakage.\nNodes inside Nodes\nMermaid gets confused with nested shapes\twrap them in quotation marks to prevent breaking\n\n[Requirements Diagram Documentation]\nRequirement Diagram\nA Requirement diagram provides a visualization for requirements and their connections, to each other and other documented elements. The modeling specs follow those defined by SysML v1.6.\nRendering requirements is straightforward.\nExample Code:\n\n    requirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    test_entity - satisfies -> test_req\n\nSyntax\nThere are three types of components to a requirement diagram: requirement, element, and relationship.\nThe grammar for defining each is defined below. Words denoted in angle brackets, such as <word>, are enumerated keywords that have options elaborated in a table. user_defined_... is use in any place where user input is expected.\nAn important note on user text: all input can be surrounded in quotes or not. For example, both Id: \"here is an example\" and Id: here is an example are both valid. However, users must be careful with unquoted input. The parser will fail if another keyword is detected.\n\nRequirement\nA requirement definition contains a requirement type, name, id, text, risk, and verification method. The syntax follows:\n<type> user_defined_name {\n    id: user_defined_id\n    text: user_defined text\n    risk: <risk>\n    verifymethod: <method>\n}\nType, risk, and method are enumerations defined in SysML.\nKeyword\tOptions\nType\trequirement, functionalRequirement, interfaceRequirement, performanceRequirement, physicalRequirement, designConstraint\nRisk\tLow, Medium, High\nVerificationMethod\tAnalysis, Inspection, Test, Demonstration\n\nElement\nAn element definition contains an element name, type, and document reference. These three are all user defined. The element feature is intended to be lightweight but allow requirements to be connected to portions of other documents.\nelement user_defined_name {\n    type: user_defined_type\n    docref: user_defined_ref\n}\nRelationship\nRelationships are comprised of a source node, destination node, and relationship type.\nEach follows the definition format of\n{name of source} - <type> -> {name of destination}\nor\n{name of destination} <- <type> - {name of source}\n\"name of source\" and \"name of destination\" should be names of requirement or element nodes defined elsewhere.\nA relationship type can be one of contains, copies, derives, satisfies, verifies, refines, or traces.\nEach relationship is labeled in the diagram.\n\n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "diagram_context",
                  "display_name": "diagram_context",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "syntax_sys_end": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[/INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_sys_end",
                  "display_name": "syntax_sys_end",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "syntax_user_start": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_user_start",
                  "display_name": "syntax_user_start",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "added_instructions": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "Markdown formatting, use descriptive connections.",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "added_instructions",
                  "display_name": "added_instructions",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "diagram_instructions": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "Extract the main elements discussed in the text and create a diagram with relationships.",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "diagram_instructions",
                  "display_name": "diagram_instructions",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "text": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text",
                  "display_name": "text",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "syntax_user_end": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "[/INST]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "syntax_user_end",
                  "display_name": "syntax_user_end",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "syntax_sys_start",
                  "diagram_context",
                  "syntax_sys_end",
                  "syntax_user_start",
                  "added_instructions",
                  "diagram_instructions",
                  "text",
                  "syntax_user_end"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-0TeMw",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 1041,
          "positionAbsolute": {
            "x": 2155.784912606142,
            "y": 1756.8361429464062
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "CustomComponent-B7oVN",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-B7oVNœ}",
          "target": "ConversationChain-N61Ou",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "ConversationChain-N61Ou",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-B7oVN"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-B7oVN{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-B7oVNœ}-ConversationChain-N61Ou{œfieldNameœ:œllmœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "ChatInput-YfDna",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-YfDnaœ}",
          "target": "Prompt-XdlOv",
          "targetHandle": "{œfieldNameœ:œtextœ,œidœ:œPrompt-XdlOvœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "text",
              "id": "Prompt-XdlOv",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-YfDna"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground stroke-connection",
          "id": "reactflow__edge-ChatInput-YfDna{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-YfDnaœ}-Prompt-XdlOv{œfieldNameœ:œtextœ,œidœ:œPrompt-XdlOvœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-XdlOv",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-XdlOvœ}",
          "target": "ConversationChain-N61Ou",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ConversationChain-N61Ou",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-XdlOv"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground stroke-connection",
          "id": "reactflow__edge-Prompt-XdlOv{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-XdlOvœ}-ConversationChain-N61Ou{œfieldNameœ:œinput_valueœ,œidœ:œConversationChain-N61Ouœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "ConversationChain-N61Ou",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-N61Ouœ}",
          "target": "ChatOutput-xGXej",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xGXejœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-xGXej",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "ConversationChain",
              "id": "ConversationChain-N61Ou"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground stroke-connection",
          "id": "reactflow__edge-ConversationChain-N61Ou{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-N61Ouœ}-ChatOutput-xGXej{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xGXejœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 304.0142295119431,
        "y": -56.55341335443836,
        "zoom": 0.3268032040172611
      }
    },
    "date_created": "2024-06-10T13:53:07.883Z",
    "date_updated": "2024-06-10T13:54:00.188Z",
    "status": "Public",
    "sort": null,
    "user_updated": "4d6acd51-154b-427e-af47-512b44b0c1ba",
    "user_created": {
      "username": "Mimr_0",
      "first_name": "Milan",
      "last_name": "Mrdenovic",
      "id": "4d6acd51-154b-427e-af47-512b44b0c1ba"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.345Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 48,
    "converter_version": "1.0.0"
  }
}