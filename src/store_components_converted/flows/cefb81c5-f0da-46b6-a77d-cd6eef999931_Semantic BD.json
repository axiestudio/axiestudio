{
  "id": "cefb81c5-f0da-46b6-a77d-cd6eef999931",
  "name": "Semantic BD",
  "description": "Language Chainlink Master. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "apreczewski",
    "first_name": "Alexandre",
    "last_name": "Preczewski",
    "id": "32915075-bd9a-4751-b470-bc474017a812",
    "full_name": "Alexandre Preczewski"
  },
  "store_url": "https://www.langflow.store/store/component/cefb81c5-f0da-46b6-a77d-cd6eef999931",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-18T21:05:33.332Z",
    "updated": "2024-09-18T21:05:33.416Z",
    "downloaded": "2025-08-19T17:50:07.099Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Vector Store",
        "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "id": "groupComponent-6PzZO",
          "type": "GroupNode",
          "node": {
            "display_name": "Tool BD Semantic",
            "documentation": "",
            "description": "",
            "template": {
              "chunk_overlap_SplitText-eGIoX": {
                "advanced": true,
                "display_name": "Chunk Overlap",
                "dynamic": false,
                "info": "Number of characters to overlap between chunks.",
                "list": false,
                "name": "chunk_overlap",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 200,
                "proxy": {
                  "id": "SplitText-eGIoX",
                  "field": "chunk_overlap"
                }
              },
              "chunk_size_SplitText-eGIoX": {
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "The maximum number of characters in each chunk.",
                "list": false,
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000,
                "proxy": {
                  "id": "SplitText-eGIoX",
                  "field": "chunk_size"
                }
              },
              "code_SplitText-eGIoX": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n",
                "proxy": {
                  "id": "SplitText-eGIoX",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "separator_SplitText-eGIoX": {
                "advanced": false,
                "display_name": "Separator",
                "dynamic": false,
                "info": "The character to split on. Defaults to newline.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "separator",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\\n",
                "proxy": {
                  "id": "SplitText-eGIoX",
                  "field": "separator"
                }
              },
              "code_File-rusSV": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "proxy": {
                  "id": "File-rusSV",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "path_File-rusSV": {
                "advanced": true,
                "display_name": "Path",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "file_path": "117a7ffa-bfb9-41f8-b783-90ba0368f097/2024-09-02_03-41-02_6.pdf",
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "list": false,
                "name": "path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": "",
                "proxy": {
                  "id": "File-rusSV",
                  "field": "path"
                }
              },
              "silent_errors_File-rusSV": {
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "name": "silent_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false,
                "proxy": {
                  "id": "File-rusSV",
                  "field": "silent_errors"
                }
              },
              "api_endpoint_AstraVectorStoreComponent-dmyke": {
                "advanced": false,
                "display_name": "API Endpoint",
                "dynamic": false,
                "info": "API endpoint URL for the Astra DB service.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "api_endpoint",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "api_endpoint"
                }
              },
              "batch_size_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Batch Size",
                "dynamic": false,
                "info": "Optional number of data to process in a single batch.",
                "list": false,
                "name": "batch_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "batch_size"
                }
              },
              "bulk_delete_concurrency_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Bulk Delete Concurrency",
                "dynamic": false,
                "info": "Optional concurrency level for bulk delete operations.",
                "list": false,
                "name": "bulk_delete_concurrency",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "bulk_delete_concurrency"
                }
              },
              "bulk_insert_batch_concurrency_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Bulk Insert Batch Concurrency",
                "dynamic": false,
                "info": "Optional concurrency level for bulk insert operations.",
                "list": false,
                "name": "bulk_insert_batch_concurrency",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "bulk_insert_batch_concurrency"
                }
              },
              "bulk_insert_overwrite_concurrency_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Bulk Insert Overwrite Concurrency",
                "dynamic": false,
                "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                "list": false,
                "name": "bulk_insert_overwrite_concurrency",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "bulk_insert_overwrite_concurrency"
                }
              },
              "code_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers import docs_to_data\nfrom axiestudio.inputs import DictInput, FloatInput\nfrom axiestudio.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options)\n            }\n            collection_embedding_api_key = self.embedding.get(\"collection_embedding_api_key\")\n            if collection_embedding_api_key:\n                embedding_dict[\"collection_embedding_api_key\"] = collection_embedding_api_key\n\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "collection_indexing_policy_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Collection Indexing Policy",
                "dynamic": false,
                "info": "Optional dictionary defining the indexing policy for the collection.",
                "list": false,
                "load_from_db": false,
                "name": "collection_indexing_policy",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "collection_indexing_policy"
                }
              },
              "collection_name_AstraVectorStoreComponent-dmyke": {
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "list": false,
                "load_from_db": false,
                "name": "collection_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "criminal",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "collection_name"
                }
              },
              "metadata_indexing_exclude_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Metadata Indexing Exclude",
                "dynamic": false,
                "info": "Optional list of metadata fields to exclude from the indexing.",
                "list": false,
                "load_from_db": false,
                "name": "metadata_indexing_exclude",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "metadata_indexing_exclude"
                }
              },
              "metadata_indexing_include_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Metadata Indexing Include",
                "dynamic": false,
                "info": "Optional list of metadata fields to include in the indexing.",
                "list": false,
                "load_from_db": false,
                "name": "metadata_indexing_include",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "metadata_indexing_include"
                }
              },
              "metric_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Metric",
                "dynamic": false,
                "info": "Optional distance metric for vector comparisons in the vector store.",
                "name": "metric",
                "options": [
                  "cosine",
                  "dot_product",
                  "euclidean"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "metric"
                }
              },
              "namespace_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Namespace",
                "dynamic": false,
                "info": "Optional namespace within Astra DB to use for the collection.",
                "list": false,
                "load_from_db": false,
                "name": "namespace",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "namespace"
                }
              },
              "number_of_results_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "info": "Number of results to return.",
                "list": false,
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4,
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "number_of_results"
                }
              },
              "pre_delete_collection_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Pre Delete Collection",
                "dynamic": false,
                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                "list": false,
                "name": "pre_delete_collection",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false,
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "pre_delete_collection"
                }
              },
              "search_filter_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Search Metadata Filter",
                "dynamic": false,
                "info": "Optional dictionary of filters to apply to the search query.",
                "list": true,
                "name": "search_filter",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {},
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "search_filter"
                }
              },
              "search_input_AstraVectorStoreComponent-dmyke": {
                "advanced": false,
                "display_name": "Search Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "search_input",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "search_input"
                }
              },
              "search_score_threshold_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Search Score Threshold",
                "dynamic": false,
                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                "list": false,
                "name": "search_score_threshold",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": 0,
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "search_score_threshold"
                }
              },
              "search_type_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Search Type",
                "dynamic": false,
                "info": "Search type to use",
                "name": "search_type",
                "options": [
                  "Similarity",
                  "Similarity with score threshold",
                  "MMR (Max Marginal Relevance)"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Similarity",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "search_type"
                }
              },
              "setup_mode_AstraVectorStoreComponent-dmyke": {
                "advanced": true,
                "display_name": "Setup Mode",
                "dynamic": false,
                "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                "name": "setup_mode",
                "options": [
                  "Sync",
                  "Async",
                  "Off"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Sync",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "setup_mode"
                }
              },
              "token_AstraVectorStoreComponent-dmyke": {
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "field": "token"
                }
              },
              "chunk_size_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000,
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "chunk_size"
                }
              },
              "client_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Client",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "client",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "client"
                }
              },
              "code_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "default_headers_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Default Headers",
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "list": false,
                "name": "default_headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {},
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "default_headers"
                }
              },
              "default_query_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Default Query",
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "list": false,
                "name": "default_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {},
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "default_query"
                }
              },
              "deployment_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Deployment",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "deployment",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "deployment"
                }
              },
              "dimensions_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Dimensions",
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "list": false,
                "name": "dimensions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "dimensions"
                }
              },
              "embedding_ctx_length_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "embedding_ctx_length",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1536,
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "embedding_ctx_length"
                }
              },
              "max_retries_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3,
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "max_retries"
                }
              },
              "model_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Model",
                "dynamic": false,
                "info": "",
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "text-embedding-3-small",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "model"
                }
              },
              "model_kwargs_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {},
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "model_kwargs"
                }
              },
              "openai_api_base_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "openai_api_base",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "openai_api_base"
                }
              },
              "openai_api_key_OpenAIEmbeddings-0PlIf": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "openai_api_key"
                }
              },
              "openai_api_type_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "OpenAI API Type",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "openai_api_type",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "openai_api_type"
                }
              },
              "openai_api_version_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "OpenAI API Version",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "openai_api_version",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "openai_api_version"
                }
              },
              "openai_organization_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "OpenAI Organization",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "openai_organization",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "openai_organization"
                }
              },
              "openai_proxy_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "OpenAI Proxy",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "openai_proxy",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "openai_proxy"
                }
              },
              "request_timeout_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "request_timeout"
                }
              },
              "show_progress_bar_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "show_progress_bar",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false,
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "show_progress_bar"
                }
              },
              "skip_empty_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "skip_empty",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false,
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "skip_empty"
                }
              },
              "tiktoken_enable_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "TikToken Enable",
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "list": false,
                "name": "tiktoken_enable",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true,
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "tiktoken_enable"
                }
              },
              "tiktoken_model_name_OpenAIEmbeddings-0PlIf": {
                "advanced": true,
                "display_name": "TikToken Model Name",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "tiktoken_model_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "",
                "proxy": {
                  "id": "OpenAIEmbeddings-0PlIf",
                  "field": "tiktoken_model_name"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "SplitText-eGIoX",
                    "type": "genericNode",
                    "position": {
                      "x": 693.2979259767299,
                      "y": 54.296875
                    },
                    "data": {
                      "description": "Split text into chunks based on specified criteria.",
                      "display_name": "Split Text",
                      "id": "SplitText-eGIoX",
                      "node": {
                        "base_classes": [
                          "Data"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Split text into chunks based on specified criteria.",
                        "display_name": "Split Text",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                          "data_inputs",
                          "chunk_overlap",
                          "chunk_size",
                          "separator"
                        ],
                        "frozen": false,
                        "icon": "scissors-line-dashed",
                        "output_types": [],
                        "outputs": [
                          {
                            "cache": true,
                            "display_name": "Chunks",
                            "method": "split_text",
                            "name": "chunks",
                            "selected": "Data",
                            "types": [
                              "Data"
                            ],
                            "value": "__UNDEFINED__"
                          }
                        ],
                        "pinned": false,
                        "template": {
                          "_type": "Component",
                          "chunk_overlap": {
                            "advanced": false,
                            "display_name": "Chunk Overlap",
                            "dynamic": false,
                            "info": "Number of characters to overlap between chunks.",
                            "list": false,
                            "name": "chunk_overlap",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 200
                          },
                          "chunk_size": {
                            "advanced": false,
                            "display_name": "Chunk Size",
                            "dynamic": false,
                            "info": "The maximum number of characters in each chunk.",
                            "list": false,
                            "name": "chunk_size",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 1000
                          },
                          "code": {
                            "advanced": true,
                            "dynamic": true,
                            "fileTypes": [],
                            "file_path": "",
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "code",
                            "password": false,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "code",
                            "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n"
                          },
                          "data_inputs": {
                            "advanced": false,
                            "display_name": "Data Inputs",
                            "dynamic": false,
                            "info": "The data to split.",
                            "input_types": [
                              "Data"
                            ],
                            "list": true,
                            "name": "data_inputs",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "other",
                            "value": ""
                          },
                          "separator": {
                            "advanced": false,
                            "display_name": "Separator",
                            "dynamic": false,
                            "info": "The character to split on. Defaults to newline.",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "name": "separator",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "\\n"
                          }
                        },
                        "lf_version": "1.0.17"
                      },
                      "type": "SplitText"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 548,
                    "positionAbsolute": {
                      "x": 693.2979259767299,
                      "y": 54.296875
                    }
                  },
                  {
                    "id": "File-rusSV",
                    "type": "genericNode",
                    "position": {
                      "x": 68,
                      "y": 408.3664085365947
                    },
                    "data": {
                      "description": "A generic file loader.",
                      "display_name": "File",
                      "id": "File-rusSV",
                      "node": {
                        "base_classes": [
                          "Data"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "A generic file loader.",
                        "display_name": "File",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                          "path",
                          "silent_errors"
                        ],
                        "frozen": false,
                        "icon": "file-text",
                        "output_types": [],
                        "outputs": [
                          {
                            "cache": true,
                            "display_name": "Data",
                            "method": "load_file",
                            "name": "data",
                            "selected": "Data",
                            "types": [
                              "Data"
                            ],
                            "value": "__UNDEFINED__"
                          }
                        ],
                        "pinned": false,
                        "template": {
                          "_type": "Component",
                          "code": {
                            "advanced": true,
                            "dynamic": true,
                            "fileTypes": [],
                            "file_path": "",
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "code",
                            "password": false,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "code",
                            "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n"
                          },
                          "path": {
                            "advanced": false,
                            "display_name": "Path",
                            "dynamic": false,
                            "fileTypes": [
                              "txt",
                              "md",
                              "mdx",
                              "csv",
                              "json",
                              "yaml",
                              "yml",
                              "xml",
                              "html",
                              "htm",
                              "pdf",
                              "docx",
                              "py",
                              "sh",
                              "sql",
                              "js",
                              "ts",
                              "tsx"
                            ],
                            "file_path": "117a7ffa-bfb9-41f8-b783-90ba0368f097/2024-09-02_03-41-02_6.pdf",
                            "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                            "list": false,
                            "name": "path",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "file",
                            "value": ""
                          },
                          "silent_errors": {
                            "advanced": true,
                            "display_name": "Silent Errors",
                            "dynamic": false,
                            "info": "If true, errors will not raise an exception.",
                            "list": false,
                            "name": "silent_errors",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "bool",
                            "value": false
                          }
                        },
                        "lf_version": "1.0.17"
                      },
                      "type": "File"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 300,
                    "positionAbsolute": {
                      "x": 68,
                      "y": 408.3664085365947
                    }
                  },
                  {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "type": "genericNode",
                    "position": {
                      "x": 1327.5241487704561,
                      "y": 136.31920402189598
                    },
                    "data": {
                      "description": "Implementation of Vector Store using Astra DB with search capabilities",
                      "display_name": "Astra DB",
                      "edited": false,
                      "id": "AstraVectorStoreComponent-dmyke",
                      "node": {
                        "base_classes": [
                          "Data",
                          "Retriever"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Implementation of Vector Store using Astra DB with search capabilities",
                        "display_name": "Astra DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/astradb",
                        "edited": false,
                        "field_order": [
                          "collection_name",
                          "token",
                          "api_endpoint",
                          "search_input",
                          "ingest_data",
                          "namespace",
                          "metric",
                          "batch_size",
                          "bulk_insert_batch_concurrency",
                          "bulk_insert_overwrite_concurrency",
                          "bulk_delete_concurrency",
                          "setup_mode",
                          "pre_delete_collection",
                          "metadata_indexing_include",
                          "embedding",
                          "metadata_indexing_exclude",
                          "collection_indexing_policy",
                          "number_of_results",
                          "search_type",
                          "search_score_threshold",
                          "search_filter"
                        ],
                        "frozen": false,
                        "icon": "AstraDB",
                        "output_types": [],
                        "outputs": [
                          {
                            "cache": true,
                            "display_name": "Retriever",
                            "method": "build_base_retriever",
                            "name": "base_retriever",
                            "selected": "Retriever",
                            "types": [
                              "Retriever"
                            ],
                            "value": "__UNDEFINED__"
                          },
                          {
                            "cache": true,
                            "display_name": "Search Results",
                            "method": "search_documents",
                            "name": "search_results",
                            "selected": "Data",
                            "types": [
                              "Data"
                            ],
                            "value": "__UNDEFINED__"
                          },
                          {
                            "cache": true,
                            "display_name": "Vector Store",
                            "method": "cast_vector_store",
                            "name": "vector_store",
                            "selected": "VectorStore",
                            "types": [
                              "VectorStore"
                            ],
                            "value": "__UNDEFINED__"
                          }
                        ],
                        "pinned": false,
                        "template": {
                          "_type": "Component",
                          "api_endpoint": {
                            "advanced": false,
                            "display_name": "API Endpoint",
                            "dynamic": false,
                            "info": "API endpoint URL for the Astra DB service.",
                            "input_types": [
                              "Message"
                            ],
                            "load_from_db": false,
                            "name": "api_endpoint",
                            "password": true,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "str",
                            "value": ""
                          },
                          "batch_size": {
                            "advanced": true,
                            "display_name": "Batch Size",
                            "dynamic": false,
                            "info": "Optional number of data to process in a single batch.",
                            "list": false,
                            "name": "batch_size",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": ""
                          },
                          "bulk_delete_concurrency": {
                            "advanced": true,
                            "display_name": "Bulk Delete Concurrency",
                            "dynamic": false,
                            "info": "Optional concurrency level for bulk delete operations.",
                            "list": false,
                            "name": "bulk_delete_concurrency",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": ""
                          },
                          "bulk_insert_batch_concurrency": {
                            "advanced": true,
                            "display_name": "Bulk Insert Batch Concurrency",
                            "dynamic": false,
                            "info": "Optional concurrency level for bulk insert operations.",
                            "list": false,
                            "name": "bulk_insert_batch_concurrency",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": ""
                          },
                          "bulk_insert_overwrite_concurrency": {
                            "advanced": true,
                            "display_name": "Bulk Insert Overwrite Concurrency",
                            "dynamic": false,
                            "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                            "list": false,
                            "name": "bulk_insert_overwrite_concurrency",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": ""
                          },
                          "code": {
                            "advanced": true,
                            "dynamic": true,
                            "fileTypes": [],
                            "file_path": "",
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "code",
                            "password": false,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "code",
                            "value": "from loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers import docs_to_data\nfrom axiestudio.inputs import DictInput, FloatInput\nfrom axiestudio.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options)\n            }\n            collection_embedding_api_key = self.embedding.get(\"collection_embedding_api_key\")\n            if collection_embedding_api_key:\n                embedding_dict[\"collection_embedding_api_key\"] = collection_embedding_api_key\n\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"
                          },
                          "collection_indexing_policy": {
                            "advanced": true,
                            "display_name": "Collection Indexing Policy",
                            "dynamic": false,
                            "info": "Optional dictionary defining the indexing policy for the collection.",
                            "list": false,
                            "load_from_db": false,
                            "name": "collection_indexing_policy",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "collection_name": {
                            "advanced": false,
                            "display_name": "Collection Name",
                            "dynamic": false,
                            "info": "The name of the collection within Astra DB where the vectors will be stored.",
                            "list": false,
                            "load_from_db": false,
                            "name": "collection_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "criminal"
                          },
                          "embedding": {
                            "advanced": false,
                            "display_name": "Embedding or Astra Vectorize",
                            "dynamic": false,
                            "info": "Allows either an embedding model or an Astra Vectorize configuration.",
                            "input_types": [
                              "Embeddings",
                              "dict"
                            ],
                            "list": false,
                            "name": "embedding",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "other",
                            "value": ""
                          },
                          "ingest_data": {
                            "advanced": false,
                            "display_name": "Ingest Data",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Data"
                            ],
                            "list": true,
                            "name": "ingest_data",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "other",
                            "value": ""
                          },
                          "metadata_indexing_exclude": {
                            "advanced": true,
                            "display_name": "Metadata Indexing Exclude",
                            "dynamic": false,
                            "info": "Optional list of metadata fields to exclude from the indexing.",
                            "list": false,
                            "load_from_db": false,
                            "name": "metadata_indexing_exclude",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "metadata_indexing_include": {
                            "advanced": true,
                            "display_name": "Metadata Indexing Include",
                            "dynamic": false,
                            "info": "Optional list of metadata fields to include in the indexing.",
                            "list": false,
                            "load_from_db": false,
                            "name": "metadata_indexing_include",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "metric": {
                            "advanced": true,
                            "display_name": "Metric",
                            "dynamic": false,
                            "info": "Optional distance metric for vector comparisons in the vector store.",
                            "name": "metric",
                            "options": [
                              "cosine",
                              "dot_product",
                              "euclidean"
                            ],
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "namespace": {
                            "advanced": true,
                            "display_name": "Namespace",
                            "dynamic": false,
                            "info": "Optional namespace within Astra DB to use for the collection.",
                            "list": false,
                            "load_from_db": false,
                            "name": "namespace",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "number_of_results": {
                            "advanced": true,
                            "display_name": "Number of Results",
                            "dynamic": false,
                            "info": "Number of results to return.",
                            "list": false,
                            "name": "number_of_results",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 4
                          },
                          "pre_delete_collection": {
                            "advanced": true,
                            "display_name": "Pre Delete Collection",
                            "dynamic": false,
                            "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                            "list": false,
                            "name": "pre_delete_collection",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "bool",
                            "value": false
                          },
                          "search_filter": {
                            "advanced": true,
                            "display_name": "Search Metadata Filter",
                            "dynamic": false,
                            "info": "Optional dictionary of filters to apply to the search query.",
                            "list": true,
                            "name": "search_filter",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "type": "dict",
                            "value": {}
                          },
                          "search_input": {
                            "advanced": false,
                            "display_name": "Search Input",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "search_input",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "search_score_threshold": {
                            "advanced": true,
                            "display_name": "Search Score Threshold",
                            "dynamic": false,
                            "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                            "list": false,
                            "name": "search_score_threshold",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "float",
                            "value": 0
                          },
                          "search_type": {
                            "advanced": true,
                            "display_name": "Search Type",
                            "dynamic": false,
                            "info": "Search type to use",
                            "name": "search_type",
                            "options": [
                              "Similarity",
                              "Similarity with score threshold",
                              "MMR (Max Marginal Relevance)"
                            ],
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "Similarity"
                          },
                          "setup_mode": {
                            "advanced": true,
                            "display_name": "Setup Mode",
                            "dynamic": false,
                            "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                            "name": "setup_mode",
                            "options": [
                              "Sync",
                              "Async",
                              "Off"
                            ],
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "Sync"
                          },
                          "token": {
                            "advanced": false,
                            "display_name": "Astra DB Application Token",
                            "dynamic": false,
                            "info": "Authentication token for accessing Astra DB.",
                            "input_types": [
                              "Message"
                            ],
                            "load_from_db": false,
                            "name": "token",
                            "password": true,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "str",
                            "value": ""
                          }
                        }
                      },
                      "type": "AstraVectorStoreComponent"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 772,
                    "positionAbsolute": {
                      "x": 1327.5241487704561,
                      "y": 136.31920402189598
                    }
                  },
                  {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "type": "genericNode",
                    "position": {
                      "x": 693.701136234607,
                      "y": 654.2121888638003
                    },
                    "data": {
                      "description": "Generate embeddings using OpenAI models.",
                      "display_name": "OpenAI Embeddings",
                      "id": "OpenAIEmbeddings-0PlIf",
                      "node": {
                        "base_classes": [
                          "Embeddings"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate embeddings using OpenAI models.",
                        "display_name": "OpenAI Embeddings",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                          "default_headers",
                          "default_query",
                          "chunk_size",
                          "client",
                          "deployment",
                          "embedding_ctx_length",
                          "max_retries",
                          "model",
                          "model_kwargs",
                          "openai_api_base",
                          "openai_api_key",
                          "openai_api_type",
                          "openai_api_version",
                          "openai_organization",
                          "openai_proxy",
                          "request_timeout",
                          "show_progress_bar",
                          "skip_empty",
                          "tiktoken_model_name",
                          "tiktoken_enable",
                          "dimensions"
                        ],
                        "frozen": false,
                        "icon": "OpenAI",
                        "output_types": [],
                        "outputs": [
                          {
                            "cache": true,
                            "display_name": "Embeddings",
                            "method": "build_embeddings",
                            "name": "embeddings",
                            "selected": "Embeddings",
                            "types": [
                              "Embeddings"
                            ],
                            "value": "__UNDEFINED__"
                          }
                        ],
                        "pinned": false,
                        "template": {
                          "_type": "Component",
                          "chunk_size": {
                            "advanced": true,
                            "display_name": "Chunk Size",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "name": "chunk_size",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 1000
                          },
                          "client": {
                            "advanced": true,
                            "display_name": "Client",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "name": "client",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "code": {
                            "advanced": true,
                            "dynamic": true,
                            "fileTypes": [],
                            "file_path": "",
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "code",
                            "password": false,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "code",
                            "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n"
                          },
                          "default_headers": {
                            "advanced": true,
                            "display_name": "Default Headers",
                            "dynamic": false,
                            "info": "Default headers to use for the API request.",
                            "list": false,
                            "name": "default_headers",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "type": "dict",
                            "value": {}
                          },
                          "default_query": {
                            "advanced": true,
                            "display_name": "Default Query",
                            "dynamic": false,
                            "info": "Default query parameters to use for the API request.",
                            "list": false,
                            "name": "default_query",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "type": "dict",
                            "value": {}
                          },
                          "deployment": {
                            "advanced": true,
                            "display_name": "Deployment",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "name": "deployment",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "dimensions": {
                            "advanced": true,
                            "display_name": "Dimensions",
                            "dynamic": false,
                            "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                            "list": false,
                            "name": "dimensions",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": ""
                          },
                          "embedding_ctx_length": {
                            "advanced": true,
                            "display_name": "Embedding Context Length",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "name": "embedding_ctx_length",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 1536
                          },
                          "max_retries": {
                            "advanced": true,
                            "display_name": "Max Retries",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "name": "max_retries",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 3
                          },
                          "model": {
                            "advanced": false,
                            "display_name": "Model",
                            "dynamic": false,
                            "info": "",
                            "name": "model",
                            "options": [
                              "text-embedding-3-small",
                              "text-embedding-3-large",
                              "text-embedding-ada-002"
                            ],
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "text-embedding-3-small"
                          },
                          "model_kwargs": {
                            "advanced": true,
                            "display_name": "Model Kwargs",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "name": "model_kwargs",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "type": "dict",
                            "value": {}
                          },
                          "openai_api_base": {
                            "advanced": true,
                            "display_name": "OpenAI API Base",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "load_from_db": false,
                            "name": "openai_api_base",
                            "password": true,
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "type": "str",
                            "value": ""
                          },
                          "openai_api_key": {
                            "advanced": false,
                            "display_name": "OpenAI API Key",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "load_from_db": false,
                            "name": "openai_api_key",
                            "password": true,
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "type": "str",
                            "value": ""
                          },
                          "openai_api_type": {
                            "advanced": true,
                            "display_name": "OpenAI API Type",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "load_from_db": false,
                            "name": "openai_api_type",
                            "password": true,
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "type": "str",
                            "value": ""
                          },
                          "openai_api_version": {
                            "advanced": true,
                            "display_name": "OpenAI API Version",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "name": "openai_api_version",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "openai_organization": {
                            "advanced": true,
                            "display_name": "OpenAI Organization",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "name": "openai_organization",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "openai_proxy": {
                            "advanced": true,
                            "display_name": "OpenAI Proxy",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "name": "openai_proxy",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "request_timeout": {
                            "advanced": true,
                            "display_name": "Request Timeout",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "name": "request_timeout",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "float",
                            "value": ""
                          },
                          "show_progress_bar": {
                            "advanced": true,
                            "display_name": "Show Progress Bar",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "name": "show_progress_bar",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "bool",
                            "value": false
                          },
                          "skip_empty": {
                            "advanced": true,
                            "display_name": "Skip Empty",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "name": "skip_empty",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "bool",
                            "value": false
                          },
                          "tiktoken_enable": {
                            "advanced": true,
                            "display_name": "TikToken Enable",
                            "dynamic": false,
                            "info": "If False, you must have transformers installed.",
                            "list": false,
                            "name": "tiktoken_enable",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "bool",
                            "value": true
                          },
                          "tiktoken_model_name": {
                            "advanced": true,
                            "display_name": "TikToken Model Name",
                            "dynamic": false,
                            "info": "",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "name": "tiktoken_model_name",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          }
                        }
                      },
                      "type": "OpenAIEmbeddings"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 384,
                    "positionAbsolute": {
                      "x": 693.701136234607,
                      "y": 654.2121888638003
                    }
                  }
                ],
                "edges": [
                  {
                    "source": "File-rusSV",
                    "target": "SplitText-eGIoX",
                    "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-rusSVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                    "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-eGIoXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "id": "reactflow__edge-File-rusSV{œdataTypeœ:œFileœ,œidœ:œFile-rusSVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-eGIoX{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-eGIoXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "sourceHandle": {
                        "dataType": "File",
                        "id": "File-rusSV",
                        "name": "data",
                        "output_types": [
                          "Data"
                        ]
                      },
                      "targetHandle": {
                        "fieldName": "data_inputs",
                        "id": "SplitText-eGIoX",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      }
                    },
                    "selected": true
                  },
                  {
                    "source": "SplitText-eGIoX",
                    "target": "AstraVectorStoreComponent-dmyke",
                    "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-eGIoXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
                    "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "id": "reactflow__edge-SplitText-eGIoX{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-eGIoXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-AstraVectorStoreComponent-dmyke{œfieldNameœ:œingest_dataœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "sourceHandle": {
                        "dataType": "SplitText",
                        "id": "SplitText-eGIoX",
                        "name": "chunks",
                        "output_types": [
                          "Data"
                        ]
                      },
                      "targetHandle": {
                        "fieldName": "ingest_data",
                        "id": "AstraVectorStoreComponent-dmyke",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      }
                    },
                    "selected": true
                  },
                  {
                    "source": "OpenAIEmbeddings-0PlIf",
                    "target": "AstraVectorStoreComponent-dmyke",
                    "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-0PlIfœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                    "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                    "id": "reactflow__edge-OpenAIEmbeddings-0PlIf{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-0PlIfœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraVectorStoreComponent-dmyke{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                    "data": {
                      "sourceHandle": {
                        "dataType": "OpenAIEmbeddings",
                        "id": "OpenAIEmbeddings-0PlIf",
                        "name": "embeddings",
                        "output_types": [
                          "Embeddings"
                        ]
                      },
                      "targetHandle": {
                        "fieldName": "embedding",
                        "id": "AstraVectorStoreComponent-dmyke",
                        "inputTypes": [
                          "Embeddings",
                          "dict"
                        ],
                        "type": "other"
                      }
                    },
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Radiant Volhard",
              "description": "",
              "id": "klhzG"
            },
            "outputs": [
              {
                "cache": true,
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "name": "AstraVectorStoreComponent-dmyke_base_retriever",
                "selected": "Retriever",
                "types": [
                  "Retriever"
                ],
                "value": "__UNDEFINED__",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "name": "base_retriever",
                  "nodeDisplayName": "Astra DB"
                }
              },
              {
                "cache": true,
                "display_name": "Search Results",
                "method": "search_documents",
                "name": "AstraVectorStoreComponent-dmyke_search_results",
                "selected": "Data",
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "name": "search_results",
                  "nodeDisplayName": "Astra DB"
                }
              },
              {
                "cache": true,
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "name": "AstraVectorStoreComponent-dmyke_vector_store",
                "selected": "VectorStore",
                "types": [
                  "VectorStore"
                ],
                "value": "__UNDEFINED__",
                "proxy": {
                  "id": "AstraVectorStoreComponent-dmyke",
                  "name": "vector_store",
                  "nodeDisplayName": "Astra DB"
                }
              }
            ]
          }
        },
        "id": "groupComponent-6PzZO",
        "position": {
          "x": 604.5445653926166,
          "y": 79.33205943457386
        },
        "type": "genericNode",
        "width": 384,
        "height": 812,
        "selected": true,
        "positionAbsolute": {
          "x": 604.5445653926166,
          "y": 79.33205943457386
        },
        "dragging": false
      }
    ],
    "edges": [],
    "viewport": {
      "x": 159.3129581751675,
      "y": 116.31468782514494,
      "zoom": 0.5599089553172168
    }
  },
  "metadata": {
    "groupComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "cefb81c5-f0da-46b6-a77d-cd6eef999931",
    "name": "Semantic BD",
    "description": "Language Chainlink Master.",
    "is_component": false,
    "liked_by_count": "1",
    "downloads_count": "21",
    "metadata": {
      "groupComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "id": "groupComponent-6PzZO",
            "type": "GroupNode",
            "node": {
              "display_name": "Tool BD Semantic",
              "documentation": "",
              "description": "",
              "template": {
                "chunk_overlap_SplitText-eGIoX": {
                  "advanced": true,
                  "display_name": "Chunk Overlap",
                  "dynamic": false,
                  "info": "Number of characters to overlap between chunks.",
                  "list": false,
                  "name": "chunk_overlap",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 200,
                  "proxy": {
                    "id": "SplitText-eGIoX",
                    "field": "chunk_overlap"
                  }
                },
                "chunk_size_SplitText-eGIoX": {
                  "advanced": true,
                  "display_name": "Chunk Size",
                  "dynamic": false,
                  "info": "The maximum number of characters in each chunk.",
                  "list": false,
                  "name": "chunk_size",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 1000,
                  "proxy": {
                    "id": "SplitText-eGIoX",
                    "field": "chunk_size"
                  }
                },
                "code_SplitText-eGIoX": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n",
                  "proxy": {
                    "id": "SplitText-eGIoX",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "separator_SplitText-eGIoX": {
                  "advanced": false,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "The character to split on. Defaults to newline.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "separator",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\\n",
                  "proxy": {
                    "id": "SplitText-eGIoX",
                    "field": "separator"
                  }
                },
                "code_File-rusSV": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "proxy": {
                    "id": "File-rusSV",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "path_File-rusSV": {
                  "advanced": true,
                  "display_name": "Path",
                  "dynamic": false,
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "file_path": "117a7ffa-bfb9-41f8-b783-90ba0368f097/2024-09-02_03-41-02_6.pdf",
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "list": false,
                  "name": "path",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "file",
                  "value": "",
                  "proxy": {
                    "id": "File-rusSV",
                    "field": "path"
                  }
                },
                "silent_errors_File-rusSV": {
                  "advanced": true,
                  "display_name": "Silent Errors",
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "list": false,
                  "name": "silent_errors",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false,
                  "proxy": {
                    "id": "File-rusSV",
                    "field": "silent_errors"
                  }
                },
                "api_endpoint_AstraVectorStoreComponent-dmyke": {
                  "advanced": false,
                  "display_name": "API Endpoint",
                  "dynamic": false,
                  "info": "API endpoint URL for the Astra DB service.",
                  "input_types": [
                    "Message"
                  ],
                  "load_from_db": false,
                  "name": "api_endpoint",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "api_endpoint"
                  }
                },
                "batch_size_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Batch Size",
                  "dynamic": false,
                  "info": "Optional number of data to process in a single batch.",
                  "list": false,
                  "name": "batch_size",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "batch_size"
                  }
                },
                "bulk_delete_concurrency_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Bulk Delete Concurrency",
                  "dynamic": false,
                  "info": "Optional concurrency level for bulk delete operations.",
                  "list": false,
                  "name": "bulk_delete_concurrency",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "bulk_delete_concurrency"
                  }
                },
                "bulk_insert_batch_concurrency_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Bulk Insert Batch Concurrency",
                  "dynamic": false,
                  "info": "Optional concurrency level for bulk insert operations.",
                  "list": false,
                  "name": "bulk_insert_batch_concurrency",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "bulk_insert_batch_concurrency"
                  }
                },
                "bulk_insert_overwrite_concurrency_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Bulk Insert Overwrite Concurrency",
                  "dynamic": false,
                  "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                  "list": false,
                  "name": "bulk_insert_overwrite_concurrency",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "bulk_insert_overwrite_concurrency"
                  }
                },
                "code_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers import docs_to_data\nfrom axiestudio.inputs import DictInput, FloatInput\nfrom axiestudio.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options)\n            }\n            collection_embedding_api_key = self.embedding.get(\"collection_embedding_api_key\")\n            if collection_embedding_api_key:\n                embedding_dict[\"collection_embedding_api_key\"] = collection_embedding_api_key\n\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "collection_indexing_policy_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Collection Indexing Policy",
                  "dynamic": false,
                  "info": "Optional dictionary defining the indexing policy for the collection.",
                  "list": false,
                  "load_from_db": false,
                  "name": "collection_indexing_policy",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "collection_indexing_policy"
                  }
                },
                "collection_name_AstraVectorStoreComponent-dmyke": {
                  "advanced": false,
                  "display_name": "Collection Name",
                  "dynamic": false,
                  "info": "The name of the collection within Astra DB where the vectors will be stored.",
                  "list": false,
                  "load_from_db": false,
                  "name": "collection_name",
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "criminal",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "collection_name"
                  }
                },
                "metadata_indexing_exclude_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Metadata Indexing Exclude",
                  "dynamic": false,
                  "info": "Optional list of metadata fields to exclude from the indexing.",
                  "list": false,
                  "load_from_db": false,
                  "name": "metadata_indexing_exclude",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "metadata_indexing_exclude"
                  }
                },
                "metadata_indexing_include_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Metadata Indexing Include",
                  "dynamic": false,
                  "info": "Optional list of metadata fields to include in the indexing.",
                  "list": false,
                  "load_from_db": false,
                  "name": "metadata_indexing_include",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "metadata_indexing_include"
                  }
                },
                "metric_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Metric",
                  "dynamic": false,
                  "info": "Optional distance metric for vector comparisons in the vector store.",
                  "name": "metric",
                  "options": [
                    "cosine",
                    "dot_product",
                    "euclidean"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "metric"
                  }
                },
                "namespace_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Namespace",
                  "dynamic": false,
                  "info": "Optional namespace within Astra DB to use for the collection.",
                  "list": false,
                  "load_from_db": false,
                  "name": "namespace",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "namespace"
                  }
                },
                "number_of_results_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Number of Results",
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "list": false,
                  "name": "number_of_results",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 4,
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "number_of_results"
                  }
                },
                "pre_delete_collection_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Pre Delete Collection",
                  "dynamic": false,
                  "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                  "list": false,
                  "name": "pre_delete_collection",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false,
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "pre_delete_collection"
                  }
                },
                "search_filter_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Search Metadata Filter",
                  "dynamic": false,
                  "info": "Optional dictionary of filters to apply to the search query.",
                  "list": true,
                  "name": "search_filter",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "dict",
                  "value": {},
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "search_filter"
                  }
                },
                "search_input_AstraVectorStoreComponent-dmyke": {
                  "advanced": false,
                  "display_name": "Search Input",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "search_input",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "search_input"
                  }
                },
                "search_score_threshold_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Search Score Threshold",
                  "dynamic": false,
                  "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                  "list": false,
                  "name": "search_score_threshold",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "float",
                  "value": 0,
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "search_score_threshold"
                  }
                },
                "search_type_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Search Type",
                  "dynamic": false,
                  "info": "Search type to use",
                  "name": "search_type",
                  "options": [
                    "Similarity",
                    "Similarity with score threshold",
                    "MMR (Max Marginal Relevance)"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Similarity",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "search_type"
                  }
                },
                "setup_mode_AstraVectorStoreComponent-dmyke": {
                  "advanced": true,
                  "display_name": "Setup Mode",
                  "dynamic": false,
                  "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                  "name": "setup_mode",
                  "options": [
                    "Sync",
                    "Async",
                    "Off"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Sync",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "setup_mode"
                  }
                },
                "token_AstraVectorStoreComponent-dmyke": {
                  "advanced": false,
                  "display_name": "Astra DB Application Token",
                  "dynamic": false,
                  "info": "Authentication token for accessing Astra DB.",
                  "input_types": [
                    "Message"
                  ],
                  "load_from_db": false,
                  "name": "token",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "field": "token"
                  }
                },
                "chunk_size_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Chunk Size",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "chunk_size",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 1000,
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "chunk_size"
                  }
                },
                "client_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Client",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "client",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "client"
                  }
                },
                "code_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "default_headers_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Default Headers",
                  "dynamic": false,
                  "info": "Default headers to use for the API request.",
                  "list": false,
                  "name": "default_headers",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "dict",
                  "value": {},
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "default_headers"
                  }
                },
                "default_query_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Default Query",
                  "dynamic": false,
                  "info": "Default query parameters to use for the API request.",
                  "list": false,
                  "name": "default_query",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "dict",
                  "value": {},
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "default_query"
                  }
                },
                "deployment_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Deployment",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "deployment",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "deployment"
                  }
                },
                "dimensions_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Dimensions",
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "list": false,
                  "name": "dimensions",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "dimensions"
                  }
                },
                "embedding_ctx_length_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Embedding Context Length",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "embedding_ctx_length",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 1536,
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "embedding_ctx_length"
                  }
                },
                "max_retries_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Max Retries",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "max_retries",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 3,
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "max_retries"
                  }
                },
                "model_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Model",
                  "dynamic": false,
                  "info": "",
                  "name": "model",
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "text-embedding-3-small",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "model"
                  }
                },
                "model_kwargs_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Model Kwargs",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "model_kwargs",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "dict",
                  "value": {},
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "model_kwargs"
                  }
                },
                "openai_api_base_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "OpenAI API Base",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "load_from_db": false,
                  "name": "openai_api_base",
                  "password": true,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "openai_api_base"
                  }
                },
                "openai_api_key_OpenAIEmbeddings-0PlIf": {
                  "advanced": false,
                  "display_name": "OpenAI API Key",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "load_from_db": false,
                  "name": "openai_api_key",
                  "password": true,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "openai_api_key"
                  }
                },
                "openai_api_type_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "OpenAI API Type",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "load_from_db": false,
                  "name": "openai_api_type",
                  "password": true,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "openai_api_type"
                  }
                },
                "openai_api_version_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "OpenAI API Version",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "openai_api_version",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "openai_api_version"
                  }
                },
                "openai_organization_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "OpenAI Organization",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "openai_organization",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "openai_organization"
                  }
                },
                "openai_proxy_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "OpenAI Proxy",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "openai_proxy",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "openai_proxy"
                  }
                },
                "request_timeout_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Request Timeout",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "request_timeout",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "float",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "request_timeout"
                  }
                },
                "show_progress_bar_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Show Progress Bar",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "show_progress_bar",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false,
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "show_progress_bar"
                  }
                },
                "skip_empty_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "Skip Empty",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "name": "skip_empty",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false,
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "skip_empty"
                  }
                },
                "tiktoken_enable_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "TikToken Enable",
                  "dynamic": false,
                  "info": "If False, you must have transformers installed.",
                  "list": false,
                  "name": "tiktoken_enable",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true,
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "tiktoken_enable"
                  }
                },
                "tiktoken_model_name_OpenAIEmbeddings-0PlIf": {
                  "advanced": true,
                  "display_name": "TikToken Model Name",
                  "dynamic": false,
                  "info": "",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "tiktoken_model_name",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "",
                  "proxy": {
                    "id": "OpenAIEmbeddings-0PlIf",
                    "field": "tiktoken_model_name"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "SplitText-eGIoX",
                      "type": "genericNode",
                      "position": {
                        "x": 693.2979259767299,
                        "y": 54.296875
                      },
                      "data": {
                        "description": "Split text into chunks based on specified criteria.",
                        "display_name": "Split Text",
                        "id": "SplitText-eGIoX",
                        "node": {
                          "base_classes": [
                            "Data"
                          ],
                          "beta": false,
                          "conditional_paths": [],
                          "custom_fields": {},
                          "description": "Split text into chunks based on specified criteria.",
                          "display_name": "Split Text",
                          "documentation": "",
                          "edited": false,
                          "field_order": [
                            "data_inputs",
                            "chunk_overlap",
                            "chunk_size",
                            "separator"
                          ],
                          "frozen": false,
                          "icon": "scissors-line-dashed",
                          "output_types": [],
                          "outputs": [
                            {
                              "cache": true,
                              "display_name": "Chunks",
                              "method": "split_text",
                              "name": "chunks",
                              "selected": "Data",
                              "types": [
                                "Data"
                              ],
                              "value": "__UNDEFINED__"
                            }
                          ],
                          "pinned": false,
                          "template": {
                            "_type": "Component",
                            "chunk_overlap": {
                              "advanced": false,
                              "display_name": "Chunk Overlap",
                              "dynamic": false,
                              "info": "Number of characters to overlap between chunks.",
                              "list": false,
                              "name": "chunk_overlap",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": 200
                            },
                            "chunk_size": {
                              "advanced": false,
                              "display_name": "Chunk Size",
                              "dynamic": false,
                              "info": "The maximum number of characters in each chunk.",
                              "list": false,
                              "name": "chunk_size",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": 1000
                            },
                            "code": {
                              "advanced": true,
                              "dynamic": true,
                              "fileTypes": [],
                              "file_path": "",
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "code",
                              "password": false,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "code",
                              "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n"
                            },
                            "data_inputs": {
                              "advanced": false,
                              "display_name": "Data Inputs",
                              "dynamic": false,
                              "info": "The data to split.",
                              "input_types": [
                                "Data"
                              ],
                              "list": true,
                              "name": "data_inputs",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "other",
                              "value": ""
                            },
                            "separator": {
                              "advanced": false,
                              "display_name": "Separator",
                              "dynamic": false,
                              "info": "The character to split on. Defaults to newline.",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "name": "separator",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "\\n"
                            }
                          },
                          "lf_version": "1.0.17"
                        },
                        "type": "SplitText"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 548,
                      "positionAbsolute": {
                        "x": 693.2979259767299,
                        "y": 54.296875
                      }
                    },
                    {
                      "id": "File-rusSV",
                      "type": "genericNode",
                      "position": {
                        "x": 68,
                        "y": 408.3664085365947
                      },
                      "data": {
                        "description": "A generic file loader.",
                        "display_name": "File",
                        "id": "File-rusSV",
                        "node": {
                          "base_classes": [
                            "Data"
                          ],
                          "beta": false,
                          "conditional_paths": [],
                          "custom_fields": {},
                          "description": "A generic file loader.",
                          "display_name": "File",
                          "documentation": "",
                          "edited": false,
                          "field_order": [
                            "path",
                            "silent_errors"
                          ],
                          "frozen": false,
                          "icon": "file-text",
                          "output_types": [],
                          "outputs": [
                            {
                              "cache": true,
                              "display_name": "Data",
                              "method": "load_file",
                              "name": "data",
                              "selected": "Data",
                              "types": [
                                "Data"
                              ],
                              "value": "__UNDEFINED__"
                            }
                          ],
                          "pinned": false,
                          "template": {
                            "_type": "Component",
                            "code": {
                              "advanced": true,
                              "dynamic": true,
                              "fileTypes": [],
                              "file_path": "",
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "code",
                              "password": false,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "code",
                              "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n"
                            },
                            "path": {
                              "advanced": false,
                              "display_name": "Path",
                              "dynamic": false,
                              "fileTypes": [
                                "txt",
                                "md",
                                "mdx",
                                "csv",
                                "json",
                                "yaml",
                                "yml",
                                "xml",
                                "html",
                                "htm",
                                "pdf",
                                "docx",
                                "py",
                                "sh",
                                "sql",
                                "js",
                                "ts",
                                "tsx"
                              ],
                              "file_path": "117a7ffa-bfb9-41f8-b783-90ba0368f097/2024-09-02_03-41-02_6.pdf",
                              "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                              "list": false,
                              "name": "path",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "file",
                              "value": ""
                            },
                            "silent_errors": {
                              "advanced": true,
                              "display_name": "Silent Errors",
                              "dynamic": false,
                              "info": "If true, errors will not raise an exception.",
                              "list": false,
                              "name": "silent_errors",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "bool",
                              "value": false
                            }
                          },
                          "lf_version": "1.0.17"
                        },
                        "type": "File"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 300,
                      "positionAbsolute": {
                        "x": 68,
                        "y": 408.3664085365947
                      }
                    },
                    {
                      "id": "AstraVectorStoreComponent-dmyke",
                      "type": "genericNode",
                      "position": {
                        "x": 1327.5241487704561,
                        "y": 136.31920402189598
                      },
                      "data": {
                        "description": "Implementation of Vector Store using Astra DB with search capabilities",
                        "display_name": "Astra DB",
                        "edited": false,
                        "id": "AstraVectorStoreComponent-dmyke",
                        "node": {
                          "base_classes": [
                            "Data",
                            "Retriever"
                          ],
                          "beta": false,
                          "conditional_paths": [],
                          "custom_fields": {},
                          "description": "Implementation of Vector Store using Astra DB with search capabilities",
                          "display_name": "Astra DB",
                          "documentation": "https://python.langchain.com/docs/integrations/vectorstores/astradb",
                          "edited": false,
                          "field_order": [
                            "collection_name",
                            "token",
                            "api_endpoint",
                            "search_input",
                            "ingest_data",
                            "namespace",
                            "metric",
                            "batch_size",
                            "bulk_insert_batch_concurrency",
                            "bulk_insert_overwrite_concurrency",
                            "bulk_delete_concurrency",
                            "setup_mode",
                            "pre_delete_collection",
                            "metadata_indexing_include",
                            "embedding",
                            "metadata_indexing_exclude",
                            "collection_indexing_policy",
                            "number_of_results",
                            "search_type",
                            "search_score_threshold",
                            "search_filter"
                          ],
                          "frozen": false,
                          "icon": "AstraDB",
                          "output_types": [],
                          "outputs": [
                            {
                              "cache": true,
                              "display_name": "Retriever",
                              "method": "build_base_retriever",
                              "name": "base_retriever",
                              "selected": "Retriever",
                              "types": [
                                "Retriever"
                              ],
                              "value": "__UNDEFINED__"
                            },
                            {
                              "cache": true,
                              "display_name": "Search Results",
                              "method": "search_documents",
                              "name": "search_results",
                              "selected": "Data",
                              "types": [
                                "Data"
                              ],
                              "value": "__UNDEFINED__"
                            },
                            {
                              "cache": true,
                              "display_name": "Vector Store",
                              "method": "cast_vector_store",
                              "name": "vector_store",
                              "selected": "VectorStore",
                              "types": [
                                "VectorStore"
                              ],
                              "value": "__UNDEFINED__"
                            }
                          ],
                          "pinned": false,
                          "template": {
                            "_type": "Component",
                            "api_endpoint": {
                              "advanced": false,
                              "display_name": "API Endpoint",
                              "dynamic": false,
                              "info": "API endpoint URL for the Astra DB service.",
                              "input_types": [
                                "Message"
                              ],
                              "load_from_db": false,
                              "name": "api_endpoint",
                              "password": true,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "str",
                              "value": ""
                            },
                            "batch_size": {
                              "advanced": true,
                              "display_name": "Batch Size",
                              "dynamic": false,
                              "info": "Optional number of data to process in a single batch.",
                              "list": false,
                              "name": "batch_size",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": ""
                            },
                            "bulk_delete_concurrency": {
                              "advanced": true,
                              "display_name": "Bulk Delete Concurrency",
                              "dynamic": false,
                              "info": "Optional concurrency level for bulk delete operations.",
                              "list": false,
                              "name": "bulk_delete_concurrency",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": ""
                            },
                            "bulk_insert_batch_concurrency": {
                              "advanced": true,
                              "display_name": "Bulk Insert Batch Concurrency",
                              "dynamic": false,
                              "info": "Optional concurrency level for bulk insert operations.",
                              "list": false,
                              "name": "bulk_insert_batch_concurrency",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": ""
                            },
                            "bulk_insert_overwrite_concurrency": {
                              "advanced": true,
                              "display_name": "Bulk Insert Overwrite Concurrency",
                              "dynamic": false,
                              "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                              "list": false,
                              "name": "bulk_insert_overwrite_concurrency",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": ""
                            },
                            "code": {
                              "advanced": true,
                              "dynamic": true,
                              "fileTypes": [],
                              "file_path": "",
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "code",
                              "password": false,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "code",
                              "value": "from loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers import docs_to_data\nfrom axiestudio.inputs import DictInput, FloatInput\nfrom axiestudio.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options)\n            }\n            collection_embedding_api_key = self.embedding.get(\"collection_embedding_api_key\")\n            if collection_embedding_api_key:\n                embedding_dict[\"collection_embedding_api_key\"] = collection_embedding_api_key\n\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"
                            },
                            "collection_indexing_policy": {
                              "advanced": true,
                              "display_name": "Collection Indexing Policy",
                              "dynamic": false,
                              "info": "Optional dictionary defining the indexing policy for the collection.",
                              "list": false,
                              "load_from_db": false,
                              "name": "collection_indexing_policy",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "collection_name": {
                              "advanced": false,
                              "display_name": "Collection Name",
                              "dynamic": false,
                              "info": "The name of the collection within Astra DB where the vectors will be stored.",
                              "list": false,
                              "load_from_db": false,
                              "name": "collection_name",
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "criminal"
                            },
                            "embedding": {
                              "advanced": false,
                              "display_name": "Embedding or Astra Vectorize",
                              "dynamic": false,
                              "info": "Allows either an embedding model or an Astra Vectorize configuration.",
                              "input_types": [
                                "Embeddings",
                                "dict"
                              ],
                              "list": false,
                              "name": "embedding",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "other",
                              "value": ""
                            },
                            "ingest_data": {
                              "advanced": false,
                              "display_name": "Ingest Data",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Data"
                              ],
                              "list": true,
                              "name": "ingest_data",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "other",
                              "value": ""
                            },
                            "metadata_indexing_exclude": {
                              "advanced": true,
                              "display_name": "Metadata Indexing Exclude",
                              "dynamic": false,
                              "info": "Optional list of metadata fields to exclude from the indexing.",
                              "list": false,
                              "load_from_db": false,
                              "name": "metadata_indexing_exclude",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "metadata_indexing_include": {
                              "advanced": true,
                              "display_name": "Metadata Indexing Include",
                              "dynamic": false,
                              "info": "Optional list of metadata fields to include in the indexing.",
                              "list": false,
                              "load_from_db": false,
                              "name": "metadata_indexing_include",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "metric": {
                              "advanced": true,
                              "display_name": "Metric",
                              "dynamic": false,
                              "info": "Optional distance metric for vector comparisons in the vector store.",
                              "name": "metric",
                              "options": [
                                "cosine",
                                "dot_product",
                                "euclidean"
                              ],
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "namespace": {
                              "advanced": true,
                              "display_name": "Namespace",
                              "dynamic": false,
                              "info": "Optional namespace within Astra DB to use for the collection.",
                              "list": false,
                              "load_from_db": false,
                              "name": "namespace",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "number_of_results": {
                              "advanced": true,
                              "display_name": "Number of Results",
                              "dynamic": false,
                              "info": "Number of results to return.",
                              "list": false,
                              "name": "number_of_results",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": 4
                            },
                            "pre_delete_collection": {
                              "advanced": true,
                              "display_name": "Pre Delete Collection",
                              "dynamic": false,
                              "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                              "list": false,
                              "name": "pre_delete_collection",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "bool",
                              "value": false
                            },
                            "search_filter": {
                              "advanced": true,
                              "display_name": "Search Metadata Filter",
                              "dynamic": false,
                              "info": "Optional dictionary of filters to apply to the search query.",
                              "list": true,
                              "name": "search_filter",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "type": "dict",
                              "value": {}
                            },
                            "search_input": {
                              "advanced": false,
                              "display_name": "Search Input",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "search_input",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "search_score_threshold": {
                              "advanced": true,
                              "display_name": "Search Score Threshold",
                              "dynamic": false,
                              "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                              "list": false,
                              "name": "search_score_threshold",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "float",
                              "value": 0
                            },
                            "search_type": {
                              "advanced": true,
                              "display_name": "Search Type",
                              "dynamic": false,
                              "info": "Search type to use",
                              "name": "search_type",
                              "options": [
                                "Similarity",
                                "Similarity with score threshold",
                                "MMR (Max Marginal Relevance)"
                              ],
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "Similarity"
                            },
                            "setup_mode": {
                              "advanced": true,
                              "display_name": "Setup Mode",
                              "dynamic": false,
                              "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                              "name": "setup_mode",
                              "options": [
                                "Sync",
                                "Async",
                                "Off"
                              ],
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "Sync"
                            },
                            "token": {
                              "advanced": false,
                              "display_name": "Astra DB Application Token",
                              "dynamic": false,
                              "info": "Authentication token for accessing Astra DB.",
                              "input_types": [
                                "Message"
                              ],
                              "load_from_db": false,
                              "name": "token",
                              "password": true,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "str",
                              "value": ""
                            }
                          }
                        },
                        "type": "AstraVectorStoreComponent"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 772,
                      "positionAbsolute": {
                        "x": 1327.5241487704561,
                        "y": 136.31920402189598
                      }
                    },
                    {
                      "id": "OpenAIEmbeddings-0PlIf",
                      "type": "genericNode",
                      "position": {
                        "x": 693.701136234607,
                        "y": 654.2121888638003
                      },
                      "data": {
                        "description": "Generate embeddings using OpenAI models.",
                        "display_name": "OpenAI Embeddings",
                        "id": "OpenAIEmbeddings-0PlIf",
                        "node": {
                          "base_classes": [
                            "Embeddings"
                          ],
                          "beta": false,
                          "conditional_paths": [],
                          "custom_fields": {},
                          "description": "Generate embeddings using OpenAI models.",
                          "display_name": "OpenAI Embeddings",
                          "documentation": "",
                          "edited": false,
                          "field_order": [
                            "default_headers",
                            "default_query",
                            "chunk_size",
                            "client",
                            "deployment",
                            "embedding_ctx_length",
                            "max_retries",
                            "model",
                            "model_kwargs",
                            "openai_api_base",
                            "openai_api_key",
                            "openai_api_type",
                            "openai_api_version",
                            "openai_organization",
                            "openai_proxy",
                            "request_timeout",
                            "show_progress_bar",
                            "skip_empty",
                            "tiktoken_model_name",
                            "tiktoken_enable",
                            "dimensions"
                          ],
                          "frozen": false,
                          "icon": "OpenAI",
                          "output_types": [],
                          "outputs": [
                            {
                              "cache": true,
                              "display_name": "Embeddings",
                              "method": "build_embeddings",
                              "name": "embeddings",
                              "selected": "Embeddings",
                              "types": [
                                "Embeddings"
                              ],
                              "value": "__UNDEFINED__"
                            }
                          ],
                          "pinned": false,
                          "template": {
                            "_type": "Component",
                            "chunk_size": {
                              "advanced": true,
                              "display_name": "Chunk Size",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "name": "chunk_size",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": 1000
                            },
                            "client": {
                              "advanced": true,
                              "display_name": "Client",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "name": "client",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "code": {
                              "advanced": true,
                              "dynamic": true,
                              "fileTypes": [],
                              "file_path": "",
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "code",
                              "password": false,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "code",
                              "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n"
                            },
                            "default_headers": {
                              "advanced": true,
                              "display_name": "Default Headers",
                              "dynamic": false,
                              "info": "Default headers to use for the API request.",
                              "list": false,
                              "name": "default_headers",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "type": "dict",
                              "value": {}
                            },
                            "default_query": {
                              "advanced": true,
                              "display_name": "Default Query",
                              "dynamic": false,
                              "info": "Default query parameters to use for the API request.",
                              "list": false,
                              "name": "default_query",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "type": "dict",
                              "value": {}
                            },
                            "deployment": {
                              "advanced": true,
                              "display_name": "Deployment",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "name": "deployment",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "dimensions": {
                              "advanced": true,
                              "display_name": "Dimensions",
                              "dynamic": false,
                              "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                              "list": false,
                              "name": "dimensions",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": ""
                            },
                            "embedding_ctx_length": {
                              "advanced": true,
                              "display_name": "Embedding Context Length",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "name": "embedding_ctx_length",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": 1536
                            },
                            "max_retries": {
                              "advanced": true,
                              "display_name": "Max Retries",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "name": "max_retries",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "int",
                              "value": 3
                            },
                            "model": {
                              "advanced": false,
                              "display_name": "Model",
                              "dynamic": false,
                              "info": "",
                              "name": "model",
                              "options": [
                                "text-embedding-3-small",
                                "text-embedding-3-large",
                                "text-embedding-ada-002"
                              ],
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "text-embedding-3-small"
                            },
                            "model_kwargs": {
                              "advanced": true,
                              "display_name": "Model Kwargs",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "name": "model_kwargs",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "type": "dict",
                              "value": {}
                            },
                            "openai_api_base": {
                              "advanced": true,
                              "display_name": "OpenAI API Base",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "load_from_db": false,
                              "name": "openai_api_base",
                              "password": true,
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "type": "str",
                              "value": ""
                            },
                            "openai_api_key": {
                              "advanced": false,
                              "display_name": "OpenAI API Key",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "load_from_db": false,
                              "name": "openai_api_key",
                              "password": true,
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "type": "str",
                              "value": ""
                            },
                            "openai_api_type": {
                              "advanced": true,
                              "display_name": "OpenAI API Type",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "load_from_db": false,
                              "name": "openai_api_type",
                              "password": true,
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "type": "str",
                              "value": ""
                            },
                            "openai_api_version": {
                              "advanced": true,
                              "display_name": "OpenAI API Version",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "name": "openai_api_version",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "openai_organization": {
                              "advanced": true,
                              "display_name": "OpenAI Organization",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "name": "openai_organization",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "openai_proxy": {
                              "advanced": true,
                              "display_name": "OpenAI Proxy",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "name": "openai_proxy",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            },
                            "request_timeout": {
                              "advanced": true,
                              "display_name": "Request Timeout",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "name": "request_timeout",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "float",
                              "value": ""
                            },
                            "show_progress_bar": {
                              "advanced": true,
                              "display_name": "Show Progress Bar",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "name": "show_progress_bar",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "bool",
                              "value": false
                            },
                            "skip_empty": {
                              "advanced": true,
                              "display_name": "Skip Empty",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "name": "skip_empty",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "bool",
                              "value": false
                            },
                            "tiktoken_enable": {
                              "advanced": true,
                              "display_name": "TikToken Enable",
                              "dynamic": false,
                              "info": "If False, you must have transformers installed.",
                              "list": false,
                              "name": "tiktoken_enable",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "bool",
                              "value": true
                            },
                            "tiktoken_model_name": {
                              "advanced": true,
                              "display_name": "TikToken Model Name",
                              "dynamic": false,
                              "info": "",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "name": "tiktoken_model_name",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": ""
                            }
                          }
                        },
                        "type": "OpenAIEmbeddings"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 384,
                      "positionAbsolute": {
                        "x": 693.701136234607,
                        "y": 654.2121888638003
                      }
                    }
                  ],
                  "edges": [
                    {
                      "source": "File-rusSV",
                      "target": "SplitText-eGIoX",
                      "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-rusSVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                      "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-eGIoXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "id": "reactflow__edge-File-rusSV{œdataTypeœ:œFileœ,œidœ:œFile-rusSVœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-eGIoX{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-eGIoXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "sourceHandle": {
                          "dataType": "File",
                          "id": "File-rusSV",
                          "name": "data",
                          "output_types": [
                            "Data"
                          ]
                        },
                        "targetHandle": {
                          "fieldName": "data_inputs",
                          "id": "SplitText-eGIoX",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        }
                      },
                      "selected": true
                    },
                    {
                      "source": "SplitText-eGIoX",
                      "target": "AstraVectorStoreComponent-dmyke",
                      "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-eGIoXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
                      "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "id": "reactflow__edge-SplitText-eGIoX{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-eGIoXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-AstraVectorStoreComponent-dmyke{œfieldNameœ:œingest_dataœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "sourceHandle": {
                          "dataType": "SplitText",
                          "id": "SplitText-eGIoX",
                          "name": "chunks",
                          "output_types": [
                            "Data"
                          ]
                        },
                        "targetHandle": {
                          "fieldName": "ingest_data",
                          "id": "AstraVectorStoreComponent-dmyke",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        }
                      },
                      "selected": true
                    },
                    {
                      "source": "OpenAIEmbeddings-0PlIf",
                      "target": "AstraVectorStoreComponent-dmyke",
                      "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-0PlIfœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                      "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                      "id": "reactflow__edge-OpenAIEmbeddings-0PlIf{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-0PlIfœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraVectorStoreComponent-dmyke{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-dmykeœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                      "data": {
                        "sourceHandle": {
                          "dataType": "OpenAIEmbeddings",
                          "id": "OpenAIEmbeddings-0PlIf",
                          "name": "embeddings",
                          "output_types": [
                            "Embeddings"
                          ]
                        },
                        "targetHandle": {
                          "fieldName": "embedding",
                          "id": "AstraVectorStoreComponent-dmyke",
                          "inputTypes": [
                            "Embeddings",
                            "dict"
                          ],
                          "type": "other"
                        }
                      },
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Radiant Volhard",
                "description": "",
                "id": "klhzG"
              },
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "name": "AstraVectorStoreComponent-dmyke_base_retriever",
                  "selected": "Retriever",
                  "types": [
                    "Retriever"
                  ],
                  "value": "__UNDEFINED__",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "name": "base_retriever",
                    "nodeDisplayName": "Astra DB"
                  }
                },
                {
                  "cache": true,
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "name": "AstraVectorStoreComponent-dmyke_search_results",
                  "selected": "Data",
                  "types": [
                    "Data"
                  ],
                  "value": "__UNDEFINED__",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "name": "search_results",
                    "nodeDisplayName": "Astra DB"
                  }
                },
                {
                  "cache": true,
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "name": "AstraVectorStoreComponent-dmyke_vector_store",
                  "selected": "VectorStore",
                  "types": [
                    "VectorStore"
                  ],
                  "value": "__UNDEFINED__",
                  "proxy": {
                    "id": "AstraVectorStoreComponent-dmyke",
                    "name": "vector_store",
                    "nodeDisplayName": "Astra DB"
                  }
                }
              ]
            }
          },
          "id": "groupComponent-6PzZO",
          "position": {
            "x": 604.5445653926166,
            "y": 79.33205943457386
          },
          "type": "genericNode",
          "width": 384,
          "height": 812,
          "selected": true,
          "positionAbsolute": {
            "x": 604.5445653926166,
            "y": 79.33205943457386
          },
          "dragging": false
        }
      ],
      "edges": [],
      "viewport": {
        "x": 159.3129581751675,
        "y": 116.31468782514494,
        "zoom": 0.5599089553172168
      }
    },
    "date_created": "2024-09-18T21:05:33.332Z",
    "date_updated": "2024-09-18T21:05:33.416Z",
    "status": "Public",
    "sort": null,
    "user_updated": "32915075-bd9a-4751-b470-bc474017a812",
    "user_created": {
      "username": "apreczewski",
      "first_name": "Alexandre",
      "last_name": "Preczewski",
      "id": "32915075-bd9a-4751-b470-bc474017a812"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Vector Store",
          "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.694Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 68,
    "converter_version": "1.0.0"
  }
}