{
  "id": "ab87cf27-c22b-4e71-a498-6ee3ed1d42c9",
  "name": "自訂Multi Agents RAG (2024/09/13)",
  "description": "模仿 Flowise 的 Multi Agent，包含自訂Worker、自訂Supervisor (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "zrkluke",
    "first_name": "Luke",
    "last_name": "Kong",
    "id": "5b2787d1-b627-4a21-a59d-bcfd331da110",
    "full_name": "Luke Kong"
  },
  "store_url": "https://www.langflow.store/store/component/ab87cf27-c22b-4e71-a498-6ee3ed1d42c9",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-16T06:25:43.199Z",
    "updated": "2024-09-16T06:25:43.346Z",
    "downloaded": "2025-08-19T17:50:07.092Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CustomComponent-tCZXU",
        "type": "genericNode",
        "position": {
          "x": 765.4150349640538,
          "y": -349.52627128033896
        },
        "data": {
          "type": "ToolCallingAgentComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Tool Calling Chat Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool",
                  "BaseTool"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, List, Tuple, Callable\nimport functools\n\nfrom langchain.agents import create_tool_calling_agent, AgentExecutor\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import DataInput, DictInput, HandleInput, MultilineInput, NestedDictInput, IntInput\nfrom axiestudio.template import Output\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Object\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    description: str = \"Worker node in LangGraph\"\n    icon = \"biceps-flexed\"\n\n    _work_base_inputs = LCToolsAgentComponent._base_inputs[1:]\n    inputs = _work_base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"worker_name\",\n            display_name=\"Worker Name\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"worker_prompt\",\n            display_name=\"Worker Prompt\",\n            info=\"System prompt for the worker agent.\",\n            value=\"You are a helpful assistant\",\n            required=True,\n        ),\n        NestedDictInput(\n            name=\"prompt_values\",\n            display_name=\"Format Prompt Values\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            value=15,\n        ),\n    ]\n    \n    outputs = [\n        Output(display_name=\"Worker\", name=\"worker\", method=\"create_worker\"),\n    ]\n\n\n    '''Create Agent Worker'''\n    def create_agent(self, llm, tools, system_prompt) -> AgentExecutor:\n\n        max_iterations = self.max_iterations\n        if max_iterations < 1:\n            max_iterations = 15\n\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                MessagesPlaceholder(variable_name=\"agent_scratchpad\"),\n            ]\n        )\n        agent = create_openai_tools_agent(llm, tools, prompt)\n        executor = AgentExecutor(agent=agent, tools=tools, max_iterations=max_iterations)\n        \n        return executor\n\n\n    def agent_node(self, state, agent: AgentExecutor, name):\n        result = agent.invoke(state)\n        return {\"messages\": [AIMessage(content=result[\"output\"], name=name)]}\n\n\n    def create_worker(self) -> Object:\n\n        llm = self.llm\n        tools = self.tools\n        prompt = self.worker_prompt\n        prompt_values = self.prompt_values\n        name = self.worker_name\n\n        worker_prompt = prompt.format(**prompt_values)\n        worker_agent = self.create_agent(llm, tools, worker_prompt)\n        worker_node = functools.partial(self.agent_node, agent=worker_agent, name=name)\n\n        return (name, worker_node)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_iterations": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 0,
                "display_name": "Max Iterations",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "prompt_values": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "prompt_values",
                "value": {
                  "bank": "cathay",
                  "invest": "JPM"
                },
                "display_name": "Format Prompt Values",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput",
                "load_from_db": false
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "worker_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "worker_name",
                "value": "JPM",
                "display_name": "Worker Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "worker_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "worker_prompt",
                "value": "作為 {bank} 的代表，您的職責是提供{invest}券商報告摘要，並以繁體中文回答。\n您的目標是提供最高品質的幫助，確保您的答案全面且基於事實，不帶任何假設。\\n\\n\nAlways use the tool provided - JPM to look for answers. \nCheck if you need to pass the result to Quality Assurance Specialist for review.",
                "display_name": "Worker Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System prompt for the worker agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Worker node in LangGraph",
            "icon": "biceps-flexed",
            "base_classes": [
              "Object"
            ],
            "display_name": "(9/13)自訂Worker",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Object"
                ],
                "selected": "Object",
                "name": "worker",
                "display_name": "Worker",
                "method": "create_worker",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "tools",
              "llm",
              "worker_name",
              "worker_prompt",
              "prompt_values",
              "max_iterations"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "CustomComponent-tCZXU"
        },
        "selected": false,
        "width": 384,
        "height": 652,
        "dragging": false,
        "positionAbsolute": {
          "x": 765.4150349640538,
          "y": -349.52627128033896
        }
      },
      {
        "id": "ChatInput-P3Btc",
        "type": "genericNode",
        "position": {
          "x": 1446.8672346123706,
          "y": 686.5117643634737
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "請告訴我GS的最新報告",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "ChatInput-P3Btc"
        },
        "selected": false,
        "width": 384,
        "height": 298,
        "positionAbsolute": {
          "x": 1446.8672346123706,
          "y": 686.5117643634737
        },
        "dragging": false
      },
      {
        "id": "RetrieverTool-9vvWp",
        "type": "genericNode",
        "position": {
          "x": 105.78075444592173,
          "y": -348.85064310767405
        },
        "data": {
          "type": "RetrieverTool",
          "node": {
            "template": {
              "_type": "CustomComponent",
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "input_types": [
                  "Retriever"
                ],
                "dynamic": false,
                "info": "Retriever to interact with",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import create_retriever_tool\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n    name = \"RetrieverTool\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n                \"input_types\": [\"Retriever\"],\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "dynamic": false,
                "info": "Description of the tool",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "使用此功能回答用戶有關\"參考文檔\"摘要"
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "display_name": "Name",
                "advanced": false,
                "dynamic": false,
                "info": "Name of the tool",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "search"
              }
            },
            "description": "Tool for interacting with retriever",
            "base_classes": [
              "BaseTool",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "Tool"
            ],
            "display_name": "RetrieverTool",
            "documentation": "",
            "custom_fields": {
              "retriever": null,
              "name": null,
              "description": null
            },
            "output_types": [
              "Tool"
            ],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tool",
                "hidden": null,
                "display_name": "Tool",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "RetrieverTool-9vvWp"
        },
        "selected": false,
        "width": 384,
        "height": 432,
        "positionAbsolute": {
          "x": 105.78075444592173,
          "y": -348.85064310767405
        },
        "dragging": false
      },
      {
        "id": "Pinecone-gvPGF",
        "type": "genericNode",
        "position": {
          "x": -460.9955458743692,
          "y": -345.9337433605011
        },
        "data": {
          "type": "Pinecone",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "distance_strategy": {
                "trace_as_metadata": true,
                "options": [
                  "Cosine",
                  "Euclidean",
                  "Dot Product"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "distance_strategy",
                "value": "Cosine",
                "display_name": "Distance Strategy",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "index_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "index_name",
                "value": "test",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "namespace": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "namespace",
                "value": "test-chat",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "Namespace for the index.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 4,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pinecone_api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "pinecone_api_key",
                "value": "",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "text_key": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "text",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "Key in the record to use as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Pinecone Vector Store with search capabilities",
            "icon": "Pinecone",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Pinecone",
            "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "text_key",
              "search_query",
              "ingest_data",
              "embedding",
              "number_of_results"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "Pinecone-gvPGF"
        },
        "selected": false,
        "width": 384,
        "height": 828,
        "positionAbsolute": {
          "x": -460.9955458743692,
          "y": -345.9337433605011
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-aKFcK",
        "type": "genericNode",
        "position": {
          "x": 2479.6591091442833,
          "y": 693.0564852785975
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "ChatOutput-aKFcK"
        },
        "selected": false,
        "width": 384,
        "height": 298,
        "positionAbsolute": {
          "x": 2479.6591091442833,
          "y": 693.0564852785975
        },
        "dragging": false
      },
      {
        "id": "RecursiveCharacterTextSplitter-2Qcr4",
        "type": "genericNode",
        "position": {
          "x": -1353.0016478265427,
          "y": -517.3177481191658
        },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "_type": "Component",
              "data_input": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_input",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Data"
                ],
                "dynamic": false,
                "info": "The texts to split.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "chunk_overlap": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_overlap",
                "value": 200,
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter, TextSplitter\nfrom axiestudio.base.textsplitters.model import LCTextSplitterComponent\nfrom axiestudio.inputs.inputs import DataInput, IntInput, MessageTextInput\nfrom axiestudio.utils.util import unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(LCTextSplitterComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text trying to keep all related text together.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n    name = \"RecursiveCharacterTextSplitter\"\n\n    inputs = [\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum length of each chunk.\",\n            value=1000,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"The amount of overlap between chunks.\",\n            value=200,\n        ),\n        DataInput(\n            name=\"data_input\",\n            display_name=\"Input\",\n            info=\"The texts to split.\",\n            input_types=[\"Document\", \"Data\"],\n        ),\n        MessageTextInput(\n            name=\"separators\",\n            display_name=\"Separators\",\n            info='The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n            is_list=True,\n        ),\n    ]\n\n    def get_data_input(self) -> Any:\n        return self.data_input\n\n    def build_text_splitter(self) -> TextSplitter:\n        if not self.separators:\n            separators: list[str] | None = None\n        else:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in self.separators]\n\n        return RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=self.chunk_size,\n            chunk_overlap=self.chunk_overlap,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "separators": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "separators",
                "value": "",
                "display_name": "Separators",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Split text trying to keep all related text together.",
            "base_classes": [
              "Data"
            ],
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "split_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "chunk_size",
              "chunk_overlap",
              "data_input",
              "separators"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "RecursiveCharacterTextSplitter-2Qcr4"
        },
        "selected": false,
        "width": 384,
        "height": 518,
        "positionAbsolute": {
          "x": -1353.0016478265427,
          "y": -517.3177481191658
        },
        "dragging": false
      },
      {
        "id": "File-9snIT",
        "type": "genericNode",
        "position": {
          "x": -1770.2114968742176,
          "y": -419.41675429609705
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "_type": "Component",
              "path": {
                "trace_as_metadata": true,
                "file_path": "79349a61-f034-4444-b82c-307ac655a544\\2024-09-11_17-02-00_國泰CUBE申請書.pdf",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "path",
                "value": "",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_file",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "silent_errors"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "File-9snIT"
        },
        "selected": false,
        "width": 384,
        "height": 298,
        "positionAbsolute": {
          "x": -1770.2114968742176,
          "y": -419.41675429609705
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-2Hfj8",
        "type": "genericNode",
        "position": {
          "x": 1924.1009963966949,
          "y": 1276.8123085961918
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Tool Calling Chat Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "workers": {
                "trace_as_metadata": true,
                "list": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "workers",
                "value": "",
                "display_name": "Workers",
                "advanced": false,
                "input_types": [
                  "Object"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.field_typing import Object\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nfrom typing import Any, Dict, List, Union, Annotated, Sequence, TypedDict\nimport types\nimport functools\nimport operator\n\nfrom langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\nfrom langchain_core.messages import BaseMessage, HumanMessage, AIMessage\nfrom langchain_core.output_parsers.openai_functions import JsonOutputFunctionsParser\nfrom langgraph.graph import END, StateGraph, START\n\n\n\nclass CustomComponent(Component):\n    description = \"Supervisor node in LangGraph\"\n    icon = \"users-round\"\n\n    inputs = [\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        HandleInput(\n            name=\"workers\",\n            display_name=\"Workers\",\n            input_types=[\"Object\"],\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"supervisor_prompt\",\n            display_name=\"Supervisor Prompt\",\n            info=\"Prompt must contain {team_members}\",\n            value='''您是supervisor，負責管理以下工作人員之間的對話：{team_members}。\\n\n            鑑於以下使用者請求，請與工作人員一起回應以進行下一步操作。\\n\n            每個工作人員將執行一項任務並回應其結果和狀態。\\n\n            您負責總結 {team_members} 的答案，以繁體中文回答，並確保您每次都會這樣做。\\n\n            完成後，響應“FINISH”。\\n有策略地選擇以盡量減少所採取的步驟數。''',\n            advanced=True,\n            required=True,\n        ),\n        IntInput(\n            name=\"recursion_limit\",\n            display_name=\"Recursion Limit\",\n            value=100,\n            advanced=True,\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_message_response\"),\n    ]\n\n    '''Create Agent Supervisor'''\n    def create_supervisor(self, llm, team_members: List[str], system_prompt: str):\n        options = [\"FINISH\"] + team_members\n        function_def = {\n            \"name\": \"route\",\n            \"description\": \"Select the next role.\",\n            \"parameters\": {\n                \"title\": \"routeSchema\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"next\": {\n                        \"title\": \"Next\",\n                        \"anyOf\": [\n                            {\"enum\": options},\n                        ],\n                    }\n                },\n                \"required\": [\"next\"],\n            },\n        }\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                (\n                    \"human\",\n                    \"Given the conversation above, who should act next?\"\n                    \" Or should we FINISH? Select one of: {options}\",\n                ),\n            ]\n        ).partial(options=str(options), team_members=\", \".join(team_members))\n    \n        supervisor_chain = (\n            prompt\n            | llm.bind_functions(functions=[function_def], function_call=\"route\")\n            | JsonOutputFunctionsParser()\n        )\n    \n        # TODO: Summarization\n        return supervisor_chain\n\n\n    '''Construct Graph'''\n    def construct_graph(self, team_members: List[tuple[str, Any]], supervisor: tuple[str, Any]):\n        class AgentState(TypedDict):\n            messages: Annotated[Sequence[BaseMessage], operator.add]\n            next: str   # indicates where to route to next\n    \n        workflow = StateGraph(AgentState)\n        for member in team_members:\n            workflow.add_node(member[0], member[1])\n        workflow.add_node(supervisor[0], supervisor[1])\n    \n        # Workers always report back to the supervisor\n        for member in team_members:\n            workflow.add_edge(member[0], supervisor[0])\n    \n        conditional_map = {member[0]: member[0] for member in team_members}\n        conditional_map[\"FINISH\"] = END\n        workflow.add_conditional_edges(\"supervisor\", lambda x: x[\"next\"], conditional_map)\n        workflow.add_edge(START, supervisor[0])\n    \n        graph = workflow.compile()\n    \n        return graph\n    \n\n    def main(self):\n\n        team_members = self.workers\n        names = [member[0] for member in team_members]\n    \n        '''Create Agent Supervisor'''\n        supervisor_0 = self.create_supervisor(\n            llm=self.llm,\n            team_members=names,\n            system_prompt=self.supervisor_prompt,\n        )\n        supervisor = ('supervisor', supervisor_0)\n    \n        '''Construct Graph'''\n        graph = self.construct_graph(team_members=team_members, supervisor=supervisor)\n    \n        return graph\n\n\n    def get_response(self) -> str:\n\n        graph = self.main()\n        \n        input_dict = {\"messages\": [HumanMessage(content=self.input_value)]}\n        config_dict = {\"recursion_limit\": self.recursion_limit}\n        \n        result_str = \"\"\n        \n        for s in graph.stream(\n            input=input_dict,\n            config=config_dict,\n        ):\n            # if \"__end__\" not in s:\n            #     print(s)\n            #     print(\"----\")\n            if 'supervisor' in s:\n                result_str += f\"**(Supervisor select {s['supervisor']['next']})**\\n\"\n            else:\n                messages = list(s.values())[0]['messages']\n                for message in messages:\n                    if isinstance(message, AIMessage):\n                        result_str += f\"**{message.name}**: {message.content}\\n\\n\"\n                \n        return result_str\n\n\n    def build_message_response(self) -> Message:\n        \n        response = self.get_response()\n        message = Message(\n            text=response,\n            sender=\"AI\",\n            sender_name=\"AI\",\n        )\n    \n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "recursion_limit": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "recursion_limit",
                "value": 100,
                "display_name": "Recursion Limit",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "supervisor_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "supervisor_prompt",
                "value": "您是supervisor，負責管理以下工作人員之間的對話：{team_members}。\\n\n鑑於以下使用者請求，請與工作人員一起回應以進行下一步操作。\\n\n每個工作人員將執行一項任務並回應其結果和狀態。\\n\n您負責總結 {team_members} 的答案，以繁體中文回答，並確保您每次都會這樣做。\\n\n完成後，響應“FINISH”。\\n有策略地選擇以盡量減少所採取的步驟數。",
                "display_name": "Supervisor Prompt",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Prompt must contain {team_members}",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Supervisor node in LangGraph",
            "icon": "users-round",
            "base_classes": [
              "Message"
            ],
            "display_name": "(9/13)自訂Supervisor",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "display_name": "Response",
                "method": "build_message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "llm",
              "workers",
              "supervisor_prompt",
              "recursion_limit"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-2Hfj8"
        },
        "selected": false,
        "width": 384,
        "height": 394,
        "dragging": false,
        "positionAbsolute": {
          "x": 1924.1009963966949,
          "y": 1276.8123085961918
        }
      },
      {
        "id": "ToolCallingAgentComponent-47J8C",
        "type": "genericNode",
        "position": {
          "x": 796.6969900294669,
          "y": 902.9769863461436
        },
        "data": {
          "type": "ToolCallingAgentComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Tool Calling Chat Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool",
                  "BaseTool"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, List, Tuple, Callable\nimport functools\n\nfrom langchain.agents import create_tool_calling_agent, AgentExecutor\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import DataInput, DictInput, HandleInput, MultilineInput, NestedDictInput, IntInput\nfrom axiestudio.template import Output\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Object\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    description: str = \"Worker node in LangGraph\"\n    icon = \"biceps-flexed\"\n\n    _work_base_inputs = LCToolsAgentComponent._base_inputs[1:]\n    inputs = _work_base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"worker_name\",\n            display_name=\"Worker Name\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"worker_prompt\",\n            display_name=\"Worker Prompt\",\n            info=\"System prompt for the worker agent.\",\n            value=\"You are a helpful assistant\",\n            required=True,\n        ),\n        NestedDictInput(\n            name=\"prompt_values\",\n            display_name=\"Format Prompt Values\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            value=15,\n        ),\n    ]\n    \n    outputs = [\n        Output(display_name=\"Worker\", name=\"worker\", method=\"create_worker\"),\n    ]\n\n\n    '''Create Agent Worker'''\n    def create_agent(self, llm, tools, system_prompt) -> AgentExecutor:\n\n        max_iterations = self.max_iterations\n        if max_iterations < 1:\n            max_iterations = 15\n\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                MessagesPlaceholder(variable_name=\"agent_scratchpad\"),\n            ]\n        )\n        agent = create_openai_tools_agent(llm, tools, prompt)\n        executor = AgentExecutor(agent=agent, tools=tools, max_iterations=max_iterations)\n        \n        return executor\n\n\n    def agent_node(self, state, agent: AgentExecutor, name):\n        result = agent.invoke(state)\n        return {\"messages\": [AIMessage(content=result[\"output\"], name=name)]}\n\n\n    def create_worker(self) -> Object:\n\n        llm = self.llm\n        tools = self.tools\n        prompt = self.worker_prompt\n        prompt_values = self.prompt_values\n        name = self.worker_name\n\n        worker_prompt = prompt.format(**prompt_values)\n        worker_agent = self.create_agent(llm, tools, worker_prompt)\n        worker_node = functools.partial(self.agent_node, agent=worker_agent, name=name)\n\n        return (name, worker_node)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_iterations": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 0,
                "display_name": "Max Iterations",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "prompt_values": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "prompt_values",
                "value": {
                  "bank": "cathay",
                  "invest": "GS"
                },
                "display_name": "Format Prompt Values",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput",
                "load_from_db": false
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "worker_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "worker_name",
                "value": "GS",
                "display_name": "Worker Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "worker_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "worker_prompt",
                "value": "作為 {bank} 的代表，您的職責是提供{invest}券商報告摘要，並以繁體中文回答。\n您的目標是提供最高品質的幫助，確保您的答案全面且基於事實，不帶任何假設。\\n\\n\nAlways use the tool provided - GS to look for answers. \nCheck if you need to pass the result to Quality Assurance Specialist for review.",
                "display_name": "Worker Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System prompt for the worker agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Worker node in LangGraph",
            "icon": "biceps-flexed",
            "base_classes": [
              "Object"
            ],
            "display_name": "(9/13)自訂Worker",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Object"
                ],
                "selected": "Object",
                "name": "worker",
                "display_name": "Worker",
                "method": "create_worker",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "tools",
              "llm",
              "worker_name",
              "worker_prompt",
              "prompt_values",
              "max_iterations"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "ToolCallingAgentComponent-47J8C"
        },
        "selected": false,
        "width": 384,
        "height": 652,
        "positionAbsolute": {
          "x": 796.6969900294669,
          "y": 902.9769863461436
        },
        "dragging": false
      },
      {
        "id": "ToolCallingAgentComponent-UEyAl",
        "type": "genericNode",
        "position": {
          "x": 817.5289641020306,
          "y": 2090.40829327474
        },
        "data": {
          "type": "ToolCallingAgentComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Tool Calling Chat Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool",
                  "BaseTool"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, List, Tuple, Callable\nimport functools\n\nfrom langchain.agents import create_tool_calling_agent, AgentExecutor\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import DataInput, DictInput, HandleInput, MultilineInput, NestedDictInput, IntInput\nfrom axiestudio.template import Output\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Object\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    description: str = \"Worker node in LangGraph\"\n    icon = \"biceps-flexed\"\n\n    _work_base_inputs = LCToolsAgentComponent._base_inputs[1:]\n    inputs = _work_base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"worker_name\",\n            display_name=\"Worker Name\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"worker_prompt\",\n            display_name=\"Worker Prompt\",\n            info=\"System prompt for the worker agent.\",\n            value=\"You are a helpful assistant\",\n            required=True,\n        ),\n        NestedDictInput(\n            name=\"prompt_values\",\n            display_name=\"Format Prompt Values\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            value=15,\n        ),\n    ]\n    \n    outputs = [\n        Output(display_name=\"Worker\", name=\"worker\", method=\"create_worker\"),\n    ]\n\n\n    '''Create Agent Worker'''\n    def create_agent(self, llm, tools, system_prompt) -> AgentExecutor:\n\n        max_iterations = self.max_iterations\n        if max_iterations < 1:\n            max_iterations = 15\n\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                MessagesPlaceholder(variable_name=\"agent_scratchpad\"),\n            ]\n        )\n        agent = create_openai_tools_agent(llm, tools, prompt)\n        executor = AgentExecutor(agent=agent, tools=tools, max_iterations=max_iterations)\n        \n        return executor\n\n\n    def agent_node(self, state, agent: AgentExecutor, name):\n        result = agent.invoke(state)\n        return {\"messages\": [AIMessage(content=result[\"output\"], name=name)]}\n\n\n    def create_worker(self) -> Object:\n\n        llm = self.llm\n        tools = self.tools\n        prompt = self.worker_prompt\n        prompt_values = self.prompt_values\n        name = self.worker_name\n\n        worker_prompt = prompt.format(**prompt_values)\n        worker_agent = self.create_agent(llm, tools, worker_prompt)\n        worker_node = functools.partial(self.agent_node, agent=worker_agent, name=name)\n\n        return (name, worker_node)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_iterations": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 0,
                "display_name": "Max Iterations",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "prompt_values": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "prompt_values",
                "value": {
                  "bank": "cathay",
                  "invest": "JPM"
                },
                "display_name": "Format Prompt Values",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput",
                "load_from_db": false
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "worker_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "worker_name",
                "value": "MS",
                "display_name": "Worker Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "worker_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "worker_prompt",
                "value": "作為 {bank} 的代表，您的職責是提供{invest}券商報告摘要，並以繁體中文回答。\n您的目標是提供最高品質的幫助，確保您的答案全面且基於事實，不帶任何假設。\\n\\n\nAlways use the tool provided - MS to look for answers. \nCheck if you need to pass the result to Quality Assurance Specialist for review.",
                "display_name": "Worker Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System prompt for the worker agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Worker node in LangGraph",
            "icon": "biceps-flexed",
            "base_classes": [
              "Object"
            ],
            "display_name": "(9/13)自訂Worker",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Object"
                ],
                "selected": "Object",
                "name": "worker",
                "display_name": "Worker",
                "method": "create_worker",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "tools",
              "llm",
              "worker_name",
              "worker_prompt",
              "prompt_values",
              "max_iterations"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "ToolCallingAgentComponent-UEyAl"
        },
        "selected": false,
        "width": 384,
        "height": 652,
        "positionAbsolute": {
          "x": 817.5289641020306,
          "y": 2090.40829327474
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-yr6HE",
        "type": "genericNode",
        "position": {
          "x": -1848.5936887886432,
          "y": 1053.8755256318168
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": {},
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "OpenAIModel-yr6HE"
        },
        "selected": false,
        "width": 384,
        "height": 601,
        "positionAbsolute": {
          "x": -1848.5936887886432,
          "y": 1053.8755256318168
        },
        "dragging": false
      },
      {
        "id": "RetrieverTool-QcU52",
        "type": "genericNode",
        "position": {
          "x": 121.74716799754992,
          "y": 909.4472438555266
        },
        "data": {
          "type": "RetrieverTool",
          "node": {
            "template": {
              "_type": "CustomComponent",
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "input_types": [
                  "Retriever"
                ],
                "dynamic": false,
                "info": "Retriever to interact with",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import create_retriever_tool\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n    name = \"RetrieverTool\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n                \"input_types\": [\"Retriever\"],\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "dynamic": false,
                "info": "Description of the tool",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "使用此功能回答用戶有關\"參考文檔\"摘要"
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "display_name": "Name",
                "advanced": false,
                "dynamic": false,
                "info": "Name of the tool",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "search"
              }
            },
            "description": "Tool for interacting with retriever",
            "base_classes": [
              "BaseTool",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "Tool"
            ],
            "display_name": "RetrieverTool",
            "documentation": "",
            "custom_fields": {
              "retriever": null,
              "name": null,
              "description": null
            },
            "output_types": [
              "Tool"
            ],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tool",
                "hidden": null,
                "display_name": "Tool",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "RetrieverTool-QcU52"
        },
        "selected": false,
        "width": 384,
        "height": 432,
        "positionAbsolute": {
          "x": 121.74716799754992,
          "y": 909.4472438555266
        },
        "dragging": false
      },
      {
        "id": "RetrieverTool-Sp5nR",
        "type": "genericNode",
        "position": {
          "x": 113.74238670076431,
          "y": 2100.445482618789
        },
        "data": {
          "type": "RetrieverTool",
          "node": {
            "template": {
              "_type": "CustomComponent",
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "input_types": [
                  "Retriever"
                ],
                "dynamic": false,
                "info": "Retriever to interact with",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import create_retriever_tool\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n    name = \"RetrieverTool\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n                \"input_types\": [\"Retriever\"],\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "dynamic": false,
                "info": "Description of the tool",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "使用此功能回答用戶有關\"參考文檔\"摘要"
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "display_name": "Name",
                "advanced": false,
                "dynamic": false,
                "info": "Name of the tool",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "search"
              }
            },
            "description": "Tool for interacting with retriever",
            "base_classes": [
              "BaseTool",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "Tool"
            ],
            "display_name": "RetrieverTool",
            "documentation": "",
            "custom_fields": {
              "retriever": null,
              "name": null,
              "description": null
            },
            "output_types": [
              "Tool"
            ],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tool",
                "hidden": null,
                "display_name": "Tool",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "RetrieverTool-Sp5nR"
        },
        "selected": false,
        "width": 384,
        "height": 432,
        "positionAbsolute": {
          "x": 113.74238670076431,
          "y": 2100.445482618789
        },
        "dragging": false
      },
      {
        "id": "Pinecone-IhuRU",
        "type": "genericNode",
        "position": {
          "x": -457.51503594750295,
          "y": 906.4999177580518
        },
        "data": {
          "type": "Pinecone",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "distance_strategy": {
                "trace_as_metadata": true,
                "options": [
                  "Cosine",
                  "Euclidean",
                  "Dot Product"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "distance_strategy",
                "value": "Cosine",
                "display_name": "Distance Strategy",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "index_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "index_name",
                "value": "test",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "namespace": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "namespace",
                "value": "test-chat",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "Namespace for the index.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 4,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pinecone_api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "pinecone_api_key",
                "value": "",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "text_key": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "text",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "Key in the record to use as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Pinecone Vector Store with search capabilities",
            "icon": "Pinecone",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Pinecone",
            "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "text_key",
              "search_query",
              "ingest_data",
              "embedding",
              "number_of_results"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "Pinecone-IhuRU"
        },
        "selected": false,
        "width": 384,
        "height": 828,
        "positionAbsolute": {
          "x": -457.51503594750295,
          "y": 906.4999177580518
        },
        "dragging": false
      },
      {
        "id": "Pinecone-ctRpM",
        "type": "genericNode",
        "position": {
          "x": -454.61054870541295,
          "y": 2095.7276798737203
        },
        "data": {
          "type": "Pinecone",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "distance_strategy": {
                "trace_as_metadata": true,
                "options": [
                  "Cosine",
                  "Euclidean",
                  "Dot Product"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "distance_strategy",
                "value": "Cosine",
                "display_name": "Distance Strategy",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "index_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "index_name",
                "value": "test",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "namespace": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "namespace",
                "value": "test-chat",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "Namespace for the index.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 4,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pinecone_api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "pinecone_api_key",
                "value": "",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "text_key": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "text",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "Key in the record to use as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Pinecone Vector Store with search capabilities",
            "icon": "Pinecone",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Pinecone",
            "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "text_key",
              "search_query",
              "ingest_data",
              "embedding",
              "number_of_results"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "Pinecone-ctRpM"
        },
        "selected": false,
        "width": 384,
        "height": 828,
        "positionAbsolute": {
          "x": -454.61054870541295,
          "y": 2095.7276798737203
        },
        "dragging": false
      },
      {
        "id": "OpenAIEmbeddings-WSoMR",
        "type": "genericNode",
        "position": {
          "x": -1215.661059475126,
          "y": 586.3624540524967
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "client": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "client",
                "value": "",
                "display_name": "Client",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "default_headers": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_headers",
                "value": {},
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "default_query": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_query",
                "value": {},
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "deployment": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "deployment",
                "value": "",
                "display_name": "Deployment",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "dimensions": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "dimensions",
                "value": "",
                "display_name": "Dimensions",
                "advanced": true,
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "embedding_ctx_length": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_ctx_length",
                "value": 1536,
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 3,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "text-embedding-3-small",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "openai_api_base": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_type": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_type",
                "value": "",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_version": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_version",
                "value": "",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_organization": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_organization",
                "value": "",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_proxy": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_proxy",
                "value": "",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "request_timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "request_timeout",
                "value": "",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "show_progress_bar": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "show_progress_bar",
                "value": false,
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "skip_empty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "skip_empty",
                "value": false,
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_enable": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_enable",
                "value": true,
                "display_name": "TikToken Enable",
                "advanced": true,
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_model_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_model_name",
                "value": "",
                "display_name": "TikToken Model Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Generate embeddings using OpenAI models.",
            "icon": "OpenAI",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "default_headers",
              "default_query",
              "chunk_size",
              "client",
              "deployment",
              "embedding_ctx_length",
              "max_retries",
              "model",
              "model_kwargs",
              "openai_api_base",
              "openai_api_key",
              "openai_api_type",
              "openai_api_version",
              "openai_organization",
              "openai_proxy",
              "request_timeout",
              "show_progress_bar",
              "skip_empty",
              "tiktoken_model_name",
              "tiktoken_enable",
              "dimensions"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "OpenAIEmbeddings-WSoMR"
        },
        "selected": false,
        "width": 384,
        "height": 384,
        "positionAbsolute": {
          "x": -1215.661059475126,
          "y": 586.3624540524967
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Pinecone-gvPGF",
        "sourceHandle": "{œdataTypeœ:œPineconeœ,œidœ:œPinecone-gvPGFœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}",
        "target": "RetrieverTool-9vvWp",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-9vvWpœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrieverTool-9vvWp",
            "inputTypes": [
              "Retriever"
            ],
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "dataType": "Pinecone",
            "id": "Pinecone-gvPGF",
            "name": "base_retriever",
            "output_types": [
              "Retriever"
            ]
          }
        },
        "id": "reactflow__edge-Pinecone-gvPGF{œdataTypeœ:œPineconeœ,œidœ:œPinecone-gvPGFœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}-RetrieverTool-9vvWp{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-9vvWpœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "File-9snIT",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-9snITœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "RecursiveCharacterTextSplitter-2Qcr4",
        "targetHandle": "{œfieldNameœ:œdata_inputœ,œidœ:œRecursiveCharacterTextSplitter-2Qcr4œ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data_input",
            "id": "RecursiveCharacterTextSplitter-2Qcr4",
            "inputTypes": [
              "Document",
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "File",
            "id": "File-9snIT",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-File-9snIT{œdataTypeœ:œFileœ,œidœ:œFile-9snITœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RecursiveCharacterTextSplitter-2Qcr4{œfieldNameœ:œdata_inputœ,œidœ:œRecursiveCharacterTextSplitter-2Qcr4œ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ChatInput-P3Btc",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P3Btcœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-2Hfj8",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CustomComponent-2Hfj8",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-P3Btc",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-P3Btc{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P3Btcœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-2Hfj8{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "CustomComponent-2Hfj8",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-2Hfj8œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-aKFcK",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-aKFcKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-aKFcK",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-2Hfj8",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-2Hfj8{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-2Hfj8œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-aKFcK{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-aKFcKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "RetrieverTool-9vvWp",
        "sourceHandle": "{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-9vvWpœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}",
        "target": "CustomComponent-tCZXU",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "CustomComponent-tCZXU",
            "inputTypes": [
              "Tool",
              "BaseTool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "RetrieverTool",
            "id": "RetrieverTool-9vvWp",
            "name": "tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-RetrieverTool-9vvWp{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-9vvWpœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}-CustomComponent-tCZXU{œfieldNameœ:œtoolsœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "CustomComponent-tCZXU",
        "sourceHandle": "{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œCustomComponent-tCZXUœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}",
        "target": "CustomComponent-2Hfj8",
        "targetHandle": "{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "workers",
            "id": "CustomComponent-2Hfj8",
            "inputTypes": [
              "Object"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ToolCallingAgentComponent",
            "id": "CustomComponent-tCZXU",
            "name": "worker",
            "output_types": [
              "Object"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-tCZXU{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œCustomComponent-tCZXUœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}-CustomComponent-2Hfj8{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ToolCallingAgentComponent-47J8C",
        "sourceHandle": "{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}",
        "target": "CustomComponent-2Hfj8",
        "targetHandle": "{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "workers",
            "id": "CustomComponent-2Hfj8",
            "inputTypes": [
              "Object"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ToolCallingAgentComponent",
            "id": "ToolCallingAgentComponent-47J8C",
            "name": "worker",
            "output_types": [
              "Object"
            ]
          }
        },
        "id": "reactflow__edge-ToolCallingAgentComponent-47J8C{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}-CustomComponent-2Hfj8{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ToolCallingAgentComponent-UEyAl",
        "sourceHandle": "{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}",
        "target": "CustomComponent-2Hfj8",
        "targetHandle": "{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "workers",
            "id": "CustomComponent-2Hfj8",
            "inputTypes": [
              "Object"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ToolCallingAgentComponent",
            "id": "ToolCallingAgentComponent-UEyAl",
            "name": "worker",
            "output_types": [
              "Object"
            ]
          }
        },
        "id": "reactflow__edge-ToolCallingAgentComponent-UEyAl{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}-CustomComponent-2Hfj8{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-yr6HE",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "ToolCallingAgentComponent-47J8C",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ToolCallingAgentComponent-47J8C",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-yr6HE",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgentComponent-47J8C{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "RetrieverTool-Sp5nR",
        "sourceHandle": "{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-Sp5nRœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}",
        "target": "ToolCallingAgentComponent-UEyAl",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "ToolCallingAgentComponent-UEyAl",
            "inputTypes": [
              "Tool",
              "BaseTool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "RetrieverTool",
            "id": "RetrieverTool-Sp5nR",
            "name": "tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-RetrieverTool-Sp5nR{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-Sp5nRœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgentComponent-UEyAl{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "RetrieverTool-QcU52",
        "sourceHandle": "{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-QcU52œ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}",
        "target": "ToolCallingAgentComponent-47J8C",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "ToolCallingAgentComponent-47J8C",
            "inputTypes": [
              "Tool",
              "BaseTool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "RetrieverTool",
            "id": "RetrieverTool-QcU52",
            "name": "tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-RetrieverTool-QcU52{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-QcU52œ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgentComponent-47J8C{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "Pinecone-IhuRU",
        "sourceHandle": "{œdataTypeœ:œPineconeœ,œidœ:œPinecone-IhuRUœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}",
        "target": "RetrieverTool-QcU52",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-QcU52œ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrieverTool-QcU52",
            "inputTypes": [
              "Retriever"
            ],
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "dataType": "Pinecone",
            "id": "Pinecone-IhuRU",
            "name": "base_retriever",
            "output_types": [
              "Retriever"
            ]
          }
        },
        "id": "reactflow__edge-Pinecone-IhuRU{œdataTypeœ:œPineconeœ,œidœ:œPinecone-IhuRUœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}-RetrieverTool-QcU52{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-QcU52œ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
        "className": ""
      },
      {
        "source": "Pinecone-ctRpM",
        "sourceHandle": "{œdataTypeœ:œPineconeœ,œidœ:œPinecone-ctRpMœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}",
        "target": "RetrieverTool-Sp5nR",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-Sp5nRœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrieverTool-Sp5nR",
            "inputTypes": [
              "Retriever"
            ],
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "dataType": "Pinecone",
            "id": "Pinecone-ctRpM",
            "name": "base_retriever",
            "output_types": [
              "Retriever"
            ]
          }
        },
        "id": "reactflow__edge-Pinecone-ctRpM{œdataTypeœ:œPineconeœ,œidœ:œPinecone-ctRpMœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}-RetrieverTool-Sp5nR{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-Sp5nRœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-WSoMR",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Pinecone-IhuRU",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-IhuRUœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Pinecone-IhuRU",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-WSoMR",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-WSoMR{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-IhuRU{œfieldNameœ:œembeddingœ,œidœ:œPinecone-IhuRUœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-yr6HE",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "ToolCallingAgentComponent-UEyAl",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ToolCallingAgentComponent-UEyAl",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-yr6HE",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgentComponent-UEyAl{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-yr6HE",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "CustomComponent-tCZXU",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CustomComponent-tCZXU",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-yr6HE",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CustomComponent-tCZXU{œfieldNameœ:œllmœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-yr6HE",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "CustomComponent-2Hfj8",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CustomComponent-2Hfj8",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-yr6HE",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CustomComponent-2Hfj8{œfieldNameœ:œllmœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-WSoMR",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Pinecone-ctRpM",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-ctRpMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Pinecone-ctRpM",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-WSoMR",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-WSoMR{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-ctRpM{œfieldNameœ:œembeddingœ,œidœ:œPinecone-ctRpMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-WSoMR",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Pinecone-gvPGF",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-gvPGFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Pinecone-gvPGF",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-WSoMR",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-WSoMR{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-gvPGF{œfieldNameœ:œembeddingœ,œidœ:œPinecone-gvPGFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 440.43899886531767,
      "y": 22.28713371097308,
      "zoom": 0.32987697769322444
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 2
    },
    "ChatInput": {
      "count": 1
    },
    "RetrieverTool": {
      "count": 3
    },
    "Pinecone": {
      "count": 3
    },
    "ChatOutput": {
      "count": 1
    },
    "RecursiveCharacterTextSplitter": {
      "count": 1
    },
    "File": {
      "count": 1
    },
    "ToolCallingAgentComponent": {
      "count": 2
    },
    "OpenAIModel": {
      "count": 1
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "total": 16
  },
  "original": {
    "id": "ab87cf27-c22b-4e71-a498-6ee3ed1d42c9",
    "name": "自訂Multi Agents RAG (2024/09/13)",
    "description": "模仿 Flowise 的 Multi Agent，包含自訂Worker、自訂Supervisor",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "CustomComponent": {
        "count": 2
      },
      "ChatInput": {
        "count": 1
      },
      "RetrieverTool": {
        "count": 3
      },
      "Pinecone": {
        "count": 3
      },
      "ChatOutput": {
        "count": 1
      },
      "RecursiveCharacterTextSplitter": {
        "count": 1
      },
      "File": {
        "count": 1
      },
      "ToolCallingAgentComponent": {
        "count": 2
      },
      "OpenAIModel": {
        "count": 1
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "total": 16
    },
    "last_tested_version": "1.0.17",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "CustomComponent-tCZXU",
          "type": "genericNode",
          "position": {
            "x": 765.4150349640538,
            "y": -349.52627128033896
          },
          "data": {
            "type": "ToolCallingAgentComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Tool Calling Chat Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tools",
                  "value": "",
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool",
                    "BaseTool"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput",
                  "load_from_db": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, List, Tuple, Callable\nimport functools\n\nfrom langchain.agents import create_tool_calling_agent, AgentExecutor\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import DataInput, DictInput, HandleInput, MultilineInput, NestedDictInput, IntInput\nfrom axiestudio.template import Output\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Object\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    description: str = \"Worker node in LangGraph\"\n    icon = \"biceps-flexed\"\n\n    _work_base_inputs = LCToolsAgentComponent._base_inputs[1:]\n    inputs = _work_base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"worker_name\",\n            display_name=\"Worker Name\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"worker_prompt\",\n            display_name=\"Worker Prompt\",\n            info=\"System prompt for the worker agent.\",\n            value=\"You are a helpful assistant\",\n            required=True,\n        ),\n        NestedDictInput(\n            name=\"prompt_values\",\n            display_name=\"Format Prompt Values\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            value=15,\n        ),\n    ]\n    \n    outputs = [\n        Output(display_name=\"Worker\", name=\"worker\", method=\"create_worker\"),\n    ]\n\n\n    '''Create Agent Worker'''\n    def create_agent(self, llm, tools, system_prompt) -> AgentExecutor:\n\n        max_iterations = self.max_iterations\n        if max_iterations < 1:\n            max_iterations = 15\n\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                MessagesPlaceholder(variable_name=\"agent_scratchpad\"),\n            ]\n        )\n        agent = create_openai_tools_agent(llm, tools, prompt)\n        executor = AgentExecutor(agent=agent, tools=tools, max_iterations=max_iterations)\n        \n        return executor\n\n\n    def agent_node(self, state, agent: AgentExecutor, name):\n        result = agent.invoke(state)\n        return {\"messages\": [AIMessage(content=result[\"output\"], name=name)]}\n\n\n    def create_worker(self) -> Object:\n\n        llm = self.llm\n        tools = self.tools\n        prompt = self.worker_prompt\n        prompt_values = self.prompt_values\n        name = self.worker_name\n\n        worker_prompt = prompt.format(**prompt_values)\n        worker_agent = self.create_agent(llm, tools, worker_prompt)\n        worker_node = functools.partial(self.agent_node, agent=worker_agent, name=name)\n\n        return (name, worker_node)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "handle_parsing_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "handle_parsing_errors",
                  "value": true,
                  "display_name": "Handle Parse Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_iterations": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_iterations",
                  "value": 0,
                  "display_name": "Max Iterations",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "load_from_db": false
                },
                "prompt_values": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "prompt_values",
                  "value": {
                    "bank": "cathay",
                    "invest": "JPM"
                  },
                  "display_name": "Format Prompt Values",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput",
                  "load_from_db": false
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "verbose",
                  "value": true,
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "worker_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "worker_name",
                  "value": "JPM",
                  "display_name": "Worker Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "worker_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "worker_prompt",
                  "value": "作為 {bank} 的代表，您的職責是提供{invest}券商報告摘要，並以繁體中文回答。\n您的目標是提供最高品質的幫助，確保您的答案全面且基於事實，不帶任何假設。\\n\\n\nAlways use the tool provided - JPM to look for answers. \nCheck if you need to pass the result to Quality Assurance Specialist for review.",
                  "display_name": "Worker Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System prompt for the worker agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Worker node in LangGraph",
              "icon": "biceps-flexed",
              "base_classes": [
                "Object"
              ],
              "display_name": "(9/13)自訂Worker",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Object"
                  ],
                  "selected": "Object",
                  "name": "worker",
                  "display_name": "Worker",
                  "method": "create_worker",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "handle_parsing_errors",
                "verbose",
                "max_iterations",
                "tools",
                "llm",
                "worker_name",
                "worker_prompt",
                "prompt_values",
                "max_iterations"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "CustomComponent-tCZXU"
          },
          "selected": false,
          "width": 384,
          "height": 652,
          "dragging": false,
          "positionAbsolute": {
            "x": 765.4150349640538,
            "y": -349.52627128033896
          }
        },
        {
          "id": "ChatInput-P3Btc",
          "type": "genericNode",
          "position": {
            "x": 1446.8672346123706,
            "y": 686.5117643634737
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "files",
                  "value": "",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "請告訴我GS的最新報告",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "User",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "User",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "ChatInput-P3Btc"
          },
          "selected": false,
          "width": 384,
          "height": 298,
          "positionAbsolute": {
            "x": 1446.8672346123706,
            "y": 686.5117643634737
          },
          "dragging": false
        },
        {
          "id": "RetrieverTool-9vvWp",
          "type": "genericNode",
          "position": {
            "x": 105.78075444592173,
            "y": -348.85064310767405
          },
          "data": {
            "type": "RetrieverTool",
            "node": {
              "template": {
                "_type": "CustomComponent",
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "Retriever",
                  "advanced": false,
                  "input_types": [
                    "Retriever"
                  ],
                  "dynamic": false,
                  "info": "Retriever to interact with",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.tools import create_retriever_tool\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n    name = \"RetrieverTool\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n                \"input_types\": [\"Retriever\"],\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "display_name": "Description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Description of the tool",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "使用此功能回答用戶有關\"參考文檔\"摘要"
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "display_name": "Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Name of the tool",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "search"
                }
              },
              "description": "Tool for interacting with retriever",
              "base_classes": [
                "BaseTool",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "Tool"
              ],
              "display_name": "RetrieverTool",
              "documentation": "",
              "custom_fields": {
                "retriever": null,
                "name": null,
                "description": null
              },
              "output_types": [
                "Tool"
              ],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "tool",
                  "hidden": null,
                  "display_name": "Tool",
                  "method": null,
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "RetrieverTool-9vvWp"
          },
          "selected": false,
          "width": 384,
          "height": 432,
          "positionAbsolute": {
            "x": 105.78075444592173,
            "y": -348.85064310767405
          },
          "dragging": false
        },
        {
          "id": "Pinecone-gvPGF",
          "type": "genericNode",
          "position": {
            "x": -460.9955458743692,
            "y": -345.9337433605011
          },
          "data": {
            "type": "Pinecone",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding",
                  "value": "",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "ingest_data": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "distance_strategy": {
                  "trace_as_metadata": true,
                  "options": [
                    "Cosine",
                    "Euclidean",
                    "Dot Product"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "distance_strategy",
                  "value": "Cosine",
                  "display_name": "Distance Strategy",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "index_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "index_name",
                  "value": "test",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "namespace": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "namespace",
                  "value": "test-chat",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Namespace for the index.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 4,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "pinecone_api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "pinecone_api_key",
                  "value": "",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "text_key": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "text",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Key in the record to use as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Pinecone Vector Store with search capabilities",
              "icon": "Pinecone",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Pinecone",
              "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "text_key",
                "search_query",
                "ingest_data",
                "embedding",
                "number_of_results"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "Pinecone-gvPGF"
          },
          "selected": false,
          "width": 384,
          "height": 828,
          "positionAbsolute": {
            "x": -460.9955458743692,
            "y": -345.9337433605011
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-aKFcK",
          "type": "genericNode",
          "position": {
            "x": 2479.6591091442833,
            "y": 693.0564852785975
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_template",
                  "value": "{text}",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "AI",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "ChatOutput-aKFcK"
          },
          "selected": false,
          "width": 384,
          "height": 298,
          "positionAbsolute": {
            "x": 2479.6591091442833,
            "y": 693.0564852785975
          },
          "dragging": false
        },
        {
          "id": "RecursiveCharacterTextSplitter-2Qcr4",
          "type": "genericNode",
          "position": {
            "x": -1353.0016478265427,
            "y": -517.3177481191658
          },
          "data": {
            "type": "RecursiveCharacterTextSplitter",
            "node": {
              "template": {
                "_type": "Component",
                "data_input": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_input",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The texts to split.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "chunk_overlap": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_overlap",
                  "value": 200,
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The amount of overlap between chunks.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "chunk_size": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 1000,
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum length of each chunk.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter, TextSplitter\nfrom axiestudio.base.textsplitters.model import LCTextSplitterComponent\nfrom axiestudio.inputs.inputs import DataInput, IntInput, MessageTextInput\nfrom axiestudio.utils.util import unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(LCTextSplitterComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text trying to keep all related text together.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n    name = \"RecursiveCharacterTextSplitter\"\n\n    inputs = [\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum length of each chunk.\",\n            value=1000,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"The amount of overlap between chunks.\",\n            value=200,\n        ),\n        DataInput(\n            name=\"data_input\",\n            display_name=\"Input\",\n            info=\"The texts to split.\",\n            input_types=[\"Document\", \"Data\"],\n        ),\n        MessageTextInput(\n            name=\"separators\",\n            display_name=\"Separators\",\n            info='The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n            is_list=True,\n        ),\n    ]\n\n    def get_data_input(self) -> Any:\n        return self.data_input\n\n    def build_text_splitter(self) -> TextSplitter:\n        if not self.separators:\n            separators: list[str] | None = None\n        else:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in self.separators]\n\n        return RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=self.chunk_size,\n            chunk_overlap=self.chunk_overlap,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "separators": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "separators",
                  "value": "",
                  "display_name": "Separators",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Split text trying to keep all related text together.",
              "base_classes": [
                "Data"
              ],
              "display_name": "Recursive Character Text Splitter",
              "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "split_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "chunk_size",
                "chunk_overlap",
                "data_input",
                "separators"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "RecursiveCharacterTextSplitter-2Qcr4"
          },
          "selected": false,
          "width": 384,
          "height": 518,
          "positionAbsolute": {
            "x": -1353.0016478265427,
            "y": -517.3177481191658
          },
          "dragging": false
        },
        {
          "id": "File-9snIT",
          "type": "genericNode",
          "position": {
            "x": -1770.2114968742176,
            "y": -419.41675429609705
          },
          "data": {
            "type": "File",
            "node": {
              "template": {
                "_type": "Component",
                "path": {
                  "trace_as_metadata": true,
                  "file_path": "79349a61-f034-4444-b82c-307ac655a544\\2024-09-11_17-02-00_國泰CUBE申請書.pdf",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "path",
                  "value": "",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "silent_errors",
                  "value": false,
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "A generic file loader.",
              "icon": "file-text",
              "base_classes": [
                "Data"
              ],
              "display_name": "File",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "load_file",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "path",
                "silent_errors"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "File-9snIT"
          },
          "selected": false,
          "width": 384,
          "height": 298,
          "positionAbsolute": {
            "x": -1770.2114968742176,
            "y": -419.41675429609705
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-2Hfj8",
          "type": "genericNode",
          "position": {
            "x": 1924.1009963966949,
            "y": 1276.8123085961918
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Tool Calling Chat Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "workers": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "workers",
                  "value": "",
                  "display_name": "Workers",
                  "advanced": false,
                  "input_types": [
                    "Object"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.field_typing import Object\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nfrom typing import Any, Dict, List, Union, Annotated, Sequence, TypedDict\nimport types\nimport functools\nimport operator\n\nfrom langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\nfrom langchain_core.messages import BaseMessage, HumanMessage, AIMessage\nfrom langchain_core.output_parsers.openai_functions import JsonOutputFunctionsParser\nfrom langgraph.graph import END, StateGraph, START\n\n\n\nclass CustomComponent(Component):\n    description = \"Supervisor node in LangGraph\"\n    icon = \"users-round\"\n\n    inputs = [\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        HandleInput(\n            name=\"workers\",\n            display_name=\"Workers\",\n            input_types=[\"Object\"],\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"supervisor_prompt\",\n            display_name=\"Supervisor Prompt\",\n            info=\"Prompt must contain {team_members}\",\n            value='''您是supervisor，負責管理以下工作人員之間的對話：{team_members}。\\n\n            鑑於以下使用者請求，請與工作人員一起回應以進行下一步操作。\\n\n            每個工作人員將執行一項任務並回應其結果和狀態。\\n\n            您負責總結 {team_members} 的答案，以繁體中文回答，並確保您每次都會這樣做。\\n\n            完成後，響應“FINISH”。\\n有策略地選擇以盡量減少所採取的步驟數。''',\n            advanced=True,\n            required=True,\n        ),\n        IntInput(\n            name=\"recursion_limit\",\n            display_name=\"Recursion Limit\",\n            value=100,\n            advanced=True,\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_message_response\"),\n    ]\n\n    '''Create Agent Supervisor'''\n    def create_supervisor(self, llm, team_members: List[str], system_prompt: str):\n        options = [\"FINISH\"] + team_members\n        function_def = {\n            \"name\": \"route\",\n            \"description\": \"Select the next role.\",\n            \"parameters\": {\n                \"title\": \"routeSchema\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"next\": {\n                        \"title\": \"Next\",\n                        \"anyOf\": [\n                            {\"enum\": options},\n                        ],\n                    }\n                },\n                \"required\": [\"next\"],\n            },\n        }\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                (\n                    \"human\",\n                    \"Given the conversation above, who should act next?\"\n                    \" Or should we FINISH? Select one of: {options}\",\n                ),\n            ]\n        ).partial(options=str(options), team_members=\", \".join(team_members))\n    \n        supervisor_chain = (\n            prompt\n            | llm.bind_functions(functions=[function_def], function_call=\"route\")\n            | JsonOutputFunctionsParser()\n        )\n    \n        # TODO: Summarization\n        return supervisor_chain\n\n\n    '''Construct Graph'''\n    def construct_graph(self, team_members: List[tuple[str, Any]], supervisor: tuple[str, Any]):\n        class AgentState(TypedDict):\n            messages: Annotated[Sequence[BaseMessage], operator.add]\n            next: str   # indicates where to route to next\n    \n        workflow = StateGraph(AgentState)\n        for member in team_members:\n            workflow.add_node(member[0], member[1])\n        workflow.add_node(supervisor[0], supervisor[1])\n    \n        # Workers always report back to the supervisor\n        for member in team_members:\n            workflow.add_edge(member[0], supervisor[0])\n    \n        conditional_map = {member[0]: member[0] for member in team_members}\n        conditional_map[\"FINISH\"] = END\n        workflow.add_conditional_edges(\"supervisor\", lambda x: x[\"next\"], conditional_map)\n        workflow.add_edge(START, supervisor[0])\n    \n        graph = workflow.compile()\n    \n        return graph\n    \n\n    def main(self):\n\n        team_members = self.workers\n        names = [member[0] for member in team_members]\n    \n        '''Create Agent Supervisor'''\n        supervisor_0 = self.create_supervisor(\n            llm=self.llm,\n            team_members=names,\n            system_prompt=self.supervisor_prompt,\n        )\n        supervisor = ('supervisor', supervisor_0)\n    \n        '''Construct Graph'''\n        graph = self.construct_graph(team_members=team_members, supervisor=supervisor)\n    \n        return graph\n\n\n    def get_response(self) -> str:\n\n        graph = self.main()\n        \n        input_dict = {\"messages\": [HumanMessage(content=self.input_value)]}\n        config_dict = {\"recursion_limit\": self.recursion_limit}\n        \n        result_str = \"\"\n        \n        for s in graph.stream(\n            input=input_dict,\n            config=config_dict,\n        ):\n            # if \"__end__\" not in s:\n            #     print(s)\n            #     print(\"----\")\n            if 'supervisor' in s:\n                result_str += f\"**(Supervisor select {s['supervisor']['next']})**\\n\"\n            else:\n                messages = list(s.values())[0]['messages']\n                for message in messages:\n                    if isinstance(message, AIMessage):\n                        result_str += f\"**{message.name}**: {message.content}\\n\\n\"\n                \n        return result_str\n\n\n    def build_message_response(self) -> Message:\n        \n        response = self.get_response()\n        message = Message(\n            text=response,\n            sender=\"AI\",\n            sender_name=\"AI\",\n        )\n    \n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input Value",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "recursion_limit": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "recursion_limit",
                  "value": 100,
                  "display_name": "Recursion Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "supervisor_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "supervisor_prompt",
                  "value": "您是supervisor，負責管理以下工作人員之間的對話：{team_members}。\\n\n鑑於以下使用者請求，請與工作人員一起回應以進行下一步操作。\\n\n每個工作人員將執行一項任務並回應其結果和狀態。\\n\n您負責總結 {team_members} 的答案，以繁體中文回答，並確保您每次都會這樣做。\\n\n完成後，響應“FINISH”。\\n有策略地選擇以盡量減少所採取的步驟數。",
                  "display_name": "Supervisor Prompt",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Prompt must contain {team_members}",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Supervisor node in LangGraph",
              "icon": "users-round",
              "base_classes": [
                "Message"
              ],
              "display_name": "(9/13)自訂Supervisor",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "response",
                  "display_name": "Response",
                  "method": "build_message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "llm",
                "workers",
                "supervisor_prompt",
                "recursion_limit"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-2Hfj8"
          },
          "selected": false,
          "width": 384,
          "height": 394,
          "dragging": false,
          "positionAbsolute": {
            "x": 1924.1009963966949,
            "y": 1276.8123085961918
          }
        },
        {
          "id": "ToolCallingAgentComponent-47J8C",
          "type": "genericNode",
          "position": {
            "x": 796.6969900294669,
            "y": 902.9769863461436
          },
          "data": {
            "type": "ToolCallingAgentComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Tool Calling Chat Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tools",
                  "value": "",
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool",
                    "BaseTool"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput",
                  "load_from_db": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, List, Tuple, Callable\nimport functools\n\nfrom langchain.agents import create_tool_calling_agent, AgentExecutor\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import DataInput, DictInput, HandleInput, MultilineInput, NestedDictInput, IntInput\nfrom axiestudio.template import Output\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Object\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    description: str = \"Worker node in LangGraph\"\n    icon = \"biceps-flexed\"\n\n    _work_base_inputs = LCToolsAgentComponent._base_inputs[1:]\n    inputs = _work_base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"worker_name\",\n            display_name=\"Worker Name\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"worker_prompt\",\n            display_name=\"Worker Prompt\",\n            info=\"System prompt for the worker agent.\",\n            value=\"You are a helpful assistant\",\n            required=True,\n        ),\n        NestedDictInput(\n            name=\"prompt_values\",\n            display_name=\"Format Prompt Values\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            value=15,\n        ),\n    ]\n    \n    outputs = [\n        Output(display_name=\"Worker\", name=\"worker\", method=\"create_worker\"),\n    ]\n\n\n    '''Create Agent Worker'''\n    def create_agent(self, llm, tools, system_prompt) -> AgentExecutor:\n\n        max_iterations = self.max_iterations\n        if max_iterations < 1:\n            max_iterations = 15\n\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                MessagesPlaceholder(variable_name=\"agent_scratchpad\"),\n            ]\n        )\n        agent = create_openai_tools_agent(llm, tools, prompt)\n        executor = AgentExecutor(agent=agent, tools=tools, max_iterations=max_iterations)\n        \n        return executor\n\n\n    def agent_node(self, state, agent: AgentExecutor, name):\n        result = agent.invoke(state)\n        return {\"messages\": [AIMessage(content=result[\"output\"], name=name)]}\n\n\n    def create_worker(self) -> Object:\n\n        llm = self.llm\n        tools = self.tools\n        prompt = self.worker_prompt\n        prompt_values = self.prompt_values\n        name = self.worker_name\n\n        worker_prompt = prompt.format(**prompt_values)\n        worker_agent = self.create_agent(llm, tools, worker_prompt)\n        worker_node = functools.partial(self.agent_node, agent=worker_agent, name=name)\n\n        return (name, worker_node)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "handle_parsing_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "handle_parsing_errors",
                  "value": true,
                  "display_name": "Handle Parse Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_iterations": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_iterations",
                  "value": 0,
                  "display_name": "Max Iterations",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "load_from_db": false
                },
                "prompt_values": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "prompt_values",
                  "value": {
                    "bank": "cathay",
                    "invest": "GS"
                  },
                  "display_name": "Format Prompt Values",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput",
                  "load_from_db": false
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "verbose",
                  "value": true,
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "worker_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "worker_name",
                  "value": "GS",
                  "display_name": "Worker Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "worker_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "worker_prompt",
                  "value": "作為 {bank} 的代表，您的職責是提供{invest}券商報告摘要，並以繁體中文回答。\n您的目標是提供最高品質的幫助，確保您的答案全面且基於事實，不帶任何假設。\\n\\n\nAlways use the tool provided - GS to look for answers. \nCheck if you need to pass the result to Quality Assurance Specialist for review.",
                  "display_name": "Worker Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System prompt for the worker agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Worker node in LangGraph",
              "icon": "biceps-flexed",
              "base_classes": [
                "Object"
              ],
              "display_name": "(9/13)自訂Worker",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Object"
                  ],
                  "selected": "Object",
                  "name": "worker",
                  "display_name": "Worker",
                  "method": "create_worker",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "handle_parsing_errors",
                "verbose",
                "max_iterations",
                "tools",
                "llm",
                "worker_name",
                "worker_prompt",
                "prompt_values",
                "max_iterations"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "ToolCallingAgentComponent-47J8C"
          },
          "selected": false,
          "width": 384,
          "height": 652,
          "positionAbsolute": {
            "x": 796.6969900294669,
            "y": 902.9769863461436
          },
          "dragging": false
        },
        {
          "id": "ToolCallingAgentComponent-UEyAl",
          "type": "genericNode",
          "position": {
            "x": 817.5289641020306,
            "y": 2090.40829327474
          },
          "data": {
            "type": "ToolCallingAgentComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Tool Calling Chat Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tools",
                  "value": "",
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool",
                    "BaseTool"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput",
                  "load_from_db": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, List, Tuple, Callable\nimport functools\n\nfrom langchain.agents import create_tool_calling_agent, AgentExecutor\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import DataInput, DictInput, HandleInput, MultilineInput, NestedDictInput, IntInput\nfrom axiestudio.template import Output\nfrom axiestudio.schema import Data\nfrom axiestudio.field_typing import Object\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    description: str = \"Worker node in LangGraph\"\n    icon = \"biceps-flexed\"\n\n    _work_base_inputs = LCToolsAgentComponent._base_inputs[1:]\n    inputs = _work_base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Tool Calling Chat Model\",\n            input_types=[\"LanguageModel\"],\n            info=\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"worker_name\",\n            display_name=\"Worker Name\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"worker_prompt\",\n            display_name=\"Worker Prompt\",\n            info=\"System prompt for the worker agent.\",\n            value=\"You are a helpful assistant\",\n            required=True,\n        ),\n        NestedDictInput(\n            name=\"prompt_values\",\n            display_name=\"Format Prompt Values\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            value=15,\n        ),\n    ]\n    \n    outputs = [\n        Output(display_name=\"Worker\", name=\"worker\", method=\"create_worker\"),\n    ]\n\n\n    '''Create Agent Worker'''\n    def create_agent(self, llm, tools, system_prompt) -> AgentExecutor:\n\n        max_iterations = self.max_iterations\n        if max_iterations < 1:\n            max_iterations = 15\n\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                MessagesPlaceholder(variable_name=\"messages\"),\n                MessagesPlaceholder(variable_name=\"agent_scratchpad\"),\n            ]\n        )\n        agent = create_openai_tools_agent(llm, tools, prompt)\n        executor = AgentExecutor(agent=agent, tools=tools, max_iterations=max_iterations)\n        \n        return executor\n\n\n    def agent_node(self, state, agent: AgentExecutor, name):\n        result = agent.invoke(state)\n        return {\"messages\": [AIMessage(content=result[\"output\"], name=name)]}\n\n\n    def create_worker(self) -> Object:\n\n        llm = self.llm\n        tools = self.tools\n        prompt = self.worker_prompt\n        prompt_values = self.prompt_values\n        name = self.worker_name\n\n        worker_prompt = prompt.format(**prompt_values)\n        worker_agent = self.create_agent(llm, tools, worker_prompt)\n        worker_node = functools.partial(self.agent_node, agent=worker_agent, name=name)\n\n        return (name, worker_node)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "handle_parsing_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "handle_parsing_errors",
                  "value": true,
                  "display_name": "Handle Parse Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_iterations": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_iterations",
                  "value": 0,
                  "display_name": "Max Iterations",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "load_from_db": false
                },
                "prompt_values": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "prompt_values",
                  "value": {
                    "bank": "cathay",
                    "invest": "JPM"
                  },
                  "display_name": "Format Prompt Values",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput",
                  "load_from_db": false
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "verbose",
                  "value": true,
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "worker_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "worker_name",
                  "value": "MS",
                  "display_name": "Worker Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "worker_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "worker_prompt",
                  "value": "作為 {bank} 的代表，您的職責是提供{invest}券商報告摘要，並以繁體中文回答。\n您的目標是提供最高品質的幫助，確保您的答案全面且基於事實，不帶任何假設。\\n\\n\nAlways use the tool provided - MS to look for answers. \nCheck if you need to pass the result to Quality Assurance Specialist for review.",
                  "display_name": "Worker Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System prompt for the worker agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Worker node in LangGraph",
              "icon": "biceps-flexed",
              "base_classes": [
                "Object"
              ],
              "display_name": "(9/13)自訂Worker",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Object"
                  ],
                  "selected": "Object",
                  "name": "worker",
                  "display_name": "Worker",
                  "method": "create_worker",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "handle_parsing_errors",
                "verbose",
                "max_iterations",
                "tools",
                "llm",
                "worker_name",
                "worker_prompt",
                "prompt_values",
                "max_iterations"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "ToolCallingAgentComponent-UEyAl"
          },
          "selected": false,
          "width": 384,
          "height": 652,
          "positionAbsolute": {
            "x": 817.5289641020306,
            "y": 2090.40829327474
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-yr6HE",
          "type": "genericNode",
          "position": {
            "x": -1848.5936887886432,
            "y": 1053.8755256318168
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "json_mode",
                  "value": false,
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o-mini",
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-4",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gpt-4o-mini",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "output_schema",
                  "value": {},
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "seed",
                  "value": 1,
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "openai_api_base",
                "api_key",
                "temperature",
                "seed"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "OpenAIModel-yr6HE"
          },
          "selected": false,
          "width": 384,
          "height": 601,
          "positionAbsolute": {
            "x": -1848.5936887886432,
            "y": 1053.8755256318168
          },
          "dragging": false
        },
        {
          "id": "RetrieverTool-QcU52",
          "type": "genericNode",
          "position": {
            "x": 121.74716799754992,
            "y": 909.4472438555266
          },
          "data": {
            "type": "RetrieverTool",
            "node": {
              "template": {
                "_type": "CustomComponent",
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "Retriever",
                  "advanced": false,
                  "input_types": [
                    "Retriever"
                  ],
                  "dynamic": false,
                  "info": "Retriever to interact with",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.tools import create_retriever_tool\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n    name = \"RetrieverTool\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n                \"input_types\": [\"Retriever\"],\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "display_name": "Description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Description of the tool",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "使用此功能回答用戶有關\"參考文檔\"摘要"
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "display_name": "Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Name of the tool",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "search"
                }
              },
              "description": "Tool for interacting with retriever",
              "base_classes": [
                "BaseTool",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "Tool"
              ],
              "display_name": "RetrieverTool",
              "documentation": "",
              "custom_fields": {
                "retriever": null,
                "name": null,
                "description": null
              },
              "output_types": [
                "Tool"
              ],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "tool",
                  "hidden": null,
                  "display_name": "Tool",
                  "method": null,
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "RetrieverTool-QcU52"
          },
          "selected": false,
          "width": 384,
          "height": 432,
          "positionAbsolute": {
            "x": 121.74716799754992,
            "y": 909.4472438555266
          },
          "dragging": false
        },
        {
          "id": "RetrieverTool-Sp5nR",
          "type": "genericNode",
          "position": {
            "x": 113.74238670076431,
            "y": 2100.445482618789
          },
          "data": {
            "type": "RetrieverTool",
            "node": {
              "template": {
                "_type": "CustomComponent",
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "Retriever",
                  "advanced": false,
                  "input_types": [
                    "Retriever"
                  ],
                  "dynamic": false,
                  "info": "Retriever to interact with",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.tools import create_retriever_tool\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n    name = \"RetrieverTool\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n                \"input_types\": [\"Retriever\"],\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "display_name": "Description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Description of the tool",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "使用此功能回答用戶有關\"參考文檔\"摘要"
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "display_name": "Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Name of the tool",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "search"
                }
              },
              "description": "Tool for interacting with retriever",
              "base_classes": [
                "BaseTool",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "Tool"
              ],
              "display_name": "RetrieverTool",
              "documentation": "",
              "custom_fields": {
                "retriever": null,
                "name": null,
                "description": null
              },
              "output_types": [
                "Tool"
              ],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "tool",
                  "hidden": null,
                  "display_name": "Tool",
                  "method": null,
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "RetrieverTool-Sp5nR"
          },
          "selected": false,
          "width": 384,
          "height": 432,
          "positionAbsolute": {
            "x": 113.74238670076431,
            "y": 2100.445482618789
          },
          "dragging": false
        },
        {
          "id": "Pinecone-IhuRU",
          "type": "genericNode",
          "position": {
            "x": -457.51503594750295,
            "y": 906.4999177580518
          },
          "data": {
            "type": "Pinecone",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding",
                  "value": "",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "ingest_data": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "distance_strategy": {
                  "trace_as_metadata": true,
                  "options": [
                    "Cosine",
                    "Euclidean",
                    "Dot Product"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "distance_strategy",
                  "value": "Cosine",
                  "display_name": "Distance Strategy",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "index_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "index_name",
                  "value": "test",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "namespace": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "namespace",
                  "value": "test-chat",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Namespace for the index.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 4,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "pinecone_api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "pinecone_api_key",
                  "value": "",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "text_key": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "text",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Key in the record to use as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Pinecone Vector Store with search capabilities",
              "icon": "Pinecone",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Pinecone",
              "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "text_key",
                "search_query",
                "ingest_data",
                "embedding",
                "number_of_results"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "Pinecone-IhuRU"
          },
          "selected": false,
          "width": 384,
          "height": 828,
          "positionAbsolute": {
            "x": -457.51503594750295,
            "y": 906.4999177580518
          },
          "dragging": false
        },
        {
          "id": "Pinecone-ctRpM",
          "type": "genericNode",
          "position": {
            "x": -454.61054870541295,
            "y": 2095.7276798737203
          },
          "data": {
            "type": "Pinecone",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding",
                  "value": "",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "ingest_data": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.helpers.data import docs_to_data\nfrom axiestudio.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom axiestudio.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "distance_strategy": {
                  "trace_as_metadata": true,
                  "options": [
                    "Cosine",
                    "Euclidean",
                    "Dot Product"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "distance_strategy",
                  "value": "Cosine",
                  "display_name": "Distance Strategy",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "index_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "index_name",
                  "value": "test",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "namespace": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "namespace",
                  "value": "test-chat",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Namespace for the index.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 4,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "pinecone_api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "pinecone_api_key",
                  "value": "",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "text_key": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "text",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Key in the record to use as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Pinecone Vector Store with search capabilities",
              "icon": "Pinecone",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Pinecone",
              "documentation": "https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "text_key",
                "search_query",
                "ingest_data",
                "embedding",
                "number_of_results"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "Pinecone-ctRpM"
          },
          "selected": false,
          "width": 384,
          "height": 828,
          "positionAbsolute": {
            "x": -454.61054870541295,
            "y": 2095.7276798737203
          },
          "dragging": false
        },
        {
          "id": "OpenAIEmbeddings-WSoMR",
          "type": "genericNode",
          "position": {
            "x": -1215.661059475126,
            "y": 586.3624540524967
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "chunk_size": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 1000,
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "client": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "client",
                  "value": "",
                  "display_name": "Client",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "default_headers": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_headers",
                  "value": {},
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default headers to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "default_query": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_query",
                  "value": {},
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default query parameters to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "deployment": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "deployment",
                  "value": "",
                  "display_name": "Deployment",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "dimensions": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "dimensions",
                  "value": "",
                  "display_name": "Dimensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "embedding_ctx_length": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding_ctx_length",
                  "value": 1536,
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "max_retries": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_retries",
                  "value": 3,
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "text-embedding-3-small",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "openai_api_base": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_type": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_type",
                  "value": "",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_version": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_version",
                  "value": "",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_organization": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_organization",
                  "value": "",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_proxy": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_proxy",
                  "value": "",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "request_timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "request_timeout",
                  "value": "",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                },
                "show_progress_bar": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "show_progress_bar",
                  "value": false,
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "skip_empty": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "skip_empty",
                  "value": false,
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_enable": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_enable",
                  "value": true,
                  "display_name": "TikToken Enable",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If False, you must have transformers installed.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_model_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_model_name",
                  "value": "",
                  "display_name": "TikToken Model Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Generate embeddings using OpenAI models.",
              "icon": "OpenAI",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "OpenAI Embeddings",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "default_headers",
                "default_query",
                "chunk_size",
                "client",
                "deployment",
                "embedding_ctx_length",
                "max_retries",
                "model",
                "model_kwargs",
                "openai_api_base",
                "openai_api_key",
                "openai_api_type",
                "openai_api_version",
                "openai_organization",
                "openai_proxy",
                "request_timeout",
                "show_progress_bar",
                "skip_empty",
                "tiktoken_model_name",
                "tiktoken_enable",
                "dimensions"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "OpenAIEmbeddings-WSoMR"
          },
          "selected": false,
          "width": 384,
          "height": 384,
          "positionAbsolute": {
            "x": -1215.661059475126,
            "y": 586.3624540524967
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "Pinecone-gvPGF",
          "sourceHandle": "{œdataTypeœ:œPineconeœ,œidœ:œPinecone-gvPGFœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}",
          "target": "RetrieverTool-9vvWp",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-9vvWpœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "RetrieverTool-9vvWp",
              "inputTypes": [
                "Retriever"
              ],
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "dataType": "Pinecone",
              "id": "Pinecone-gvPGF",
              "name": "base_retriever",
              "output_types": [
                "Retriever"
              ]
            }
          },
          "id": "reactflow__edge-Pinecone-gvPGF{œdataTypeœ:œPineconeœ,œidœ:œPinecone-gvPGFœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}-RetrieverTool-9vvWp{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-9vvWpœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "File-9snIT",
          "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-9snITœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "RecursiveCharacterTextSplitter-2Qcr4",
          "targetHandle": "{œfieldNameœ:œdata_inputœ,œidœ:œRecursiveCharacterTextSplitter-2Qcr4œ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data_input",
              "id": "RecursiveCharacterTextSplitter-2Qcr4",
              "inputTypes": [
                "Document",
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "File",
              "id": "File-9snIT",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-File-9snIT{œdataTypeœ:œFileœ,œidœ:œFile-9snITœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RecursiveCharacterTextSplitter-2Qcr4{œfieldNameœ:œdata_inputœ,œidœ:œRecursiveCharacterTextSplitter-2Qcr4œ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ChatInput-P3Btc",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P3Btcœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "CustomComponent-2Hfj8",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "CustomComponent-2Hfj8",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-P3Btc",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-P3Btc{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P3Btcœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-2Hfj8{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "CustomComponent-2Hfj8",
          "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-2Hfj8œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-aKFcK",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-aKFcKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-aKFcK",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "CustomComponent",
              "id": "CustomComponent-2Hfj8",
              "name": "response",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-2Hfj8{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-2Hfj8œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-aKFcK{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-aKFcKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "RetrieverTool-9vvWp",
          "sourceHandle": "{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-9vvWpœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}",
          "target": "CustomComponent-tCZXU",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "CustomComponent-tCZXU",
              "inputTypes": [
                "Tool",
                "BaseTool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "RetrieverTool",
              "id": "RetrieverTool-9vvWp",
              "name": "tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-RetrieverTool-9vvWp{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-9vvWpœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}-CustomComponent-tCZXU{œfieldNameœ:œtoolsœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "CustomComponent-tCZXU",
          "sourceHandle": "{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œCustomComponent-tCZXUœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}",
          "target": "CustomComponent-2Hfj8",
          "targetHandle": "{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "workers",
              "id": "CustomComponent-2Hfj8",
              "inputTypes": [
                "Object"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ToolCallingAgentComponent",
              "id": "CustomComponent-tCZXU",
              "name": "worker",
              "output_types": [
                "Object"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-tCZXU{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œCustomComponent-tCZXUœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}-CustomComponent-2Hfj8{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ToolCallingAgentComponent-47J8C",
          "sourceHandle": "{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}",
          "target": "CustomComponent-2Hfj8",
          "targetHandle": "{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "workers",
              "id": "CustomComponent-2Hfj8",
              "inputTypes": [
                "Object"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ToolCallingAgentComponent",
              "id": "ToolCallingAgentComponent-47J8C",
              "name": "worker",
              "output_types": [
                "Object"
              ]
            }
          },
          "id": "reactflow__edge-ToolCallingAgentComponent-47J8C{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}-CustomComponent-2Hfj8{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ToolCallingAgentComponent-UEyAl",
          "sourceHandle": "{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}",
          "target": "CustomComponent-2Hfj8",
          "targetHandle": "{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "workers",
              "id": "CustomComponent-2Hfj8",
              "inputTypes": [
                "Object"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ToolCallingAgentComponent",
              "id": "ToolCallingAgentComponent-UEyAl",
              "name": "worker",
              "output_types": [
                "Object"
              ]
            }
          },
          "id": "reactflow__edge-ToolCallingAgentComponent-UEyAl{œdataTypeœ:œToolCallingAgentComponentœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œnameœ:œworkerœ,œoutput_typesœ:[œObjectœ]}-CustomComponent-2Hfj8{œfieldNameœ:œworkersœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œObjectœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-yr6HE",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "ToolCallingAgentComponent-47J8C",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "ToolCallingAgentComponent-47J8C",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-yr6HE",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgentComponent-47J8C{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "RetrieverTool-Sp5nR",
          "sourceHandle": "{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-Sp5nRœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}",
          "target": "ToolCallingAgentComponent-UEyAl",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "ToolCallingAgentComponent-UEyAl",
              "inputTypes": [
                "Tool",
                "BaseTool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "RetrieverTool",
              "id": "RetrieverTool-Sp5nR",
              "name": "tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-RetrieverTool-Sp5nR{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-Sp5nRœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgentComponent-UEyAl{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "RetrieverTool-QcU52",
          "sourceHandle": "{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-QcU52œ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}",
          "target": "ToolCallingAgentComponent-47J8C",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "ToolCallingAgentComponent-47J8C",
              "inputTypes": [
                "Tool",
                "BaseTool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "RetrieverTool",
              "id": "RetrieverTool-QcU52",
              "name": "tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-RetrieverTool-QcU52{œdataTypeœ:œRetrieverToolœ,œidœ:œRetrieverTool-QcU52œ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgentComponent-47J8C{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgentComponent-47J8Cœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "Pinecone-IhuRU",
          "sourceHandle": "{œdataTypeœ:œPineconeœ,œidœ:œPinecone-IhuRUœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}",
          "target": "RetrieverTool-QcU52",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-QcU52œ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "RetrieverTool-QcU52",
              "inputTypes": [
                "Retriever"
              ],
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "dataType": "Pinecone",
              "id": "Pinecone-IhuRU",
              "name": "base_retriever",
              "output_types": [
                "Retriever"
              ]
            }
          },
          "id": "reactflow__edge-Pinecone-IhuRU{œdataTypeœ:œPineconeœ,œidœ:œPinecone-IhuRUœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}-RetrieverTool-QcU52{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-QcU52œ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
          "className": ""
        },
        {
          "source": "Pinecone-ctRpM",
          "sourceHandle": "{œdataTypeœ:œPineconeœ,œidœ:œPinecone-ctRpMœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}",
          "target": "RetrieverTool-Sp5nR",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-Sp5nRœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "RetrieverTool-Sp5nR",
              "inputTypes": [
                "Retriever"
              ],
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "dataType": "Pinecone",
              "id": "Pinecone-ctRpM",
              "name": "base_retriever",
              "output_types": [
                "Retriever"
              ]
            }
          },
          "id": "reactflow__edge-Pinecone-ctRpM{œdataTypeœ:œPineconeœ,œidœ:œPinecone-ctRpMœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}-RetrieverTool-Sp5nR{œfieldNameœ:œretrieverœ,œidœ:œRetrieverTool-Sp5nRœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œBaseRetrieverœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-WSoMR",
          "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Pinecone-IhuRU",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-IhuRUœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Pinecone-IhuRU",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-WSoMR",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-WSoMR{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-IhuRU{œfieldNameœ:œembeddingœ,œidœ:œPinecone-IhuRUœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-yr6HE",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "ToolCallingAgentComponent-UEyAl",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "ToolCallingAgentComponent-UEyAl",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-yr6HE",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgentComponent-UEyAl{œfieldNameœ:œllmœ,œidœ:œToolCallingAgentComponent-UEyAlœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-yr6HE",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "CustomComponent-tCZXU",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CustomComponent-tCZXU",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-yr6HE",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CustomComponent-tCZXU{œfieldNameœ:œllmœ,œidœ:œCustomComponent-tCZXUœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-yr6HE",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "CustomComponent-2Hfj8",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CustomComponent-2Hfj8",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-yr6HE",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-yr6HE{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-yr6HEœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CustomComponent-2Hfj8{œfieldNameœ:œllmœ,œidœ:œCustomComponent-2Hfj8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-WSoMR",
          "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Pinecone-ctRpM",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-ctRpMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Pinecone-ctRpM",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-WSoMR",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-WSoMR{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-ctRpM{œfieldNameœ:œembeddingœ,œidœ:œPinecone-ctRpMœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-WSoMR",
          "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Pinecone-gvPGF",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-gvPGFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Pinecone-gvPGF",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-WSoMR",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-WSoMR{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-WSoMRœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-gvPGF{œfieldNameœ:œembeddingœ,œidœ:œPinecone-gvPGFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 440.43899886531767,
        "y": 22.28713371097308,
        "zoom": 0.32987697769322444
      }
    },
    "date_created": "2024-09-16T06:25:43.199Z",
    "date_updated": "2024-09-16T06:25:43.346Z",
    "status": "Public",
    "sort": null,
    "user_updated": "5b2787d1-b627-4a21-a59d-bcfd331da110",
    "user_created": {
      "username": "zrkluke",
      "first_name": "Luke",
      "last_name": "Kong",
      "id": "5b2787d1-b627-4a21-a59d-bcfd331da110"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:03.591Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 136,
    "converter_version": "1.0.0"
  }
}