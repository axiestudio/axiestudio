{
  "id": "d8ccd7ac-e547-4b93-a920-34be229d4d4d",
  "name": "Upsert To PGVector",
  "description": "pgvector  (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "jgarf",
    "first_name": "joe",
    "last_name": "garf",
    "id": "39867645-d226-4d69-83e3-ff8f012183de",
    "full_name": "joe garf"
  },
  "store_url": "https://www.langflow.store/store/component/d8ccd7ac-e547-4b93-a920-34be229d4d4d",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-14T14:27:48.919Z",
    "updated": "2024-05-14T14:27:48.955Z",
    "downloaded": "2025-08-19T17:50:05.196Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.19",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "pgvector-V8PWW",
        "type": "genericNode",
        "position": {
          "x": 1284.6300488828501,
          "y": 462.58709195975666
        },
        "data": {
          "type": "pgvector",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.embeddings.base import Embeddings\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.pgvector import PGVector\nfrom langchain_core.documents import Document\nfrom langchain_core.retrievers import BaseRetriever\nfrom axiestudio import CustomComponent\n\n\nclass PGVectorComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using PostgreSQL.\n    \"\"\"\n\n    display_name: str = \"PGVector\"\n    description: str = \"Implementation of Vector Store using PostgreSQL\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/pgvector\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"code\": {\"show\": False},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"pg_server_url\": {\n                \"display_name\": \"PostgreSQL Server Connection String\",\n                \"advanced\": False,\n            },\n            \"collection_name\": {\"display_name\": \"collection_name\", \"advanced\": False},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        pg_server_url: str,\n        collection_name: str,\n        documents: Optional[Document] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - embedding (Embeddings): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - collection_name (str): The name of the PG table.\n        - pg_server_url (str): The URL for the PG server.\n\n        Returns:\n        - VectorStore: The Vector Store object.\n        \"\"\"\n\n        try:\n            if documents is None:\n                vector_store = PGVector.from_existing_index(\n                    embedding=embedding,\n                    collection_name=collection_name,\n                    connection_string=pg_server_url,\n                )\n            else:\n                vector_store = PGVector.from_documents(\n                    embedding=embedding,\n                    documents=documents,  # type: ignore\n                    collection_name=collection_name,\n                    connection_string=pg_server_url,\n                )\n        except Exception as e:\n            raise RuntimeError(f\"Failed to build PGVector: {e}\")\n        return vector_store\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "collection_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "history1"
              },
              "pg_server_url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pg_server_url",
                "display_name": "PostgreSQL Server Connection String",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "postgresql+psycopg://langchain:langchain@localhost:6024/langchain"
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using PostgreSQL",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "PGVector",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/pgvector",
            "custom_fields": {
              "embedding": null,
              "pg_server_url": null,
              "collection_name": null,
              "documents": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "pgvector-V8PWW",
          "description": "Implementation of Vector Store using PostgreSQL",
          "display_name": "PGVector"
        },
        "selected": false,
        "width": 384,
        "height": 562,
        "dragging": false,
        "positionAbsolute": {
          "x": 1284.6300488828501,
          "y": 462.58709195975666
        }
      },
      {
        "id": "OpenAIEmbeddings-vve39",
        "type": "genericNode",
        "position": {
          "x": 466.1168805233151,
          "y": 1088.3551187464695
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "allowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "allowed_special",
                "display_name": "Allowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "client",
                "display_name": "Client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "default_headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_headers",
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "default_query": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_query",
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "deployment",
                "display_name": "Deployment",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "disallowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [
                  "all"
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "disallowed_special",
                "display_name": "Disallowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding_ctx_length": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 8191,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding_ctx_length",
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 6,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_version": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_organization": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_proxy": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "show_progress_bar": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "show_progress_bar",
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "skip_empty": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "skip_empty",
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_enable": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_enable",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_model_name",
                "display_name": "TikToken Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "OpenAI embedding models",
            "base_classes": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "display_name": "OpenAIEmbeddings",
            "documentation": "",
            "custom_fields": {
              "default_headers": null,
              "default_query": null,
              "allowed_special": null,
              "disallowed_special": null,
              "chunk_size": null,
              "client": null,
              "deployment": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "output_types": [
              "OpenAIEmbeddings",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIEmbeddings-vve39"
        },
        "selected": false,
        "width": 384,
        "height": 631,
        "positionAbsolute": {
          "x": 466.1168805233151,
          "y": 1088.3551187464695
        },
        "dragging": false
      },
      {
        "id": "CharacterTextSplitter-0y5u3",
        "type": "genericNode",
        "position": {
          "x": 448.7576942174101,
          "y": 460.4182796097679
        },
        "data": {
          "type": "CharacterTextSplitter",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_overlap": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "500",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain_core.documents.base import Document\nfrom axiestudio import CustomComponent\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\"},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        documents: List[Document],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Document]:\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        self.status = docs\n        return docs\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "separator": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "\\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Splitting text that looks at characters.",
            "base_classes": [
              "Document"
            ],
            "display_name": "CharacterTextSplitter",
            "documentation": "",
            "custom_fields": {
              "documents": null,
              "chunk_overlap": null,
              "chunk_size": null,
              "separator": null
            },
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CharacterTextSplitter-0y5u3",
          "description": "Splitting text that looks at characters.",
          "display_name": "CharacterTextSplitter"
        },
        "selected": false,
        "width": 384,
        "height": 591,
        "dragging": false
      },
      {
        "id": "PyPDFLoader-CJCM1",
        "type": "genericNode",
        "position": {
          "x": -57.247338437358735,
          "y": 543.397762091657
        },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [
                  ".pdf"
                ],
                "file_path": "C:\\Users\\V\\AppData\\Local\\axiestudio\\axiestudio\\Cache\\4039b764-3b88-44b0-8990-10c9b2964080\\eaf6a82c9a5a446dc128bdbe675a59dff695d51b7f958e3b555229765d0a29cc.pdf",
                "password": false,
                "name": "file_path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": [
                  {
                    "": ""
                  }
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": [
              "Document"
            ],
            "display_name": "PyPDFLoader",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "PyPDFLoader-CJCM1"
        },
        "selected": true,
        "width": 384,
        "height": 365,
        "dragging": false,
        "positionAbsolute": {
          "x": -57.247338437358735,
          "y": 543.397762091657
        }
      }
    ],
    "edges": [
      {
        "source": "OpenAIEmbeddings-vve39",
        "target": "pgvector-V8PWW",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-vve39œ}",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "id": "reactflow__edge-OpenAIEmbeddings-vve39{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-vve39œ}-pgvector-V8PWW{œfieldNameœ:œembeddingœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "pgvector-V8PWW",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-vve39"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "CharacterTextSplitter-0y5u3",
        "target": "pgvector-V8PWW",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-0y5u3œ}",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "id": "reactflow__edge-CharacterTextSplitter-0y5u3{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-0y5u3œ}-pgvector-V8PWW{œfieldNameœ:œdocumentsœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "pgvector-V8PWW",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "CharacterTextSplitter",
            "id": "CharacterTextSplitter-0y5u3"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "PyPDFLoader-CJCM1",
        "target": "CharacterTextSplitter-0y5u3",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-CJCM1œ}",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-0y5u3œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "id": "reactflow__edge-PyPDFLoader-CJCM1{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-CJCM1œ}-CharacterTextSplitter-0y5u3{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-0y5u3œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "CharacterTextSplitter-0y5u3",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-CJCM1"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      }
    ],
    "viewport": {
      "x": 190.51022432839363,
      "y": 46.332570067013705,
      "zoom": 0.5281184542662524
    }
  },
  "metadata": {
    "pgvector": {
      "count": 1
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "CharacterTextSplitter": {
      "count": 1
    },
    "PyPDFLoader": {
      "count": 1
    },
    "total": 4
  },
  "original": {
    "id": "d8ccd7ac-e547-4b93-a920-34be229d4d4d",
    "name": "Upsert To PGVector",
    "description": "pgvector ",
    "is_component": false,
    "liked_by_count": "7",
    "downloads_count": "56",
    "metadata": {
      "pgvector": {
        "count": 1
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "CharacterTextSplitter": {
        "count": 1
      },
      "PyPDFLoader": {
        "count": 1
      },
      "total": 4
    },
    "last_tested_version": "0.6.19",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "pgvector-V8PWW",
          "type": "genericNode",
          "position": {
            "x": 1284.6300488828501,
            "y": 462.58709195975666
          },
          "data": {
            "type": "pgvector",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.embeddings.base import Embeddings\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.pgvector import PGVector\nfrom langchain_core.documents import Document\nfrom langchain_core.retrievers import BaseRetriever\nfrom axiestudio import CustomComponent\n\n\nclass PGVectorComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using PostgreSQL.\n    \"\"\"\n\n    display_name: str = \"PGVector\"\n    description: str = \"Implementation of Vector Store using PostgreSQL\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/pgvector\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"code\": {\"show\": False},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"pg_server_url\": {\n                \"display_name\": \"PostgreSQL Server Connection String\",\n                \"advanced\": False,\n            },\n            \"collection_name\": {\"display_name\": \"collection_name\", \"advanced\": False},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        pg_server_url: str,\n        collection_name: str,\n        documents: Optional[Document] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - embedding (Embeddings): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - collection_name (str): The name of the PG table.\n        - pg_server_url (str): The URL for the PG server.\n\n        Returns:\n        - VectorStore: The Vector Store object.\n        \"\"\"\n\n        try:\n            if documents is None:\n                vector_store = PGVector.from_existing_index(\n                    embedding=embedding,\n                    collection_name=collection_name,\n                    connection_string=pg_server_url,\n                )\n            else:\n                vector_store = PGVector.from_documents(\n                    embedding=embedding,\n                    documents=documents,  # type: ignore\n                    collection_name=collection_name,\n                    connection_string=pg_server_url,\n                )\n        except Exception as e:\n            raise RuntimeError(f\"Failed to build PGVector: {e}\")\n        return vector_store\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "collection_name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "history1"
                },
                "pg_server_url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pg_server_url",
                  "display_name": "PostgreSQL Server Connection String",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "postgresql+psycopg://langchain:langchain@localhost:6024/langchain"
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using PostgreSQL",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "PGVector",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/pgvector",
              "custom_fields": {
                "embedding": null,
                "pg_server_url": null,
                "collection_name": null,
                "documents": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "pgvector-V8PWW",
            "description": "Implementation of Vector Store using PostgreSQL",
            "display_name": "PGVector"
          },
          "selected": false,
          "width": 384,
          "height": 562,
          "dragging": false,
          "positionAbsolute": {
            "x": 1284.6300488828501,
            "y": 462.58709195975666
          }
        },
        {
          "id": "OpenAIEmbeddings-vve39",
          "type": "genericNode",
          "position": {
            "x": 466.1168805233151,
            "y": 1088.3551187464695
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "allowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "allowed_special",
                  "display_name": "Allowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "client",
                  "display_name": "Client",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "default_headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_headers",
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "default_query": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_query",
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "deployment",
                  "display_name": "Deployment",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "disallowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [
                    "all"
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "disallowed_special",
                  "display_name": "Disallowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding_ctx_length": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 8191,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding_ctx_length",
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 6,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_type",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_version": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_version",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_organization": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_organization",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_proxy": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_proxy",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "show_progress_bar": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "show_progress_bar",
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "skip_empty": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "skip_empty",
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_enable": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_enable",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_model_name",
                  "display_name": "TikToken Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "OpenAI embedding models",
              "base_classes": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "display_name": "OpenAIEmbeddings",
              "documentation": "",
              "custom_fields": {
                "default_headers": null,
                "default_query": null,
                "allowed_special": null,
                "disallowed_special": null,
                "chunk_size": null,
                "client": null,
                "deployment": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "output_types": [
                "OpenAIEmbeddings",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIEmbeddings-vve39"
          },
          "selected": false,
          "width": 384,
          "height": 631,
          "positionAbsolute": {
            "x": 466.1168805233151,
            "y": 1088.3551187464695
          },
          "dragging": false
        },
        {
          "id": "CharacterTextSplitter-0y5u3",
          "type": "genericNode",
          "position": {
            "x": 448.7576942174101,
            "y": 460.4182796097679
          },
          "data": {
            "type": "CharacterTextSplitter",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "500",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain_core.documents.base import Document\nfrom axiestudio import CustomComponent\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\"},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        documents: List[Document],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Document]:\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        self.status = docs\n        return docs\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "separator": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "\\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Splitting text that looks at characters.",
              "base_classes": [
                "Document"
              ],
              "display_name": "CharacterTextSplitter",
              "documentation": "",
              "custom_fields": {
                "documents": null,
                "chunk_overlap": null,
                "chunk_size": null,
                "separator": null
              },
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CharacterTextSplitter-0y5u3",
            "description": "Splitting text that looks at characters.",
            "display_name": "CharacterTextSplitter"
          },
          "selected": false,
          "width": 384,
          "height": 591,
          "dragging": false
        },
        {
          "id": "PyPDFLoader-CJCM1",
          "type": "genericNode",
          "position": {
            "x": -57.247338437358735,
            "y": 543.397762091657
          },
          "data": {
            "type": "PyPDFLoader",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [
                    ".pdf"
                  ],
                  "file_path": "C:\\Users\\V\\AppData\\Local\\axiestudio\\axiestudio\\Cache\\4039b764-3b88-44b0-8990-10c9b2964080\\eaf6a82c9a5a446dc128bdbe675a59dff695d51b7f958e3b555229765d0a29cc.pdf",
                  "password": false,
                  "name": "file_path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": [
                    {
                      "": ""
                    }
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PyPDFLoader"
              },
              "description": "Load PDF using pypdf into list of documents.",
              "base_classes": [
                "Document"
              ],
              "display_name": "PyPDFLoader",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "PyPDFLoader-CJCM1"
          },
          "selected": true,
          "width": 384,
          "height": 365,
          "dragging": false,
          "positionAbsolute": {
            "x": -57.247338437358735,
            "y": 543.397762091657
          }
        }
      ],
      "edges": [
        {
          "source": "OpenAIEmbeddings-vve39",
          "target": "pgvector-V8PWW",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-vve39œ}",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "id": "reactflow__edge-OpenAIEmbeddings-vve39{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-vve39œ}-pgvector-V8PWW{œfieldNameœ:œembeddingœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "pgvector-V8PWW",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-vve39"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "CharacterTextSplitter-0y5u3",
          "target": "pgvector-V8PWW",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-0y5u3œ}",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "id": "reactflow__edge-CharacterTextSplitter-0y5u3{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-0y5u3œ}-pgvector-V8PWW{œfieldNameœ:œdocumentsœ,œidœ:œpgvector-V8PWWœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "pgvector-V8PWW",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "CharacterTextSplitter",
              "id": "CharacterTextSplitter-0y5u3"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "PyPDFLoader-CJCM1",
          "target": "CharacterTextSplitter-0y5u3",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-CJCM1œ}",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-0y5u3œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "id": "reactflow__edge-PyPDFLoader-CJCM1{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-CJCM1œ}-CharacterTextSplitter-0y5u3{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-0y5u3œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "CharacterTextSplitter-0y5u3",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "PyPDFLoader",
              "id": "PyPDFLoader-CJCM1"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        }
      ],
      "viewport": {
        "x": 190.51022432839363,
        "y": 46.332570067013705,
        "zoom": 0.5281184542662524
      }
    },
    "date_created": "2024-05-14T14:27:48.919Z",
    "date_updated": "2024-05-14T14:27:48.955Z",
    "status": "Public",
    "sort": null,
    "user_updated": "39867645-d226-4d69-83e3-ff8f012183de",
    "user_created": {
      "username": "jgarf",
      "first_name": "joe",
      "last_name": "garf",
      "id": "39867645-d226-4d69-83e3-ff8f012183de"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:06.382Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 12,
    "converter_version": "1.0.0"
  }
}