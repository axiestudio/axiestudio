{
  "id": "1fc608e3-5178-4abf-b2c6-cbcf0e222af3",
  "name": "RAG - Multi Query",
  "description": "This project gives you both Ingestion and RAG in a single file. This implements a Multi-query strategy where a query from the user is converted to multiple queries and each query is used to pull documents from the vector store. Final answer generation is based on all of the documents from the vector store.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the local Chroma DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "misbah",
    "first_name": "Menlo Park Lab",
    "last_name": "Lab",
    "id": "8ca3c638-244a-4d41-ae61-bc145776bd63",
    "full_name": "Menlo Park Lab Lab"
  },
  "store_url": "https://www.langflow.store/store/component/1fc608e3-5178-4abf-b2c6-cbcf0e222af3",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-20T05:04:42.033Z",
    "updated": "2024-08-20T16:59:52.114Z",
    "downloaded": "2025-08-19T17:50:06.458Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-P7ZSI",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "what is for students in a startup?",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 294,
        "id": "ChatInput-P7ZSI",
        "position": {
          "x": -439.5679588272785,
          "y": 606.5786796456094
        },
        "positionAbsolute": {
          "x": -439.5679588272785,
          "y": 606.5786796456094
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-LAi2A",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 294,
        "id": "ChatOutput-LAi2A",
        "position": {
          "x": 5166.101271597747,
          "y": 414.4619040278359
        },
        "positionAbsolute": {
          "x": 5166.101271597747,
          "y": 414.4619040278359
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Split text into chunks based on specified criteria.",
          "display_name": "Split Text",
          "id": "SplitText-o2OxT",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Split text into chunks based on specified criteria.",
            "display_name": "Split Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data_inputs",
              "chunk_overlap",
              "chunk_size",
              "separator"
            ],
            "frozen": false,
            "icon": "scissors-line-dashed",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Chunks",
                "method": "split_text",
                "name": "chunks",
                "selected": "Data",
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "chunk_overlap": {
                "advanced": false,
                "display_name": "Chunk Overlap",
                "dynamic": false,
                "info": "Number of characters to overlap between chunks.",
                "list": false,
                "name": "chunk_overlap",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": "200"
              },
              "chunk_size": {
                "advanced": false,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "The maximum number of characters in each chunk.",
                "list": false,
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n"
              },
              "data_inputs": {
                "advanced": false,
                "display_name": "Data Inputs",
                "dynamic": false,
                "info": "The data to split.",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "name": "data_inputs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "separator": {
                "advanced": false,
                "display_name": "Separator",
                "dynamic": false,
                "info": "The character to split on. Defaults to newline.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "separator",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "lf_version": "1.0.15"
          },
          "type": "SplitText"
        },
        "dragging": false,
        "height": 542,
        "id": "SplitText-o2OxT",
        "position": {
          "x": 1951.3389446914757,
          "y": 1571.7518114338106
        },
        "positionAbsolute": {
          "x": 1951.3389446914757,
          "y": 1571.7518114338106
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "A generic file loader.",
          "display_name": "File",
          "id": "File-frVxt",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "A generic file loader.",
            "display_name": "File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "path",
              "silent_errors"
            ],
            "frozen": false,
            "icon": "file-text",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Data",
                "method": "load_file",
                "name": "data",
                "selected": "Data",
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n"
              },
              "path": {
                "advanced": false,
                "display_name": "Path",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "file_path": "edc48e5b-adff-4f1b-9d96-92b49e8f816c/A Student's Guide to Startups.pdf",
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "list": false,
                "name": "path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "silent_errors": {
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "name": "silent_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              }
            },
            "lf_version": "1.0.15"
          },
          "type": "File"
        },
        "dragging": false,
        "height": 294,
        "id": "File-frVxt",
        "position": {
          "x": 1370.0656893814248,
          "y": 1955.1711254148577
        },
        "positionAbsolute": {
          "x": 1370.0656893814248,
          "y": 1955.1711254148577
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "id": "CohereEmbeddings-ImD4Q",
        "type": "genericNode",
        "position": {
          "x": 1988.9355251476707,
          "y": 2203.33629533245
        },
        "data": {
          "type": "CohereEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "cohere_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "cohere_api_key",
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "max_retries": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 3,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "embed-english-v2.0",
                  "embed-multilingual-v2.0",
                  "embed-english-light-v2.0",
                  "embed-multilingual-light-v2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "embed-english-v2.0",
                "name": "model",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "request_timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float"
              },
              "truncate": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "truncate",
                "display_name": "Truncate",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "user_agent": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "langchain",
                "name": "user_agent",
                "display_name": "User Agent",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Generate embeddings using Cohere models.",
            "icon": "Cohere",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Cohere Embeddings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "cohere_api_key",
              "model",
              "truncate",
              "max_retries",
              "user_agent",
              "request_timeout"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "CohereEmbeddings-ImD4Q"
        },
        "selected": false,
        "width": 384,
        "height": 294,
        "dragging": false,
        "positionAbsolute": {
          "x": 1988.9355251476707,
          "y": 2203.33629533245
        }
      },
      {
        "id": "Chroma-GtCuF",
        "type": "genericNode",
        "position": {
          "x": 2588.8438701001896,
          "y": 1776.2066134636489
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other"
              },
              "ingest_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ingest_data",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other"
              },
              "allow_duplicates": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "allow_duplicates",
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool"
              },
              "chroma_server_cors_allow_origins": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "chroma_server_grpc_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "chroma_server_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "chroma_server_http_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_http_port",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "chroma_server_ssl_enabled": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "collection_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "studentsPG",
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "limit": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "limit",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 10,
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int"
              },
              "persist_directory": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "chroma",
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "search_type": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Similarity",
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Chroma Vector Store with search capabilities",
            "icon": "Chroma",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Chroma DB",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "collection_name",
              "persist_directory",
              "search_query",
              "ingest_data",
              "embedding",
              "chroma_server_cors_allow_origins",
              "chroma_server_host",
              "chroma_server_http_port",
              "chroma_server_grpc_port",
              "chroma_server_ssl_enabled",
              "allow_duplicates",
              "search_type",
              "number_of_results",
              "limit"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "Chroma-GtCuF"
        },
        "selected": false,
        "width": 384,
        "height": 644,
        "dragging": false,
        "positionAbsolute": {
          "x": 2588.8438701001896,
          "y": 1776.2066134636489
        }
      },
      {
        "id": "Prompt-ipfIy",
        "type": "genericNode",
        "position": {
          "x": 3912.4378955190796,
          "y": 179.76547244164726
        },
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-ipfIy",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{context_1}\n\n{context_2}\n\n{context_3}\n\n---\n\nGiven the context above, answer the question as best as possible.\n\nQuestion: {question}\n\nAnswer: ",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "load_from_db": false
              },
              "question": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "question",
                "display_name": "question",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "context_1": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context_1",
                "display_name": "context_1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "context_2": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context_2",
                "display_name": "context_2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "context_3": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context_3",
                "display_name": "context_3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "context_1",
                "context_2",
                "context_3",
                "question"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "type": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 666,
        "positionAbsolute": {
          "x": 3912.4378955190796,
          "y": 179.76547244164726
        },
        "dragging": false
      },
      {
        "id": "Prompt-1v8ts",
        "type": "genericNode",
        "position": {
          "x": 159.46614357230055,
          "y": -185.27725014078914
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "You are an AI language model assistant. Your task is to generate 3 different versions of the given user question to retrieve relevant documents from a vector \ndatabase. By generating multiple perspectives on the user question, your goal is to help the user overcome some of the limitations of the distance-based similarity search. \nProvide these alternative questions separated by newlines. Original question: {question}\n\nYour response should be a json of just the 3 questions and nothing else",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "question": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "question",
                "display_name": "question",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "question"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "Prompt-1v8ts"
        },
        "selected": false,
        "width": 384,
        "height": 408,
        "positionAbsolute": {
          "x": 159.46614357230055,
          "y": -185.27725014078914
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-X3dW2",
        "type": "genericNode",
        "position": {
          "x": 721.0687066846526,
          "y": -497.985013797009
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": true,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": {},
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "OpenAIModel-X3dW2"
        },
        "selected": false,
        "width": 384,
        "height": 593,
        "positionAbsolute": {
          "x": 721.0687066846526,
          "y": -497.985013797009
        },
        "dragging": false
      },
      {
        "id": "AnthropicModel-a2b9r",
        "type": "genericNode",
        "position": {
          "x": 1273.776607250557,
          "y": -317.65861894275565
        },
        "data": {
          "type": "AnthropicModel",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Union, List\r\n\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageInput, Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass JSONToDataComponent(Component):\r\n    display_name = \"JSON to Data\"\r\n    description = \"Convert a JSON string to a Data object or a list of Data objects\"\r\n    icon = \"🔃\"\r\n\r\n    inputs = [\r\n        MessageInput(\r\n            name=\"json_string\",\r\n            display_name=\"JSON String\",\r\n            info=\"Enter a valid JSON string (object or array) to convert to a Data object or list of Data objects\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"data\", display_name=\"Data\", method=\"convert_json_to_data\"),\r\n    ]\r\n\r\n    def convert_json_to_data(self) -> Union[Data, List[Data]]:\r\n        try:\r\n            json_string = self.json_string.text\r\n\r\n            # Try to parse the JSON string\r\n            try:\r\n                parsed_data = json.loads(json_string)\r\n            except json.JSONDecodeError:\r\n                # If JSON parsing fails, try to evaluate it as a Python literal\r\n                import ast\r\n                parsed_data = ast.literal_eval(json_string)\r\n\r\n            # Check if the parsed data is a list\r\n            if isinstance(parsed_data, list):\r\n                result = [Data(data=item) for item in parsed_data]\r\n            else:\r\n                result = Data(data=parsed_data)\r\n\r\n            self.status = result\r\n            return result\r\n\r\n        except (json.JSONDecodeError, SyntaxError, ValueError) as e:\r\n            error_message = f\"Invalid JSON or Python literal: {str(e)}\"\r\n            error_data = Data(data={\"error\": error_message})\r\n            self.status = error_data\r\n            return error_data\r\n\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            error_data = Data(data={\"error\": error_message})\r\n            self.status = error_data\r\n            return error_data",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "json_string": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "json_string",
                "display_name": "JSON String",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter a valid JSON string (object or array) to convert to a Data object or list of Data objects",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Convert a JSON string to a Data object or a list of Data objects",
            "icon": "🔃",
            "base_classes": [
              "Data",
              "List"
            ],
            "display_name": "JSON to Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Data",
                  "List"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "convert_json_to_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "json_string"
            ],
            "beta": false,
            "edited": true,
            "official": false,
            "lf_version": "1.0.15"
          },
          "id": "AnthropicModel-a2b9r"
        },
        "selected": false,
        "width": 384,
        "height": 318,
        "positionAbsolute": {
          "x": 1273.776607250557,
          "y": -317.65861894275565
        },
        "dragging": false
      },
      {
        "id": "ParseData-HND0N",
        "type": "genericNode",
        "position": {
          "x": 2011.8645356473949,
          "y": -929.9140161485982
        },
        "data": {
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data",
          "id": "ParseData-HND0N",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": true,
            "icon": "braces",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "display_name": "code"
              },
              "data": {
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{questions[0]}"
              }
            },
            "lf_version": "1.0.15"
          },
          "type": "ParseData"
        },
        "selected": false,
        "width": 384,
        "height": 370,
        "positionAbsolute": {
          "x": 2011.8645356473949,
          "y": -929.9140161485982
        },
        "dragging": false
      },
      {
        "data": {
          "id": "groupComponent-CaDgA",
          "type": "GroupNode",
          "node": {
            "display_name": "Group",
            "documentation": "",
            "description": "",
            "template": {
              "code_ParseData-X4upI": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-X4upI",
                  "field": "code"
                }
              },
              "sep_ParseData-X4upI": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n",
                "proxy": {
                  "id": "ParseData-X4upI",
                  "field": "sep"
                }
              },
              "template_ParseData-X4upI": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}",
                "proxy": {
                  "id": "ParseData-X4upI",
                  "field": "template"
                }
              },
              "code_CohereEmbeddings-Pqrka": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "CohereEmbeddings-Pqrka",
                  "field": "code"
                }
              },
              "cohere_api_key_CohereEmbeddings-Pqrka": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "cohere_api_key",
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-Pqrka",
                  "field": "cohere_api_key"
                }
              },
              "max_retries_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 3,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "CohereEmbeddings-Pqrka",
                  "field": "max_retries"
                }
              },
              "model_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "options": [
                  "embed-english-v2.0",
                  "embed-multilingual-v2.0",
                  "embed-english-light-v2.0",
                  "embed-multilingual-light-v2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "embed-english-v2.0",
                "name": "model",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-Pqrka",
                  "field": "model"
                }
              },
              "request_timeout_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "proxy": {
                  "id": "CohereEmbeddings-Pqrka",
                  "field": "request_timeout"
                }
              },
              "truncate_CohereEmbeddings-Pqrka": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "truncate",
                "display_name": "Truncate",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-Pqrka",
                  "field": "truncate"
                }
              },
              "user_agent_CohereEmbeddings-Pqrka": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "langchain",
                "name": "user_agent",
                "display_name": "User Agent",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-Pqrka",
                  "field": "user_agent"
                }
              },
              "ingest_data_Chroma-XVwTG": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ingest_data",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "ingest_data"
                }
              },
              "allow_duplicates_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "allow_duplicates",
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "allow_duplicates"
                }
              },
              "chroma_server_cors_allow_origins_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "chroma_server_cors_allow_origins"
                }
              },
              "chroma_server_grpc_port_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "chroma_server_grpc_port"
                }
              },
              "chroma_server_host_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "chroma_server_host"
                }
              },
              "chroma_server_http_port_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_http_port",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "chroma_server_http_port"
                }
              },
              "chroma_server_ssl_enabled_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "chroma_server_ssl_enabled"
                }
              },
              "code_Chroma-XVwTG": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "code"
                }
              },
              "collection_name_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "studentsPG",
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "collection_name"
                }
              },
              "limit_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "limit",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "limit"
                }
              },
              "number_of_results_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "20",
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "number_of_results"
                }
              },
              "persist_directory_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "chroma",
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "persist_directory"
                }
              },
              "search_query_Chroma-XVwTG": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "search_query"
                }
              },
              "search_type_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Similarity",
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "field": "search_type"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "ParseData-X4upI",
                    "type": "genericNode",
                    "position": {
                      "x": 4432.929881068778,
                      "y": -214.5959275243507
                    },
                    "data": {
                      "description": "Convert Data into plain text following a specified template.",
                      "display_name": "Parse Data",
                      "id": "ParseData-X4upI",
                      "node": {
                        "base_classes": [
                          "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "frozen": false,
                        "icon": "braces",
                        "output_types": [],
                        "outputs": [
                          {
                            "cache": true,
                            "display_name": "Text",
                            "method": "parse_data",
                            "name": "text",
                            "selected": "Message",
                            "types": [
                              "Message"
                            ],
                            "value": "__UNDEFINED__"
                          }
                        ],
                        "pinned": false,
                        "template": {
                          "_type": "Component",
                          "code": {
                            "advanced": true,
                            "dynamic": true,
                            "fileTypes": [],
                            "file_path": "",
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "code",
                            "password": false,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "code",
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                            "display_name": "code"
                          },
                          "data": {
                            "advanced": false,
                            "display_name": "Data",
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "input_types": [
                              "Data"
                            ],
                            "list": false,
                            "name": "data",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "other",
                            "value": ""
                          },
                          "sep": {
                            "advanced": true,
                            "display_name": "Separator",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "name": "sep",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "\n"
                          },
                          "template": {
                            "advanced": false,
                            "display_name": "Template",
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "template",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "{text}"
                          }
                        }
                      },
                      "type": "ParseData"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 370,
                    "positionAbsolute": {
                      "x": 4432.929881068778,
                      "y": -214.5959275243507
                    },
                    "dragging": false
                  },
                  {
                    "id": "CohereEmbeddings-Pqrka",
                    "type": "genericNode",
                    "position": {
                      "x": 3341.045722004871,
                      "y": -129.85073731937803
                    },
                    "data": {
                      "type": "CohereEmbeddings",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "cohere_api_key": {
                            "load_from_db": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "COHERE_API_KEY",
                            "name": "cohere_api_key",
                            "display_name": "Cohere API Key",
                            "advanced": false,
                            "input_types": [],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str"
                          },
                          "max_retries": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": 3,
                            "name": "max_retries",
                            "display_name": "Max Retries",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "model": {
                            "trace_as_metadata": true,
                            "options": [
                              "embed-english-v2.0",
                              "embed-multilingual-v2.0",
                              "embed-english-light-v2.0",
                              "embed-multilingual-light-v2.0"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "embed-english-v2.0",
                            "name": "model",
                            "display_name": "Model",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "request_timeout": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "request_timeout",
                            "display_name": "Request Timeout",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "float"
                          },
                          "truncate": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "truncate",
                            "display_name": "Truncate",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "user_agent": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "langchain",
                            "name": "user_agent",
                            "display_name": "User Agent",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Generate embeddings using Cohere models.",
                        "icon": "Cohere",
                        "base_classes": [
                          "Embeddings"
                        ],
                        "display_name": "Cohere Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Embeddings"
                            ],
                            "selected": "Embeddings",
                            "name": "embeddings",
                            "display_name": "Embeddings",
                            "method": "build_embeddings",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "cohere_api_key",
                          "model",
                          "truncate",
                          "max_retries",
                          "user_agent",
                          "request_timeout"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "CohereEmbeddings-Pqrka"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 294,
                    "positionAbsolute": {
                      "x": 3341.045722004871,
                      "y": -129.85073731937803
                    },
                    "dragging": false
                  },
                  {
                    "id": "Chroma-XVwTG",
                    "type": "genericNode",
                    "position": {
                      "x": 3814.705505687377,
                      "y": -572.7848708624745
                    },
                    "data": {
                      "type": "Chroma",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "embedding": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "embedding",
                            "display_name": "Embedding",
                            "advanced": false,
                            "input_types": [
                              "Embeddings"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other"
                          },
                          "ingest_data": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "list": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "ingest_data",
                            "display_name": "Ingest Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other"
                          },
                          "allow_duplicates": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "allow_duplicates",
                            "display_name": "Allow Duplicates",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If false, will not add documents that are already in the Vector Store.",
                            "title_case": false,
                            "type": "bool"
                          },
                          "chroma_server_cors_allow_origins": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_cors_allow_origins",
                            "display_name": "Server CORS Allow Origins",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "chroma_server_grpc_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_grpc_port",
                            "display_name": "Server gRPC Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "chroma_server_host": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_host",
                            "display_name": "Server Host",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "chroma_server_http_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_http_port",
                            "display_name": "Server HTTP Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "chroma_server_ssl_enabled": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "chroma_server_ssl_enabled",
                            "display_name": "Server SSL Enabled",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "collection_name": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "studentsPG",
                            "name": "collection_name",
                            "display_name": "Collection Name",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "limit": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "limit",
                            "display_name": "Limit",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Limit the number of records to compare when Allow Duplicates is False.",
                            "title_case": false,
                            "type": "int"
                          },
                          "number_of_results": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "20",
                            "name": "number_of_results",
                            "display_name": "Number of Results",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of results to return.",
                            "title_case": false,
                            "type": "int"
                          },
                          "persist_directory": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "chroma",
                            "name": "persist_directory",
                            "display_name": "Persist Directory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "search_query": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "search_query",
                            "display_name": "Search Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "search_type": {
                            "trace_as_metadata": true,
                            "options": [
                              "Similarity",
                              "MMR"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Similarity",
                            "name": "search_type",
                            "display_name": "Search Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Chroma Vector Store with search capabilities",
                        "icon": "Chroma",
                        "base_classes": [
                          "Data",
                          "Retriever",
                          "VectorStore"
                        ],
                        "display_name": "Chroma DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Retriever"
                            ],
                            "selected": "Retriever",
                            "name": "base_retriever",
                            "display_name": "Retriever",
                            "method": "build_base_retriever",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "search_results",
                            "display_name": "Search Results",
                            "method": "search_documents",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "VectorStore"
                            ],
                            "selected": "VectorStore",
                            "name": "vector_store",
                            "display_name": "Vector Store",
                            "method": "cast_vector_store",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "collection_name",
                          "persist_directory",
                          "search_query",
                          "ingest_data",
                          "embedding",
                          "chroma_server_cors_allow_origins",
                          "chroma_server_host",
                          "chroma_server_http_port",
                          "chroma_server_grpc_port",
                          "chroma_server_ssl_enabled",
                          "allow_duplicates",
                          "search_type",
                          "number_of_results",
                          "limit"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "Chroma-XVwTG"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 644,
                    "positionAbsolute": {
                      "x": 3814.705505687377,
                      "y": -572.7848708624745
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "CohereEmbeddings-Pqrka",
                    "target": "Chroma-XVwTG",
                    "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Pqrkaœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                    "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-XVwTGœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "id": "reactflow__edge-CohereEmbeddings-Pqrka{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Pqrkaœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-XVwTG{œfieldNameœ:œembeddingœ,œidœ:œChroma-XVwTGœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "embedding",
                        "id": "Chroma-XVwTG",
                        "inputTypes": [
                          "Embeddings"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "CohereEmbeddings",
                        "id": "CohereEmbeddings-Pqrka",
                        "name": "embeddings",
                        "output_types": [
                          "Embeddings"
                        ]
                      }
                    },
                    "selected": true
                  },
                  {
                    "source": "Chroma-XVwTG",
                    "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-XVwTGœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                    "target": "ParseData-X4upI",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-X4upIœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-X4upI",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "Chroma",
                        "id": "Chroma-XVwTG",
                        "name": "search_results",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Chroma-XVwTG{œdataTypeœ:œChromaœ,œidœ:œChroma-XVwTGœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-X4upI{œfieldNameœ:œdataœ,œidœ:œParseData-X4upIœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Compassionate Mendel",
              "description": "",
              "id": "jMuUK"
            },
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "ParseData-X4upI_text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__",
                "proxy": {
                  "id": "ParseData-X4upI",
                  "name": "text",
                  "nodeDisplayName": "Parse Data"
                }
              },
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "Chroma-XVwTG_base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "name": "base_retriever",
                  "nodeDisplayName": "Chroma DB"
                }
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "Chroma-XVwTG_vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Chroma-XVwTG",
                  "name": "vector_store",
                  "nodeDisplayName": "Chroma DB"
                }
              }
            ],
            "frozen": true
          }
        },
        "id": "groupComponent-CaDgA",
        "position": {
          "x": 2895.2129757756115,
          "y": -1121.7326834735022
        },
        "type": "genericNode",
        "width": 384,
        "height": 588,
        "selected": false,
        "positionAbsolute": {
          "x": 2895.2129757756115,
          "y": -1121.7326834735022
        },
        "dragging": false
      },
      {
        "id": "ParseData-CvK4v",
        "type": "genericNode",
        "position": {
          "x": 2032.1624331247208,
          "y": -356.23749890146803
        },
        "data": {
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data",
          "id": "ParseData-CvK4v",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": true,
            "icon": "braces",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "display_name": "code"
              },
              "data": {
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{questions[1]}"
              }
            },
            "lf_version": "1.0.15"
          },
          "type": "ParseData"
        },
        "selected": false,
        "width": 384,
        "height": 370,
        "positionAbsolute": {
          "x": 2032.1624331247208,
          "y": -356.23749890146803
        },
        "dragging": false
      },
      {
        "id": "GroupNode-FIUOi",
        "type": "genericNode",
        "position": {
          "x": 2860.280779670283,
          "y": -479.8994504209769
        },
        "data": {
          "id": "GroupNode-FIUOi",
          "type": "GroupNode",
          "node": {
            "display_name": "Group",
            "documentation": "",
            "description": "",
            "template": {
              "code_ParseData-X4upI": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-Jkm1W",
                  "field": "code"
                }
              },
              "sep_ParseData-X4upI": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n",
                "proxy": {
                  "id": "ParseData-Jkm1W",
                  "field": "sep"
                }
              },
              "template_ParseData-X4upI": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}",
                "proxy": {
                  "id": "ParseData-Jkm1W",
                  "field": "template"
                }
              },
              "code_CohereEmbeddings-Pqrka": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "CohereEmbeddings-WNHiI",
                  "field": "code"
                }
              },
              "cohere_api_key_CohereEmbeddings-Pqrka": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "cohere_api_key",
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-WNHiI",
                  "field": "cohere_api_key"
                }
              },
              "max_retries_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 3,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "CohereEmbeddings-WNHiI",
                  "field": "max_retries"
                }
              },
              "model_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "options": [
                  "embed-english-v2.0",
                  "embed-multilingual-v2.0",
                  "embed-english-light-v2.0",
                  "embed-multilingual-light-v2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "embed-english-v2.0",
                "name": "model",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-WNHiI",
                  "field": "model"
                }
              },
              "request_timeout_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "proxy": {
                  "id": "CohereEmbeddings-WNHiI",
                  "field": "request_timeout"
                }
              },
              "truncate_CohereEmbeddings-Pqrka": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "truncate",
                "display_name": "Truncate",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-WNHiI",
                  "field": "truncate"
                }
              },
              "user_agent_CohereEmbeddings-Pqrka": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "langchain",
                "name": "user_agent",
                "display_name": "User Agent",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-WNHiI",
                  "field": "user_agent"
                }
              },
              "ingest_data_Chroma-XVwTG": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ingest_data",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "ingest_data"
                }
              },
              "allow_duplicates_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "allow_duplicates",
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "allow_duplicates"
                }
              },
              "chroma_server_cors_allow_origins_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "chroma_server_cors_allow_origins"
                }
              },
              "chroma_server_grpc_port_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "chroma_server_grpc_port"
                }
              },
              "chroma_server_host_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "chroma_server_host"
                }
              },
              "chroma_server_http_port_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_http_port",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "chroma_server_http_port"
                }
              },
              "chroma_server_ssl_enabled_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "chroma_server_ssl_enabled"
                }
              },
              "code_Chroma-XVwTG": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "code"
                }
              },
              "collection_name_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "studentsPG",
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "collection_name"
                }
              },
              "limit_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "limit",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "limit"
                }
              },
              "number_of_results_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "20",
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "number_of_results"
                }
              },
              "persist_directory_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "chroma",
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "persist_directory"
                }
              },
              "search_query_Chroma-XVwTG": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "search_query"
                }
              },
              "search_type_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Similarity",
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "field": "search_type"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "ParseData-Jkm1W",
                    "type": "genericNode",
                    "position": {
                      "x": 4432.929881068778,
                      "y": -214.5959275243507
                    },
                    "data": {
                      "description": "Convert Data into plain text following a specified template.",
                      "display_name": "Parse Data",
                      "id": "ParseData-Jkm1W",
                      "node": {
                        "base_classes": [
                          "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "frozen": false,
                        "icon": "braces",
                        "output_types": [],
                        "outputs": [
                          {
                            "cache": true,
                            "display_name": "Text",
                            "method": "parse_data",
                            "name": "text",
                            "selected": "Message",
                            "types": [
                              "Message"
                            ],
                            "value": "__UNDEFINED__"
                          }
                        ],
                        "pinned": false,
                        "template": {
                          "_type": "Component",
                          "code": {
                            "advanced": true,
                            "dynamic": true,
                            "fileTypes": [],
                            "file_path": "",
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "code",
                            "password": false,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "code",
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                            "display_name": "code"
                          },
                          "data": {
                            "advanced": false,
                            "display_name": "Data",
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "input_types": [
                              "Data"
                            ],
                            "list": false,
                            "name": "data",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "other",
                            "value": ""
                          },
                          "sep": {
                            "advanced": true,
                            "display_name": "Separator",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "name": "sep",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "\n"
                          },
                          "template": {
                            "advanced": false,
                            "display_name": "Template",
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "template",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "{text}"
                          }
                        }
                      },
                      "type": "ParseData"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 370,
                    "positionAbsolute": {
                      "x": 4432.929881068778,
                      "y": -214.5959275243507
                    },
                    "dragging": false
                  },
                  {
                    "id": "CohereEmbeddings-WNHiI",
                    "type": "genericNode",
                    "position": {
                      "x": 3341.045722004871,
                      "y": -129.85073731937803
                    },
                    "data": {
                      "type": "CohereEmbeddings",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "cohere_api_key": {
                            "load_from_db": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "COHERE_API_KEY",
                            "name": "cohere_api_key",
                            "display_name": "Cohere API Key",
                            "advanced": false,
                            "input_types": [],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str"
                          },
                          "max_retries": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": 3,
                            "name": "max_retries",
                            "display_name": "Max Retries",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "model": {
                            "trace_as_metadata": true,
                            "options": [
                              "embed-english-v2.0",
                              "embed-multilingual-v2.0",
                              "embed-english-light-v2.0",
                              "embed-multilingual-light-v2.0"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "embed-english-v2.0",
                            "name": "model",
                            "display_name": "Model",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "request_timeout": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "request_timeout",
                            "display_name": "Request Timeout",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "float"
                          },
                          "truncate": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "truncate",
                            "display_name": "Truncate",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "user_agent": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "langchain",
                            "name": "user_agent",
                            "display_name": "User Agent",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Generate embeddings using Cohere models.",
                        "icon": "Cohere",
                        "base_classes": [
                          "Embeddings"
                        ],
                        "display_name": "Cohere Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Embeddings"
                            ],
                            "selected": "Embeddings",
                            "name": "embeddings",
                            "display_name": "Embeddings",
                            "method": "build_embeddings",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "cohere_api_key",
                          "model",
                          "truncate",
                          "max_retries",
                          "user_agent",
                          "request_timeout"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "CohereEmbeddings-WNHiI"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 294,
                    "positionAbsolute": {
                      "x": 3341.045722004871,
                      "y": -129.85073731937803
                    },
                    "dragging": false
                  },
                  {
                    "id": "Chroma-lDnGy",
                    "type": "genericNode",
                    "position": {
                      "x": 3814.705505687377,
                      "y": -572.7848708624745
                    },
                    "data": {
                      "type": "Chroma",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "embedding": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "embedding",
                            "display_name": "Embedding",
                            "advanced": false,
                            "input_types": [
                              "Embeddings"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other"
                          },
                          "ingest_data": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "list": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "ingest_data",
                            "display_name": "Ingest Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other"
                          },
                          "allow_duplicates": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "allow_duplicates",
                            "display_name": "Allow Duplicates",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If false, will not add documents that are already in the Vector Store.",
                            "title_case": false,
                            "type": "bool"
                          },
                          "chroma_server_cors_allow_origins": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_cors_allow_origins",
                            "display_name": "Server CORS Allow Origins",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "chroma_server_grpc_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_grpc_port",
                            "display_name": "Server gRPC Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "chroma_server_host": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_host",
                            "display_name": "Server Host",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "chroma_server_http_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_http_port",
                            "display_name": "Server HTTP Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "chroma_server_ssl_enabled": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "chroma_server_ssl_enabled",
                            "display_name": "Server SSL Enabled",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "collection_name": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "studentsPG",
                            "name": "collection_name",
                            "display_name": "Collection Name",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "limit": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "limit",
                            "display_name": "Limit",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Limit the number of records to compare when Allow Duplicates is False.",
                            "title_case": false,
                            "type": "int"
                          },
                          "number_of_results": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "20",
                            "name": "number_of_results",
                            "display_name": "Number of Results",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of results to return.",
                            "title_case": false,
                            "type": "int"
                          },
                          "persist_directory": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "chroma",
                            "name": "persist_directory",
                            "display_name": "Persist Directory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "search_query": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "search_query",
                            "display_name": "Search Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "search_type": {
                            "trace_as_metadata": true,
                            "options": [
                              "Similarity",
                              "MMR"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Similarity",
                            "name": "search_type",
                            "display_name": "Search Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Chroma Vector Store with search capabilities",
                        "icon": "Chroma",
                        "base_classes": [
                          "Data",
                          "Retriever",
                          "VectorStore"
                        ],
                        "display_name": "Chroma DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Retriever"
                            ],
                            "selected": "Retriever",
                            "name": "base_retriever",
                            "display_name": "Retriever",
                            "method": "build_base_retriever",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "search_results",
                            "display_name": "Search Results",
                            "method": "search_documents",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "VectorStore"
                            ],
                            "selected": "VectorStore",
                            "name": "vector_store",
                            "display_name": "Vector Store",
                            "method": "cast_vector_store",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "collection_name",
                          "persist_directory",
                          "search_query",
                          "ingest_data",
                          "embedding",
                          "chroma_server_cors_allow_origins",
                          "chroma_server_host",
                          "chroma_server_http_port",
                          "chroma_server_grpc_port",
                          "chroma_server_ssl_enabled",
                          "allow_duplicates",
                          "search_type",
                          "number_of_results",
                          "limit"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "Chroma-lDnGy"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 644,
                    "positionAbsolute": {
                      "x": 3814.705505687377,
                      "y": -572.7848708624745
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "CohereEmbeddings-WNHiI",
                    "target": "Chroma-lDnGy",
                    "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-WNHiIœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                    "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-lDnGyœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "id": "reactflow__edge-CohereEmbeddings-WNHiI{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-WNHiIœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-lDnGy{œfieldNameœ:œembeddingœ,œidœ:œChroma-lDnGyœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "embedding",
                        "id": "Chroma-lDnGy",
                        "inputTypes": [
                          "Embeddings"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "CohereEmbeddings",
                        "id": "CohereEmbeddings-WNHiI",
                        "name": "embeddings",
                        "output_types": [
                          "Embeddings"
                        ]
                      }
                    },
                    "selected": true
                  },
                  {
                    "source": "Chroma-lDnGy",
                    "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-lDnGyœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                    "target": "ParseData-Jkm1W",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Jkm1Wœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-Jkm1W",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "Chroma",
                        "id": "Chroma-lDnGy",
                        "name": "search_results",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Chroma-lDnGy{œdataTypeœ:œChromaœ,œidœ:œChroma-lDnGyœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-Jkm1W{œfieldNameœ:œdataœ,œidœ:œParseData-Jkm1Wœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Compassionate Mendel",
              "description": "",
              "id": "jMuUK"
            },
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "ParseData-X4upI_text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__",
                "proxy": {
                  "id": "ParseData-Jkm1W",
                  "name": "text",
                  "nodeDisplayName": "Parse Data"
                }
              },
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "Chroma-XVwTG_base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "name": "base_retriever",
                  "nodeDisplayName": "Chroma DB"
                }
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "Chroma-XVwTG_vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Chroma-lDnGy",
                  "name": "vector_store",
                  "nodeDisplayName": "Chroma DB"
                }
              }
            ],
            "frozen": true
          }
        },
        "selected": false,
        "width": 384,
        "height": 588,
        "positionAbsolute": {
          "x": 2860.280779670283,
          "y": -479.8994504209769
        },
        "dragging": false
      },
      {
        "id": "GroupNode-b3FYT",
        "type": "genericNode",
        "position": {
          "x": 2860.2098560436057,
          "y": 128.61605560883186
        },
        "data": {
          "id": "GroupNode-b3FYT",
          "type": "GroupNode",
          "node": {
            "display_name": "Group",
            "documentation": "",
            "description": "",
            "template": {
              "code_ParseData-X4upI": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-AYPSs",
                  "field": "code"
                }
              },
              "sep_ParseData-X4upI": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n",
                "proxy": {
                  "id": "ParseData-AYPSs",
                  "field": "sep"
                }
              },
              "template_ParseData-X4upI": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}",
                "proxy": {
                  "id": "ParseData-AYPSs",
                  "field": "template"
                }
              },
              "code_CohereEmbeddings-Pqrka": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "CohereEmbeddings-z8aXd",
                  "field": "code"
                }
              },
              "cohere_api_key_CohereEmbeddings-Pqrka": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "cohere_api_key",
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-z8aXd",
                  "field": "cohere_api_key"
                }
              },
              "max_retries_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 3,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "CohereEmbeddings-z8aXd",
                  "field": "max_retries"
                }
              },
              "model_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "options": [
                  "embed-english-v2.0",
                  "embed-multilingual-v2.0",
                  "embed-english-light-v2.0",
                  "embed-multilingual-light-v2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "embed-english-v2.0",
                "name": "model",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-z8aXd",
                  "field": "model"
                }
              },
              "request_timeout_CohereEmbeddings-Pqrka": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "proxy": {
                  "id": "CohereEmbeddings-z8aXd",
                  "field": "request_timeout"
                }
              },
              "truncate_CohereEmbeddings-Pqrka": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "truncate",
                "display_name": "Truncate",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-z8aXd",
                  "field": "truncate"
                }
              },
              "user_agent_CohereEmbeddings-Pqrka": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "langchain",
                "name": "user_agent",
                "display_name": "User Agent",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "CohereEmbeddings-z8aXd",
                  "field": "user_agent"
                }
              },
              "ingest_data_Chroma-XVwTG": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ingest_data",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "ingest_data"
                }
              },
              "allow_duplicates_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "allow_duplicates",
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "allow_duplicates"
                }
              },
              "chroma_server_cors_allow_origins_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "chroma_server_cors_allow_origins"
                }
              },
              "chroma_server_grpc_port_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "chroma_server_grpc_port"
                }
              },
              "chroma_server_host_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "chroma_server_host"
                }
              },
              "chroma_server_http_port_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_http_port",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "chroma_server_http_port"
                }
              },
              "chroma_server_ssl_enabled_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "chroma_server_ssl_enabled"
                }
              },
              "code_Chroma-XVwTG": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "code"
                }
              },
              "collection_name_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "studentsPG",
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "collection_name"
                }
              },
              "limit_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "limit",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "limit"
                }
              },
              "number_of_results_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "20",
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "number_of_results"
                }
              },
              "persist_directory_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "chroma",
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "persist_directory"
                }
              },
              "search_query_Chroma-XVwTG": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "search_query"
                }
              },
              "search_type_Chroma-XVwTG": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Similarity",
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Chroma-dZ173",
                  "field": "search_type"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "ParseData-AYPSs",
                    "type": "genericNode",
                    "position": {
                      "x": 4432.929881068778,
                      "y": -214.5959275243507
                    },
                    "data": {
                      "description": "Convert Data into plain text following a specified template.",
                      "display_name": "Parse Data",
                      "id": "ParseData-AYPSs",
                      "node": {
                        "base_classes": [
                          "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "frozen": false,
                        "icon": "braces",
                        "output_types": [],
                        "outputs": [
                          {
                            "cache": true,
                            "display_name": "Text",
                            "method": "parse_data",
                            "name": "text",
                            "selected": "Message",
                            "types": [
                              "Message"
                            ],
                            "value": "__UNDEFINED__"
                          }
                        ],
                        "pinned": false,
                        "template": {
                          "_type": "Component",
                          "code": {
                            "advanced": true,
                            "dynamic": true,
                            "fileTypes": [],
                            "file_path": "",
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "code",
                            "password": false,
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "type": "code",
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                            "display_name": "code"
                          },
                          "data": {
                            "advanced": false,
                            "display_name": "Data",
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "input_types": [
                              "Data"
                            ],
                            "list": false,
                            "name": "data",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "other",
                            "value": ""
                          },
                          "sep": {
                            "advanced": true,
                            "display_name": "Separator",
                            "dynamic": false,
                            "info": "",
                            "list": false,
                            "load_from_db": false,
                            "name": "sep",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "\n"
                          },
                          "template": {
                            "advanced": false,
                            "display_name": "Template",
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "input_types": [
                              "Message"
                            ],
                            "list": false,
                            "load_from_db": false,
                            "multiline": true,
                            "name": "template",
                            "placeholder": "",
                            "required": false,
                            "show": true,
                            "title_case": false,
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": "{text}"
                          }
                        }
                      },
                      "type": "ParseData"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 370,
                    "positionAbsolute": {
                      "x": 4432.929881068778,
                      "y": -214.5959275243507
                    },
                    "dragging": false
                  },
                  {
                    "id": "CohereEmbeddings-z8aXd",
                    "type": "genericNode",
                    "position": {
                      "x": 3341.045722004871,
                      "y": -129.85073731937803
                    },
                    "data": {
                      "type": "CohereEmbeddings",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "cohere_api_key": {
                            "load_from_db": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "COHERE_API_KEY",
                            "name": "cohere_api_key",
                            "display_name": "Cohere API Key",
                            "advanced": false,
                            "input_types": [],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str"
                          },
                          "max_retries": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": 3,
                            "name": "max_retries",
                            "display_name": "Max Retries",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "model": {
                            "trace_as_metadata": true,
                            "options": [
                              "embed-english-v2.0",
                              "embed-multilingual-v2.0",
                              "embed-english-light-v2.0",
                              "embed-multilingual-light-v2.0"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "embed-english-v2.0",
                            "name": "model",
                            "display_name": "Model",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "request_timeout": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "request_timeout",
                            "display_name": "Request Timeout",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "float"
                          },
                          "truncate": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "truncate",
                            "display_name": "Truncate",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "user_agent": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "langchain",
                            "name": "user_agent",
                            "display_name": "User Agent",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Generate embeddings using Cohere models.",
                        "icon": "Cohere",
                        "base_classes": [
                          "Embeddings"
                        ],
                        "display_name": "Cohere Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Embeddings"
                            ],
                            "selected": "Embeddings",
                            "name": "embeddings",
                            "display_name": "Embeddings",
                            "method": "build_embeddings",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "cohere_api_key",
                          "model",
                          "truncate",
                          "max_retries",
                          "user_agent",
                          "request_timeout"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "CohereEmbeddings-z8aXd"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 294,
                    "positionAbsolute": {
                      "x": 3341.045722004871,
                      "y": -129.85073731937803
                    },
                    "dragging": false
                  },
                  {
                    "id": "Chroma-dZ173",
                    "type": "genericNode",
                    "position": {
                      "x": 3814.705505687377,
                      "y": -572.7848708624745
                    },
                    "data": {
                      "type": "Chroma",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "embedding": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "embedding",
                            "display_name": "Embedding",
                            "advanced": false,
                            "input_types": [
                              "Embeddings"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other"
                          },
                          "ingest_data": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "list": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "ingest_data",
                            "display_name": "Ingest Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other"
                          },
                          "allow_duplicates": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "allow_duplicates",
                            "display_name": "Allow Duplicates",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If false, will not add documents that are already in the Vector Store.",
                            "title_case": false,
                            "type": "bool"
                          },
                          "chroma_server_cors_allow_origins": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_cors_allow_origins",
                            "display_name": "Server CORS Allow Origins",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "chroma_server_grpc_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_grpc_port",
                            "display_name": "Server gRPC Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "chroma_server_host": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_host",
                            "display_name": "Server Host",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "chroma_server_http_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "chroma_server_http_port",
                            "display_name": "Server HTTP Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int"
                          },
                          "chroma_server_ssl_enabled": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "chroma_server_ssl_enabled",
                            "display_name": "Server SSL Enabled",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "collection_name": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "studentsPG",
                            "name": "collection_name",
                            "display_name": "Collection Name",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "limit": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "limit",
                            "display_name": "Limit",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Limit the number of records to compare when Allow Duplicates is False.",
                            "title_case": false,
                            "type": "int"
                          },
                          "number_of_results": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "20",
                            "name": "number_of_results",
                            "display_name": "Number of Results",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of results to return.",
                            "title_case": false,
                            "type": "int"
                          },
                          "persist_directory": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "chroma",
                            "name": "persist_directory",
                            "display_name": "Persist Directory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "search_query": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "search_query",
                            "display_name": "Search Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          },
                          "search_type": {
                            "trace_as_metadata": true,
                            "options": [
                              "Similarity",
                              "MMR"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Similarity",
                            "name": "search_type",
                            "display_name": "Search Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Chroma Vector Store with search capabilities",
                        "icon": "Chroma",
                        "base_classes": [
                          "Data",
                          "Retriever",
                          "VectorStore"
                        ],
                        "display_name": "Chroma DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Retriever"
                            ],
                            "selected": "Retriever",
                            "name": "base_retriever",
                            "display_name": "Retriever",
                            "method": "build_base_retriever",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "search_results",
                            "display_name": "Search Results",
                            "method": "search_documents",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "VectorStore"
                            ],
                            "selected": "VectorStore",
                            "name": "vector_store",
                            "display_name": "Vector Store",
                            "method": "cast_vector_store",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "collection_name",
                          "persist_directory",
                          "search_query",
                          "ingest_data",
                          "embedding",
                          "chroma_server_cors_allow_origins",
                          "chroma_server_host",
                          "chroma_server_http_port",
                          "chroma_server_grpc_port",
                          "chroma_server_ssl_enabled",
                          "allow_duplicates",
                          "search_type",
                          "number_of_results",
                          "limit"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "Chroma-dZ173"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 644,
                    "positionAbsolute": {
                      "x": 3814.705505687377,
                      "y": -572.7848708624745
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "CohereEmbeddings-z8aXd",
                    "target": "Chroma-dZ173",
                    "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-z8aXdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                    "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-dZ173œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "id": "reactflow__edge-CohereEmbeddings-z8aXd{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-z8aXdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-dZ173{œfieldNameœ:œembeddingœ,œidœ:œChroma-dZ173œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "embedding",
                        "id": "Chroma-dZ173",
                        "inputTypes": [
                          "Embeddings"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "CohereEmbeddings",
                        "id": "CohereEmbeddings-z8aXd",
                        "name": "embeddings",
                        "output_types": [
                          "Embeddings"
                        ]
                      }
                    },
                    "selected": true
                  },
                  {
                    "source": "Chroma-dZ173",
                    "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-dZ173œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                    "target": "ParseData-AYPSs",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-AYPSsœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-AYPSs",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "Chroma",
                        "id": "Chroma-dZ173",
                        "name": "search_results",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Chroma-dZ173{œdataTypeœ:œChromaœ,œidœ:œChroma-dZ173œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-AYPSs{œfieldNameœ:œdataœ,œidœ:œParseData-AYPSsœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Compassionate Mendel",
              "description": "",
              "id": "jMuUK"
            },
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "ParseData-X4upI_text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__",
                "proxy": {
                  "id": "ParseData-AYPSs",
                  "name": "text",
                  "nodeDisplayName": "Parse Data"
                }
              },
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "Chroma-XVwTG_base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Chroma-dZ173",
                  "name": "base_retriever",
                  "nodeDisplayName": "Chroma DB"
                }
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "Chroma-XVwTG_vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Chroma-dZ173",
                  "name": "vector_store",
                  "nodeDisplayName": "Chroma DB"
                }
              }
            ],
            "frozen": true
          }
        },
        "selected": false,
        "width": 384,
        "height": 588,
        "positionAbsolute": {
          "x": 2860.2098560436057,
          "y": 128.61605560883186
        },
        "dragging": false
      },
      {
        "id": "ParseData-Xg6Hg",
        "type": "genericNode",
        "position": {
          "x": 2004.8596240323482,
          "y": 120.57002248979052
        },
        "data": {
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data",
          "id": "ParseData-Xg6Hg",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": true,
            "icon": "braces",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "display_name": "code"
              },
              "data": {
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{questions[2]}"
              }
            },
            "lf_version": "1.0.15"
          },
          "type": "ParseData"
        },
        "selected": false,
        "width": 384,
        "height": 370,
        "positionAbsolute": {
          "x": 2004.8596240323482,
          "y": 120.57002248979052
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-dqw4K",
        "type": "genericNode",
        "position": {
          "x": 4540.089091849336,
          "y": 209.2099633686795
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": {},
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "OpenAIModel-dqw4K"
        },
        "selected": false,
        "width": 384,
        "height": 593,
        "positionAbsolute": {
          "x": 4540.089091849336,
          "y": 209.2099633686795
        },
        "dragging": false
      },
      {
        "id": "ParseData-ZPdKz",
        "type": "genericNode",
        "position": {
          "x": 3537.062965025643,
          "y": -1994.9688443473237
        },
        "data": {
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data",
          "id": "ParseData-ZPdKz",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "display_name": "code"
              },
              "data": {
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              }
            }
          },
          "type": "ParseData"
        },
        "selected": false,
        "width": 384,
        "height": 370,
        "positionAbsolute": {
          "x": 3537.062965025643,
          "y": -1994.9688443473237
        },
        "dragging": false
      },
      {
        "id": "CohereEmbeddings-hqRLz",
        "type": "genericNode",
        "position": {
          "x": 2445.178805961736,
          "y": -1910.2236541423513
        },
        "data": {
          "type": "CohereEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "cohere_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "cohere_api_key",
                "display_name": "Cohere API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "max_retries": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 3,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "embed-english-v2.0",
                  "embed-multilingual-v2.0",
                  "embed-english-light-v2.0",
                  "embed-multilingual-light-v2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "embed-english-v2.0",
                "name": "model",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "request_timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float"
              },
              "truncate": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "truncate",
                "display_name": "Truncate",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "user_agent": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "langchain",
                "name": "user_agent",
                "display_name": "User Agent",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Generate embeddings using Cohere models.",
            "icon": "Cohere",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Cohere Embeddings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "cohere_api_key",
              "model",
              "truncate",
              "max_retries",
              "user_agent",
              "request_timeout"
            ],
            "beta": false,
            "edited": false
          },
          "id": "CohereEmbeddings-hqRLz"
        },
        "selected": false,
        "width": 384,
        "height": 294,
        "positionAbsolute": {
          "x": 2445.178805961736,
          "y": -1910.2236541423513
        },
        "dragging": false
      },
      {
        "id": "Chroma-cv2Lj",
        "type": "genericNode",
        "position": {
          "x": 2918.838589644242,
          "y": -2353.157787685447
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other"
              },
              "ingest_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ingest_data",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other"
              },
              "allow_duplicates": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "allow_duplicates",
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool"
              },
              "chroma_server_cors_allow_origins": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "chroma_server_grpc_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "chroma_server_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "chroma_server_http_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_http_port",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "chroma_server_ssl_enabled": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "collection_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "studentsPG",
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "limit": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "limit",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "20",
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int"
              },
              "persist_directory": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "chroma",
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "search_type": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Similarity",
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Chroma Vector Store with search capabilities",
            "icon": "Chroma",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Chroma DB",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "collection_name",
              "persist_directory",
              "search_query",
              "ingest_data",
              "embedding",
              "chroma_server_cors_allow_origins",
              "chroma_server_host",
              "chroma_server_http_port",
              "chroma_server_grpc_port",
              "chroma_server_ssl_enabled",
              "allow_duplicates",
              "search_type",
              "number_of_results",
              "limit"
            ],
            "beta": false,
            "edited": false
          },
          "id": "Chroma-cv2Lj"
        },
        "selected": false,
        "width": 384,
        "height": 644,
        "positionAbsolute": {
          "x": 2918.838589644242,
          "y": -2353.157787685447
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "File",
            "id": "File-frVxt",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data_inputs",
            "id": "SplitText-o2OxT",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-File-frVxt{œdataTypeœ:œFileœ,œidœ:œFile-frVxtœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-o2OxT{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-o2OxTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "source": "File-frVxt",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-frVxtœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SplitText-o2OxT",
        "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-o2OxTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false
      },
      {
        "source": "SplitText-o2OxT",
        "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-o2OxTœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
        "target": "Chroma-GtCuF",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "Chroma-GtCuF",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SplitText",
            "id": "SplitText-o2OxT",
            "name": "chunks",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-SplitText-o2OxT{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-o2OxTœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-Chroma-GtCuF{œfieldNameœ:œingest_dataœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "CohereEmbeddings-ImD4Q",
        "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-ImD4Qœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Chroma-GtCuF",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-GtCuF",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CohereEmbeddings",
            "id": "CohereEmbeddings-ImD4Q",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-CohereEmbeddings-ImD4Q{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-ImD4Qœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-GtCuF{œfieldNameœ:œembeddingœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "ChatInput-P7ZSI",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-1v8ts",
        "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-1v8tsœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "question",
            "id": "Prompt-1v8ts",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-P7ZSI",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-P7ZSI{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-1v8ts{œfieldNameœ:œquestionœ,œidœ:œPrompt-1v8tsœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-1v8ts",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-1v8tsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-X3dW2",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-X3dW2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-X3dW2",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-1v8ts",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-1v8ts{œdataTypeœ:œPromptœ,œidœ:œPrompt-1v8tsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-X3dW2{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-X3dW2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-X3dW2",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-X3dW2œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "AnthropicModel-a2b9r",
        "targetHandle": "{œfieldNameœ:œjson_stringœ,œidœ:œAnthropicModel-a2b9rœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "json_string",
            "id": "AnthropicModel-a2b9r",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-X3dW2",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-X3dW2{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-X3dW2œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-AnthropicModel-a2b9r{œfieldNameœ:œjson_stringœ,œidœ:œAnthropicModel-a2b9rœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "AnthropicModel-a2b9r",
        "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-HND0N",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-HND0Nœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-HND0N",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-a2b9r",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-AnthropicModel-a2b9r{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-HND0N{œfieldNameœ:œdataœ,œidœ:œParseData-HND0Nœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-HND0N",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-HND0Nœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "groupComponent-CaDgA",
        "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œgroupComponent-CaDgAœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-XVwTGœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query_Chroma-XVwTG",
            "id": "groupComponent-CaDgA",
            "inputTypes": [
              "Message"
            ],
            "proxy": {
              "field": "search_query",
              "id": "Chroma-XVwTG"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-HND0N",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-HND0N{œdataTypeœ:œParseDataœ,œidœ:œParseData-HND0Nœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-groupComponent-CaDgA{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œgroupComponent-CaDgAœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-XVwTGœ},œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "groupComponent-CaDgA",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-CaDgAœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-ipfIy",
        "targetHandle": "{œfieldNameœ:œcontext_1œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "context_1",
            "id": "Prompt-ipfIy",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "groupComponent-CaDgA",
            "name": "ParseData-X4upI_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-groupComponent-CaDgA{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-CaDgAœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œcontext_1œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-CvK4v",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-CvK4vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "GroupNode-FIUOi",
        "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-FIUOiœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-lDnGyœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query_Chroma-XVwTG",
            "id": "GroupNode-FIUOi",
            "inputTypes": [
              "Message"
            ],
            "proxy": {
              "field": "search_query",
              "id": "Chroma-lDnGy"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-CvK4v",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-CvK4v{œdataTypeœ:œParseDataœ,œidœ:œParseData-CvK4vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GroupNode-FIUOi{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-FIUOiœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-lDnGyœ},œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "AnthropicModel-a2b9r",
        "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-CvK4v",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-CvK4vœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-CvK4v",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-a2b9r",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-AnthropicModel-a2b9r{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-CvK4v{œfieldNameœ:œdataœ,œidœ:œParseData-CvK4vœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "GroupNode-FIUOi",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-FIUOiœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-ipfIy",
        "targetHandle": "{œfieldNameœ:œcontext_2œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "context_2",
            "id": "Prompt-ipfIy",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "GroupNode-FIUOi",
            "name": "ParseData-X4upI_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-GroupNode-FIUOi{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-FIUOiœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œcontext_2œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "AnthropicModel-a2b9r",
        "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-Xg6Hg",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Xg6Hgœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-Xg6Hg",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-a2b9r",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-AnthropicModel-a2b9r{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-Xg6Hg{œfieldNameœ:œdataœ,œidœ:œParseData-Xg6Hgœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-Xg6Hg",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Xg6Hgœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "GroupNode-b3FYT",
        "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-b3FYTœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-dZ173œ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query_Chroma-XVwTG",
            "id": "GroupNode-b3FYT",
            "inputTypes": [
              "Message"
            ],
            "proxy": {
              "field": "search_query",
              "id": "Chroma-dZ173"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Xg6Hg",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-Xg6Hg{œdataTypeœ:œParseDataœ,œidœ:œParseData-Xg6Hgœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GroupNode-b3FYT{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-b3FYTœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-dZ173œ},œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "GroupNode-b3FYT",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-b3FYTœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-ipfIy",
        "targetHandle": "{œfieldNameœ:œcontext_3œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "context_3",
            "id": "Prompt-ipfIy",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "GroupNode-b3FYT",
            "name": "ParseData-X4upI_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-GroupNode-b3FYT{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-b3FYTœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œcontext_3œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "ChatInput-P7ZSI",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-ipfIy",
        "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "question",
            "id": "Prompt-ipfIy",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-P7ZSI",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-P7ZSI{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œquestionœ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Prompt-ipfIy",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-ipfIyœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-dqw4K",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-dqw4Kœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-dqw4K",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-ipfIy",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-ipfIy{œdataTypeœ:œPromptœ,œidœ:œPrompt-ipfIyœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-dqw4K{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-dqw4Kœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-dqw4K",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-dqw4Kœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-LAi2A",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-LAi2Aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-LAi2A",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-dqw4K",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-dqw4K{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-dqw4Kœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-LAi2A{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-LAi2Aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "CohereEmbeddings-hqRLz",
        "target": "Chroma-cv2Lj",
        "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-hqRLzœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-cv2Ljœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CohereEmbeddings-hqRLz{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-hqRLzœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-cv2Lj{œfieldNameœ:œembeddingœ,œidœ:œChroma-cv2Ljœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-cv2Lj",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CohereEmbeddings",
            "id": "CohereEmbeddings-hqRLz",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Chroma-cv2Lj",
        "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-cv2Ljœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-ZPdKz",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-ZPdKzœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-ZPdKz",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Chroma",
            "id": "Chroma-cv2Lj",
            "name": "search_results",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-Chroma-cv2Lj{œdataTypeœ:œChromaœ,œidœ:œChroma-cv2Ljœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-ZPdKz{œfieldNameœ:œdataœ,œidœ:œParseData-ZPdKzœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "className": ""
      }
    ],
    "viewport": {
      "x": -574.7829446097835,
      "y": 98.50497154374301,
      "zoom": 0.3087937054523855
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "SplitText": {
      "count": 1
    },
    "File": {
      "count": 1
    },
    "CohereEmbeddings": {
      "count": 2
    },
    "Chroma": {
      "count": 2
    },
    "Prompt": {
      "count": 2
    },
    "OpenAIModel": {
      "count": 2
    },
    "AnthropicModel": {
      "count": 1
    },
    "ParseData": {
      "count": 4
    },
    "groupComponent": {
      "count": 1
    },
    "GroupNode": {
      "count": 2
    },
    "total": 20
  },
  "original": {
    "id": "1fc608e3-5178-4abf-b2c6-cbcf0e222af3",
    "name": "RAG - Multi Query",
    "description": "This project gives you both Ingestion and RAG in a single file. This implements a Multi-query strategy where a query from the user is converted to multiple queries and each query is used to pull documents from the vector store. Final answer generation is based on all of the documents from the vector store.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the local Chroma DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data.",
    "is_component": false,
    "liked_by_count": "39",
    "downloads_count": "495",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "SplitText": {
        "count": 1
      },
      "File": {
        "count": 1
      },
      "CohereEmbeddings": {
        "count": 2
      },
      "Chroma": {
        "count": 2
      },
      "Prompt": {
        "count": 2
      },
      "OpenAIModel": {
        "count": 2
      },
      "AnthropicModel": {
        "count": 1
      },
      "ParseData": {
        "count": 4
      },
      "groupComponent": {
        "count": 1
      },
      "GroupNode": {
        "count": 2
      },
      "total": 20
    },
    "last_tested_version": "1.0.15",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "id": "ChatInput-P7ZSI",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "what is for students in a startup?",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": true,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "type": "ChatInput"
          },
          "dragging": false,
          "height": 294,
          "id": "ChatInput-P7ZSI",
          "position": {
            "x": -439.5679588272785,
            "y": 606.5786796456094
          },
          "positionAbsolute": {
            "x": -439.5679588272785,
            "y": 606.5786796456094
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "id": "ChatOutput-LAi2A",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "data_template",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "AI",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "type": "ChatOutput"
          },
          "dragging": false,
          "height": 294,
          "id": "ChatOutput-LAi2A",
          "position": {
            "x": 5166.101271597747,
            "y": 414.4619040278359
          },
          "positionAbsolute": {
            "x": 5166.101271597747,
            "y": 414.4619040278359
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Split text into chunks based on specified criteria.",
            "display_name": "Split Text",
            "id": "SplitText-o2OxT",
            "node": {
              "base_classes": [
                "Data"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Split text into chunks based on specified criteria.",
              "display_name": "Split Text",
              "documentation": "",
              "edited": false,
              "field_order": [
                "data_inputs",
                "chunk_overlap",
                "chunk_size",
                "separator"
              ],
              "frozen": false,
              "icon": "scissors-line-dashed",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Chunks",
                  "method": "split_text",
                  "name": "chunks",
                  "selected": "Data",
                  "types": [
                    "Data"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "chunk_overlap": {
                  "advanced": false,
                  "display_name": "Chunk Overlap",
                  "dynamic": false,
                  "info": "Number of characters to overlap between chunks.",
                  "list": false,
                  "name": "chunk_overlap",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": "200"
                },
                "chunk_size": {
                  "advanced": false,
                  "display_name": "Chunk Size",
                  "dynamic": false,
                  "info": "The maximum number of characters in each chunk.",
                  "list": false,
                  "name": "chunk_size",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "int",
                  "value": 1000
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n"
                },
                "data_inputs": {
                  "advanced": false,
                  "display_name": "Data Inputs",
                  "dynamic": false,
                  "info": "The data to split.",
                  "input_types": [
                    "Data"
                  ],
                  "list": true,
                  "name": "data_inputs",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "separator": {
                  "advanced": false,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "The character to split on. Defaults to newline.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "separator",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n"
                }
              },
              "lf_version": "1.0.15"
            },
            "type": "SplitText"
          },
          "dragging": false,
          "height": 542,
          "id": "SplitText-o2OxT",
          "position": {
            "x": 1951.3389446914757,
            "y": 1571.7518114338106
          },
          "positionAbsolute": {
            "x": 1951.3389446914757,
            "y": 1571.7518114338106
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "A generic file loader.",
            "display_name": "File",
            "id": "File-frVxt",
            "node": {
              "base_classes": [
                "Data"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "A generic file loader.",
              "display_name": "File",
              "documentation": "",
              "edited": false,
              "field_order": [
                "path",
                "silent_errors"
              ],
              "frozen": false,
              "icon": "file-text",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Data",
                  "method": "load_file",
                  "name": "data",
                  "selected": "Data",
                  "types": [
                    "Data"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n"
                },
                "path": {
                  "advanced": false,
                  "display_name": "Path",
                  "dynamic": false,
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "file_path": "edc48e5b-adff-4f1b-9d96-92b49e8f816c/A Student's Guide to Startups.pdf",
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "list": false,
                  "name": "path",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "file",
                  "value": ""
                },
                "silent_errors": {
                  "advanced": true,
                  "display_name": "Silent Errors",
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "list": false,
                  "name": "silent_errors",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": false
                }
              },
              "lf_version": "1.0.15"
            },
            "type": "File"
          },
          "dragging": false,
          "height": 294,
          "id": "File-frVxt",
          "position": {
            "x": 1370.0656893814248,
            "y": 1955.1711254148577
          },
          "positionAbsolute": {
            "x": 1370.0656893814248,
            "y": 1955.1711254148577
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "id": "CohereEmbeddings-ImD4Q",
          "type": "genericNode",
          "position": {
            "x": 1988.9355251476707,
            "y": 2203.33629533245
          },
          "data": {
            "type": "CohereEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "cohere_api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "cohere_api_key",
                  "display_name": "Cohere API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "max_retries": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 3,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "embed-english-v2.0",
                    "embed-multilingual-v2.0",
                    "embed-english-light-v2.0",
                    "embed-multilingual-light-v2.0"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "embed-english-v2.0",
                  "name": "model",
                  "display_name": "Model",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "request_timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float"
                },
                "truncate": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "truncate",
                  "display_name": "Truncate",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "user_agent": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "langchain",
                  "name": "user_agent",
                  "display_name": "User Agent",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Generate embeddings using Cohere models.",
              "icon": "Cohere",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "Cohere Embeddings",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "cohere_api_key",
                "model",
                "truncate",
                "max_retries",
                "user_agent",
                "request_timeout"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "CohereEmbeddings-ImD4Q"
          },
          "selected": false,
          "width": 384,
          "height": 294,
          "dragging": false,
          "positionAbsolute": {
            "x": 1988.9355251476707,
            "y": 2203.33629533245
          }
        },
        {
          "id": "Chroma-GtCuF",
          "type": "genericNode",
          "position": {
            "x": 2588.8438701001896,
            "y": 1776.2066134636489
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other"
                },
                "ingest_data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ingest_data",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other"
                },
                "allow_duplicates": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "allow_duplicates",
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool"
                },
                "chroma_server_cors_allow_origins": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "chroma_server_grpc_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "chroma_server_host": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "chroma_server_http_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_http_port",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "chroma_server_ssl_enabled": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "collection_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "studentsPG",
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "limit": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 10,
                  "name": "number_of_results",
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int"
                },
                "persist_directory": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "chroma",
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "search_query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "search_type": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Similarity",
                  "name": "search_type",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Chroma Vector Store with search capabilities",
              "icon": "Chroma",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Chroma DB",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "collection_name",
                "persist_directory",
                "search_query",
                "ingest_data",
                "embedding",
                "chroma_server_cors_allow_origins",
                "chroma_server_host",
                "chroma_server_http_port",
                "chroma_server_grpc_port",
                "chroma_server_ssl_enabled",
                "allow_duplicates",
                "search_type",
                "number_of_results",
                "limit"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "Chroma-GtCuF"
          },
          "selected": false,
          "width": 384,
          "height": 644,
          "dragging": false,
          "positionAbsolute": {
            "x": 2588.8438701001896,
            "y": 1776.2066134636489
          }
        },
        {
          "id": "Prompt-ipfIy",
          "type": "genericNode",
          "position": {
            "x": 3912.4378955190796,
            "y": 179.76547244164726
          },
          "data": {
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "id": "Prompt-ipfIy",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{context_1}\n\n{context_2}\n\n{context_3}\n\n---\n\nGiven the context above, answer the question as best as possible.\n\nQuestion: {question}\n\nAnswer: ",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "load_from_db": false
                },
                "question": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "question",
                  "display_name": "question",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "context_1": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context_1",
                  "display_name": "context_1",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "context_2": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context_2",
                  "display_name": "context_2",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "context_3": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context_3",
                  "display_name": "context_3",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "context_1",
                  "context_2",
                  "context_3",
                  "question"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": true,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "type": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 666,
          "positionAbsolute": {
            "x": 3912.4378955190796,
            "y": 179.76547244164726
          },
          "dragging": false
        },
        {
          "id": "Prompt-1v8ts",
          "type": "genericNode",
          "position": {
            "x": 159.46614357230055,
            "y": -185.27725014078914
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "You are an AI language model assistant. Your task is to generate 3 different versions of the given user question to retrieve relevant documents from a vector \ndatabase. By generating multiple perspectives on the user question, your goal is to help the user overcome some of the limitations of the distance-based similarity search. \nProvide these alternative questions separated by newlines. Original question: {question}\n\nYour response should be a json of just the 3 questions and nothing else",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                },
                "question": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "question",
                  "display_name": "question",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "question"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": true,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "Prompt-1v8ts"
          },
          "selected": false,
          "width": 384,
          "height": 408,
          "positionAbsolute": {
            "x": 159.46614357230055,
            "y": -185.27725014078914
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-X3dW2",
          "type": "genericNode",
          "position": {
            "x": 721.0687066846526,
            "y": -497.985013797009
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "json_mode",
                  "value": true,
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o-mini",
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-4",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gpt-4o-mini",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "output_schema",
                  "value": {},
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "seed",
                  "value": 1,
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": true,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "openai_api_base",
                "api_key",
                "temperature",
                "seed"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "OpenAIModel-X3dW2"
          },
          "selected": false,
          "width": 384,
          "height": 593,
          "positionAbsolute": {
            "x": 721.0687066846526,
            "y": -497.985013797009
          },
          "dragging": false
        },
        {
          "id": "AnthropicModel-a2b9r",
          "type": "genericNode",
          "position": {
            "x": 1273.776607250557,
            "y": -317.65861894275565
          },
          "data": {
            "type": "AnthropicModel",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Union, List\r\n\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageInput, Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass JSONToDataComponent(Component):\r\n    display_name = \"JSON to Data\"\r\n    description = \"Convert a JSON string to a Data object or a list of Data objects\"\r\n    icon = \"🔃\"\r\n\r\n    inputs = [\r\n        MessageInput(\r\n            name=\"json_string\",\r\n            display_name=\"JSON String\",\r\n            info=\"Enter a valid JSON string (object or array) to convert to a Data object or list of Data objects\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"data\", display_name=\"Data\", method=\"convert_json_to_data\"),\r\n    ]\r\n\r\n    def convert_json_to_data(self) -> Union[Data, List[Data]]:\r\n        try:\r\n            json_string = self.json_string.text\r\n\r\n            # Try to parse the JSON string\r\n            try:\r\n                parsed_data = json.loads(json_string)\r\n            except json.JSONDecodeError:\r\n                # If JSON parsing fails, try to evaluate it as a Python literal\r\n                import ast\r\n                parsed_data = ast.literal_eval(json_string)\r\n\r\n            # Check if the parsed data is a list\r\n            if isinstance(parsed_data, list):\r\n                result = [Data(data=item) for item in parsed_data]\r\n            else:\r\n                result = Data(data=parsed_data)\r\n\r\n            self.status = result\r\n            return result\r\n\r\n        except (json.JSONDecodeError, SyntaxError, ValueError) as e:\r\n            error_message = f\"Invalid JSON or Python literal: {str(e)}\"\r\n            error_data = Data(data={\"error\": error_message})\r\n            self.status = error_data\r\n            return error_data\r\n\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            error_data = Data(data={\"error\": error_message})\r\n            self.status = error_data\r\n            return error_data",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "json_string": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "json_string",
                  "display_name": "JSON String",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter a valid JSON string (object or array) to convert to a Data object or list of Data objects",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Convert a JSON string to a Data object or a list of Data objects",
              "icon": "🔃",
              "base_classes": [
                "Data",
                "List"
              ],
              "display_name": "JSON to Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": true,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "List"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "convert_json_to_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "json_string"
              ],
              "beta": false,
              "edited": true,
              "official": false,
              "lf_version": "1.0.15"
            },
            "id": "AnthropicModel-a2b9r"
          },
          "selected": false,
          "width": 384,
          "height": 318,
          "positionAbsolute": {
            "x": 1273.776607250557,
            "y": -317.65861894275565
          },
          "dragging": false
        },
        {
          "id": "ParseData-HND0N",
          "type": "genericNode",
          "position": {
            "x": 2011.8645356473949,
            "y": -929.9140161485982
          },
          "data": {
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "id": "ParseData-HND0N",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Convert Data into plain text following a specified template.",
              "display_name": "Parse Data",
              "documentation": "",
              "edited": false,
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "frozen": true,
              "icon": "braces",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "display_name": "code"
                },
                "data": {
                  "advanced": false,
                  "display_name": "Data",
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "input_types": [
                    "Data"
                  ],
                  "list": false,
                  "name": "data",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "sep": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{questions[0]}"
                }
              },
              "lf_version": "1.0.15"
            },
            "type": "ParseData"
          },
          "selected": false,
          "width": 384,
          "height": 370,
          "positionAbsolute": {
            "x": 2011.8645356473949,
            "y": -929.9140161485982
          },
          "dragging": false
        },
        {
          "data": {
            "id": "groupComponent-CaDgA",
            "type": "GroupNode",
            "node": {
              "display_name": "Group",
              "documentation": "",
              "description": "",
              "template": {
                "code_ParseData-X4upI": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-X4upI",
                    "field": "code"
                  }
                },
                "sep_ParseData-X4upI": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n",
                  "proxy": {
                    "id": "ParseData-X4upI",
                    "field": "sep"
                  }
                },
                "template_ParseData-X4upI": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{text}",
                  "proxy": {
                    "id": "ParseData-X4upI",
                    "field": "template"
                  }
                },
                "code_CohereEmbeddings-Pqrka": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "CohereEmbeddings-Pqrka",
                    "field": "code"
                  }
                },
                "cohere_api_key_CohereEmbeddings-Pqrka": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "cohere_api_key",
                  "display_name": "Cohere API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-Pqrka",
                    "field": "cohere_api_key"
                  }
                },
                "max_retries_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 3,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "CohereEmbeddings-Pqrka",
                    "field": "max_retries"
                  }
                },
                "model_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "options": [
                    "embed-english-v2.0",
                    "embed-multilingual-v2.0",
                    "embed-english-light-v2.0",
                    "embed-multilingual-light-v2.0"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "embed-english-v2.0",
                  "name": "model",
                  "display_name": "Model",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-Pqrka",
                    "field": "model"
                  }
                },
                "request_timeout_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "proxy": {
                    "id": "CohereEmbeddings-Pqrka",
                    "field": "request_timeout"
                  }
                },
                "truncate_CohereEmbeddings-Pqrka": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "truncate",
                  "display_name": "Truncate",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-Pqrka",
                    "field": "truncate"
                  }
                },
                "user_agent_CohereEmbeddings-Pqrka": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "langchain",
                  "name": "user_agent",
                  "display_name": "User Agent",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-Pqrka",
                    "field": "user_agent"
                  }
                },
                "ingest_data_Chroma-XVwTG": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ingest_data",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "ingest_data"
                  }
                },
                "allow_duplicates_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "allow_duplicates",
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "allow_duplicates"
                  }
                },
                "chroma_server_cors_allow_origins_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "chroma_server_cors_allow_origins"
                  }
                },
                "chroma_server_grpc_port_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "chroma_server_grpc_port"
                  }
                },
                "chroma_server_host_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "chroma_server_host"
                  }
                },
                "chroma_server_http_port_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_http_port",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "chroma_server_http_port"
                  }
                },
                "chroma_server_ssl_enabled_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "chroma_server_ssl_enabled"
                  }
                },
                "code_Chroma-XVwTG": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "code"
                  }
                },
                "collection_name_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "studentsPG",
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "collection_name"
                  }
                },
                "limit_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "limit"
                  }
                },
                "number_of_results_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "20",
                  "name": "number_of_results",
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "number_of_results"
                  }
                },
                "persist_directory_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "chroma",
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "persist_directory"
                  }
                },
                "search_query_Chroma-XVwTG": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "search_query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "search_query"
                  }
                },
                "search_type_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Similarity",
                  "name": "search_type",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "field": "search_type"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "ParseData-X4upI",
                      "type": "genericNode",
                      "position": {
                        "x": 4432.929881068778,
                        "y": -214.5959275243507
                      },
                      "data": {
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "id": "ParseData-X4upI",
                        "node": {
                          "base_classes": [
                            "Message"
                          ],
                          "beta": false,
                          "conditional_paths": [],
                          "custom_fields": {},
                          "description": "Convert Data into plain text following a specified template.",
                          "display_name": "Parse Data",
                          "documentation": "",
                          "edited": false,
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "frozen": false,
                          "icon": "braces",
                          "output_types": [],
                          "outputs": [
                            {
                              "cache": true,
                              "display_name": "Text",
                              "method": "parse_data",
                              "name": "text",
                              "selected": "Message",
                              "types": [
                                "Message"
                              ],
                              "value": "__UNDEFINED__"
                            }
                          ],
                          "pinned": false,
                          "template": {
                            "_type": "Component",
                            "code": {
                              "advanced": true,
                              "dynamic": true,
                              "fileTypes": [],
                              "file_path": "",
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "code",
                              "password": false,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "code",
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                              "display_name": "code"
                            },
                            "data": {
                              "advanced": false,
                              "display_name": "Data",
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "input_types": [
                                "Data"
                              ],
                              "list": false,
                              "name": "data",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "other",
                              "value": ""
                            },
                            "sep": {
                              "advanced": true,
                              "display_name": "Separator",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "name": "sep",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "\n"
                            },
                            "template": {
                              "advanced": false,
                              "display_name": "Template",
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "template",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "{text}"
                            }
                          }
                        },
                        "type": "ParseData"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 370,
                      "positionAbsolute": {
                        "x": 4432.929881068778,
                        "y": -214.5959275243507
                      },
                      "dragging": false
                    },
                    {
                      "id": "CohereEmbeddings-Pqrka",
                      "type": "genericNode",
                      "position": {
                        "x": 3341.045722004871,
                        "y": -129.85073731937803
                      },
                      "data": {
                        "type": "CohereEmbeddings",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "cohere_api_key": {
                              "load_from_db": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "COHERE_API_KEY",
                              "name": "cohere_api_key",
                              "display_name": "Cohere API Key",
                              "advanced": false,
                              "input_types": [],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str"
                            },
                            "max_retries": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": 3,
                              "name": "max_retries",
                              "display_name": "Max Retries",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "model": {
                              "trace_as_metadata": true,
                              "options": [
                                "embed-english-v2.0",
                                "embed-multilingual-v2.0",
                                "embed-english-light-v2.0",
                                "embed-multilingual-light-v2.0"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "embed-english-v2.0",
                              "name": "model",
                              "display_name": "Model",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "request_timeout": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "request_timeout",
                              "display_name": "Request Timeout",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "float"
                            },
                            "truncate": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "truncate",
                              "display_name": "Truncate",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "user_agent": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "langchain",
                              "name": "user_agent",
                              "display_name": "User Agent",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Generate embeddings using Cohere models.",
                          "icon": "Cohere",
                          "base_classes": [
                            "Embeddings"
                          ],
                          "display_name": "Cohere Embeddings",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Embeddings"
                              ],
                              "selected": "Embeddings",
                              "name": "embeddings",
                              "display_name": "Embeddings",
                              "method": "build_embeddings",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "cohere_api_key",
                            "model",
                            "truncate",
                            "max_retries",
                            "user_agent",
                            "request_timeout"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "CohereEmbeddings-Pqrka"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 294,
                      "positionAbsolute": {
                        "x": 3341.045722004871,
                        "y": -129.85073731937803
                      },
                      "dragging": false
                    },
                    {
                      "id": "Chroma-XVwTG",
                      "type": "genericNode",
                      "position": {
                        "x": 3814.705505687377,
                        "y": -572.7848708624745
                      },
                      "data": {
                        "type": "Chroma",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "embedding": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "embedding",
                              "display_name": "Embedding",
                              "advanced": false,
                              "input_types": [
                                "Embeddings"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other"
                            },
                            "ingest_data": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "list": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "ingest_data",
                              "display_name": "Ingest Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other"
                            },
                            "allow_duplicates": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "allow_duplicates",
                              "display_name": "Allow Duplicates",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If false, will not add documents that are already in the Vector Store.",
                              "title_case": false,
                              "type": "bool"
                            },
                            "chroma_server_cors_allow_origins": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_cors_allow_origins",
                              "display_name": "Server CORS Allow Origins",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "chroma_server_grpc_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_grpc_port",
                              "display_name": "Server gRPC Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "chroma_server_host": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_host",
                              "display_name": "Server Host",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "chroma_server_http_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_http_port",
                              "display_name": "Server HTTP Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "chroma_server_ssl_enabled": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "chroma_server_ssl_enabled",
                              "display_name": "Server SSL Enabled",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "collection_name": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "studentsPG",
                              "name": "collection_name",
                              "display_name": "Collection Name",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "limit": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "limit",
                              "display_name": "Limit",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Limit the number of records to compare when Allow Duplicates is False.",
                              "title_case": false,
                              "type": "int"
                            },
                            "number_of_results": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "20",
                              "name": "number_of_results",
                              "display_name": "Number of Results",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of results to return.",
                              "title_case": false,
                              "type": "int"
                            },
                            "persist_directory": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "chroma",
                              "name": "persist_directory",
                              "display_name": "Persist Directory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "search_query": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "search_query",
                              "display_name": "Search Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "search_type": {
                              "trace_as_metadata": true,
                              "options": [
                                "Similarity",
                                "MMR"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Similarity",
                              "name": "search_type",
                              "display_name": "Search Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Chroma Vector Store with search capabilities",
                          "icon": "Chroma",
                          "base_classes": [
                            "Data",
                            "Retriever",
                            "VectorStore"
                          ],
                          "display_name": "Chroma DB",
                          "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Retriever"
                              ],
                              "selected": "Retriever",
                              "name": "base_retriever",
                              "display_name": "Retriever",
                              "method": "build_base_retriever",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "search_results",
                              "display_name": "Search Results",
                              "method": "search_documents",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "VectorStore"
                              ],
                              "selected": "VectorStore",
                              "name": "vector_store",
                              "display_name": "Vector Store",
                              "method": "cast_vector_store",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "collection_name",
                            "persist_directory",
                            "search_query",
                            "ingest_data",
                            "embedding",
                            "chroma_server_cors_allow_origins",
                            "chroma_server_host",
                            "chroma_server_http_port",
                            "chroma_server_grpc_port",
                            "chroma_server_ssl_enabled",
                            "allow_duplicates",
                            "search_type",
                            "number_of_results",
                            "limit"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "Chroma-XVwTG"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 644,
                      "positionAbsolute": {
                        "x": 3814.705505687377,
                        "y": -572.7848708624745
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "CohereEmbeddings-Pqrka",
                      "target": "Chroma-XVwTG",
                      "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Pqrkaœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                      "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-XVwTGœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "id": "reactflow__edge-CohereEmbeddings-Pqrka{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Pqrkaœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-XVwTG{œfieldNameœ:œembeddingœ,œidœ:œChroma-XVwTGœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "embedding",
                          "id": "Chroma-XVwTG",
                          "inputTypes": [
                            "Embeddings"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "CohereEmbeddings",
                          "id": "CohereEmbeddings-Pqrka",
                          "name": "embeddings",
                          "output_types": [
                            "Embeddings"
                          ]
                        }
                      },
                      "selected": true
                    },
                    {
                      "source": "Chroma-XVwTG",
                      "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-XVwTGœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                      "target": "ParseData-X4upI",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-X4upIœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-X4upI",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "Chroma",
                          "id": "Chroma-XVwTG",
                          "name": "search_results",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Chroma-XVwTG{œdataTypeœ:œChromaœ,œidœ:œChroma-XVwTGœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-X4upI{œfieldNameœ:œdataœ,œidœ:œParseData-X4upIœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Compassionate Mendel",
                "description": "",
                "id": "jMuUK"
              },
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "ParseData-X4upI_text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__",
                  "proxy": {
                    "id": "ParseData-X4upI",
                    "name": "text",
                    "nodeDisplayName": "Parse Data"
                  }
                },
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "Chroma-XVwTG_base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "name": "base_retriever",
                    "nodeDisplayName": "Chroma DB"
                  }
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "Chroma-XVwTG_vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Chroma-XVwTG",
                    "name": "vector_store",
                    "nodeDisplayName": "Chroma DB"
                  }
                }
              ],
              "frozen": true
            }
          },
          "id": "groupComponent-CaDgA",
          "position": {
            "x": 2895.2129757756115,
            "y": -1121.7326834735022
          },
          "type": "genericNode",
          "width": 384,
          "height": 588,
          "selected": false,
          "positionAbsolute": {
            "x": 2895.2129757756115,
            "y": -1121.7326834735022
          },
          "dragging": false
        },
        {
          "id": "ParseData-CvK4v",
          "type": "genericNode",
          "position": {
            "x": 2032.1624331247208,
            "y": -356.23749890146803
          },
          "data": {
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "id": "ParseData-CvK4v",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Convert Data into plain text following a specified template.",
              "display_name": "Parse Data",
              "documentation": "",
              "edited": false,
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "frozen": true,
              "icon": "braces",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "display_name": "code"
                },
                "data": {
                  "advanced": false,
                  "display_name": "Data",
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "input_types": [
                    "Data"
                  ],
                  "list": false,
                  "name": "data",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "sep": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{questions[1]}"
                }
              },
              "lf_version": "1.0.15"
            },
            "type": "ParseData"
          },
          "selected": false,
          "width": 384,
          "height": 370,
          "positionAbsolute": {
            "x": 2032.1624331247208,
            "y": -356.23749890146803
          },
          "dragging": false
        },
        {
          "id": "GroupNode-FIUOi",
          "type": "genericNode",
          "position": {
            "x": 2860.280779670283,
            "y": -479.8994504209769
          },
          "data": {
            "id": "GroupNode-FIUOi",
            "type": "GroupNode",
            "node": {
              "display_name": "Group",
              "documentation": "",
              "description": "",
              "template": {
                "code_ParseData-X4upI": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-Jkm1W",
                    "field": "code"
                  }
                },
                "sep_ParseData-X4upI": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n",
                  "proxy": {
                    "id": "ParseData-Jkm1W",
                    "field": "sep"
                  }
                },
                "template_ParseData-X4upI": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{text}",
                  "proxy": {
                    "id": "ParseData-Jkm1W",
                    "field": "template"
                  }
                },
                "code_CohereEmbeddings-Pqrka": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "CohereEmbeddings-WNHiI",
                    "field": "code"
                  }
                },
                "cohere_api_key_CohereEmbeddings-Pqrka": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "cohere_api_key",
                  "display_name": "Cohere API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-WNHiI",
                    "field": "cohere_api_key"
                  }
                },
                "max_retries_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 3,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "CohereEmbeddings-WNHiI",
                    "field": "max_retries"
                  }
                },
                "model_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "options": [
                    "embed-english-v2.0",
                    "embed-multilingual-v2.0",
                    "embed-english-light-v2.0",
                    "embed-multilingual-light-v2.0"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "embed-english-v2.0",
                  "name": "model",
                  "display_name": "Model",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-WNHiI",
                    "field": "model"
                  }
                },
                "request_timeout_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "proxy": {
                    "id": "CohereEmbeddings-WNHiI",
                    "field": "request_timeout"
                  }
                },
                "truncate_CohereEmbeddings-Pqrka": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "truncate",
                  "display_name": "Truncate",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-WNHiI",
                    "field": "truncate"
                  }
                },
                "user_agent_CohereEmbeddings-Pqrka": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "langchain",
                  "name": "user_agent",
                  "display_name": "User Agent",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-WNHiI",
                    "field": "user_agent"
                  }
                },
                "ingest_data_Chroma-XVwTG": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ingest_data",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "ingest_data"
                  }
                },
                "allow_duplicates_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "allow_duplicates",
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "allow_duplicates"
                  }
                },
                "chroma_server_cors_allow_origins_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "chroma_server_cors_allow_origins"
                  }
                },
                "chroma_server_grpc_port_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "chroma_server_grpc_port"
                  }
                },
                "chroma_server_host_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "chroma_server_host"
                  }
                },
                "chroma_server_http_port_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_http_port",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "chroma_server_http_port"
                  }
                },
                "chroma_server_ssl_enabled_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "chroma_server_ssl_enabled"
                  }
                },
                "code_Chroma-XVwTG": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "code"
                  }
                },
                "collection_name_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "studentsPG",
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "collection_name"
                  }
                },
                "limit_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "limit"
                  }
                },
                "number_of_results_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "20",
                  "name": "number_of_results",
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "number_of_results"
                  }
                },
                "persist_directory_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "chroma",
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "persist_directory"
                  }
                },
                "search_query_Chroma-XVwTG": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "search_query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "search_query"
                  }
                },
                "search_type_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Similarity",
                  "name": "search_type",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "field": "search_type"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "ParseData-Jkm1W",
                      "type": "genericNode",
                      "position": {
                        "x": 4432.929881068778,
                        "y": -214.5959275243507
                      },
                      "data": {
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "id": "ParseData-Jkm1W",
                        "node": {
                          "base_classes": [
                            "Message"
                          ],
                          "beta": false,
                          "conditional_paths": [],
                          "custom_fields": {},
                          "description": "Convert Data into plain text following a specified template.",
                          "display_name": "Parse Data",
                          "documentation": "",
                          "edited": false,
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "frozen": false,
                          "icon": "braces",
                          "output_types": [],
                          "outputs": [
                            {
                              "cache": true,
                              "display_name": "Text",
                              "method": "parse_data",
                              "name": "text",
                              "selected": "Message",
                              "types": [
                                "Message"
                              ],
                              "value": "__UNDEFINED__"
                            }
                          ],
                          "pinned": false,
                          "template": {
                            "_type": "Component",
                            "code": {
                              "advanced": true,
                              "dynamic": true,
                              "fileTypes": [],
                              "file_path": "",
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "code",
                              "password": false,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "code",
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                              "display_name": "code"
                            },
                            "data": {
                              "advanced": false,
                              "display_name": "Data",
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "input_types": [
                                "Data"
                              ],
                              "list": false,
                              "name": "data",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "other",
                              "value": ""
                            },
                            "sep": {
                              "advanced": true,
                              "display_name": "Separator",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "name": "sep",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "\n"
                            },
                            "template": {
                              "advanced": false,
                              "display_name": "Template",
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "template",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "{text}"
                            }
                          }
                        },
                        "type": "ParseData"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 370,
                      "positionAbsolute": {
                        "x": 4432.929881068778,
                        "y": -214.5959275243507
                      },
                      "dragging": false
                    },
                    {
                      "id": "CohereEmbeddings-WNHiI",
                      "type": "genericNode",
                      "position": {
                        "x": 3341.045722004871,
                        "y": -129.85073731937803
                      },
                      "data": {
                        "type": "CohereEmbeddings",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "cohere_api_key": {
                              "load_from_db": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "COHERE_API_KEY",
                              "name": "cohere_api_key",
                              "display_name": "Cohere API Key",
                              "advanced": false,
                              "input_types": [],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str"
                            },
                            "max_retries": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": 3,
                              "name": "max_retries",
                              "display_name": "Max Retries",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "model": {
                              "trace_as_metadata": true,
                              "options": [
                                "embed-english-v2.0",
                                "embed-multilingual-v2.0",
                                "embed-english-light-v2.0",
                                "embed-multilingual-light-v2.0"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "embed-english-v2.0",
                              "name": "model",
                              "display_name": "Model",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "request_timeout": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "request_timeout",
                              "display_name": "Request Timeout",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "float"
                            },
                            "truncate": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "truncate",
                              "display_name": "Truncate",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "user_agent": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "langchain",
                              "name": "user_agent",
                              "display_name": "User Agent",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Generate embeddings using Cohere models.",
                          "icon": "Cohere",
                          "base_classes": [
                            "Embeddings"
                          ],
                          "display_name": "Cohere Embeddings",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Embeddings"
                              ],
                              "selected": "Embeddings",
                              "name": "embeddings",
                              "display_name": "Embeddings",
                              "method": "build_embeddings",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "cohere_api_key",
                            "model",
                            "truncate",
                            "max_retries",
                            "user_agent",
                            "request_timeout"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "CohereEmbeddings-WNHiI"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 294,
                      "positionAbsolute": {
                        "x": 3341.045722004871,
                        "y": -129.85073731937803
                      },
                      "dragging": false
                    },
                    {
                      "id": "Chroma-lDnGy",
                      "type": "genericNode",
                      "position": {
                        "x": 3814.705505687377,
                        "y": -572.7848708624745
                      },
                      "data": {
                        "type": "Chroma",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "embedding": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "embedding",
                              "display_name": "Embedding",
                              "advanced": false,
                              "input_types": [
                                "Embeddings"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other"
                            },
                            "ingest_data": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "list": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "ingest_data",
                              "display_name": "Ingest Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other"
                            },
                            "allow_duplicates": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "allow_duplicates",
                              "display_name": "Allow Duplicates",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If false, will not add documents that are already in the Vector Store.",
                              "title_case": false,
                              "type": "bool"
                            },
                            "chroma_server_cors_allow_origins": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_cors_allow_origins",
                              "display_name": "Server CORS Allow Origins",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "chroma_server_grpc_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_grpc_port",
                              "display_name": "Server gRPC Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "chroma_server_host": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_host",
                              "display_name": "Server Host",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "chroma_server_http_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_http_port",
                              "display_name": "Server HTTP Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "chroma_server_ssl_enabled": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "chroma_server_ssl_enabled",
                              "display_name": "Server SSL Enabled",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "collection_name": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "studentsPG",
                              "name": "collection_name",
                              "display_name": "Collection Name",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "limit": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "limit",
                              "display_name": "Limit",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Limit the number of records to compare when Allow Duplicates is False.",
                              "title_case": false,
                              "type": "int"
                            },
                            "number_of_results": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "20",
                              "name": "number_of_results",
                              "display_name": "Number of Results",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of results to return.",
                              "title_case": false,
                              "type": "int"
                            },
                            "persist_directory": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "chroma",
                              "name": "persist_directory",
                              "display_name": "Persist Directory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "search_query": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "search_query",
                              "display_name": "Search Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "search_type": {
                              "trace_as_metadata": true,
                              "options": [
                                "Similarity",
                                "MMR"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Similarity",
                              "name": "search_type",
                              "display_name": "Search Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Chroma Vector Store with search capabilities",
                          "icon": "Chroma",
                          "base_classes": [
                            "Data",
                            "Retriever",
                            "VectorStore"
                          ],
                          "display_name": "Chroma DB",
                          "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Retriever"
                              ],
                              "selected": "Retriever",
                              "name": "base_retriever",
                              "display_name": "Retriever",
                              "method": "build_base_retriever",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "search_results",
                              "display_name": "Search Results",
                              "method": "search_documents",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "VectorStore"
                              ],
                              "selected": "VectorStore",
                              "name": "vector_store",
                              "display_name": "Vector Store",
                              "method": "cast_vector_store",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "collection_name",
                            "persist_directory",
                            "search_query",
                            "ingest_data",
                            "embedding",
                            "chroma_server_cors_allow_origins",
                            "chroma_server_host",
                            "chroma_server_http_port",
                            "chroma_server_grpc_port",
                            "chroma_server_ssl_enabled",
                            "allow_duplicates",
                            "search_type",
                            "number_of_results",
                            "limit"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "Chroma-lDnGy"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 644,
                      "positionAbsolute": {
                        "x": 3814.705505687377,
                        "y": -572.7848708624745
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "CohereEmbeddings-WNHiI",
                      "target": "Chroma-lDnGy",
                      "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-WNHiIœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                      "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-lDnGyœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "id": "reactflow__edge-CohereEmbeddings-WNHiI{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-WNHiIœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-lDnGy{œfieldNameœ:œembeddingœ,œidœ:œChroma-lDnGyœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "embedding",
                          "id": "Chroma-lDnGy",
                          "inputTypes": [
                            "Embeddings"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "CohereEmbeddings",
                          "id": "CohereEmbeddings-WNHiI",
                          "name": "embeddings",
                          "output_types": [
                            "Embeddings"
                          ]
                        }
                      },
                      "selected": true
                    },
                    {
                      "source": "Chroma-lDnGy",
                      "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-lDnGyœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                      "target": "ParseData-Jkm1W",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Jkm1Wœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-Jkm1W",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "Chroma",
                          "id": "Chroma-lDnGy",
                          "name": "search_results",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Chroma-lDnGy{œdataTypeœ:œChromaœ,œidœ:œChroma-lDnGyœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-Jkm1W{œfieldNameœ:œdataœ,œidœ:œParseData-Jkm1Wœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Compassionate Mendel",
                "description": "",
                "id": "jMuUK"
              },
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "ParseData-X4upI_text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__",
                  "proxy": {
                    "id": "ParseData-Jkm1W",
                    "name": "text",
                    "nodeDisplayName": "Parse Data"
                  }
                },
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "Chroma-XVwTG_base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "name": "base_retriever",
                    "nodeDisplayName": "Chroma DB"
                  }
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "Chroma-XVwTG_vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Chroma-lDnGy",
                    "name": "vector_store",
                    "nodeDisplayName": "Chroma DB"
                  }
                }
              ],
              "frozen": true
            }
          },
          "selected": false,
          "width": 384,
          "height": 588,
          "positionAbsolute": {
            "x": 2860.280779670283,
            "y": -479.8994504209769
          },
          "dragging": false
        },
        {
          "id": "GroupNode-b3FYT",
          "type": "genericNode",
          "position": {
            "x": 2860.2098560436057,
            "y": 128.61605560883186
          },
          "data": {
            "id": "GroupNode-b3FYT",
            "type": "GroupNode",
            "node": {
              "display_name": "Group",
              "documentation": "",
              "description": "",
              "template": {
                "code_ParseData-X4upI": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-AYPSs",
                    "field": "code"
                  }
                },
                "sep_ParseData-X4upI": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n",
                  "proxy": {
                    "id": "ParseData-AYPSs",
                    "field": "sep"
                  }
                },
                "template_ParseData-X4upI": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{text}",
                  "proxy": {
                    "id": "ParseData-AYPSs",
                    "field": "template"
                  }
                },
                "code_CohereEmbeddings-Pqrka": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "CohereEmbeddings-z8aXd",
                    "field": "code"
                  }
                },
                "cohere_api_key_CohereEmbeddings-Pqrka": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "cohere_api_key",
                  "display_name": "Cohere API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-z8aXd",
                    "field": "cohere_api_key"
                  }
                },
                "max_retries_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 3,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "CohereEmbeddings-z8aXd",
                    "field": "max_retries"
                  }
                },
                "model_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "options": [
                    "embed-english-v2.0",
                    "embed-multilingual-v2.0",
                    "embed-english-light-v2.0",
                    "embed-multilingual-light-v2.0"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "embed-english-v2.0",
                  "name": "model",
                  "display_name": "Model",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-z8aXd",
                    "field": "model"
                  }
                },
                "request_timeout_CohereEmbeddings-Pqrka": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "proxy": {
                    "id": "CohereEmbeddings-z8aXd",
                    "field": "request_timeout"
                  }
                },
                "truncate_CohereEmbeddings-Pqrka": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "truncate",
                  "display_name": "Truncate",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-z8aXd",
                    "field": "truncate"
                  }
                },
                "user_agent_CohereEmbeddings-Pqrka": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "langchain",
                  "name": "user_agent",
                  "display_name": "User Agent",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "CohereEmbeddings-z8aXd",
                    "field": "user_agent"
                  }
                },
                "ingest_data_Chroma-XVwTG": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ingest_data",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "ingest_data"
                  }
                },
                "allow_duplicates_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "allow_duplicates",
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "allow_duplicates"
                  }
                },
                "chroma_server_cors_allow_origins_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "chroma_server_cors_allow_origins"
                  }
                },
                "chroma_server_grpc_port_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "chroma_server_grpc_port"
                  }
                },
                "chroma_server_host_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "chroma_server_host"
                  }
                },
                "chroma_server_http_port_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_http_port",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "chroma_server_http_port"
                  }
                },
                "chroma_server_ssl_enabled_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "chroma_server_ssl_enabled"
                  }
                },
                "code_Chroma-XVwTG": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "code"
                  }
                },
                "collection_name_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "studentsPG",
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "collection_name"
                  }
                },
                "limit_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "limit"
                  }
                },
                "number_of_results_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "20",
                  "name": "number_of_results",
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "number_of_results"
                  }
                },
                "persist_directory_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "chroma",
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "persist_directory"
                  }
                },
                "search_query_Chroma-XVwTG": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "search_query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "search_query"
                  }
                },
                "search_type_Chroma-XVwTG": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Similarity",
                  "name": "search_type",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "field": "search_type"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "ParseData-AYPSs",
                      "type": "genericNode",
                      "position": {
                        "x": 4432.929881068778,
                        "y": -214.5959275243507
                      },
                      "data": {
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "id": "ParseData-AYPSs",
                        "node": {
                          "base_classes": [
                            "Message"
                          ],
                          "beta": false,
                          "conditional_paths": [],
                          "custom_fields": {},
                          "description": "Convert Data into plain text following a specified template.",
                          "display_name": "Parse Data",
                          "documentation": "",
                          "edited": false,
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "frozen": false,
                          "icon": "braces",
                          "output_types": [],
                          "outputs": [
                            {
                              "cache": true,
                              "display_name": "Text",
                              "method": "parse_data",
                              "name": "text",
                              "selected": "Message",
                              "types": [
                                "Message"
                              ],
                              "value": "__UNDEFINED__"
                            }
                          ],
                          "pinned": false,
                          "template": {
                            "_type": "Component",
                            "code": {
                              "advanced": true,
                              "dynamic": true,
                              "fileTypes": [],
                              "file_path": "",
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "code",
                              "password": false,
                              "placeholder": "",
                              "required": true,
                              "show": true,
                              "title_case": false,
                              "type": "code",
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                              "display_name": "code"
                            },
                            "data": {
                              "advanced": false,
                              "display_name": "Data",
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "input_types": [
                                "Data"
                              ],
                              "list": false,
                              "name": "data",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "other",
                              "value": ""
                            },
                            "sep": {
                              "advanced": true,
                              "display_name": "Separator",
                              "dynamic": false,
                              "info": "",
                              "list": false,
                              "load_from_db": false,
                              "name": "sep",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "\n"
                            },
                            "template": {
                              "advanced": false,
                              "display_name": "Template",
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "input_types": [
                                "Message"
                              ],
                              "list": false,
                              "load_from_db": false,
                              "multiline": true,
                              "name": "template",
                              "placeholder": "",
                              "required": false,
                              "show": true,
                              "title_case": false,
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "type": "str",
                              "value": "{text}"
                            }
                          }
                        },
                        "type": "ParseData"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 370,
                      "positionAbsolute": {
                        "x": 4432.929881068778,
                        "y": -214.5959275243507
                      },
                      "dragging": false
                    },
                    {
                      "id": "CohereEmbeddings-z8aXd",
                      "type": "genericNode",
                      "position": {
                        "x": 3341.045722004871,
                        "y": -129.85073731937803
                      },
                      "data": {
                        "type": "CohereEmbeddings",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "cohere_api_key": {
                              "load_from_db": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "COHERE_API_KEY",
                              "name": "cohere_api_key",
                              "display_name": "Cohere API Key",
                              "advanced": false,
                              "input_types": [],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str"
                            },
                            "max_retries": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": 3,
                              "name": "max_retries",
                              "display_name": "Max Retries",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "model": {
                              "trace_as_metadata": true,
                              "options": [
                                "embed-english-v2.0",
                                "embed-multilingual-v2.0",
                                "embed-english-light-v2.0",
                                "embed-multilingual-light-v2.0"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "embed-english-v2.0",
                              "name": "model",
                              "display_name": "Model",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "request_timeout": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "request_timeout",
                              "display_name": "Request Timeout",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "float"
                            },
                            "truncate": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "truncate",
                              "display_name": "Truncate",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "user_agent": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "langchain",
                              "name": "user_agent",
                              "display_name": "User Agent",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Generate embeddings using Cohere models.",
                          "icon": "Cohere",
                          "base_classes": [
                            "Embeddings"
                          ],
                          "display_name": "Cohere Embeddings",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Embeddings"
                              ],
                              "selected": "Embeddings",
                              "name": "embeddings",
                              "display_name": "Embeddings",
                              "method": "build_embeddings",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "cohere_api_key",
                            "model",
                            "truncate",
                            "max_retries",
                            "user_agent",
                            "request_timeout"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "CohereEmbeddings-z8aXd"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 294,
                      "positionAbsolute": {
                        "x": 3341.045722004871,
                        "y": -129.85073731937803
                      },
                      "dragging": false
                    },
                    {
                      "id": "Chroma-dZ173",
                      "type": "genericNode",
                      "position": {
                        "x": 3814.705505687377,
                        "y": -572.7848708624745
                      },
                      "data": {
                        "type": "Chroma",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "embedding": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "embedding",
                              "display_name": "Embedding",
                              "advanced": false,
                              "input_types": [
                                "Embeddings"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other"
                            },
                            "ingest_data": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "list": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "ingest_data",
                              "display_name": "Ingest Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other"
                            },
                            "allow_duplicates": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "allow_duplicates",
                              "display_name": "Allow Duplicates",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If false, will not add documents that are already in the Vector Store.",
                              "title_case": false,
                              "type": "bool"
                            },
                            "chroma_server_cors_allow_origins": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_cors_allow_origins",
                              "display_name": "Server CORS Allow Origins",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "chroma_server_grpc_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_grpc_port",
                              "display_name": "Server gRPC Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "chroma_server_host": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_host",
                              "display_name": "Server Host",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "chroma_server_http_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "chroma_server_http_port",
                              "display_name": "Server HTTP Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int"
                            },
                            "chroma_server_ssl_enabled": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "chroma_server_ssl_enabled",
                              "display_name": "Server SSL Enabled",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "collection_name": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "studentsPG",
                              "name": "collection_name",
                              "display_name": "Collection Name",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "limit": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "limit",
                              "display_name": "Limit",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Limit the number of records to compare when Allow Duplicates is False.",
                              "title_case": false,
                              "type": "int"
                            },
                            "number_of_results": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "20",
                              "name": "number_of_results",
                              "display_name": "Number of Results",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of results to return.",
                              "title_case": false,
                              "type": "int"
                            },
                            "persist_directory": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "chroma",
                              "name": "persist_directory",
                              "display_name": "Persist Directory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "search_query": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "search_query",
                              "display_name": "Search Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            },
                            "search_type": {
                              "trace_as_metadata": true,
                              "options": [
                                "Similarity",
                                "MMR"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Similarity",
                              "name": "search_type",
                              "display_name": "Search Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Chroma Vector Store with search capabilities",
                          "icon": "Chroma",
                          "base_classes": [
                            "Data",
                            "Retriever",
                            "VectorStore"
                          ],
                          "display_name": "Chroma DB",
                          "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Retriever"
                              ],
                              "selected": "Retriever",
                              "name": "base_retriever",
                              "display_name": "Retriever",
                              "method": "build_base_retriever",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "search_results",
                              "display_name": "Search Results",
                              "method": "search_documents",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "VectorStore"
                              ],
                              "selected": "VectorStore",
                              "name": "vector_store",
                              "display_name": "Vector Store",
                              "method": "cast_vector_store",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "collection_name",
                            "persist_directory",
                            "search_query",
                            "ingest_data",
                            "embedding",
                            "chroma_server_cors_allow_origins",
                            "chroma_server_host",
                            "chroma_server_http_port",
                            "chroma_server_grpc_port",
                            "chroma_server_ssl_enabled",
                            "allow_duplicates",
                            "search_type",
                            "number_of_results",
                            "limit"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "Chroma-dZ173"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 644,
                      "positionAbsolute": {
                        "x": 3814.705505687377,
                        "y": -572.7848708624745
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "CohereEmbeddings-z8aXd",
                      "target": "Chroma-dZ173",
                      "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-z8aXdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                      "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-dZ173œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "id": "reactflow__edge-CohereEmbeddings-z8aXd{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-z8aXdœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-dZ173{œfieldNameœ:œembeddingœ,œidœ:œChroma-dZ173œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "embedding",
                          "id": "Chroma-dZ173",
                          "inputTypes": [
                            "Embeddings"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "CohereEmbeddings",
                          "id": "CohereEmbeddings-z8aXd",
                          "name": "embeddings",
                          "output_types": [
                            "Embeddings"
                          ]
                        }
                      },
                      "selected": true
                    },
                    {
                      "source": "Chroma-dZ173",
                      "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-dZ173œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                      "target": "ParseData-AYPSs",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-AYPSsœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-AYPSs",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "Chroma",
                          "id": "Chroma-dZ173",
                          "name": "search_results",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Chroma-dZ173{œdataTypeœ:œChromaœ,œidœ:œChroma-dZ173œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-AYPSs{œfieldNameœ:œdataœ,œidœ:œParseData-AYPSsœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Compassionate Mendel",
                "description": "",
                "id": "jMuUK"
              },
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "ParseData-X4upI_text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__",
                  "proxy": {
                    "id": "ParseData-AYPSs",
                    "name": "text",
                    "nodeDisplayName": "Parse Data"
                  }
                },
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "Chroma-XVwTG_base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "name": "base_retriever",
                    "nodeDisplayName": "Chroma DB"
                  }
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "Chroma-XVwTG_vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Chroma-dZ173",
                    "name": "vector_store",
                    "nodeDisplayName": "Chroma DB"
                  }
                }
              ],
              "frozen": true
            }
          },
          "selected": false,
          "width": 384,
          "height": 588,
          "positionAbsolute": {
            "x": 2860.2098560436057,
            "y": 128.61605560883186
          },
          "dragging": false
        },
        {
          "id": "ParseData-Xg6Hg",
          "type": "genericNode",
          "position": {
            "x": 2004.8596240323482,
            "y": 120.57002248979052
          },
          "data": {
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "id": "ParseData-Xg6Hg",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Convert Data into plain text following a specified template.",
              "display_name": "Parse Data",
              "documentation": "",
              "edited": false,
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "frozen": true,
              "icon": "braces",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "display_name": "code"
                },
                "data": {
                  "advanced": false,
                  "display_name": "Data",
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "input_types": [
                    "Data"
                  ],
                  "list": false,
                  "name": "data",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "sep": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{questions[2]}"
                }
              },
              "lf_version": "1.0.15"
            },
            "type": "ParseData"
          },
          "selected": false,
          "width": 384,
          "height": 370,
          "positionAbsolute": {
            "x": 2004.8596240323482,
            "y": 120.57002248979052
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-dqw4K",
          "type": "genericNode",
          "position": {
            "x": 4540.089091849336,
            "y": 209.2099633686795
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "json_mode",
                  "value": false,
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o-mini",
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-4",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gpt-4o-mini",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "output_schema",
                  "value": {},
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "seed",
                  "value": 1,
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": true,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "openai_api_base",
                "api_key",
                "temperature",
                "seed"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "OpenAIModel-dqw4K"
          },
          "selected": false,
          "width": 384,
          "height": 593,
          "positionAbsolute": {
            "x": 4540.089091849336,
            "y": 209.2099633686795
          },
          "dragging": false
        },
        {
          "id": "ParseData-ZPdKz",
          "type": "genericNode",
          "position": {
            "x": 3537.062965025643,
            "y": -1994.9688443473237
          },
          "data": {
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "id": "ParseData-ZPdKz",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Convert Data into plain text following a specified template.",
              "display_name": "Parse Data",
              "documentation": "",
              "edited": false,
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "frozen": false,
              "icon": "braces",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "display_name": "code"
                },
                "data": {
                  "advanced": false,
                  "display_name": "Data",
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "input_types": [
                    "Data"
                  ],
                  "list": false,
                  "name": "data",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "sep": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{text}"
                }
              }
            },
            "type": "ParseData"
          },
          "selected": false,
          "width": 384,
          "height": 370,
          "positionAbsolute": {
            "x": 3537.062965025643,
            "y": -1994.9688443473237
          },
          "dragging": false
        },
        {
          "id": "CohereEmbeddings-hqRLz",
          "type": "genericNode",
          "position": {
            "x": 2445.178805961736,
            "y": -1910.2236541423513
          },
          "data": {
            "type": "CohereEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "cohere_api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "cohere_api_key",
                  "display_name": "Cohere API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "max_retries": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 3,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "embed-english-v2.0",
                    "embed-multilingual-v2.0",
                    "embed-english-light-v2.0",
                    "embed-multilingual-light-v2.0"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "embed-english-v2.0",
                  "name": "model",
                  "display_name": "Model",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "request_timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float"
                },
                "truncate": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "truncate",
                  "display_name": "Truncate",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "user_agent": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "langchain",
                  "name": "user_agent",
                  "display_name": "User Agent",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Generate embeddings using Cohere models.",
              "icon": "Cohere",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "Cohere Embeddings",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "cohere_api_key",
                "model",
                "truncate",
                "max_retries",
                "user_agent",
                "request_timeout"
              ],
              "beta": false,
              "edited": false
            },
            "id": "CohereEmbeddings-hqRLz"
          },
          "selected": false,
          "width": 384,
          "height": 294,
          "positionAbsolute": {
            "x": 2445.178805961736,
            "y": -1910.2236541423513
          },
          "dragging": false
        },
        {
          "id": "Chroma-cv2Lj",
          "type": "genericNode",
          "position": {
            "x": 2918.838589644242,
            "y": -2353.157787685447
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other"
                },
                "ingest_data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ingest_data",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other"
                },
                "allow_duplicates": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "allow_duplicates",
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool"
                },
                "chroma_server_cors_allow_origins": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "chroma_server_grpc_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "chroma_server_host": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "chroma_server_http_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_http_port",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "chroma_server_ssl_enabled": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "collection_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "studentsPG",
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "limit": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "20",
                  "name": "number_of_results",
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int"
                },
                "persist_directory": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "chroma",
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "search_query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "search_type": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Similarity",
                  "name": "search_type",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Chroma Vector Store with search capabilities",
              "icon": "Chroma",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Chroma DB",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "collection_name",
                "persist_directory",
                "search_query",
                "ingest_data",
                "embedding",
                "chroma_server_cors_allow_origins",
                "chroma_server_host",
                "chroma_server_http_port",
                "chroma_server_grpc_port",
                "chroma_server_ssl_enabled",
                "allow_duplicates",
                "search_type",
                "number_of_results",
                "limit"
              ],
              "beta": false,
              "edited": false
            },
            "id": "Chroma-cv2Lj"
          },
          "selected": false,
          "width": 384,
          "height": 644,
          "positionAbsolute": {
            "x": 2918.838589644242,
            "y": -2353.157787685447
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "File",
              "id": "File-frVxt",
              "name": "data",
              "output_types": [
                "Data"
              ]
            },
            "targetHandle": {
              "fieldName": "data_inputs",
              "id": "SplitText-o2OxT",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            }
          },
          "id": "reactflow__edge-File-frVxt{œdataTypeœ:œFileœ,œidœ:œFile-frVxtœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-o2OxT{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-o2OxTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "source": "File-frVxt",
          "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-frVxtœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "SplitText-o2OxT",
          "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-o2OxTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "selected": false
        },
        {
          "source": "SplitText-o2OxT",
          "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-o2OxTœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
          "target": "Chroma-GtCuF",
          "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ingest_data",
              "id": "Chroma-GtCuF",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "SplitText",
              "id": "SplitText-o2OxT",
              "name": "chunks",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-SplitText-o2OxT{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-o2OxTœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-Chroma-GtCuF{œfieldNameœ:œingest_dataœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "CohereEmbeddings-ImD4Q",
          "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-ImD4Qœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Chroma-GtCuF",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-GtCuF",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "CohereEmbeddings",
              "id": "CohereEmbeddings-ImD4Q",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-CohereEmbeddings-ImD4Q{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-ImD4Qœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-GtCuF{œfieldNameœ:œembeddingœ,œidœ:œChroma-GtCuFœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "ChatInput-P7ZSI",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-1v8ts",
          "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-1v8tsœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "question",
              "id": "Prompt-1v8ts",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-P7ZSI",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-P7ZSI{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-1v8ts{œfieldNameœ:œquestionœ,œidœ:œPrompt-1v8tsœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "Prompt-1v8ts",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-1v8tsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "OpenAIModel-X3dW2",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-X3dW2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-X3dW2",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-1v8ts",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-1v8ts{œdataTypeœ:œPromptœ,œidœ:œPrompt-1v8tsœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-X3dW2{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-X3dW2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "OpenAIModel-X3dW2",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-X3dW2œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "AnthropicModel-a2b9r",
          "targetHandle": "{œfieldNameœ:œjson_stringœ,œidœ:œAnthropicModel-a2b9rœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "json_string",
              "id": "AnthropicModel-a2b9r",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-X3dW2",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-X3dW2{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-X3dW2œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-AnthropicModel-a2b9r{œfieldNameœ:œjson_stringœ,œidœ:œAnthropicModel-a2b9rœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "AnthropicModel-a2b9r",
          "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-HND0N",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-HND0Nœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-HND0N",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-a2b9r",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-AnthropicModel-a2b9r{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-HND0N{œfieldNameœ:œdataœ,œidœ:œParseData-HND0Nœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "ParseData-HND0N",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-HND0Nœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "groupComponent-CaDgA",
          "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œgroupComponent-CaDgAœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-XVwTGœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "search_query_Chroma-XVwTG",
              "id": "groupComponent-CaDgA",
              "inputTypes": [
                "Message"
              ],
              "proxy": {
                "field": "search_query",
                "id": "Chroma-XVwTG"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-HND0N",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-HND0N{œdataTypeœ:œParseDataœ,œidœ:œParseData-HND0Nœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-groupComponent-CaDgA{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œgroupComponent-CaDgAœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-XVwTGœ},œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "groupComponent-CaDgA",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-CaDgAœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-ipfIy",
          "targetHandle": "{œfieldNameœ:œcontext_1œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "context_1",
              "id": "Prompt-ipfIy",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "groupComponent-CaDgA",
              "name": "ParseData-X4upI_text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-groupComponent-CaDgA{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-CaDgAœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œcontext_1œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "ParseData-CvK4v",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-CvK4vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "GroupNode-FIUOi",
          "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-FIUOiœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-lDnGyœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "search_query_Chroma-XVwTG",
              "id": "GroupNode-FIUOi",
              "inputTypes": [
                "Message"
              ],
              "proxy": {
                "field": "search_query",
                "id": "Chroma-lDnGy"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-CvK4v",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-CvK4v{œdataTypeœ:œParseDataœ,œidœ:œParseData-CvK4vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GroupNode-FIUOi{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-FIUOiœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-lDnGyœ},œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "AnthropicModel-a2b9r",
          "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-CvK4v",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-CvK4vœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-CvK4v",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-a2b9r",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-AnthropicModel-a2b9r{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-CvK4v{œfieldNameœ:œdataœ,œidœ:œParseData-CvK4vœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "GroupNode-FIUOi",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-FIUOiœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-ipfIy",
          "targetHandle": "{œfieldNameœ:œcontext_2œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "context_2",
              "id": "Prompt-ipfIy",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "GroupNode-FIUOi",
              "name": "ParseData-X4upI_text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-GroupNode-FIUOi{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-FIUOiœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œcontext_2œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "AnthropicModel-a2b9r",
          "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-Xg6Hg",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Xg6Hgœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-Xg6Hg",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-a2b9r",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-AnthropicModel-a2b9r{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-a2b9rœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-Xg6Hg{œfieldNameœ:œdataœ,œidœ:œParseData-Xg6Hgœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "ParseData-Xg6Hg",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Xg6Hgœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "GroupNode-b3FYT",
          "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-b3FYTœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-dZ173œ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "search_query_Chroma-XVwTG",
              "id": "GroupNode-b3FYT",
              "inputTypes": [
                "Message"
              ],
              "proxy": {
                "field": "search_query",
                "id": "Chroma-dZ173"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-Xg6Hg",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-Xg6Hg{œdataTypeœ:œParseDataœ,œidœ:œParseData-Xg6Hgœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GroupNode-b3FYT{œfieldNameœ:œsearch_query_Chroma-XVwTGœ,œidœ:œGroupNode-b3FYTœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-dZ173œ},œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "GroupNode-b3FYT",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-b3FYTœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-ipfIy",
          "targetHandle": "{œfieldNameœ:œcontext_3œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "context_3",
              "id": "Prompt-ipfIy",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "GroupNode-b3FYT",
              "name": "ParseData-X4upI_text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-GroupNode-b3FYT{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-b3FYTœ,œnameœ:œParseData-X4upI_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œcontext_3œ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "selected": false,
          "className": ""
        },
        {
          "source": "ChatInput-P7ZSI",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-ipfIy",
          "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "question",
              "id": "Prompt-ipfIy",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-P7ZSI",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-P7ZSI{œdataTypeœ:œChatInputœ,œidœ:œChatInput-P7ZSIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-ipfIy{œfieldNameœ:œquestionœ,œidœ:œPrompt-ipfIyœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Prompt-ipfIy",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-ipfIyœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "OpenAIModel-dqw4K",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-dqw4Kœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-dqw4K",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-ipfIy",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-ipfIy{œdataTypeœ:œPromptœ,œidœ:œPrompt-ipfIyœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-dqw4K{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-dqw4Kœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-dqw4K",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-dqw4Kœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-LAi2A",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-LAi2Aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-LAi2A",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-dqw4K",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-dqw4K{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-dqw4Kœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-LAi2A{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-LAi2Aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "CohereEmbeddings-hqRLz",
          "target": "Chroma-cv2Lj",
          "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-hqRLzœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-cv2Ljœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "id": "reactflow__edge-CohereEmbeddings-hqRLz{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-hqRLzœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-cv2Lj{œfieldNameœ:œembeddingœ,œidœ:œChroma-cv2Ljœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-cv2Lj",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "CohereEmbeddings",
              "id": "CohereEmbeddings-hqRLz",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "selected": false,
          "className": ""
        },
        {
          "source": "Chroma-cv2Lj",
          "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-cv2Ljœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-ZPdKz",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-ZPdKzœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-ZPdKz",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "Chroma",
              "id": "Chroma-cv2Lj",
              "name": "search_results",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-Chroma-cv2Lj{œdataTypeœ:œChromaœ,œidœ:œChroma-cv2Ljœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-ZPdKz{œfieldNameœ:œdataœ,œidœ:œParseData-ZPdKzœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "selected": false,
          "className": ""
        }
      ],
      "viewport": {
        "x": -574.7829446097835,
        "y": 98.50497154374301,
        "zoom": 0.3087937054523855
      }
    },
    "date_created": "2024-08-20T05:04:42.033Z",
    "date_updated": "2024-08-20T16:59:52.114Z",
    "status": "Public",
    "sort": null,
    "user_updated": "8ca3c638-244a-4d41-ae61-bc145776bd63",
    "user_created": {
      "username": "misbah",
      "first_name": "Menlo Park Lab",
      "last_name": "Lab",
      "id": "8ca3c638-244a-4d41-ae61-bc145776bd63"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:54.968Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 300,
    "converter_version": "1.0.0"
  }
}