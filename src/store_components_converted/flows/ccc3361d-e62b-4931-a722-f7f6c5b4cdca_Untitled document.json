{
  "id": "ccc3361d-e62b-4931-a722-f7f6c5b4cdca",
  "name": "Untitled document",
  "description": "Empowering Language Engineering. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "GT",
    "first_name": "Fei",
    "last_name": "Yan",
    "id": "659b8c9c-06c4-4419-8dab-c3b10b4bb6ec",
    "full_name": "Fei Yan"
  },
  "store_url": "https://www.langflow.store/store/component/ccc3361d-e62b-4931-a722-f7f6c5b4cdca",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-11T12:17:24.419Z",
    "updated": "2024-06-11T12:17:24.547Z",
    "downloaded": "2025-08-19T17:50:05.833Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Agent",
        "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
      }
    },
    {
      "tags_id": {
        "name": "Memory",
        "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
      }
    },
    {
      "tags_id": {
        "name": "Chain",
        "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
      }
    },
    {
      "tags_id": {
        "name": "Vector Store",
        "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
      }
    },
    {
      "tags_id": {
        "name": "Prompt",
        "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "0.6.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "RetrievalQA-Nj3Ew",
        "type": "genericNode",
        "position": {
          "x": 904.9215573638555,
          "y": 245.15785708956815
        },
        "data": {
          "type": "RetrievalQA",
          "node": {
            "output_types": [],
            "display_name": "Basic RAG",
            "documentation": "",
            "base_classes": [
              "BaseRetrievalQA",
              "RetrievalQA",
              "Chain",
              "Callable"
            ],
            "description": "double click to edit description",
            "template": {
              "callbacks_RetrievalQA-Hhe38": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                "list": true,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "callbacks"
                },
                "display_name": "Callbacks"
              },
              "memory_RetrievalQA-Hhe38": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseMemory",
                "list": false,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "memory"
                },
                "display_name": "Memory"
              },
              "input_key_RetrievalQA-Hhe38": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "query",
                "password": false,
                "name": "input_key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "input_key"
                },
                "display_name": "Input Key"
              },
              "metadata_RetrievalQA-Hhe38": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "metadata",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "metadata"
                },
                "display_name": "Metadata"
              },
              "output_key_RetrievalQA-Hhe38": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "result",
                "password": false,
                "name": "output_key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "output_key"
                },
                "display_name": "Output Key"
              },
              "return_source_documents_RetrievalQA-Hhe38": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "return_source_documents",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "return_source_documents"
                },
                "display_name": "Return Source Documents"
              },
              "tags_RetrievalQA-Hhe38": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tags",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "tags"
                },
                "display_name": "Tags"
              },
              "verbose_RetrievalQA-Hhe38": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false,
                "proxy": {
                  "id": "RetrievalQA-Hhe38",
                  "field": "verbose"
                },
                "display_name": "Verbose"
              },
              "code_Chroma-dUHtN": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union\nfrom axiestudio import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "chroma_server_cors_allow_origins_Chroma-dUHtN": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "chroma_server_cors_allow_origins"
                }
              },
              "chroma_server_grpc_port_Chroma-dUHtN": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "chroma_server_grpc_port"
                }
              },
              "chroma_server_host_Chroma-dUHtN": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "chroma_server_host"
                }
              },
              "chroma_server_port_Chroma-dUHtN": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "chroma_server_port"
                }
              },
              "chroma_server_ssl_enabled_Chroma-dUHtN": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "chroma_server_ssl_enabled"
                }
              },
              "collection_name_Chroma-dUHtN": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "axiestudio",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "collection_name"
                }
              },
              "embedding_Chroma-dUHtN": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Embeddings",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "embedding"
                }
              },
              "persist_Chroma-dUHtN": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "persist"
                }
              },
              "persist_directory_Chroma-dUHtN": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "proxy": {
                  "id": "Chroma-dUHtN",
                  "field": "persist_directory"
                }
              },
              "llm_CombineDocsChain-ZlGNS": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseLanguageModel",
                "list": false,
                "proxy": {
                  "id": "CombineDocsChain-ZlGNS",
                  "field": "llm"
                }
              },
              "chain_type_CombineDocsChain-ZlGNS": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "stuff",
                "password": false,
                "options": [
                  "stuff",
                  "map_reduce",
                  "map_rerank",
                  "refine"
                ],
                "name": "chain_type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true,
                "proxy": {
                  "id": "CombineDocsChain-ZlGNS",
                  "field": "chain_type"
                },
                "display_name": "Chain Type"
              },
              "code_CustomComponent-715vY": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false,
                "proxy": {
                  "id": "CustomComponent-715vY",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "file_path_CustomComponent-715vY": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "file",
                "list": false,
                "fileTypes": [
                  "json",
                  "txt",
                  "csv",
                  "jsonl",
                  "html",
                  "htm",
                  "conllu",
                  "enex",
                  "msg",
                  "pdf",
                  "srt",
                  "eml",
                  "md",
                  "pptx",
                  "docx"
                ],
                "file_path": "/Users/rodrigonader/Library/Caches/axiestudio/f2b1ae44-3df4-4b22-9153-99e7d8abb51c/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                "value": "",
                "proxy": {
                  "id": "CustomComponent-715vY",
                  "field": "file_path"
                }
              },
              "loader_CustomComponent-715vY": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Automatic",
                "password": false,
                "options": [
                  "Automatic",
                  "Airbyte JSON (.jsonl)",
                  "JSON (.json)",
                  "BeautifulSoup4 HTML (.html, .htm)",
                  "CSV (.csv)",
                  "CoNLL-U (.conllu)",
                  "EverNote (.enex)",
                  "Facebook Chat (.json)",
                  "Outlook Message (.msg)",
                  "PyPDF (.pdf)",
                  "Subtitle (.str)",
                  "Text (.txt)",
                  "Unstructured Email (.eml)",
                  "Unstructured HTML (.html, .htm)",
                  "Unstructured Markdown (.md)",
                  "Unstructured PowerPoint (.pptx)",
                  "Unstructured Word (.docx)"
                ],
                "name": "loader",
                "display_name": "Loader",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true,
                "proxy": {
                  "id": "CustomComponent-715vY",
                  "field": "loader"
                }
              },
              "chunk_overlap_CharacterTextSplitter-PaUem": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false,
                "proxy": {
                  "id": "CharacterTextSplitter-PaUem",
                  "field": "chunk_overlap"
                }
              },
              "chunk_size_CharacterTextSplitter-PaUem": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false,
                "proxy": {
                  "id": "CharacterTextSplitter-PaUem",
                  "field": "chunk_size"
                }
              },
              "separator_CharacterTextSplitter-PaUem": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": " ",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "proxy": {
                  "id": "CharacterTextSplitter-PaUem",
                  "field": "separator"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "width": 384,
                    "height": 339,
                    "id": "RetrievalQA-Hhe38",
                    "type": "genericNode",
                    "position": {
                      "x": 786.0148744080102,
                      "y": 224.0922500095482
                    },
                    "data": {
                      "type": "RetrievalQA",
                      "node": {
                        "template": {
                          "callbacks": {
                            "required": false,
                            "placeholder": "",
                            "show": false,
                            "multiline": false,
                            "password": false,
                            "name": "callbacks",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                            "list": true
                          },
                          "combine_documents_chain": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "combine_documents_chain",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "BaseCombineDocumentsChain",
                            "list": false
                          },
                          "memory": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "memory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "BaseMemory",
                            "list": false
                          },
                          "retriever": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "retriever",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "BaseRetriever",
                            "list": false
                          },
                          "input_key": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": "query",
                            "password": false,
                            "name": "input_key",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": false
                          },
                          "metadata": {
                            "required": false,
                            "placeholder": "",
                            "show": false,
                            "multiline": false,
                            "password": false,
                            "name": "metadata",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "dict",
                            "list": false
                          },
                          "output_key": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": "result",
                            "password": false,
                            "name": "output_key",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": false
                          },
                          "return_source_documents": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": true,
                            "password": false,
                            "name": "return_source_documents",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "bool",
                            "list": false
                          },
                          "tags": {
                            "required": false,
                            "placeholder": "",
                            "show": false,
                            "multiline": false,
                            "password": false,
                            "name": "tags",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": true
                          },
                          "verbose": {
                            "required": false,
                            "placeholder": "",
                            "show": false,
                            "multiline": false,
                            "password": false,
                            "name": "verbose",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "bool",
                            "list": false
                          },
                          "_type": "RetrievalQA"
                        },
                        "description": "Chain for question-answering against an index.",
                        "base_classes": [
                          "BaseRetrievalQA",
                          "RetrievalQA",
                          "Chain",
                          "Callable"
                        ],
                        "display_name": "RetrievalQA",
                        "custom_fields": {},
                        "output_types": [],
                        "documentation": "https://python.langchain.com/docs/modules/chains/popular/vector_db_qa",
                        "beta": false,
                        "error": null
                      },
                      "id": "RetrievalQA-Hhe38"
                    },
                    "selected": true,
                    "positionAbsolute": {
                      "x": 786.0148744080102,
                      "y": 224.0922500095482
                    },
                    "dragging": false
                  },
                  {
                    "width": 384,
                    "height": 539,
                    "id": "Chroma-dUHtN",
                    "type": "genericNode",
                    "position": {
                      "x": 233.28825393386717,
                      "y": 329.51112502864464
                    },
                    "data": {
                      "type": "Chroma",
                      "node": {
                        "template": {
                          "code": {
                            "dynamic": true,
                            "required": true,
                            "placeholder": "",
                            "show": false,
                            "multiline": true,
                            "value": "from typing import Optional, Union\nfrom axiestudio import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                            "password": false,
                            "name": "code",
                            "advanced": false,
                            "type": "code",
                            "list": false
                          },
                          "_type": "CustomComponent",
                          "chroma_server_cors_allow_origins": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "chroma_server_cors_allow_origins",
                            "display_name": "Server CORS Allow Origins",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": false
                          },
                          "chroma_server_grpc_port": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "chroma_server_grpc_port",
                            "display_name": "Server gRPC Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "int",
                            "list": false
                          },
                          "chroma_server_host": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "chroma_server_host",
                            "display_name": "Server Host",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": false
                          },
                          "chroma_server_port": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "chroma_server_port",
                            "display_name": "Server Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "int",
                            "list": false
                          },
                          "chroma_server_ssl_enabled": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": false,
                            "password": false,
                            "name": "chroma_server_ssl_enabled",
                            "display_name": "Server SSL Enabled",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "type": "bool",
                            "list": false
                          },
                          "collection_name": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": "axiestudio",
                            "password": false,
                            "name": "collection_name",
                            "display_name": "Collection Name",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": false
                          },
                          "documents": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "documents",
                            "display_name": "Documents",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "Document",
                            "list": true
                          },
                          "embedding": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "embedding",
                            "display_name": "Embedding",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "Embeddings",
                            "list": false
                          },
                          "persist": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": false,
                            "password": false,
                            "name": "persist",
                            "display_name": "Persist",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "bool",
                            "list": false
                          },
                          "persist_directory": {
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "persist_directory",
                            "display_name": "Persist Directory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": false
                          }
                        },
                        "description": "Implementation of Vector Store using Chroma",
                        "base_classes": [
                          "VectorStore",
                          "BaseRetriever"
                        ],
                        "display_name": "Chroma",
                        "custom_fields": {
                          "chroma_server_cors_allow_origins": null,
                          "chroma_server_grpc_port": null,
                          "chroma_server_host": null,
                          "chroma_server_port": null,
                          "chroma_server_ssl_enabled": null,
                          "collection_name": null,
                          "documents": null,
                          "embedding": null,
                          "persist": null,
                          "persist_directory": null
                        },
                        "output_types": [
                          "Chroma"
                        ],
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                        "beta": true,
                        "error": null
                      },
                      "id": "Chroma-dUHtN"
                    },
                    "selected": true,
                    "positionAbsolute": {
                      "x": 233.28825393386717,
                      "y": 329.51112502864464
                    },
                    "dragging": false
                  },
                  {
                    "width": 384,
                    "height": 333,
                    "id": "CombineDocsChain-ZlGNS",
                    "type": "genericNode",
                    "position": {
                      "x": 218.59271730686442,
                      "y": -167.93319837803648
                    },
                    "data": {
                      "type": "CombineDocsChain",
                      "node": {
                        "template": {
                          "llm": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "llm",
                            "display_name": "LLM",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "BaseLanguageModel",
                            "list": false
                          },
                          "chain_type": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": "stuff",
                            "password": false,
                            "options": [
                              "stuff",
                              "map_reduce",
                              "map_rerank",
                              "refine"
                            ],
                            "name": "chain_type",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": true
                          },
                          "_type": "load_qa_chain"
                        },
                        "description": "Load question answering chain.",
                        "base_classes": [
                          "BaseCombineDocumentsChain",
                          "Callable"
                        ],
                        "display_name": "CombineDocsChain",
                        "custom_fields": {},
                        "output_types": [],
                        "documentation": "",
                        "beta": false,
                        "error": null
                      },
                      "id": "CombineDocsChain-ZlGNS"
                    },
                    "selected": true,
                    "positionAbsolute": {
                      "x": 218.59271730686442,
                      "y": -167.93319837803648
                    },
                    "dragging": false
                  },
                  {
                    "width": 384,
                    "height": 457,
                    "id": "CustomComponent-715vY",
                    "type": "genericNode",
                    "position": {
                      "x": -947.6155160488396,
                      "y": 293.1413507229215
                    },
                    "data": {
                      "type": "CustomComponent",
                      "node": {
                        "template": {
                          "code": {
                            "dynamic": true,
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                            "password": false,
                            "name": "code",
                            "advanced": false,
                            "type": "code",
                            "list": false
                          },
                          "_type": "CustomComponent",
                          "file_path": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "file_path",
                            "display_name": "File Path",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "file",
                            "list": false,
                            "fileTypes": [
                              "json",
                              "txt",
                              "csv",
                              "jsonl",
                              "html",
                              "htm",
                              "conllu",
                              "enex",
                              "msg",
                              "pdf",
                              "srt",
                              "eml",
                              "md",
                              "pptx",
                              "docx"
                            ],
                            "file_path": "/Users/rodrigonader/Library/Caches/axiestudio/13ca1b26-ed4a-457b-8e00-eab94d5448dc/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                            "value": ""
                          },
                          "loader": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": "Automatic",
                            "password": false,
                            "options": [
                              "Automatic",
                              "Airbyte JSON (.jsonl)",
                              "JSON (.json)",
                              "BeautifulSoup4 HTML (.html, .htm)",
                              "CSV (.csv)",
                              "CoNLL-U (.conllu)",
                              "EverNote (.enex)",
                              "Facebook Chat (.json)",
                              "Outlook Message (.msg)",
                              "PyPDF (.pdf)",
                              "Subtitle (.str)",
                              "Text (.txt)",
                              "Unstructured Email (.eml)",
                              "Unstructured HTML (.html, .htm)",
                              "Unstructured Markdown (.md)",
                              "Unstructured PowerPoint (.pptx)",
                              "Unstructured Word (.docx)"
                            ],
                            "name": "loader",
                            "display_name": "Loader",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": true
                          }
                        },
                        "description": "A generic loader that auto-detects file types.",
                        "base_classes": [
                          "Document"
                        ],
                        "display_name": "File Loader",
                        "custom_fields": {
                          "file_path": null,
                          "loader": null
                        },
                        "output_types": [
                          "Document"
                        ],
                        "documentation": "",
                        "beta": true,
                        "error": null,
                        "official": false
                      },
                      "id": "CustomComponent-715vY"
                    },
                    "selected": true,
                    "positionAbsolute": {
                      "x": -947.6155160488396,
                      "y": 293.1413507229215
                    },
                    "dragging": false
                  },
                  {
                    "width": 384,
                    "height": 501,
                    "id": "CharacterTextSplitter-PaUem",
                    "type": "genericNode",
                    "position": {
                      "x": -314.0779657410157,
                      "y": 23.837018963891467
                    },
                    "data": {
                      "type": "CharacterTextSplitter",
                      "node": {
                        "template": {
                          "documents": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "password": false,
                            "name": "documents",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "Document",
                            "list": true
                          },
                          "chunk_overlap": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": 200,
                            "password": false,
                            "name": "chunk_overlap",
                            "display_name": "Chunk Overlap",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "int",
                            "list": false
                          },
                          "chunk_size": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": 1000,
                            "password": false,
                            "name": "chunk_size",
                            "display_name": "Chunk Size",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "int",
                            "list": false
                          },
                          "separator": {
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "multiline": false,
                            "value": " ",
                            "password": false,
                            "name": "separator",
                            "display_name": "Separator",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "type": "str",
                            "list": false
                          },
                          "_type": "CharacterTextSplitter"
                        },
                        "description": "Splitting text that looks at characters.",
                        "base_classes": [
                          "Document"
                        ],
                        "display_name": "CharacterTextSplitter",
                        "custom_fields": {},
                        "output_types": [
                          "Document"
                        ],
                        "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
                        "beta": false,
                        "error": null
                      },
                      "id": "CharacterTextSplitter-PaUem"
                    },
                    "selected": true,
                    "positionAbsolute": {
                      "x": -314.0779657410157,
                      "y": 23.837018963891467
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "Chroma-dUHtN",
                    "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}",
                    "target": "RetrievalQA-Hhe38",
                    "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "retriever",
                        "id": "RetrievalQA-Hhe38",
                        "inputTypes": null,
                        "type": "BaseRetriever"
                      },
                      "sourceHandle": {
                        "baseClasses": [
                          "VectorStore",
                          "BaseRetriever"
                        ],
                        "dataType": "Chroma",
                        "id": "Chroma-dUHtN"
                      }
                    },
                    "style": {
                      "stroke": "#555"
                    },
                    "className": "stroke-foreground  stroke-connection",
                    "animated": false,
                    "id": "reactflow__edge-Chroma-dUHtN{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}-RetrievalQA-Hhe38{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                    "selected": true
                  },
                  {
                    "source": "CombineDocsChain-ZlGNS",
                    "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}",
                    "target": "RetrievalQA-Hhe38",
                    "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "combine_documents_chain",
                        "id": "RetrievalQA-Hhe38",
                        "inputTypes": null,
                        "type": "BaseCombineDocumentsChain"
                      },
                      "sourceHandle": {
                        "baseClasses": [
                          "BaseCombineDocumentsChain",
                          "Callable"
                        ],
                        "dataType": "CombineDocsChain",
                        "id": "CombineDocsChain-ZlGNS"
                      }
                    },
                    "style": {
                      "stroke": "#555"
                    },
                    "className": "stroke-foreground  stroke-connection",
                    "animated": false,
                    "id": "reactflow__edge-CombineDocsChain-ZlGNS{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}-RetrievalQA-Hhe38{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                    "selected": true
                  },
                  {
                    "source": "CustomComponent-715vY",
                    "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}",
                    "target": "CharacterTextSplitter-PaUem",
                    "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "documents",
                        "id": "CharacterTextSplitter-PaUem",
                        "inputTypes": null,
                        "type": "Document"
                      },
                      "sourceHandle": {
                        "baseClasses": [
                          "Document"
                        ],
                        "dataType": "CustomComponent",
                        "id": "CustomComponent-715vY"
                      }
                    },
                    "style": {
                      "stroke": "#555"
                    },
                    "className": "stroke-foreground  stroke-connection",
                    "animated": false,
                    "id": "reactflow__edge-CustomComponent-715vY{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}-CharacterTextSplitter-PaUem{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                    "selected": true
                  },
                  {
                    "source": "CharacterTextSplitter-PaUem",
                    "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}",
                    "target": "Chroma-dUHtN",
                    "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "documents",
                        "id": "Chroma-dUHtN",
                        "inputTypes": null,
                        "type": "Document"
                      },
                      "sourceHandle": {
                        "baseClasses": [
                          "Document"
                        ],
                        "dataType": "CharacterTextSplitter",
                        "id": "CharacterTextSplitter-PaUem"
                      }
                    },
                    "style": {
                      "stroke": "#555"
                    },
                    "className": "stroke-foreground  stroke-connection",
                    "animated": false,
                    "id": "reactflow__edge-CharacterTextSplitter-PaUem{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}-Chroma-dUHtN{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                    "selected": true
                  }
                ],
                "viewport": {
                  "x": 577.3649569565561,
                  "y": 227.84214213787357,
                  "zoom": 0.48903173672367245
                }
              },
              "is_component": false,
              "name": "Silly Poitras",
              "description": "",
              "id": "F7KdT"
            },
            "official": false
          },
          "id": "RetrievalQA-Nj3Ew"
        },
        "selected": false,
        "width": 384,
        "height": 425,
        "dragging": false,
        "positionAbsolute": {
          "x": 904.9215573638555,
          "y": 245.15785708956815
        }
      },
      {
        "id": "VectorStoreRetrieverMemory-4oo6v",
        "type": "genericNode",
        "position": {
          "x": -124.67096171532268,
          "y": 237.1630563791482
        },
        "data": {
          "type": "VectorStoreRetrieverMemory",
          "node": {
            "template": {
              "retriever": {
                "type": "VectorStoreRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "exclude_input_keys": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "exclude_input_keys",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "title_case": true
              },
              "memory_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "fileTypes": [],
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_docs": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "return_docs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_messages": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "VectorStoreRetrieverMemory"
            },
            "description": "VectorStoreRetriever-backed memory.",
            "base_classes": [
              "BaseMemory",
              "VectorStoreRetrieverMemory"
            ],
            "display_name": "VectorStoreRetrieverMemory",
            "documentation": "https://python.langchain.com/docs/modules/memory/how_to/vectorstore_retriever_memory",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "VectorStoreRetrieverMemory-4oo6v"
        },
        "selected": false,
        "width": 384,
        "height": 507,
        "positionAbsolute": {
          "x": -124.67096171532268,
          "y": 237.1630563791482
        },
        "dragging": false
      },
      {
        "id": "Anthropic-JQgd9",
        "type": "genericNode",
        "position": {
          "x": 179.56094356635293,
          "y": -143.92389296716414
        },
        "data": {
          "type": "Anthropic",
          "node": {
            "template": {
              "anthropic_api_key": {
                "type": "SecretStr",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": true,
                "name": "anthropic_api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "cache": {
                "type": "BaseCache",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "cache",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "callbacks": {
                "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "count_tokens": {
                "type": "Callable[[str], int]",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "count_tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "AI_PROMPT": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "AI_PROMPT",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "HUMAN_PROMPT": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "HUMAN_PROMPT",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "anthropic_api_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "anthropic_api_url",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "async_client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "async_client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "default_request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "default_request_timeout",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "max_retries": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": 2,
                "fileTypes": [],
                "password": false,
                "name": "max_retries",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "max_tokens_to_sample": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": 256,
                "fileTypes": [],
                "password": false,
                "name": "max_tokens_to_sample",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "claude-2",
                "fileTypes": [],
                "password": false,
                "name": "model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "model_kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "streaming": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "password": false,
                "name": "streaming",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tags": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "top_k": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "top_k",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "top_p": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "top_p",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "verbose": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "verbose",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "Anthropic"
            },
            "description": "[*Deprecated*] Anthropic large language models.",
            "base_classes": [
              "BaseLanguageModel",
              "Anthropic",
              "BaseLLM",
              "LLM",
              "_AnthropicCommon"
            ],
            "display_name": "Anthropic",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "Anthropic-JQgd9"
        },
        "selected": false,
        "width": 384,
        "height": 423,
        "positionAbsolute": {
          "x": 179.56094356635293,
          "y": -143.92389296716414
        },
        "dragging": false
      },
      {
        "id": "ChatOpenAI-GNQqw",
        "type": "genericNode",
        "position": {
          "x": 711.1676716092818,
          "y": -567.7663945801842
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 256,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-1106-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": true
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-GNQqw"
        },
        "selected": false,
        "width": 384,
        "height": 731,
        "positionAbsolute": {
          "x": 711.1676716092818,
          "y": -567.7663945801842
        },
        "dragging": false
      },
      {
        "id": "Chroma-gWUIN",
        "type": "genericNode",
        "position": {
          "x": 1005.1101576586814,
          "y": 793.4749657006587
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_cors_allow_origins": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_grpc_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_host": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_ssl_enabled": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "axiestudio",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist_directory": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {
              "collection_name": null,
              "persist": null,
              "embedding": null,
              "chroma_server_ssl_enabled": null,
              "persist_directory": null,
              "documents": null,
              "chroma_server_cors_allow_origins": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_grpc_port": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Chroma-gWUIN"
        },
        "selected": false,
        "width": 384,
        "height": 555,
        "positionAbsolute": {
          "x": 1005.1101576586814,
          "y": 793.4749657006587
        },
        "dragging": false
      },
      {
        "id": "PyPDFLoader-MRVd8",
        "type": "genericNode",
        "position": {
          "x": 518.2397400328202,
          "y": 742.3918040560759
        },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [
                  ".pdf"
                ],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": [
                  {
                    "": ""
                  }
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": [
              "Document"
            ],
            "display_name": "PyPDFLoader",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "PyPDFLoader-MRVd8"
        },
        "selected": false,
        "width": 384,
        "height": 367,
        "positionAbsolute": {
          "x": 518.2397400328202,
          "y": 742.3918040560759
        },
        "dragging": false
      },
      {
        "id": "OpenAIEmbeddings-1D84f",
        "type": "genericNode",
        "position": {
          "x": 347.65151807063774,
          "y": 1217.6312193917454
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "allowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "allowed_special",
                "display_name": "Allowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "client",
                "display_name": "Client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "default_headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_headers",
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "default_query": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_query",
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "deployment",
                "display_name": "Deployment",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "disallowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [
                  "all"
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "disallowed_special",
                "display_name": "Disallowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding_ctx_length": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 8191,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding_ctx_length",
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 6,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_version": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_organization": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_proxy": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "show_progress_bar": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "show_progress_bar",
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "skip_empty": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "skip_empty",
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_enable": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_enable",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_model_name",
                "display_name": "TikToken Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "OpenAI embedding models",
            "base_classes": [
              "OpenAIEmbeddings",
              "Embeddings",
              "Callable"
            ],
            "display_name": "OpenAIEmbeddings",
            "documentation": "",
            "custom_fields": {
              "default_headers": null,
              "default_query": null,
              "allowed_special": null,
              "disallowed_special": null,
              "chunk_size": null,
              "client": null,
              "deployment": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "output_types": [
              "OpenAIEmbeddings",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIEmbeddings-1D84f"
        },
        "selected": false,
        "width": 384,
        "height": 635,
        "positionAbsolute": {
          "x": 347.65151807063774,
          "y": 1217.6312193917454
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "VectorStoreRetrieverMemory-4oo6v",
        "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œVectorStoreRetrieverMemoryœ],œdataTypeœ:œVectorStoreRetrieverMemoryœ,œidœ:œVectorStoreRetrieverMemory-4oo6vœ}",
        "target": "RetrievalQA-Nj3Ew",
        "targetHandle": "{œfieldNameœ:œmemory_RetrievalQA-Hhe38œ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œmemoryœ,œidœ:œRetrievalQA-Hhe38œ},œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory_RetrievalQA-Hhe38",
            "id": "RetrievalQA-Nj3Ew",
            "inputTypes": null,
            "proxy": {
              "field": "memory",
              "id": "RetrievalQA-Hhe38"
            },
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseMemory",
              "VectorStoreRetrieverMemory"
            ],
            "dataType": "VectorStoreRetrieverMemory",
            "id": "VectorStoreRetrieverMemory-4oo6v"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-VectorStoreRetrieverMemory-4oo6v{œbaseClassesœ:[œBaseMemoryœ,œVectorStoreRetrieverMemoryœ],œdataTypeœ:œVectorStoreRetrieverMemoryœ,œidœ:œVectorStoreRetrieverMemory-4oo6vœ}-RetrievalQA-Nj3Ew{œfieldNameœ:œmemory_RetrievalQA-Hhe38œ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œmemoryœ,œidœ:œRetrievalQA-Hhe38œ},œtypeœ:œBaseMemoryœ}"
      },
      {
        "source": "Anthropic-JQgd9",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œAnthropicœ,œBaseLLMœ,œLLMœ,œ_AnthropicCommonœ],œdataTypeœ:œAnthropicœ,œidœ:œAnthropic-JQgd9œ}",
        "target": "RetrievalQA-Nj3Ew",
        "targetHandle": "{œfieldNameœ:œllm_CombineDocsChain-ZlGNSœ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œllmœ,œidœ:œCombineDocsChain-ZlGNSœ},œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm_CombineDocsChain-ZlGNS",
            "id": "RetrievalQA-Nj3Ew",
            "inputTypes": null,
            "proxy": {
              "field": "llm",
              "id": "CombineDocsChain-ZlGNS"
            },
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "Anthropic",
              "BaseLLM",
              "LLM",
              "_AnthropicCommon"
            ],
            "dataType": "Anthropic",
            "id": "Anthropic-JQgd9"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Anthropic-JQgd9{œbaseClassesœ:[œBaseLanguageModelœ,œAnthropicœ,œBaseLLMœ,œLLMœ,œ_AnthropicCommonœ],œdataTypeœ:œAnthropicœ,œidœ:œAnthropic-JQgd9œ}-RetrievalQA-Nj3Ew{œfieldNameœ:œllm_CombineDocsChain-ZlGNSœ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œllmœ,œidœ:œCombineDocsChain-ZlGNSœ},œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "PyPDFLoader-MRVd8",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-MRVd8œ}",
        "target": "Chroma-gWUIN",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-gWUIN",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-MRVd8"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PyPDFLoader-MRVd8{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-MRVd8œ}-Chroma-gWUIN{œfieldNameœ:œdocumentsœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "OpenAIEmbeddings-1D84f",
        "sourceHandle": "{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1D84fœ}",
        "target": "Chroma-gWUIN",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-gWUIN",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "OpenAIEmbeddings",
              "Embeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-1D84f"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-1D84f{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1D84fœ}-Chroma-gWUIN{œfieldNameœ:œembeddingœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      }
    ],
    "viewport": {
      "x": 335.87179117919925,
      "y": 15.864435139560726,
      "zoom": 0.4210314768042079
    }
  },
  "metadata": {
    "RetrievalQA": {
      "count": 1
    },
    "VectorStoreRetrieverMemory": {
      "count": 1
    },
    "Anthropic": {
      "count": 1
    },
    "ChatOpenAI": {
      "count": 1
    },
    "Chroma": {
      "count": 1
    },
    "PyPDFLoader": {
      "count": 1
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "ccc3361d-e62b-4931-a722-f7f6c5b4cdca",
    "name": "Untitled document",
    "description": "Empowering Language Engineering.",
    "is_component": false,
    "liked_by_count": "2",
    "downloads_count": "20",
    "metadata": {
      "RetrievalQA": {
        "count": 1
      },
      "VectorStoreRetrieverMemory": {
        "count": 1
      },
      "Anthropic": {
        "count": 1
      },
      "ChatOpenAI": {
        "count": 1
      },
      "Chroma": {
        "count": 1
      },
      "PyPDFLoader": {
        "count": 1
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "0.6.15",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "RetrievalQA-Nj3Ew",
          "type": "genericNode",
          "position": {
            "x": 904.9215573638555,
            "y": 245.15785708956815
          },
          "data": {
            "type": "RetrievalQA",
            "node": {
              "output_types": [],
              "display_name": "Basic RAG",
              "documentation": "",
              "base_classes": [
                "BaseRetrievalQA",
                "RetrievalQA",
                "Chain",
                "Callable"
              ],
              "description": "double click to edit description",
              "template": {
                "callbacks_RetrievalQA-Hhe38": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "callbacks",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                  "list": true,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "callbacks"
                  },
                  "display_name": "Callbacks"
                },
                "memory_RetrievalQA-Hhe38": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "BaseMemory",
                  "list": false,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "memory"
                  },
                  "display_name": "Memory"
                },
                "input_key_RetrievalQA-Hhe38": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "query",
                  "password": false,
                  "name": "input_key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "input_key"
                  },
                  "display_name": "Input Key"
                },
                "metadata_RetrievalQA-Hhe38": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "metadata",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "dict",
                  "list": false,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "metadata"
                  },
                  "display_name": "Metadata"
                },
                "output_key_RetrievalQA-Hhe38": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "result",
                  "password": false,
                  "name": "output_key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "output_key"
                  },
                  "display_name": "Output Key"
                },
                "return_source_documents_RetrievalQA-Hhe38": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "password": false,
                  "name": "return_source_documents",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "bool",
                  "list": false,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "return_source_documents"
                  },
                  "display_name": "Return Source Documents"
                },
                "tags_RetrievalQA-Hhe38": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "tags",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": true,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "tags"
                  },
                  "display_name": "Tags"
                },
                "verbose_RetrievalQA-Hhe38": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "bool",
                  "list": false,
                  "proxy": {
                    "id": "RetrievalQA-Hhe38",
                    "field": "verbose"
                  },
                  "display_name": "Verbose"
                },
                "code_Chroma-dUHtN": {
                  "dynamic": true,
                  "required": true,
                  "placeholder": "",
                  "show": false,
                  "multiline": true,
                  "value": "from typing import Optional, Union\nfrom axiestudio import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "type": "code",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "chroma_server_cors_allow_origins_Chroma-dUHtN": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "chroma_server_cors_allow_origins"
                  }
                },
                "chroma_server_grpc_port_Chroma-dUHtN": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "int",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "chroma_server_grpc_port"
                  }
                },
                "chroma_server_host_Chroma-dUHtN": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "chroma_server_host"
                  }
                },
                "chroma_server_port_Chroma-dUHtN": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "int",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "chroma_server_port"
                  }
                },
                "chroma_server_ssl_enabled_Chroma-dUHtN": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "bool",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "chroma_server_ssl_enabled"
                  }
                },
                "collection_name_Chroma-dUHtN": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "axiestudio",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "collection_name"
                  }
                },
                "embedding_Chroma-dUHtN": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "Embeddings",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "embedding"
                  }
                },
                "persist_Chroma-dUHtN": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "password": false,
                  "name": "persist",
                  "display_name": "Persist",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "bool",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "persist"
                  }
                },
                "persist_directory_Chroma-dUHtN": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "proxy": {
                    "id": "Chroma-dUHtN",
                    "field": "persist_directory"
                  }
                },
                "llm_CombineDocsChain-ZlGNS": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "BaseLanguageModel",
                  "list": false,
                  "proxy": {
                    "id": "CombineDocsChain-ZlGNS",
                    "field": "llm"
                  }
                },
                "chain_type_CombineDocsChain-ZlGNS": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "stuff",
                  "password": false,
                  "options": [
                    "stuff",
                    "map_reduce",
                    "map_rerank",
                    "refine"
                  ],
                  "name": "chain_type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": true,
                  "proxy": {
                    "id": "CombineDocsChain-ZlGNS",
                    "field": "chain_type"
                  },
                  "display_name": "Chain Type"
                },
                "code_CustomComponent-715vY": {
                  "dynamic": true,
                  "required": true,
                  "placeholder": "",
                  "show": false,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "type": "code",
                  "list": false,
                  "proxy": {
                    "id": "CustomComponent-715vY",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "file_path_CustomComponent-715vY": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "file",
                  "list": false,
                  "fileTypes": [
                    "json",
                    "txt",
                    "csv",
                    "jsonl",
                    "html",
                    "htm",
                    "conllu",
                    "enex",
                    "msg",
                    "pdf",
                    "srt",
                    "eml",
                    "md",
                    "pptx",
                    "docx"
                  ],
                  "file_path": "/Users/rodrigonader/Library/Caches/axiestudio/f2b1ae44-3df4-4b22-9153-99e7d8abb51c/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                  "value": "",
                  "proxy": {
                    "id": "CustomComponent-715vY",
                    "field": "file_path"
                  }
                },
                "loader_CustomComponent-715vY": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "Automatic",
                  "password": false,
                  "options": [
                    "Automatic",
                    "Airbyte JSON (.jsonl)",
                    "JSON (.json)",
                    "BeautifulSoup4 HTML (.html, .htm)",
                    "CSV (.csv)",
                    "CoNLL-U (.conllu)",
                    "EverNote (.enex)",
                    "Facebook Chat (.json)",
                    "Outlook Message (.msg)",
                    "PyPDF (.pdf)",
                    "Subtitle (.str)",
                    "Text (.txt)",
                    "Unstructured Email (.eml)",
                    "Unstructured HTML (.html, .htm)",
                    "Unstructured Markdown (.md)",
                    "Unstructured PowerPoint (.pptx)",
                    "Unstructured Word (.docx)"
                  ],
                  "name": "loader",
                  "display_name": "Loader",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": true,
                  "proxy": {
                    "id": "CustomComponent-715vY",
                    "field": "loader"
                  }
                },
                "chunk_overlap_CharacterTextSplitter-PaUem": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "int",
                  "list": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-PaUem",
                    "field": "chunk_overlap"
                  }
                },
                "chunk_size_CharacterTextSplitter-PaUem": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "int",
                  "list": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-PaUem",
                    "field": "chunk_size"
                  }
                },
                "separator_CharacterTextSplitter-PaUem": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": " ",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-PaUem",
                    "field": "separator"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "width": 384,
                      "height": 339,
                      "id": "RetrievalQA-Hhe38",
                      "type": "genericNode",
                      "position": {
                        "x": 786.0148744080102,
                        "y": 224.0922500095482
                      },
                      "data": {
                        "type": "RetrievalQA",
                        "node": {
                          "template": {
                            "callbacks": {
                              "required": false,
                              "placeholder": "",
                              "show": false,
                              "multiline": false,
                              "password": false,
                              "name": "callbacks",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                              "list": true
                            },
                            "combine_documents_chain": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "combine_documents_chain",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "BaseCombineDocumentsChain",
                              "list": false
                            },
                            "memory": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "memory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "BaseMemory",
                              "list": false
                            },
                            "retriever": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "retriever",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "BaseRetriever",
                              "list": false
                            },
                            "input_key": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": "query",
                              "password": false,
                              "name": "input_key",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": false
                            },
                            "metadata": {
                              "required": false,
                              "placeholder": "",
                              "show": false,
                              "multiline": false,
                              "password": false,
                              "name": "metadata",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "dict",
                              "list": false
                            },
                            "output_key": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": "result",
                              "password": false,
                              "name": "output_key",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": false
                            },
                            "return_source_documents": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": true,
                              "password": false,
                              "name": "return_source_documents",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "bool",
                              "list": false
                            },
                            "tags": {
                              "required": false,
                              "placeholder": "",
                              "show": false,
                              "multiline": false,
                              "password": false,
                              "name": "tags",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": true
                            },
                            "verbose": {
                              "required": false,
                              "placeholder": "",
                              "show": false,
                              "multiline": false,
                              "password": false,
                              "name": "verbose",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "bool",
                              "list": false
                            },
                            "_type": "RetrievalQA"
                          },
                          "description": "Chain for question-answering against an index.",
                          "base_classes": [
                            "BaseRetrievalQA",
                            "RetrievalQA",
                            "Chain",
                            "Callable"
                          ],
                          "display_name": "RetrievalQA",
                          "custom_fields": {},
                          "output_types": [],
                          "documentation": "https://python.langchain.com/docs/modules/chains/popular/vector_db_qa",
                          "beta": false,
                          "error": null
                        },
                        "id": "RetrievalQA-Hhe38"
                      },
                      "selected": true,
                      "positionAbsolute": {
                        "x": 786.0148744080102,
                        "y": 224.0922500095482
                      },
                      "dragging": false
                    },
                    {
                      "width": 384,
                      "height": 539,
                      "id": "Chroma-dUHtN",
                      "type": "genericNode",
                      "position": {
                        "x": 233.28825393386717,
                        "y": 329.51112502864464
                      },
                      "data": {
                        "type": "Chroma",
                        "node": {
                          "template": {
                            "code": {
                              "dynamic": true,
                              "required": true,
                              "placeholder": "",
                              "show": false,
                              "multiline": true,
                              "value": "from typing import Optional, Union\nfrom axiestudio import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                              "password": false,
                              "name": "code",
                              "advanced": false,
                              "type": "code",
                              "list": false
                            },
                            "_type": "CustomComponent",
                            "chroma_server_cors_allow_origins": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "chroma_server_cors_allow_origins",
                              "display_name": "Server CORS Allow Origins",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": false
                            },
                            "chroma_server_grpc_port": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "chroma_server_grpc_port",
                              "display_name": "Server gRPC Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "int",
                              "list": false
                            },
                            "chroma_server_host": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "chroma_server_host",
                              "display_name": "Server Host",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": false
                            },
                            "chroma_server_port": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "chroma_server_port",
                              "display_name": "Server Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "int",
                              "list": false
                            },
                            "chroma_server_ssl_enabled": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": false,
                              "password": false,
                              "name": "chroma_server_ssl_enabled",
                              "display_name": "Server SSL Enabled",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "type": "bool",
                              "list": false
                            },
                            "collection_name": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": "axiestudio",
                              "password": false,
                              "name": "collection_name",
                              "display_name": "Collection Name",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": false
                            },
                            "documents": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "documents",
                              "display_name": "Documents",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "Document",
                              "list": true
                            },
                            "embedding": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "embedding",
                              "display_name": "Embedding",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "Embeddings",
                              "list": false
                            },
                            "persist": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": false,
                              "password": false,
                              "name": "persist",
                              "display_name": "Persist",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "bool",
                              "list": false
                            },
                            "persist_directory": {
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "persist_directory",
                              "display_name": "Persist Directory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": false
                            }
                          },
                          "description": "Implementation of Vector Store using Chroma",
                          "base_classes": [
                            "VectorStore",
                            "BaseRetriever"
                          ],
                          "display_name": "Chroma",
                          "custom_fields": {
                            "chroma_server_cors_allow_origins": null,
                            "chroma_server_grpc_port": null,
                            "chroma_server_host": null,
                            "chroma_server_port": null,
                            "chroma_server_ssl_enabled": null,
                            "collection_name": null,
                            "documents": null,
                            "embedding": null,
                            "persist": null,
                            "persist_directory": null
                          },
                          "output_types": [
                            "Chroma"
                          ],
                          "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                          "beta": true,
                          "error": null
                        },
                        "id": "Chroma-dUHtN"
                      },
                      "selected": true,
                      "positionAbsolute": {
                        "x": 233.28825393386717,
                        "y": 329.51112502864464
                      },
                      "dragging": false
                    },
                    {
                      "width": 384,
                      "height": 333,
                      "id": "CombineDocsChain-ZlGNS",
                      "type": "genericNode",
                      "position": {
                        "x": 218.59271730686442,
                        "y": -167.93319837803648
                      },
                      "data": {
                        "type": "CombineDocsChain",
                        "node": {
                          "template": {
                            "llm": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "llm",
                              "display_name": "LLM",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "BaseLanguageModel",
                              "list": false
                            },
                            "chain_type": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": "stuff",
                              "password": false,
                              "options": [
                                "stuff",
                                "map_reduce",
                                "map_rerank",
                                "refine"
                              ],
                              "name": "chain_type",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": true
                            },
                            "_type": "load_qa_chain"
                          },
                          "description": "Load question answering chain.",
                          "base_classes": [
                            "BaseCombineDocumentsChain",
                            "Callable"
                          ],
                          "display_name": "CombineDocsChain",
                          "custom_fields": {},
                          "output_types": [],
                          "documentation": "",
                          "beta": false,
                          "error": null
                        },
                        "id": "CombineDocsChain-ZlGNS"
                      },
                      "selected": true,
                      "positionAbsolute": {
                        "x": 218.59271730686442,
                        "y": -167.93319837803648
                      },
                      "dragging": false
                    },
                    {
                      "width": 384,
                      "height": 457,
                      "id": "CustomComponent-715vY",
                      "type": "genericNode",
                      "position": {
                        "x": -947.6155160488396,
                        "y": 293.1413507229215
                      },
                      "data": {
                        "type": "CustomComponent",
                        "node": {
                          "template": {
                            "code": {
                              "dynamic": true,
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                              "password": false,
                              "name": "code",
                              "advanced": false,
                              "type": "code",
                              "list": false
                            },
                            "_type": "CustomComponent",
                            "file_path": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "file_path",
                              "display_name": "File Path",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "file",
                              "list": false,
                              "fileTypes": [
                                "json",
                                "txt",
                                "csv",
                                "jsonl",
                                "html",
                                "htm",
                                "conllu",
                                "enex",
                                "msg",
                                "pdf",
                                "srt",
                                "eml",
                                "md",
                                "pptx",
                                "docx"
                              ],
                              "file_path": "/Users/rodrigonader/Library/Caches/axiestudio/13ca1b26-ed4a-457b-8e00-eab94d5448dc/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                              "value": ""
                            },
                            "loader": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": "Automatic",
                              "password": false,
                              "options": [
                                "Automatic",
                                "Airbyte JSON (.jsonl)",
                                "JSON (.json)",
                                "BeautifulSoup4 HTML (.html, .htm)",
                                "CSV (.csv)",
                                "CoNLL-U (.conllu)",
                                "EverNote (.enex)",
                                "Facebook Chat (.json)",
                                "Outlook Message (.msg)",
                                "PyPDF (.pdf)",
                                "Subtitle (.str)",
                                "Text (.txt)",
                                "Unstructured Email (.eml)",
                                "Unstructured HTML (.html, .htm)",
                                "Unstructured Markdown (.md)",
                                "Unstructured PowerPoint (.pptx)",
                                "Unstructured Word (.docx)"
                              ],
                              "name": "loader",
                              "display_name": "Loader",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": true
                            }
                          },
                          "description": "A generic loader that auto-detects file types.",
                          "base_classes": [
                            "Document"
                          ],
                          "display_name": "File Loader",
                          "custom_fields": {
                            "file_path": null,
                            "loader": null
                          },
                          "output_types": [
                            "Document"
                          ],
                          "documentation": "",
                          "beta": true,
                          "error": null,
                          "official": false
                        },
                        "id": "CustomComponent-715vY"
                      },
                      "selected": true,
                      "positionAbsolute": {
                        "x": -947.6155160488396,
                        "y": 293.1413507229215
                      },
                      "dragging": false
                    },
                    {
                      "width": 384,
                      "height": 501,
                      "id": "CharacterTextSplitter-PaUem",
                      "type": "genericNode",
                      "position": {
                        "x": -314.0779657410157,
                        "y": 23.837018963891467
                      },
                      "data": {
                        "type": "CharacterTextSplitter",
                        "node": {
                          "template": {
                            "documents": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "password": false,
                              "name": "documents",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "Document",
                              "list": true
                            },
                            "chunk_overlap": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": 200,
                              "password": false,
                              "name": "chunk_overlap",
                              "display_name": "Chunk Overlap",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "int",
                              "list": false
                            },
                            "chunk_size": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": 1000,
                              "password": false,
                              "name": "chunk_size",
                              "display_name": "Chunk Size",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "int",
                              "list": false
                            },
                            "separator": {
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "multiline": false,
                              "value": " ",
                              "password": false,
                              "name": "separator",
                              "display_name": "Separator",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "type": "str",
                              "list": false
                            },
                            "_type": "CharacterTextSplitter"
                          },
                          "description": "Splitting text that looks at characters.",
                          "base_classes": [
                            "Document"
                          ],
                          "display_name": "CharacterTextSplitter",
                          "custom_fields": {},
                          "output_types": [
                            "Document"
                          ],
                          "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
                          "beta": false,
                          "error": null
                        },
                        "id": "CharacterTextSplitter-PaUem"
                      },
                      "selected": true,
                      "positionAbsolute": {
                        "x": -314.0779657410157,
                        "y": 23.837018963891467
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "Chroma-dUHtN",
                      "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}",
                      "target": "RetrievalQA-Hhe38",
                      "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "retriever",
                          "id": "RetrievalQA-Hhe38",
                          "inputTypes": null,
                          "type": "BaseRetriever"
                        },
                        "sourceHandle": {
                          "baseClasses": [
                            "VectorStore",
                            "BaseRetriever"
                          ],
                          "dataType": "Chroma",
                          "id": "Chroma-dUHtN"
                        }
                      },
                      "style": {
                        "stroke": "#555"
                      },
                      "className": "stroke-foreground  stroke-connection",
                      "animated": false,
                      "id": "reactflow__edge-Chroma-dUHtN{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}-RetrievalQA-Hhe38{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                      "selected": true
                    },
                    {
                      "source": "CombineDocsChain-ZlGNS",
                      "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}",
                      "target": "RetrievalQA-Hhe38",
                      "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "combine_documents_chain",
                          "id": "RetrievalQA-Hhe38",
                          "inputTypes": null,
                          "type": "BaseCombineDocumentsChain"
                        },
                        "sourceHandle": {
                          "baseClasses": [
                            "BaseCombineDocumentsChain",
                            "Callable"
                          ],
                          "dataType": "CombineDocsChain",
                          "id": "CombineDocsChain-ZlGNS"
                        }
                      },
                      "style": {
                        "stroke": "#555"
                      },
                      "className": "stroke-foreground  stroke-connection",
                      "animated": false,
                      "id": "reactflow__edge-CombineDocsChain-ZlGNS{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}-RetrievalQA-Hhe38{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                      "selected": true
                    },
                    {
                      "source": "CustomComponent-715vY",
                      "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}",
                      "target": "CharacterTextSplitter-PaUem",
                      "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "documents",
                          "id": "CharacterTextSplitter-PaUem",
                          "inputTypes": null,
                          "type": "Document"
                        },
                        "sourceHandle": {
                          "baseClasses": [
                            "Document"
                          ],
                          "dataType": "CustomComponent",
                          "id": "CustomComponent-715vY"
                        }
                      },
                      "style": {
                        "stroke": "#555"
                      },
                      "className": "stroke-foreground  stroke-connection",
                      "animated": false,
                      "id": "reactflow__edge-CustomComponent-715vY{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}-CharacterTextSplitter-PaUem{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                      "selected": true
                    },
                    {
                      "source": "CharacterTextSplitter-PaUem",
                      "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}",
                      "target": "Chroma-dUHtN",
                      "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "documents",
                          "id": "Chroma-dUHtN",
                          "inputTypes": null,
                          "type": "Document"
                        },
                        "sourceHandle": {
                          "baseClasses": [
                            "Document"
                          ],
                          "dataType": "CharacterTextSplitter",
                          "id": "CharacterTextSplitter-PaUem"
                        }
                      },
                      "style": {
                        "stroke": "#555"
                      },
                      "className": "stroke-foreground  stroke-connection",
                      "animated": false,
                      "id": "reactflow__edge-CharacterTextSplitter-PaUem{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}-Chroma-dUHtN{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "x": 577.3649569565561,
                    "y": 227.84214213787357,
                    "zoom": 0.48903173672367245
                  }
                },
                "is_component": false,
                "name": "Silly Poitras",
                "description": "",
                "id": "F7KdT"
              },
              "official": false
            },
            "id": "RetrievalQA-Nj3Ew"
          },
          "selected": false,
          "width": 384,
          "height": 425,
          "dragging": false,
          "positionAbsolute": {
            "x": 904.9215573638555,
            "y": 245.15785708956815
          }
        },
        {
          "id": "VectorStoreRetrieverMemory-4oo6v",
          "type": "genericNode",
          "position": {
            "x": -124.67096171532268,
            "y": 237.1630563791482
          },
          "data": {
            "type": "VectorStoreRetrieverMemory",
            "node": {
              "template": {
                "retriever": {
                  "type": "VectorStoreRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "exclude_input_keys": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "exclude_input_keys",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "input_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Input when more than one variable is available.",
                  "title_case": true
                },
                "memory_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "chat_history",
                  "fileTypes": [],
                  "password": false,
                  "name": "memory_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_docs": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "return_docs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_messages": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "VectorStoreRetrieverMemory"
              },
              "description": "VectorStoreRetriever-backed memory.",
              "base_classes": [
                "BaseMemory",
                "VectorStoreRetrieverMemory"
              ],
              "display_name": "VectorStoreRetrieverMemory",
              "documentation": "https://python.langchain.com/docs/modules/memory/how_to/vectorstore_retriever_memory",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "VectorStoreRetrieverMemory-4oo6v"
          },
          "selected": false,
          "width": 384,
          "height": 507,
          "positionAbsolute": {
            "x": -124.67096171532268,
            "y": 237.1630563791482
          },
          "dragging": false
        },
        {
          "id": "Anthropic-JQgd9",
          "type": "genericNode",
          "position": {
            "x": 179.56094356635293,
            "y": -143.92389296716414
          },
          "data": {
            "type": "Anthropic",
            "node": {
              "template": {
                "anthropic_api_key": {
                  "type": "SecretStr",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": true,
                  "name": "anthropic_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "cache": {
                  "type": "BaseCache",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "cache",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "callbacks": {
                  "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "callbacks",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "count_tokens": {
                  "type": "Callable[[str], int]",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "count_tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "AI_PROMPT": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "AI_PROMPT",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "HUMAN_PROMPT": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "HUMAN_PROMPT",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "anthropic_api_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "anthropic_api_url",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "async_client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "async_client",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "client",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "default_request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "default_request_timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "max_retries": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": 2,
                  "fileTypes": [],
                  "password": false,
                  "name": "max_retries",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "max_tokens_to_sample": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": 256,
                  "fileTypes": [],
                  "password": false,
                  "name": "max_tokens_to_sample",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "claude-2",
                  "fileTypes": [],
                  "password": false,
                  "name": "model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "model_kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "streaming": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "streaming",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tags": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "tags",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "top_k": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "top_k",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "top_p": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "top_p",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "verbose": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "verbose",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "Anthropic"
              },
              "description": "[*Deprecated*] Anthropic large language models.",
              "base_classes": [
                "BaseLanguageModel",
                "Anthropic",
                "BaseLLM",
                "LLM",
                "_AnthropicCommon"
              ],
              "display_name": "Anthropic",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "Anthropic-JQgd9"
          },
          "selected": false,
          "width": 384,
          "height": 423,
          "positionAbsolute": {
            "x": 179.56094356635293,
            "y": -143.92389296716414
          },
          "dragging": false
        },
        {
          "id": "ChatOpenAI-GNQqw",
          "type": "genericNode",
          "position": {
            "x": 711.1676716092818,
            "y": -567.7663945801842
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 256,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-1106-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": true
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-GNQqw"
          },
          "selected": false,
          "width": 384,
          "height": 731,
          "positionAbsolute": {
            "x": 711.1676716092818,
            "y": -567.7663945801842
          },
          "dragging": false
        },
        {
          "id": "Chroma-gWUIN",
          "type": "genericNode",
          "position": {
            "x": 1005.1101576586814,
            "y": 793.4749657006587
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_cors_allow_origins": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_grpc_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_host": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_ssl_enabled": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "axiestudio",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist",
                  "display_name": "Persist",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist_directory": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Chroma",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Chroma",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {
                "collection_name": null,
                "persist": null,
                "embedding": null,
                "chroma_server_ssl_enabled": null,
                "persist_directory": null,
                "documents": null,
                "chroma_server_cors_allow_origins": null,
                "chroma_server_host": null,
                "chroma_server_port": null,
                "chroma_server_grpc_port": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Chroma-gWUIN"
          },
          "selected": false,
          "width": 384,
          "height": 555,
          "positionAbsolute": {
            "x": 1005.1101576586814,
            "y": 793.4749657006587
          },
          "dragging": false
        },
        {
          "id": "PyPDFLoader-MRVd8",
          "type": "genericNode",
          "position": {
            "x": 518.2397400328202,
            "y": 742.3918040560759
          },
          "data": {
            "type": "PyPDFLoader",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [
                    ".pdf"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": [
                    {
                      "": ""
                    }
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PyPDFLoader"
              },
              "description": "Load PDF using pypdf into list of documents.",
              "base_classes": [
                "Document"
              ],
              "display_name": "PyPDFLoader",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "PyPDFLoader-MRVd8"
          },
          "selected": false,
          "width": 384,
          "height": 367,
          "positionAbsolute": {
            "x": 518.2397400328202,
            "y": 742.3918040560759
          },
          "dragging": false
        },
        {
          "id": "OpenAIEmbeddings-1D84f",
          "type": "genericNode",
          "position": {
            "x": 347.65151807063774,
            "y": 1217.6312193917454
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "allowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "allowed_special",
                  "display_name": "Allowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "client",
                  "display_name": "Client",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "default_headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_headers",
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "default_query": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_query",
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "deployment",
                  "display_name": "Deployment",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "disallowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [
                    "all"
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "disallowed_special",
                  "display_name": "Disallowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding_ctx_length": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 8191,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding_ctx_length",
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 6,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_type",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_version": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_version",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_organization": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_organization",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_proxy": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_proxy",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "show_progress_bar": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "show_progress_bar",
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "skip_empty": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "skip_empty",
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_enable": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_enable",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_model_name",
                  "display_name": "TikToken Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "OpenAI embedding models",
              "base_classes": [
                "OpenAIEmbeddings",
                "Embeddings",
                "Callable"
              ],
              "display_name": "OpenAIEmbeddings",
              "documentation": "",
              "custom_fields": {
                "default_headers": null,
                "default_query": null,
                "allowed_special": null,
                "disallowed_special": null,
                "chunk_size": null,
                "client": null,
                "deployment": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "output_types": [
                "OpenAIEmbeddings",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIEmbeddings-1D84f"
          },
          "selected": false,
          "width": 384,
          "height": 635,
          "positionAbsolute": {
            "x": 347.65151807063774,
            "y": 1217.6312193917454
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "VectorStoreRetrieverMemory-4oo6v",
          "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œVectorStoreRetrieverMemoryœ],œdataTypeœ:œVectorStoreRetrieverMemoryœ,œidœ:œVectorStoreRetrieverMemory-4oo6vœ}",
          "target": "RetrievalQA-Nj3Ew",
          "targetHandle": "{œfieldNameœ:œmemory_RetrievalQA-Hhe38œ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œmemoryœ,œidœ:œRetrievalQA-Hhe38œ},œtypeœ:œBaseMemoryœ}",
          "data": {
            "targetHandle": {
              "fieldName": "memory_RetrievalQA-Hhe38",
              "id": "RetrievalQA-Nj3Ew",
              "inputTypes": null,
              "proxy": {
                "field": "memory",
                "id": "RetrievalQA-Hhe38"
              },
              "type": "BaseMemory"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseMemory",
                "VectorStoreRetrieverMemory"
              ],
              "dataType": "VectorStoreRetrieverMemory",
              "id": "VectorStoreRetrieverMemory-4oo6v"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-VectorStoreRetrieverMemory-4oo6v{œbaseClassesœ:[œBaseMemoryœ,œVectorStoreRetrieverMemoryœ],œdataTypeœ:œVectorStoreRetrieverMemoryœ,œidœ:œVectorStoreRetrieverMemory-4oo6vœ}-RetrievalQA-Nj3Ew{œfieldNameœ:œmemory_RetrievalQA-Hhe38œ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œmemoryœ,œidœ:œRetrievalQA-Hhe38œ},œtypeœ:œBaseMemoryœ}"
        },
        {
          "source": "Anthropic-JQgd9",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œAnthropicœ,œBaseLLMœ,œLLMœ,œ_AnthropicCommonœ],œdataTypeœ:œAnthropicœ,œidœ:œAnthropic-JQgd9œ}",
          "target": "RetrievalQA-Nj3Ew",
          "targetHandle": "{œfieldNameœ:œllm_CombineDocsChain-ZlGNSœ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œllmœ,œidœ:œCombineDocsChain-ZlGNSœ},œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm_CombineDocsChain-ZlGNS",
              "id": "RetrievalQA-Nj3Ew",
              "inputTypes": null,
              "proxy": {
                "field": "llm",
                "id": "CombineDocsChain-ZlGNS"
              },
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "Anthropic",
                "BaseLLM",
                "LLM",
                "_AnthropicCommon"
              ],
              "dataType": "Anthropic",
              "id": "Anthropic-JQgd9"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Anthropic-JQgd9{œbaseClassesœ:[œBaseLanguageModelœ,œAnthropicœ,œBaseLLMœ,œLLMœ,œ_AnthropicCommonœ],œdataTypeœ:œAnthropicœ,œidœ:œAnthropic-JQgd9œ}-RetrievalQA-Nj3Ew{œfieldNameœ:œllm_CombineDocsChain-ZlGNSœ,œidœ:œRetrievalQA-Nj3Ewœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œllmœ,œidœ:œCombineDocsChain-ZlGNSœ},œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "PyPDFLoader-MRVd8",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-MRVd8œ}",
          "target": "Chroma-gWUIN",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Chroma-gWUIN",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "PyPDFLoader",
              "id": "PyPDFLoader-MRVd8"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-PyPDFLoader-MRVd8{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-MRVd8œ}-Chroma-gWUIN{œfieldNameœ:œdocumentsœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "OpenAIEmbeddings-1D84f",
          "sourceHandle": "{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1D84fœ}",
          "target": "Chroma-gWUIN",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-gWUIN",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "OpenAIEmbeddings",
                "Embeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-1D84f"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-1D84f{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-1D84fœ}-Chroma-gWUIN{œfieldNameœ:œembeddingœ,œidœ:œChroma-gWUINœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        }
      ],
      "viewport": {
        "x": 335.87179117919925,
        "y": 15.864435139560726,
        "zoom": 0.4210314768042079
      }
    },
    "date_created": "2024-06-11T12:17:24.419Z",
    "date_updated": "2024-06-11T12:17:24.547Z",
    "status": "Public",
    "sort": null,
    "user_updated": "659b8c9c-06c4-4419-8dab-c3b10b4bb6ec",
    "user_created": {
      "username": "GT",
      "first_name": "Fei",
      "last_name": "Yan",
      "id": "659b8c9c-06c4-4419-8dab-c3b10b4bb6ec"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Agent",
          "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
        }
      },
      {
        "tags_id": {
          "name": "Memory",
          "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
        }
      },
      {
        "tags_id": {
          "name": "Chain",
          "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
        }
      },
      {
        "tags_id": {
          "name": "Vector Store",
          "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
        }
      },
      {
        "tags_id": {
          "name": "Prompt",
          "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.556Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 34,
    "converter_version": "1.0.0"
  }
}