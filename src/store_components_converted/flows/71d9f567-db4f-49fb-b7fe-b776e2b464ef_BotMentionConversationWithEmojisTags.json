{
  "id": "71d9f567-db4f-49fb-b7fe-b776e2b464ef",
  "name": "BotMentionConversationWithEmojisTags",
  "description": "A bot that answers questions where it is mentioned with a flow of emojis indicating that it is receiving and answering the user·  (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "joaoguilhermeS",
    "first_name": "João",
    "last_name": "Oliveira",
    "id": "94b2e207-1a44-4905-856c-4f5a69c168ce",
    "full_name": "João Oliveira"
  },
  "store_url": "https://www.langflow.store/store/component/71d9f567-db4f-49fb-b7fe-b776e2b464ef",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-20T01:45:47.967Z",
    "updated": "2024-05-20T01:45:48.049Z",
    "downloaded": "2025-08-19T17:50:05.071Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Agent",
        "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
      }
    },
    {
      "tags_id": {
        "name": "Chain",
        "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
      }
    },
    {
      "tags_id": {
        "name": "Prompt",
        "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.0a30",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Prompt-F5QUu",
        "type": "genericNode",
        "position": {
          "x": 494.7146009884282,
          "y": 57.75569710465106
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\nfrom axiestudio.interface.custom.custom_component import CustomComponent\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "You are an programming especialist that has a huge knowledge on the most different languages, such as  Python | C++ | Rust | GoLang | JavaScript.\nYou were develped by the YAITEC team, a partner of axiestudio team.\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": []
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-F5QUu",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 494.7146009884282,
          "y": 57.75569710465106
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-RNeUg",
        "type": "genericNode",
        "position": {
          "x": 1658.6536753617916,
          "y": -12.818740864082201
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": [\n                    \"gpt-4-turbo-2024-04-09\",\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-3.5-turbo\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n                \"value\": \"gpt-4-turbo-preview\",\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 256,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-3.5-turbo",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-2024-04-09",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.2",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "OpenAIModel-RNeUg"
        },
        "selected": false,
        "width": 384,
        "height": 563
      },
      {
        "id": "CustomComponent-FpxEJ",
        "type": "genericNode",
        "position": {
          "x": 1129.8587485676073,
          "y": 268.3030601285882
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n        return 1\n    \n\nclass FileUploadComponent(CustomComponent):\n    display_name = \"Join two Strings\"\n    description = \"This component sequentially join 2 Strings.\"\n    \n    def build_config(self):\n        return {\n            \"text1\": {\n                \"display_name\": \"Text 1\",\n                \"advanced\": False,\n                \"required\": True,\n            },\n            \"text2\": {\n                \"display_name\": \"Text 2\",\n                \"advanced\": False,\n                \"required\": True,\n            },\n        }\n    \n    def build(self, text1: str, text2: str) -> str:\n        \"\"\"\n        just join 2 strings :)\n        \"\"\"\n        return str(str(text1) + str(text2))",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "text1": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text1",
                "display_name": "Text 1",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "text2": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text2",
                "display_name": "Text 2",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "This component sequentially join 2 Strings.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Join 2 Strings",
            "documentation": "",
            "custom_fields": {
              "text1": null,
              "text2": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-FpxEJ"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 1129.8587485676073,
          "y": 268.3030601285882
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-KV6Kx",
        "type": "genericNode",
        "position": {
          "x": 101.13310160983735,
          "y": 742.7694587332944
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "bot_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "bot_name",
                "display_name": "BotName",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "channel_id": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "channel_id",
                "display_name": "ChannelId",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "1239303061915308164"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Any\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom json import loads\nfrom axiestudio.schema.dotdict import dotdict\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordThreads(CustomComponent):\n    display_name = \"DiscordThreads\"\n    description = \"get the messages of discord's threads\"\n    field_order = [\"bot_name\", \"token\", \"channel_id\", \"limit\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"bot_name\": {\n                \"display_name\": \"BotName\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"limit\": {\n                \"display_name\": \"Limit\",\n                \"value\": 20,\n                \"advanced\": False,\n                \"info\": \"The value 0 means limitless\",\n                \"required\": True,\n            }\n        }\n\n    def update_state(\n        self, name: str, value: Any\n    ):\n        print(name, value, flush=True)\n        return super().update_state(name, value)\n\n    def build(self, bot_name: str, token: str, channel_id: int,  limit: int) -> str:\n        import requests\n        \n        body = {\"token\": token}\n        if channel_id:\n            body[\"channel_id\"] = channel_id\n\n        resp = requests.post(\"http://discord:7880/api/v1/listen_mention\", json=body)\n        if resp.status_code == 200:\n            user_input = loads(resp.content)\n            user_input_id, user_input_msg = user_input[\"id\"], user_input[\"content\"]\n            body = {\"token\": token, \"limit\": limit}\n            resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/get_messages\", json=body)\n\n            if resp.status_code == 200:\n                messages = loads(resp.content)[1:]\n                messages.reverse()\n                messages = str([{\"sender\": message[\"author\"][\"name\"], \"message\": message[\"message\"]} for message in messages])\n\n                return f'Chat Messages: {messages}\\n\\nChat Message Order: Down to Top\\n\\nUser Input: {user_input_msg}\\nYour name: {bot_name}'\n            else:\n                raise Exception(\"Timeout exception\")\n        else:\n            raise Exception(\"Timeout exception\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "limit": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "2",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "limit",
                "display_name": "Limit",
                "advanced": false,
                "dynamic": false,
                "info": "The value 0 means limitless",
                "load_from_db": false,
                "title_case": false
              },
              "token": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "token",
                "display_name": "Token",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "get the messages of discord's threads",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "DiscordThreads",
            "documentation": "",
            "custom_fields": {
              "bot_name": null,
              "token": null,
              "channel_id": null,
              "limit": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "bot_name",
              "token",
              "channel_id",
              "limit"
            ],
            "beta": false
          },
          "id": "CustomComponent-KV6Kx",
          "description": "get the messages of discord's threads",
          "display_name": "DiscordThreads"
        },
        "selected": false,
        "width": 384,
        "height": 555,
        "positionAbsolute": {
          "x": 101.13310160983735,
          "y": 742.7694587332944
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-8RnJO",
        "type": "genericNode",
        "position": {
          "x": -412.78604653639064,
          "y": 828.1570980447945
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordBotName(CustomComponent):\n    display_name = \"DiscordBotName\"\n    description = \"get discord bot name\"\n    field_order = [\"token\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }\n        }\n\n    def build(self, token: str) -> str:\n        import requests\n        resp = requests.post(\"http://discord:7880/api/v1/bot_name\", json={\"token\": token})\n        if resp.status_code == 200:\n            return resp.content\n        else:\n            raise Exception(\"Timeout exception\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "token": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "token",
                "display_name": "Token",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "get discord bot name",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "DiscordBotName",
            "documentation": "",
            "custom_fields": {
              "token": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "token"
            ],
            "beta": false
          },
          "id": "CustomComponent-8RnJO",
          "description": "get discord bot name",
          "display_name": "DiscordBotName"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "dragging": false,
        "positionAbsolute": {
          "x": -412.78604653639064,
          "y": 828.1570980447945
        }
      },
      {
        "id": "CustomComponent-V8wWl",
        "type": "genericNode",
        "position": {
          "x": 2791.635523757459,
          "y": -23.17188841753098
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "channel_id": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "channel_id",
                "display_name": "ChannelId",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "1239303061915308164"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordChannelMentionResponse(CustomComponent):\n    display_name = \"DiscordChannelMentionResponse\"\n    description = \"Response channel message mention\"\n    field_order = [\"token\", \"channel_id\", \"message\", \"limit\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"limit\": {\n                \"display_name\": \"Limit\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"message\": {\n                \"display_name\": \"Message\",\n                \"advanced\": False,\n                \"required\": True,\n            }\n        }\n\n    def build(self, token: str, channel_id: int, message: str, limit: int) -> str:\n        import requests\n        resp = requests.post(\n            f\"http://discord:7880/api/v1/channels/{channel_id}/mentions/last\",\n            json={\n                \"token\": token,\n                \"limit\": limit,\n            }\n        )\n        if resp.status_code == 200:\n            msg_reference = loads(resp.content)[\"id\"]\n            resp = requests.post(\n                f\"http://discord:7880/api/v1/channels/{channel_id}/send_message\",\n                json={\n                    \"token\": token,\n                    \"message\": message,\n                    \"reference\": msg_reference,\n                }\n            )\n            if resp.status_code == 200:\n                return \"Sent successfully message:\" + message\n        print(\"err\", str(resp.content))\n        #raise Exception(resp.content)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "limit": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "limit",
                "display_name": "Limit",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "20"
              },
              "message": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "message",
                "display_name": "Message",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "token": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "token",
                "display_name": "Token",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Response channel message mention",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "DiscordChannelMentionResponse",
            "documentation": "",
            "custom_fields": {
              "token": null,
              "channel_id": null,
              "message": null,
              "limit": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "token",
              "channel_id",
              "message",
              "limit"
            ],
            "beta": false
          },
          "id": "CustomComponent-V8wWl",
          "description": "Response channel message mention",
          "display_name": "DiscordChannelMentionResponse"
        },
        "selected": true,
        "width": 384,
        "height": 555,
        "dragging": false,
        "positionAbsolute": {
          "x": 2791.635523757459,
          "y": -23.17188841753098
        }
      },
      {
        "id": "CustomComponent-w515n",
        "type": "genericNode",
        "position": {
          "x": 591.5377988358935,
          "y": 519.6573962661707
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "channel_id": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "channel_id",
                "display_name": "ChannelId",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "1239303061915308164"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Any\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom json import loads\nfrom axiestudio.schema.dotdict import dotdict\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordEmogiReaction(CustomComponent):\n    display_name = \"DiscordEmogiReaction\"\n    description = \"react to discord message\"\n    field_order = [\"token\", \"channel_id\", \"message_id\", \"reaction\", \"message\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"message_id\": {\n                \"display_name\": \"MessageId\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"reaction\": {\n                \"display_name\": \"EmojiReaction\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"message\": {\n                \"display_name\": \"Message\",\n                \"advanced\": False,\n                \"required\": False,\n            }\n        }\n\n    def update_state(\n        self, name: str, value: Any\n    ):\n        print(name, value, flush=True)\n        return super().update_state(name, value)\n\n    def build(self, token: str, channel_id: int, reaction: str, message: str, message_id: Optional[int] = None) -> str:\n        import requests\n\n        body = {\"token\": token}\n        if not message_id:\n            body = {\"token\": token, \"limit\": 1}\n            resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/get_messages\", json=body)\n            if resp.status_code == 200:\n                message_id = loads(resp.content)[0][\"id\"]\n            else: raise Exception(\"Could not retrieve last message\")\n        body = {\"token\": token, \"emoji\": reaction}\n        print(\"message_id\", message_id)\n        resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/react/{message_id}\", json=body)\n        return f\"Added reaction: {reaction}\"\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "message",
                "display_name": "Message",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "message_id": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "message_id",
                "display_name": "MessageId",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "reaction": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "reaction",
                "display_name": "EmojiReaction",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "🤖"
              },
              "token": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "token",
                "display_name": "Token",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "react to discord message",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "DiscordEmojiReaction",
            "documentation": "",
            "custom_fields": {
              "token": null,
              "channel_id": null,
              "reaction": null,
              "message": null,
              "message_id": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "token",
              "channel_id",
              "message_id",
              "reaction",
              "message"
            ],
            "beta": false
          },
          "id": "CustomComponent-w515n",
          "description": "react to discord message",
          "display_name": "DiscordEmogiReaction"
        },
        "selected": false,
        "width": 384,
        "height": 649,
        "dragging": false,
        "positionAbsolute": {
          "x": 591.5377988358935,
          "y": 519.6573962661707
        }
      },
      {
        "id": "CustomComponent-1gWUq",
        "type": "genericNode",
        "position": {
          "x": 2305.9267949036807,
          "y": -75.55234319021926
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "channel_id": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "channel_id",
                "display_name": "ChannelId",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "1239303061915308164"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Any\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom json import loads\nfrom axiestudio.schema.dotdict import dotdict\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordRemoveEmogiReaction(CustomComponent):\n    display_name = \"DiscordRemoveEmogiReaction\"\n    description = \"remove reaction from discord message\"\n    field_order = [\"token\", \"channel_id\", \"message_id\", \"reaction\", \"message\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"message_id\": {\n                \"display_name\": \"MessageId\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"reaction\": {\n                \"display_name\": \"EmojiReaction\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"message\": {\n                \"display_name\": \"Message\",\n                \"advanced\": False,\n                \"required\": False,\n            }\n        }\n\n    def update_state(\n        self, name: str, value: Any\n    ):\n        print(name, value, flush=True)\n        return super().update_state(name, value)\n\n    def build(self, token: str, channel_id: int, reaction: str, message: str, message_id: Optional[int] = None) -> str:\n        import requests\n\n        body = {\"token\": token}\n        if not message_id:\n            body = {\"token\": token, \"limit\": 1}\n            resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/get_messages\", json=body)\n            if resp.status_code == 200:\n                message_id = loads(resp.content)[0][\"id\"]\n            else: raise Exception(\"Could not retrieve last message\")\n        body = {\"token\": token, \"emoji\": reaction}\n        print(\"message_id\", message_id)\n        resp = requests.delete(f\"http://discord:7880/api/v1/channels/{channel_id}/react/{message_id}\", json=body)\n        return message\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "message",
                "display_name": "Message",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "message_id": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "message_id",
                "display_name": "MessageId",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "reaction": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "reaction",
                "display_name": "EmojiReaction",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "🤖"
              },
              "token": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "token",
                "display_name": "Token",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "remove reaction from discord message",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "DiscordRemoveEmojiReaction",
            "documentation": "",
            "custom_fields": {
              "token": null,
              "channel_id": null,
              "reaction": null,
              "message": null,
              "message_id": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "token",
              "channel_id",
              "message_id",
              "reaction",
              "message"
            ],
            "beta": false
          },
          "id": "CustomComponent-1gWUq",
          "description": "remove reaction from discord message",
          "display_name": "DiscordRemoveEmogiReaction"
        },
        "selected": false,
        "width": 384,
        "height": 649,
        "dragging": false,
        "positionAbsolute": {
          "x": 2305.9267949036807,
          "y": -75.55234319021926
        }
      },
      {
        "id": "ChatOutput-JPqLz",
        "type": "genericNode",
        "position": {
          "x": 2314.8056516192073,
          "y": -515.5693664047029
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-JPqLz"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 2314.8056516192073,
          "y": -515.5693664047029
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Prompt-F5QUu",
        "target": "CustomComponent-FpxEJ",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-F5QUuœ}",
        "targetHandle": "{œfieldNameœ:œtext1œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-F5QUu{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-F5QUuœ}-CustomComponent-FpxEJ{œfieldNameœ:œtext1œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "text1",
            "id": "CustomComponent-FpxEJ",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-F5QUu"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-FpxEJ",
        "target": "OpenAIModel-RNeUg",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-FpxEJœ}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-RNeUgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomComponent-FpxEJ{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-FpxEJœ}-OpenAIModel-RNeUg{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-RNeUgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-RNeUg",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-FpxEJ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-8RnJO",
        "target": "CustomComponent-KV6Kx",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-8RnJOœ}",
        "targetHandle": "{œfieldNameœ:œbot_nameœ,œidœ:œCustomComponent-KV6Kxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomComponent-8RnJO{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-8RnJOœ}-CustomComponent-KV6Kx{œfieldNameœ:œbot_nameœ,œidœ:œCustomComponent-KV6Kxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "bot_name",
            "id": "CustomComponent-KV6Kx",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-8RnJO"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-KV6Kx",
        "target": "CustomComponent-w515n",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KV6Kxœ}",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-w515nœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomComponent-KV6Kx{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KV6Kxœ}-CustomComponent-w515n{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-w515nœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "CustomComponent-w515n",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-KV6Kx"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "CustomComponent-w515n",
        "target": "CustomComponent-FpxEJ",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-w515nœ}",
        "targetHandle": "{œfieldNameœ:œtext2œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomComponent-w515n{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-w515nœ}-CustomComponent-FpxEJ{œfieldNameœ:œtext2œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "text2",
            "id": "CustomComponent-FpxEJ",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-w515n"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "OpenAIModel-RNeUg",
        "target": "CustomComponent-1gWUq",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-1gWUqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OpenAIModel-RNeUg{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}-CustomComponent-1gWUq{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-1gWUqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "CustomComponent-1gWUq",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-RNeUg"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "selected": false
      },
      {
        "source": "OpenAIModel-RNeUg",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}",
        "target": "ChatOutput-JPqLz",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JPqLzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-JPqLz",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-RNeUg"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-RNeUg{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}-ChatOutput-JPqLz{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JPqLzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-1gWUq",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-1gWUqœ}",
        "target": "CustomComponent-V8wWl",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-V8wWlœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "CustomComponent-V8wWl",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-1gWUq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground stroke-connection",
        "id": "reactflow__edge-CustomComponent-1gWUq{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-1gWUqœ}-CustomComponent-V8wWl{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-V8wWlœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 581.0844030866123,
      "y": -304.19040701988683,
      "zoom": 0.6312995133135413
    }
  },
  "metadata": {
    "Prompt": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "CustomComponent": {
      "count": 6
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 9
  },
  "original": {
    "id": "71d9f567-db4f-49fb-b7fe-b776e2b464ef",
    "name": "BotMentionConversationWithEmojisTags",
    "description": "A bot that answers questions where it is mentioned with a flow of emojis indicating that it is receiving and answering the user· ",
    "is_component": false,
    "liked_by_count": "6",
    "downloads_count": "133",
    "metadata": {
      "Prompt": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "CustomComponent": {
        "count": 6
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 9
    },
    "last_tested_version": "1.0.0a30",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "Prompt-F5QUu",
          "type": "genericNode",
          "position": {
            "x": 494.7146009884282,
            "y": 57.75569710465106
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\nfrom axiestudio.interface.custom.custom_component import CustomComponent\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "You are an programming especialist that has a huge knowledge on the most different languages, such as  Python | C++ | Rust | GoLang | JavaScript.\nYou were develped by the YAITEC team, a partner of axiestudio team.\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": []
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-F5QUu",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 494.7146009884282,
            "y": 57.75569710465106
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-RNeUg",
          "type": "genericNode",
          "position": {
            "x": 1658.6536753617916,
            "y": -12.818740864082201
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": [\n                    \"gpt-4-turbo-2024-04-09\",\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-3.5-turbo\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n                \"value\": \"gpt-4-turbo-preview\",\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 256,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-3.5-turbo",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-2024-04-09",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.2",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "OpenAIModel-RNeUg"
          },
          "selected": false,
          "width": 384,
          "height": 563
        },
        {
          "id": "CustomComponent-FpxEJ",
          "type": "genericNode",
          "position": {
            "x": 1129.8587485676073,
            "y": 268.3030601285882
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n        return 1\n    \n\nclass FileUploadComponent(CustomComponent):\n    display_name = \"Join two Strings\"\n    description = \"This component sequentially join 2 Strings.\"\n    \n    def build_config(self):\n        return {\n            \"text1\": {\n                \"display_name\": \"Text 1\",\n                \"advanced\": False,\n                \"required\": True,\n            },\n            \"text2\": {\n                \"display_name\": \"Text 2\",\n                \"advanced\": False,\n                \"required\": True,\n            },\n        }\n    \n    def build(self, text1: str, text2: str) -> str:\n        \"\"\"\n        just join 2 strings :)\n        \"\"\"\n        return str(str(text1) + str(text2))",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "text1": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text1",
                  "display_name": "Text 1",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "text2": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text2",
                  "display_name": "Text 2",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "This component sequentially join 2 Strings.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Join 2 Strings",
              "documentation": "",
              "custom_fields": {
                "text1": null,
                "text2": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-FpxEJ"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 1129.8587485676073,
            "y": 268.3030601285882
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-KV6Kx",
          "type": "genericNode",
          "position": {
            "x": 101.13310160983735,
            "y": 742.7694587332944
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "bot_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "bot_name",
                  "display_name": "BotName",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "channel_id": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "channel_id",
                  "display_name": "ChannelId",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "1239303061915308164"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Any\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom json import loads\nfrom axiestudio.schema.dotdict import dotdict\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordThreads(CustomComponent):\n    display_name = \"DiscordThreads\"\n    description = \"get the messages of discord's threads\"\n    field_order = [\"bot_name\", \"token\", \"channel_id\", \"limit\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"bot_name\": {\n                \"display_name\": \"BotName\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"limit\": {\n                \"display_name\": \"Limit\",\n                \"value\": 20,\n                \"advanced\": False,\n                \"info\": \"The value 0 means limitless\",\n                \"required\": True,\n            }\n        }\n\n    def update_state(\n        self, name: str, value: Any\n    ):\n        print(name, value, flush=True)\n        return super().update_state(name, value)\n\n    def build(self, bot_name: str, token: str, channel_id: int,  limit: int) -> str:\n        import requests\n        \n        body = {\"token\": token}\n        if channel_id:\n            body[\"channel_id\"] = channel_id\n\n        resp = requests.post(\"http://discord:7880/api/v1/listen_mention\", json=body)\n        if resp.status_code == 200:\n            user_input = loads(resp.content)\n            user_input_id, user_input_msg = user_input[\"id\"], user_input[\"content\"]\n            body = {\"token\": token, \"limit\": limit}\n            resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/get_messages\", json=body)\n\n            if resp.status_code == 200:\n                messages = loads(resp.content)[1:]\n                messages.reverse()\n                messages = str([{\"sender\": message[\"author\"][\"name\"], \"message\": message[\"message\"]} for message in messages])\n\n                return f'Chat Messages: {messages}\\n\\nChat Message Order: Down to Top\\n\\nUser Input: {user_input_msg}\\nYour name: {bot_name}'\n            else:\n                raise Exception(\"Timeout exception\")\n        else:\n            raise Exception(\"Timeout exception\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "limit": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "2",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The value 0 means limitless",
                  "load_from_db": false,
                  "title_case": false
                },
                "token": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "token",
                  "display_name": "Token",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "get the messages of discord's threads",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "DiscordThreads",
              "documentation": "",
              "custom_fields": {
                "bot_name": null,
                "token": null,
                "channel_id": null,
                "limit": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "bot_name",
                "token",
                "channel_id",
                "limit"
              ],
              "beta": false
            },
            "id": "CustomComponent-KV6Kx",
            "description": "get the messages of discord's threads",
            "display_name": "DiscordThreads"
          },
          "selected": false,
          "width": 384,
          "height": 555,
          "positionAbsolute": {
            "x": 101.13310160983735,
            "y": 742.7694587332944
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-8RnJO",
          "type": "genericNode",
          "position": {
            "x": -412.78604653639064,
            "y": 828.1570980447945
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordBotName(CustomComponent):\n    display_name = \"DiscordBotName\"\n    description = \"get discord bot name\"\n    field_order = [\"token\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }\n        }\n\n    def build(self, token: str) -> str:\n        import requests\n        resp = requests.post(\"http://discord:7880/api/v1/bot_name\", json={\"token\": token})\n        if resp.status_code == 200:\n            return resp.content\n        else:\n            raise Exception(\"Timeout exception\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "token": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "token",
                  "display_name": "Token",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "get discord bot name",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "DiscordBotName",
              "documentation": "",
              "custom_fields": {
                "token": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "token"
              ],
              "beta": false
            },
            "id": "CustomComponent-8RnJO",
            "description": "get discord bot name",
            "display_name": "DiscordBotName"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "dragging": false,
          "positionAbsolute": {
            "x": -412.78604653639064,
            "y": 828.1570980447945
          }
        },
        {
          "id": "CustomComponent-V8wWl",
          "type": "genericNode",
          "position": {
            "x": 2791.635523757459,
            "y": -23.17188841753098
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "channel_id": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "channel_id",
                  "display_name": "ChannelId",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "1239303061915308164"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordChannelMentionResponse(CustomComponent):\n    display_name = \"DiscordChannelMentionResponse\"\n    description = \"Response channel message mention\"\n    field_order = [\"token\", \"channel_id\", \"message\", \"limit\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"limit\": {\n                \"display_name\": \"Limit\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"message\": {\n                \"display_name\": \"Message\",\n                \"advanced\": False,\n                \"required\": True,\n            }\n        }\n\n    def build(self, token: str, channel_id: int, message: str, limit: int) -> str:\n        import requests\n        resp = requests.post(\n            f\"http://discord:7880/api/v1/channels/{channel_id}/mentions/last\",\n            json={\n                \"token\": token,\n                \"limit\": limit,\n            }\n        )\n        if resp.status_code == 200:\n            msg_reference = loads(resp.content)[\"id\"]\n            resp = requests.post(\n                f\"http://discord:7880/api/v1/channels/{channel_id}/send_message\",\n                json={\n                    \"token\": token,\n                    \"message\": message,\n                    \"reference\": msg_reference,\n                }\n            )\n            if resp.status_code == 200:\n                return \"Sent successfully message:\" + message\n        print(\"err\", str(resp.content))\n        #raise Exception(resp.content)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "limit": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "20"
                },
                "message": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "message",
                  "display_name": "Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "token": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "token",
                  "display_name": "Token",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Response channel message mention",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "DiscordChannelMentionResponse",
              "documentation": "",
              "custom_fields": {
                "token": null,
                "channel_id": null,
                "message": null,
                "limit": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "token",
                "channel_id",
                "message",
                "limit"
              ],
              "beta": false
            },
            "id": "CustomComponent-V8wWl",
            "description": "Response channel message mention",
            "display_name": "DiscordChannelMentionResponse"
          },
          "selected": true,
          "width": 384,
          "height": 555,
          "dragging": false,
          "positionAbsolute": {
            "x": 2791.635523757459,
            "y": -23.17188841753098
          }
        },
        {
          "id": "CustomComponent-w515n",
          "type": "genericNode",
          "position": {
            "x": 591.5377988358935,
            "y": 519.6573962661707
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "channel_id": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "channel_id",
                  "display_name": "ChannelId",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "1239303061915308164"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Any\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom json import loads\nfrom axiestudio.schema.dotdict import dotdict\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordEmogiReaction(CustomComponent):\n    display_name = \"DiscordEmogiReaction\"\n    description = \"react to discord message\"\n    field_order = [\"token\", \"channel_id\", \"message_id\", \"reaction\", \"message\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"message_id\": {\n                \"display_name\": \"MessageId\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"reaction\": {\n                \"display_name\": \"EmojiReaction\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"message\": {\n                \"display_name\": \"Message\",\n                \"advanced\": False,\n                \"required\": False,\n            }\n        }\n\n    def update_state(\n        self, name: str, value: Any\n    ):\n        print(name, value, flush=True)\n        return super().update_state(name, value)\n\n    def build(self, token: str, channel_id: int, reaction: str, message: str, message_id: Optional[int] = None) -> str:\n        import requests\n\n        body = {\"token\": token}\n        if not message_id:\n            body = {\"token\": token, \"limit\": 1}\n            resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/get_messages\", json=body)\n            if resp.status_code == 200:\n                message_id = loads(resp.content)[0][\"id\"]\n            else: raise Exception(\"Could not retrieve last message\")\n        body = {\"token\": token, \"emoji\": reaction}\n        print(\"message_id\", message_id)\n        resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/react/{message_id}\", json=body)\n        return f\"Added reaction: {reaction}\"\n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "message",
                  "display_name": "Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "message_id": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "message_id",
                  "display_name": "MessageId",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "reaction": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "reaction",
                  "display_name": "EmojiReaction",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "🤖"
                },
                "token": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "token",
                  "display_name": "Token",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "react to discord message",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "DiscordEmojiReaction",
              "documentation": "",
              "custom_fields": {
                "token": null,
                "channel_id": null,
                "reaction": null,
                "message": null,
                "message_id": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "token",
                "channel_id",
                "message_id",
                "reaction",
                "message"
              ],
              "beta": false
            },
            "id": "CustomComponent-w515n",
            "description": "react to discord message",
            "display_name": "DiscordEmogiReaction"
          },
          "selected": false,
          "width": 384,
          "height": 649,
          "dragging": false,
          "positionAbsolute": {
            "x": 591.5377988358935,
            "y": 519.6573962661707
          }
        },
        {
          "id": "CustomComponent-1gWUq",
          "type": "genericNode",
          "position": {
            "x": 2305.9267949036807,
            "y": -75.55234319021926
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "channel_id": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "channel_id",
                  "display_name": "ChannelId",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "1239303061915308164"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Any\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\n\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom json import loads\nfrom axiestudio.schema.dotdict import dotdict\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass DiscordRemoveEmogiReaction(CustomComponent):\n    display_name = \"DiscordRemoveEmogiReaction\"\n    description = \"remove reaction from discord message\"\n    field_order = [\"token\", \"channel_id\", \"message_id\", \"reaction\", \"message\"]\n\n    def build_config(self) -> dict:\n        return {\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"advanced\": False,\n                \"password\": True,\n                \"required\": True,\n            }, \"channel_id\": {\n                \"display_name\": \"ChannelId\",\n                \"advanced\": False,\n                \"required\": True,\n            }, \"message_id\": {\n                \"display_name\": \"MessageId\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"reaction\": {\n                \"display_name\": \"EmojiReaction\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": None,\n            }, \"message\": {\n                \"display_name\": \"Message\",\n                \"advanced\": False,\n                \"required\": False,\n            }\n        }\n\n    def update_state(\n        self, name: str, value: Any\n    ):\n        print(name, value, flush=True)\n        return super().update_state(name, value)\n\n    def build(self, token: str, channel_id: int, reaction: str, message: str, message_id: Optional[int] = None) -> str:\n        import requests\n\n        body = {\"token\": token}\n        if not message_id:\n            body = {\"token\": token, \"limit\": 1}\n            resp = requests.post(f\"http://discord:7880/api/v1/channels/{channel_id}/get_messages\", json=body)\n            if resp.status_code == 200:\n                message_id = loads(resp.content)[0][\"id\"]\n            else: raise Exception(\"Could not retrieve last message\")\n        body = {\"token\": token, \"emoji\": reaction}\n        print(\"message_id\", message_id)\n        resp = requests.delete(f\"http://discord:7880/api/v1/channels/{channel_id}/react/{message_id}\", json=body)\n        return message\n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "message",
                  "display_name": "Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "message_id": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "message_id",
                  "display_name": "MessageId",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "reaction": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "reaction",
                  "display_name": "EmojiReaction",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "🤖"
                },
                "token": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "token",
                  "display_name": "Token",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "remove reaction from discord message",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "DiscordRemoveEmojiReaction",
              "documentation": "",
              "custom_fields": {
                "token": null,
                "channel_id": null,
                "reaction": null,
                "message": null,
                "message_id": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "token",
                "channel_id",
                "message_id",
                "reaction",
                "message"
              ],
              "beta": false
            },
            "id": "CustomComponent-1gWUq",
            "description": "remove reaction from discord message",
            "display_name": "DiscordRemoveEmogiReaction"
          },
          "selected": false,
          "width": 384,
          "height": 649,
          "dragging": false,
          "positionAbsolute": {
            "x": 2305.9267949036807,
            "y": -75.55234319021926
          }
        },
        {
          "id": "ChatOutput-JPqLz",
          "type": "genericNode",
          "position": {
            "x": 2314.8056516192073,
            "y": -515.5693664047029
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-JPqLz"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 2314.8056516192073,
            "y": -515.5693664047029
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "Prompt-F5QUu",
          "target": "CustomComponent-FpxEJ",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-F5QUuœ}",
          "targetHandle": "{œfieldNameœ:œtext1œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-Prompt-F5QUu{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-F5QUuœ}-CustomComponent-FpxEJ{œfieldNameœ:œtext1œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "text1",
              "id": "CustomComponent-FpxEJ",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-F5QUu"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-FpxEJ",
          "target": "OpenAIModel-RNeUg",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-FpxEJœ}",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-RNeUgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomComponent-FpxEJ{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-FpxEJœ}-OpenAIModel-RNeUg{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-RNeUgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-RNeUg",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-FpxEJ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-8RnJO",
          "target": "CustomComponent-KV6Kx",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-8RnJOœ}",
          "targetHandle": "{œfieldNameœ:œbot_nameœ,œidœ:œCustomComponent-KV6Kxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomComponent-8RnJO{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-8RnJOœ}-CustomComponent-KV6Kx{œfieldNameœ:œbot_nameœ,œidœ:œCustomComponent-KV6Kxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "bot_name",
              "id": "CustomComponent-KV6Kx",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-8RnJO"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-KV6Kx",
          "target": "CustomComponent-w515n",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KV6Kxœ}",
          "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-w515nœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomComponent-KV6Kx{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KV6Kxœ}-CustomComponent-w515n{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-w515nœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "message",
              "id": "CustomComponent-w515n",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-KV6Kx"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "CustomComponent-w515n",
          "target": "CustomComponent-FpxEJ",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-w515nœ}",
          "targetHandle": "{œfieldNameœ:œtext2œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomComponent-w515n{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-w515nœ}-CustomComponent-FpxEJ{œfieldNameœ:œtext2œ,œidœ:œCustomComponent-FpxEJœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "text2",
              "id": "CustomComponent-FpxEJ",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-w515n"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "OpenAIModel-RNeUg",
          "target": "CustomComponent-1gWUq",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}",
          "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-1gWUqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-OpenAIModel-RNeUg{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}-CustomComponent-1gWUq{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-1gWUqœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "message",
              "id": "CustomComponent-1gWUq",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-RNeUg"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "selected": false
        },
        {
          "source": "OpenAIModel-RNeUg",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}",
          "target": "ChatOutput-JPqLz",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JPqLzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-JPqLz",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-RNeUg"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-RNeUg{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-RNeUgœ}-ChatOutput-JPqLz{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JPqLzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-1gWUq",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-1gWUqœ}",
          "target": "CustomComponent-V8wWl",
          "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-V8wWlœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "message",
              "id": "CustomComponent-V8wWl",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-1gWUq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground stroke-connection",
          "id": "reactflow__edge-CustomComponent-1gWUq{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-1gWUqœ}-CustomComponent-V8wWl{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-V8wWlœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 581.0844030866123,
        "y": -304.19040701988683,
        "zoom": 0.6312995133135413
      }
    },
    "date_created": "2024-05-20T01:45:47.967Z",
    "date_updated": "2024-05-20T01:45:48.049Z",
    "status": "Public",
    "sort": null,
    "user_updated": "94b2e207-1a44-4905-856c-4f5a69c168ce",
    "user_created": {
      "username": "joaoguilhermeS",
      "first_name": "João",
      "last_name": "Oliveira",
      "id": "94b2e207-1a44-4905-856c-4f5a69c168ce"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Agent",
          "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
        }
      },
      {
        "tags_id": {
          "name": "Chain",
          "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
        }
      },
      {
        "tags_id": {
          "name": "Prompt",
          "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:59.926Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 62,
    "converter_version": "1.0.0"
  }
}