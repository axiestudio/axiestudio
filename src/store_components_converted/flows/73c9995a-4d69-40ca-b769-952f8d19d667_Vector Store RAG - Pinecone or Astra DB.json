{
  "id": "73c9995a-4d69-40ca-b769-952f8d19d667",
  "name": "Vector Store RAG - Pinecone or Astra DB",
  "description": "",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "razorcx",
    "first_name": "Cory",
    "last_name": "LePage",
    "id": "c0e1af3e-3789-414f-829f-e112c65df703",
    "full_name": "Cory LePage"
  },
  "store_url": "https://www.langflow.store/store/component/73c9995a-4d69-40ca-b769-952f8d19d667",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-16T00:10:22.464Z",
    "updated": "2024-06-16T00:10:22.697Z",
    "downloaded": "2025-08-19T17:50:05.604Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Vector Store",
        "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.0a59",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "id": "ChatInput-SYy6A",
          "node": {
            "base_classes": [
              "Text",
              "str",
              "object",
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatInput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n        build_config[\"return_message\"] = {\n            \"display_name\": \"Return Record\",\n            \"advanced\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = True,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "who is Mrs. Stene and what grade does she teach and what other activities is she responsible for?"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "ChatInput"
        },
        "height": 391,
        "id": "ChatInput-SYy6A",
        "position": {
          "x": 227.0628962889166,
          "y": -76.12824984054234
        },
        "selected": false,
        "type": "genericNode",
        "width": 384,
        "dragging": false,
        "positionAbsolute": {
          "x": 227.0628962889166,
          "y": -76.12824984054234
        }
      },
      {
        "data": {
          "id": "TextOutput-mFLsN",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Extracted Chunks",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true
          },
          "type": "TextOutput",
          "description": "Display a text output in the Playground.",
          "display_name": "Extracted Chunks",
          "edited": false
        },
        "dragging": false,
        "height": 297,
        "id": "TextOutput-mFLsN",
        "position": {
          "x": 1750.7432952731947,
          "y": 932.4969401113462
        },
        "positionAbsolute": {
          "x": 1750.7432952731947,
          "y": 932.4969401113462
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIEmbeddings-YKhbh",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "custom_fields": {
              "allowed_special": null,
              "chunk_size": null,
              "client": null,
              "default_headers": null,
              "default_query": null,
              "deployment": null,
              "disallowed_special": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "description": "Generate embeddings using OpenAI models.",
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "output_types": [
              "Embeddings"
            ],
            "template": {
              "_type": "CustomComponent",
              "allowed_special": {
                "advanced": true,
                "display_name": "Allowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "allowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": []
              },
              "chunk_size": {
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Dict, List, Optional\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings, NestedDict\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\n                    \"text-embedding-3-small\",\n                    \"text-embedding-3-large\",\n                    \"text-embedding-ada-002\",\n                ],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"password\": True,\n                \"advanced\": True,\n            },\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\n                \"display_name\": \"OpenAI API Type\",\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\n                \"display_name\": \"TikToken Model Name\",\n                \"advanced\": True,\n            },\n            \"tiktoken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n            \"dimensions\": {\n                \"display_name\": \"Dimensions\",\n                \"info\": \"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        openai_api_key: str,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        deployment: str = \"text-embedding-ada-002\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-ada-002\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n        dimensions: Optional[int] = None,\n    ) -> Embeddings:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n            dimensions=dimensions,\n        )\n"
              },
              "default_headers": {
                "advanced": true,
                "display_name": "Default Headers",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_headers",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "default_query": {
                "advanced": true,
                "display_name": "Default Query",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_query",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "deployment": {
                "advanced": true,
                "display_name": "Deployment",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "deployment",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "disallowed_special": {
                "advanced": true,
                "display_name": "Disallowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "disallowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  "all"
                ]
              },
              "embedding_ctx_length": {
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding_ctx_length",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 8191
              },
              "max_retries": {
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_retries",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 6
              },
              "model": {
                "advanced": false,
                "display_name": "Model",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_type": {
                "advanced": true,
                "display_name": "OpenAI API Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_type",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_version": {
                "advanced": true,
                "display_name": "OpenAI API Version",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_version",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_organization": {
                "advanced": true,
                "display_name": "OpenAI Organization",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_organization",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_proxy": {
                "advanced": true,
                "display_name": "OpenAI Proxy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_proxy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "request_timeout": {
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "request_timeout",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float"
              },
              "show_progress_bar": {
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "show_progress_bar",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "skip_empty": {
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "skip_empty",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "tiktoken_enable": {
                "advanced": true,
                "display_name": "TikToken Enable",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_enable",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": true
              },
              "tiktoken_model_name": {
                "advanced": true,
                "display_name": "TikToken Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_model_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "OpenAIEmbeddings"
        },
        "dragging": false,
        "height": 391,
        "id": "OpenAIEmbeddings-YKhbh",
        "position": {
          "x": 701.835773983325,
          "y": 844.8926239802696
        },
        "selected": false,
        "type": "genericNode",
        "width": 384,
        "positionAbsolute": {
          "x": 701.835773983325,
          "y": 844.8926239802696
        }
      },
      {
        "data": {
          "id": "OpenAIModel-W0vDJ",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "stream": null,
              "system_message": null,
              "temperature": null
            },
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "max_tokens": {
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_tokens",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 256
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "model_name": {
                "advanced": false,
                "display_name": "Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model_name",
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "gpt-3.5-turbo"
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "stream": {
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "stream",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "advanced": true,
                "display_name": "System Message",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "System message to pass to the model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "system_message",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "temperature",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float",
                "value": 0.1
              }
            }
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 571,
        "id": "OpenAIModel-W0vDJ",
        "position": {
          "x": 2806.687921982041,
          "y": 221.86420965862646
        },
        "positionAbsolute": {
          "x": 2806.687921982041,
          "y": 221.86420965862646
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-bVTVl",
          "node": {
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n"
              },
              "context": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context",
                "display_name": "context",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "question": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "question",
                "display_name": "question",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "prompt",
                "value": "{context}\n\n---\n\nGiven the context above, answer the question as best as possible.  Include as much information as possible in your response that matches the question.\n\nQuestion: {question}\n\nAnswer: "
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "context",
                "question"
              ]
            },
            "output_types": [
              "Prompt"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 513,
        "id": "Prompt-bVTVl",
        "position": {
          "x": 2295.9273695935312,
          "y": 89.94899263203561
        },
        "positionAbsolute": {
          "x": 2295.9273695935312,
          "y": 89.94899263203561
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "ChatOutput-n9VEd",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "Record",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "record_template": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatOutput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 391,
        "id": "ChatOutput-n9VEd",
        "position": {
          "x": 3316.3578878231842,
          "y": 560.2760969402582
        },
        "positionAbsolute": {
          "x": 3316.3578878231842,
          "y": 560.2760969402582
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "File-HSnJL",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "path": null,
              "silent_errors": null
            },
            "description": "A generic file loader.",
            "display_name": "File",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "file-text",
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n"
              },
              "path": {
                "advanced": false,
                "display_name": "Path",
                "dynamic": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx"
                ],
                "file_path": "61474da4-53b4-4e6c-9461-96ff4d14cc71\\OSE Newsletter June 2024.pdf",
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "path",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "file",
                "value": ""
              },
              "silent_errors": {
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "silent_errors",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              }
            }
          },
          "type": "File"
        },
        "dragging": false,
        "height": 289,
        "id": "File-HSnJL",
        "position": {
          "x": 3374.345316598131,
          "y": 2785.8809914274652
        },
        "positionAbsolute": {
          "x": 3374.345316598131,
          "y": 2785.8809914274652
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "RecursiveCharacterTextSplitter-i4QJP",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "inputs": null,
              "separators": null
            },
            "description": "Split text into chunks of a specified length.",
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "chunk_overlap": {
                "advanced": false,
                "display_name": "Chunk Overlap",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The amount of overlap between chunks.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_overlap",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 200
              },
              "chunk_size": {
                "advanced": false,
                "display_name": "Chunk Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum length of each chunk.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n"
              },
              "inputs": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The texts to split.",
                "input_types": [
                  "Document",
                  "Record"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "inputs",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "Document"
              },
              "separators": {
                "advanced": false,
                "display_name": "Separators",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "separators",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  ""
                ]
              }
            }
          },
          "type": "RecursiveCharacterTextSplitter"
        },
        "dragging": false,
        "height": 509,
        "id": "RecursiveCharacterTextSplitter-i4QJP",
        "position": {
          "x": 3926.084280005299,
          "y": 2203.5460507867997
        },
        "positionAbsolute": {
          "x": 3926.084280005299,
          "y": 2203.5460507867997
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "AstraDBSearch-fNO9s",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "api_endpoint": null,
              "batch_size": null,
              "bulk_delete_concurrency": null,
              "bulk_insert_batch_concurrency": null,
              "bulk_insert_overwrite_concurrency": null,
              "collection_indexing_policy": null,
              "collection_name": null,
              "embedding": null,
              "input_value": null,
              "metadata_indexing_exclude": null,
              "metadata_indexing_include": null,
              "metric": null,
              "namespace": null,
              "number_of_results": null,
              "pre_delete_collection": null,
              "search_type": null,
              "setup_mode": null,
              "token": null
            },
            "description": "Searches an existing Astra DB Vector Store.",
            "display_name": "Astra DB Search",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "token",
              "api_endpoint",
              "collection_name",
              "input_value",
              "embedding"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "api_endpoint": {
                "advanced": false,
                "display_name": "API Endpoint",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "API endpoint URL for the Astra DB service.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "api_endpoint",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "batch_size": {
                "advanced": true,
                "display_name": "Batch Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional number of records to process in a single batch.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "batch_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_delete_concurrency": {
                "advanced": true,
                "display_name": "Bulk Delete Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk delete operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_delete_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_batch_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Batch Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_batch_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_overwrite_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Overwrite Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations that overwrite existing records.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_overwrite_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import List, Optional\n\nfrom axiestudio.components.vectorstores.AstraDB import AstraDBVectorStoreComponent\nfrom axiestudio.components.vectorstores.base.model import LCVectorStoreComponent\nfrom axiestudio.field_typing import Embeddings, Text\nfrom axiestudio.schema import Record\n\n\nclass AstraDBSearchComponent(LCVectorStoreComponent):\n    display_name = \"Astra DB Search\"\n    description = \"Searches an existing Astra DB Vector Store.\"\n    icon = \"AstraDB\"\n    field_order = [\"token\", \"api_endpoint\", \"collection_name\", \"input_value\", \"embedding\"]\n\n    def build_config(self):\n        return {\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"input_value\": {\n                \"display_name\": \"Input Value\",\n                \"info\": \"Input value to search\",\n            },\n            \"embedding\": {\"display_name\": \"Embedding\", \"info\": \"Embedding to use\"},\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"info\": \"The name of the collection within Astra DB where the vectors will be stored.\",\n            },\n            \"token\": {\n                \"display_name\": \"Astra DB Application Token\",\n                \"info\": \"Authentication token for accessing Astra DB.\",\n                \"password\": True,\n            },\n            \"api_endpoint\": {\n                \"display_name\": \"API Endpoint\",\n                \"info\": \"API endpoint URL for the Astra DB service.\",\n            },\n            \"namespace\": {\n                \"display_name\": \"Namespace\",\n                \"info\": \"Optional namespace within Astra DB to use for the collection.\",\n                \"advanced\": True,\n            },\n            \"metric\": {\n                \"display_name\": \"Metric\",\n                \"info\": \"Optional distance metric for vector comparisons in the vector store.\",\n                \"advanced\": True,\n            },\n            \"batch_size\": {\n                \"display_name\": \"Batch Size\",\n                \"info\": \"Optional number of records to process in a single batch.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_batch_concurrency\": {\n                \"display_name\": \"Bulk Insert Batch Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_overwrite_concurrency\": {\n                \"display_name\": \"Bulk Insert Overwrite Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations that overwrite existing records.\",\n                \"advanced\": True,\n            },\n            \"bulk_delete_concurrency\": {\n                \"display_name\": \"Bulk Delete Concurrency\",\n                \"info\": \"Optional concurrency level for bulk delete operations.\",\n                \"advanced\": True,\n            },\n            \"setup_mode\": {\n                \"display_name\": \"Setup Mode\",\n                \"info\": \"Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.\",\n                \"options\": [\"Sync\", \"Async\", \"Off\"],\n                \"advanced\": True,\n            },\n            \"pre_delete_collection\": {\n                \"display_name\": \"Pre Delete Collection\",\n                \"info\": \"Boolean flag to determine whether to delete the collection before creating a new one.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_include\": {\n                \"display_name\": \"Metadata Indexing Include\",\n                \"info\": \"Optional list of metadata fields to include in the indexing.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_exclude\": {\n                \"display_name\": \"Metadata Indexing Exclude\",\n                \"info\": \"Optional list of metadata fields to exclude from the indexing.\",\n                \"advanced\": True,\n            },\n            \"collection_indexing_policy\": {\n                \"display_name\": \"Collection Indexing Policy\",\n                \"info\": \"Optional dictionary defining the indexing policy for the collection.\",\n                \"advanced\": True,\n            },\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        collection_name: str,\n        input_value: Text,\n        token: str,\n        api_endpoint: str,\n        search_type: str = \"Similarity\",\n        number_of_results: int = 4,\n        namespace: Optional[str] = None,\n        metric: Optional[str] = None,\n        batch_size: Optional[int] = None,\n        bulk_insert_batch_concurrency: Optional[int] = None,\n        bulk_insert_overwrite_concurrency: Optional[int] = None,\n        bulk_delete_concurrency: Optional[int] = None,\n        setup_mode: str = \"Sync\",\n        pre_delete_collection: bool = False,\n        metadata_indexing_include: Optional[List[str]] = None,\n        metadata_indexing_exclude: Optional[List[str]] = None,\n        collection_indexing_policy: Optional[dict] = None,\n    ) -> List[Record]:\n        vector_store = AstraDBVectorStoreComponent().build(\n            embedding=embedding,\n            collection_name=collection_name,\n            token=token,\n            api_endpoint=api_endpoint,\n            namespace=namespace,\n            metric=metric,\n            batch_size=batch_size,\n            bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n            bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n            bulk_delete_concurrency=bulk_delete_concurrency,\n            setup_mode=setup_mode,\n            pre_delete_collection=pre_delete_collection,\n            metadata_indexing_include=metadata_indexing_include,\n            metadata_indexing_exclude=metadata_indexing_exclude,\n            collection_indexing_policy=collection_indexing_policy,\n        )\n        try:\n            return self.search_with_vector_store(input_value, search_type, vector_store, k=number_of_results)\n        except KeyError as e:\n            if \"content\" in str(e):\n                raise ValueError(\n                    \"You should ingest data through Langflow (or LangChain) to query it in Langflow. Your collection does not contain a field name 'content'.\"\n                )\n            else:\n                raise e\n"
              },
              "collection_indexing_policy": {
                "advanced": true,
                "display_name": "Collection Indexing Policy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional dictionary defining the indexing policy for the collection.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_indexing_policy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "collection_name": {
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_name",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "axiestudio"
              },
              "embedding": {
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Embedding to use",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "Embeddings"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Input Value",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Input value to search",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "metadata_indexing_exclude": {
                "advanced": true,
                "display_name": "Metadata Indexing Exclude",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to exclude from the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_exclude",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metadata_indexing_include": {
                "advanced": true,
                "display_name": "Metadata Indexing Include",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to include in the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_include",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metric": {
                "advanced": true,
                "display_name": "Metric",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional distance metric for vector comparisons in the vector store.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "metric",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "namespace": {
                "advanced": true,
                "display_name": "Namespace",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional namespace within Astra DB to use for the collection.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "namespace",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "number_of_results": {
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Number of results to return.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "number_of_results",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 4
              },
              "pre_delete_collection": {
                "advanced": true,
                "display_name": "Pre Delete Collection",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "pre_delete_collection",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "search_type": {
                "advanced": false,
                "display_name": "Search Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "search_type",
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Similarity"
              },
              "setup_mode": {
                "advanced": true,
                "display_name": "Setup Mode",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "setup_mode",
                "options": [
                  "Sync",
                  "Async",
                  "Off"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Sync"
              },
              "token": {
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "AstraDBSearch"
        },
        "dragging": false,
        "height": 721,
        "id": "AstraDBSearch-fNO9s",
        "position": {
          "x": 1224.6833446969779,
          "y": -504.47159050784
        },
        "positionAbsolute": {
          "x": 1224.6833446969779,
          "y": -504.47159050784
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "AstraDB-ccjDs",
          "node": {
            "base_classes": [
              "VectorStore"
            ],
            "beta": false,
            "custom_fields": {
              "api_endpoint": null,
              "batch_size": null,
              "bulk_delete_concurrency": null,
              "bulk_insert_batch_concurrency": null,
              "bulk_insert_overwrite_concurrency": null,
              "collection_indexing_policy": null,
              "collection_name": null,
              "embedding": null,
              "inputs": null,
              "metadata_indexing_exclude": null,
              "metadata_indexing_include": null,
              "metric": null,
              "namespace": null,
              "pre_delete_collection": null,
              "setup_mode": null,
              "token": null
            },
            "description": "Builds or loads an Astra DB Vector Store.",
            "display_name": "Astra DB",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "token",
              "api_endpoint",
              "collection_name",
              "inputs",
              "embedding"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "template": {
              "_type": "CustomComponent",
              "api_endpoint": {
                "advanced": false,
                "display_name": "API Endpoint",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "API endpoint URL for the Astra DB service.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "api_endpoint",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "batch_size": {
                "advanced": true,
                "display_name": "Batch Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional number of records to process in a single batch.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "batch_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_delete_concurrency": {
                "advanced": true,
                "display_name": "Bulk Delete Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk delete operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_delete_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_batch_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Batch Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_batch_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_overwrite_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Overwrite Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations that overwrite existing records.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_overwrite_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import List, Optional, Union\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings, VectorStore\nfrom axiestudio.schema import Record\nfrom langchain_core.retrievers import BaseRetriever\n\n\nclass AstraDBVectorStoreComponent(CustomComponent):\n    display_name = \"Astra DB\"\n    description = \"Builds or loads an Astra DB Vector Store.\"\n    icon = \"AstraDB\"\n    field_order = [\"token\", \"api_endpoint\", \"collection_name\", \"inputs\", \"embedding\"]\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Inputs\",\n                \"info\": \"Optional list of records to be processed and stored in the vector store.\",\n            },\n            \"embedding\": {\"display_name\": \"Embedding\", \"info\": \"Embedding to use\"},\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"info\": \"The name of the collection within Astra DB where the vectors will be stored.\",\n            },\n            \"token\": {\n                \"display_name\": \"Astra DB Application Token\",\n                \"info\": \"Authentication token for accessing Astra DB.\",\n                \"password\": True,\n            },\n            \"api_endpoint\": {\n                \"display_name\": \"API Endpoint\",\n                \"info\": \"API endpoint URL for the Astra DB service.\",\n            },\n            \"namespace\": {\n                \"display_name\": \"Namespace\",\n                \"info\": \"Optional namespace within Astra DB to use for the collection.\",\n                \"advanced\": True,\n            },\n            \"metric\": {\n                \"display_name\": \"Metric\",\n                \"info\": \"Optional distance metric for vector comparisons in the vector store.\",\n                \"advanced\": True,\n            },\n            \"batch_size\": {\n                \"display_name\": \"Batch Size\",\n                \"info\": \"Optional number of records to process in a single batch.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_batch_concurrency\": {\n                \"display_name\": \"Bulk Insert Batch Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_overwrite_concurrency\": {\n                \"display_name\": \"Bulk Insert Overwrite Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations that overwrite existing records.\",\n                \"advanced\": True,\n            },\n            \"bulk_delete_concurrency\": {\n                \"display_name\": \"Bulk Delete Concurrency\",\n                \"info\": \"Optional concurrency level for bulk delete operations.\",\n                \"advanced\": True,\n            },\n            \"setup_mode\": {\n                \"display_name\": \"Setup Mode\",\n                \"info\": \"Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.\",\n                \"options\": [\"Sync\", \"Async\", \"Off\"],\n                \"advanced\": True,\n            },\n            \"pre_delete_collection\": {\n                \"display_name\": \"Pre Delete Collection\",\n                \"info\": \"Boolean flag to determine whether to delete the collection before creating a new one.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_include\": {\n                \"display_name\": \"Metadata Indexing Include\",\n                \"info\": \"Optional list of metadata fields to include in the indexing.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_exclude\": {\n                \"display_name\": \"Metadata Indexing Exclude\",\n                \"info\": \"Optional list of metadata fields to exclude from the indexing.\",\n                \"advanced\": True,\n            },\n            \"collection_indexing_policy\": {\n                \"display_name\": \"Collection Indexing Policy\",\n                \"info\": \"Optional dictionary defining the indexing policy for the collection.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        token: str,\n        api_endpoint: str,\n        collection_name: str,\n        inputs: Optional[List[Record]] = None,\n        namespace: Optional[str] = None,\n        metric: Optional[str] = None,\n        batch_size: Optional[int] = None,\n        bulk_insert_batch_concurrency: Optional[int] = None,\n        bulk_insert_overwrite_concurrency: Optional[int] = None,\n        bulk_delete_concurrency: Optional[int] = None,\n        setup_mode: str = \"Sync\",\n        pre_delete_collection: bool = False,\n        metadata_indexing_include: Optional[List[str]] = None,\n        metadata_indexing_exclude: Optional[List[str]] = None,\n        collection_indexing_policy: Optional[dict] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            setup_mode_value = SetupMode[setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {setup_mode}\")\n        if inputs:\n            documents = [_input.to_lc_document() for _input in inputs]\n\n            vector_store = AstraDBVectorStore.from_documents(\n                documents=documents,\n                embedding=embedding,\n                collection_name=collection_name,\n                token=token,\n                api_endpoint=api_endpoint,\n                namespace=namespace,\n                metric=metric,\n                batch_size=batch_size,\n                bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n                bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n                bulk_delete_concurrency=bulk_delete_concurrency,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=pre_delete_collection,\n                metadata_indexing_include=metadata_indexing_include,\n                metadata_indexing_exclude=metadata_indexing_exclude,\n                collection_indexing_policy=collection_indexing_policy,\n            )\n        else:\n            vector_store = AstraDBVectorStore(\n                embedding=embedding,\n                collection_name=collection_name,\n                token=token,\n                api_endpoint=api_endpoint,\n                namespace=namespace,\n                metric=metric,\n                batch_size=batch_size,\n                bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n                bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n                bulk_delete_concurrency=bulk_delete_concurrency,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=pre_delete_collection,\n                metadata_indexing_include=metadata_indexing_include,\n                metadata_indexing_exclude=metadata_indexing_exclude,\n                collection_indexing_policy=collection_indexing_policy,\n            )\n\n        return vector_store\n        return vector_store\n"
              },
              "collection_indexing_policy": {
                "advanced": true,
                "display_name": "Collection Indexing Policy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional dictionary defining the indexing policy for the collection.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_indexing_policy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "collection_name": {
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_name",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "axiestudio"
              },
              "embedding": {
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Embedding to use",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "Embeddings"
              },
              "inputs": {
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of records to be processed and stored in the vector store.",
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "inputs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "Record"
              },
              "metadata_indexing_exclude": {
                "advanced": true,
                "display_name": "Metadata Indexing Exclude",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to exclude from the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_exclude",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metadata_indexing_include": {
                "advanced": true,
                "display_name": "Metadata Indexing Include",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to include in the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_include",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metric": {
                "advanced": true,
                "display_name": "Metric",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional distance metric for vector comparisons in the vector store.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "metric",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "namespace": {
                "advanced": true,
                "display_name": "Namespace",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional namespace within Astra DB to use for the collection.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "namespace",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "pre_delete_collection": {
                "advanced": true,
                "display_name": "Pre Delete Collection",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "pre_delete_collection",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "setup_mode": {
                "advanced": true,
                "display_name": "Setup Mode",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "setup_mode",
                "options": [
                  "Sync",
                  "Async",
                  "Off"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Sync"
              },
              "token": {
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "AstraDB"
        },
        "dragging": false,
        "height": 581,
        "id": "AstraDB-ccjDs",
        "position": {
          "x": 4525.728063904562,
          "y": 1893.9115091437052
        },
        "positionAbsolute": {
          "x": 4525.728063904562,
          "y": 1893.9115091437052
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIEmbeddings-xpJHa",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "custom_fields": {
              "allowed_special": null,
              "chunk_size": null,
              "client": null,
              "default_headers": null,
              "default_query": null,
              "deployment": null,
              "disallowed_special": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "description": "Generate embeddings using OpenAI models.",
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "output_types": [
              "Embeddings"
            ],
            "template": {
              "_type": "CustomComponent",
              "allowed_special": {
                "advanced": true,
                "display_name": "Allowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "allowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": []
              },
              "chunk_size": {
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Dict, List, Optional\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings, NestedDict\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\n                    \"text-embedding-3-small\",\n                    \"text-embedding-3-large\",\n                    \"text-embedding-ada-002\",\n                ],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"password\": True,\n                \"advanced\": True,\n            },\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\n                \"display_name\": \"OpenAI API Type\",\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\n                \"display_name\": \"TikToken Model Name\",\n                \"advanced\": True,\n            },\n            \"tiktoken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n            \"dimensions\": {\n                \"display_name\": \"Dimensions\",\n                \"info\": \"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        openai_api_key: str,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        deployment: str = \"text-embedding-ada-002\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-ada-002\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n        dimensions: Optional[int] = None,\n    ) -> Embeddings:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n            dimensions=dimensions,\n        )\n"
              },
              "default_headers": {
                "advanced": true,
                "display_name": "Default Headers",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_headers",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "default_query": {
                "advanced": true,
                "display_name": "Default Query",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_query",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "deployment": {
                "advanced": true,
                "display_name": "Deployment",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "deployment",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "disallowed_special": {
                "advanced": true,
                "display_name": "Disallowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "disallowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  "all"
                ]
              },
              "embedding_ctx_length": {
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding_ctx_length",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 8191
              },
              "max_retries": {
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_retries",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 6
              },
              "model": {
                "advanced": false,
                "display_name": "Model",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_type": {
                "advanced": true,
                "display_name": "OpenAI API Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_type",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_version": {
                "advanced": true,
                "display_name": "OpenAI API Version",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_version",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_organization": {
                "advanced": true,
                "display_name": "OpenAI Organization",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_organization",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_proxy": {
                "advanced": true,
                "display_name": "OpenAI Proxy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_proxy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "request_timeout": {
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "request_timeout",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float"
              },
              "show_progress_bar": {
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "show_progress_bar",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "skip_empty": {
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "skip_empty",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "tiktoken_enable": {
                "advanced": true,
                "display_name": "TikToken Enable",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_enable",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": true
              },
              "tiktoken_model_name": {
                "advanced": true,
                "display_name": "TikToken Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_model_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "OpenAIEmbeddings"
        },
        "dragging": false,
        "height": 391,
        "id": "OpenAIEmbeddings-xpJHa",
        "position": {
          "x": 3926.7817240257136,
          "y": 2793.2741031258615
        },
        "positionAbsolute": {
          "x": 3926.7817240257136,
          "y": 2793.2741031258615
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "id": "Pinecone-dljg2",
        "type": "genericNode",
        "position": {
          "x": 4883.4380441408175,
          "y": 2566.349870994464
        },
        "data": {
          "type": "Pinecone",
          "node": {
            "template": {
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "inputs": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "inputs",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nfrom langchain_core.documents import Document\nfrom langchain_core.retrievers import BaseRetriever\nfrom langchain_core.vectorstores import VectorStore\nfrom langchain_pinecone._utilities import DistanceStrategy\nfrom langchain_pinecone.vectorstores import PineconeVectorStore\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.schema import Record\n\n\nclass PineconeComponent(CustomComponent):\n    display_name = \"Pinecone\"\n    description = \"Construct Pinecone wrapper from raw documents.\"\n    icon = \"Pinecone\"\n    field_order = [\"index_name\", \"namespace\", \"distance_strategy\", \"pinecone_api_key\", \"documents\", \"embedding\"]\n\n    def build_config(self):\n        distance_options = [e.value.title().replace(\"_\", \" \") for e in DistanceStrategy]\n        distance_value = distance_options[0]\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"namespace\": {\"display_name\": \"Namespace\"},\n            \"text_key\": {\"display_name\": \"Text Key\"},\n            \"distance_strategy\": {\n                \"display_name\": \"Distance Strategy\",\n                # get values from enum\n                # and make them title case for display\n                \"options\": distance_options,\n                \"advanced\": True,\n                \"value\": distance_value,\n            },\n            \"pinecone_api_key\": {\n                \"display_name\": \"Pinecone API Key\",\n                \"default\": \"\",\n                \"password\": True,\n                \"required\": True,\n            },\n            \"pool_threads\": {\n                \"display_name\": \"Pool Threads\",\n                \"default\": 1,\n                \"advanced\": True,\n            },\n        }\n\n    def from_existing_index(\n        self,\n        index_name: str,\n        embedding: Embeddings,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        pool_threads: int = 4,\n    ) -> PineconeVectorStore:\n        \"\"\"Load pinecone vectorstore from index name.\"\"\"\n        pinecone_index = PineconeVectorStore.get_pinecone_index(\n            index_name, pool_threads, pinecone_api_key=pinecone_api_key\n        )\n        return PineconeVectorStore(\n            index=pinecone_index,\n            embedding=embedding,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n        )\n\n    def from_documents(\n        self,\n        documents: List[Document],\n        embedding: Embeddings,\n        index_name: str,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        pool_threads: int = 4,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        batch_size: int = 32,\n        upsert_kwargs: Optional[dict] = None,\n        embeddings_chunk_size: int = 1000,\n    ) -> PineconeVectorStore:\n        \"\"\"Create a new pinecone vectorstore from documents.\"\"\"\n        texts = [d.page_content for d in documents]\n        metadatas = [d.metadata for d in documents]\n        pinecone = self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n            pool_threads=pool_threads,\n        )\n        pinecone.add_texts(\n            texts,\n            metadatas=metadatas,\n            ids=None,\n            namespace=namespace,\n            batch_size=batch_size,\n            embedding_chunk_size=embeddings_chunk_size,\n            **(upsert_kwargs or {}),\n        )\n        return pinecone\n\n    def build(\n        self,\n        embedding: Embeddings,\n        distance_strategy: str,\n        inputs: Optional[List[Record]] = None,\n        text_key: str = \"text\",\n        pool_threads: int = 4,\n        index_name: Optional[str] = None,\n        pinecone_api_key: Optional[str] = None,\n        namespace: Optional[str] = \"default\",\n    ) -> Union[VectorStore, BaseRetriever]:\n        # get distance strategy from string\n        distance_strategy = distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n        if not index_name:\n            raise ValueError(\"Index Name is required.\")\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        if documents:\n            return self.from_documents(\n                documents=documents,\n                embedding=embedding,\n                index_name=index_name,\n                pinecone_api_key=pinecone_api_key,\n                text_key=text_key,\n                namespace=namespace,\n                distance_strategy=_distance_strategy,\n                pool_threads=pool_threads,\n            )\n\n        return self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=_distance_strategy,\n            pool_threads=pool_threads,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "distance_strategy": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Euclidean Distance",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Euclidean Distance",
                  "Max Inner Product",
                  "Cosine"
                ],
                "name": "distance_strategy",
                "display_name": "Distance Strategy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "index_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "index_name",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "axiestudio"
              },
              "namespace": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "default",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "namespace",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "pinecone_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "pinecone_api_key",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "pool_threads": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 4,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pool_threads",
                "display_name": "Pool Threads",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "text_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text_key",
                "display_name": "Text Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Construct Pinecone wrapper from raw documents.",
            "icon": "Pinecone",
            "base_classes": [
              "BaseRetriever",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "VectorStore"
            ],
            "display_name": "Pinecone",
            "documentation": "",
            "custom_fields": {
              "embedding": null,
              "distance_strategy": null,
              "inputs": null,
              "text_key": null,
              "pool_threads": null,
              "index_name": null,
              "pinecone_api_key": null,
              "namespace": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "documents",
              "embedding"
            ],
            "beta": false
          },
          "id": "Pinecone-dljg2"
        },
        "selected": false,
        "width": 384,
        "height": 703,
        "positionAbsolute": {
          "x": 4883.4380441408175,
          "y": 2566.349870994464
        },
        "dragging": false
      },
      {
        "id": "PineconeSearch-DwUFi",
        "type": "genericNode",
        "position": {
          "x": 1228.611715433582,
          "y": 435.548284723767
        },
        "data": {
          "type": "PineconeSearch",
          "node": {
            "template": {
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional\n\nfrom langchain_pinecone._utilities import DistanceStrategy\n\nfrom axiestudio.components.vectorstores.base.model import LCVectorStoreComponent\nfrom axiestudio.components.vectorstores.Pinecone import PineconeComponent\nfrom axiestudio.field_typing import Embeddings, Text\nfrom axiestudio.field_typing.constants import NestedDict\nfrom axiestudio.schema import Record\n\n\nclass PineconeSearchComponent(PineconeComponent, LCVectorStoreComponent):\n    display_name = \"Pinecone Search\"\n    description = \"Search a Pinecone Vector Store for similar documents.\"\n    icon = \"Pinecone\"\n    field_order = [\"index_name\", \"namespace\", \"distance_strategy\", \"pinecone_api_key\", \"input_value\", \"embedding\"]\n\n    def build_config(self):\n        distance_options = [e.value.title().replace(\"_\", \" \") for e in DistanceStrategy]\n        distance_value = distance_options[0]\n        return {\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"namespace\": {\"display_name\": \"Namespace\", \"info\": \"Namespace for the index.\"},\n            \"distance_strategy\": {\n                \"display_name\": \"Distance Strategy\",\n                # get values from enum\n                # and make them title case for display\n                \"options\": distance_options,\n                \"advanced\": True,\n                \"value\": distance_value,\n            },\n            \"pinecone_api_key\": {\n                \"display_name\": \"Pinecone API Key\",\n                \"default\": \"\",\n                \"password\": True,\n            },\n            \"pool_threads\": {\n                \"display_name\": \"Pool Threads\",\n                \"default\": 1,\n                \"advanced\": True,\n            },\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n            \"text_key\": {\n                \"display_name\": \"Text Key\",\n                \"info\": \"Key in the record to use as text.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(  # type: ignore[override]\n        self,\n        input_value: Text,\n        embedding: Embeddings,\n        distance_strategy: str,\n        text_key: str = \"text\",\n        number_of_results: int = 4,\n        pool_threads: int = 4,\n        index_name: Optional[str] = None,\n        pinecone_api_key: Optional[str] = None,\n        namespace: Optional[str] = \"default\",\n        search_type: str = \"similarity\",\n        search_kwargs: Optional[NestedDict] = None,\n    ) -> List[Record]:  # type: ignore[override]\n        vector_store = super().build(\n            embedding=embedding,\n            distance_strategy=distance_strategy,\n            inputs=[],\n            text_key=text_key,\n            pool_threads=pool_threads,\n            index_name=index_name,\n            pinecone_api_key=pinecone_api_key,\n            namespace=namespace,\n        )\n        if not vector_store:\n            raise ValueError(\"Failed to load the Pinecone index.\")\n        if search_kwargs is None:\n            search_kwargs = {}\n\n        return self.search_with_vector_store(\n            vector_store=vector_store,\n            input_value=input_value,\n            search_type=search_type,\n            k=number_of_results,\n            **search_kwargs,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "distance_strategy": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Euclidean Distance",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Euclidean Distance",
                  "Max Inner Product",
                  "Cosine"
                ],
                "name": "distance_strategy",
                "display_name": "Distance Strategy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "index_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "index_name",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "axiestudio"
              },
              "namespace": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "default",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "namespace",
                "display_name": "Namespace",
                "advanced": false,
                "dynamic": false,
                "info": "Namespace for the index.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "number_of_results": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 4,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "load_from_db": false,
                "title_case": false
              },
              "pinecone_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "pinecone_api_key",
                "display_name": "Pinecone API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "pool_threads": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 4,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pool_threads",
                "display_name": "Pool Threads",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "search_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "search_kwargs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "search_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "similarity",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "text_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text_key",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "Key in the record to use as text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Search a Pinecone Vector Store for similar documents.",
            "icon": "Pinecone",
            "base_classes": [
              "Record"
            ],
            "display_name": "Pinecone Search",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "embedding": null,
              "distance_strategy": null,
              "text_key": null,
              "number_of_results": null,
              "pool_threads": null,
              "index_name": null,
              "pinecone_api_key": null,
              "namespace": null,
              "search_type": null,
              "search_kwargs": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "index_name",
              "namespace",
              "distance_strategy",
              "pinecone_api_key",
              "input_value",
              "embedding"
            ],
            "beta": false
          },
          "id": "PineconeSearch-DwUFi"
        },
        "selected": false,
        "width": 384,
        "height": 835,
        "positionAbsolute": {
          "x": 1228.611715433582,
          "y": 435.548284723767
        },
        "dragging": false
      },
      {
        "id": "RecordsToText-Vruik",
        "type": "genericNode",
        "position": {
          "x": 699.3760412506721,
          "y": 376.2577404382511
        },
        "data": {
          "type": "RecordsToText",
          "node": {
            "template": {
              "records": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "records",
                "display_name": "Records",
                "advanced": false,
                "dynamic": false,
                "info": "The records to convert to text.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n                \"multiline\": True,\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "Text: {text}\\nData: {data}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Convert Records into plain text following a specified template.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Records To Text",
            "documentation": "",
            "custom_fields": {
              "records": null,
              "template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecordsToText-Vruik"
        },
        "selected": false,
        "width": 384,
        "height": 373,
        "positionAbsolute": {
          "x": 699.3760412506721,
          "y": 376.2577404382511
        },
        "dragging": false
      },
      {
        "id": "TextOutput-5SqbW",
        "type": "genericNode",
        "position": {
          "x": 1729.4382225937893,
          "y": 57.35990190495582
        },
        "data": {
          "id": "TextOutput-5SqbW",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Extracted Chunks",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "edited": true
          },
          "type": "TextOutput",
          "description": "Display a text output in the Playground.",
          "display_name": "Extracted Chunks",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": 1729.4382225937893,
          "y": 57.35990190495582
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Text",
              "str"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-W0vDJ"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-n9VEd",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-W0vDJ{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-W0vDJœ}-ChatOutput-n9VEd{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-n9VEdœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-W0vDJ",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-W0vDJœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "ChatOutput-n9VEd",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-n9VEdœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "File",
            "id": "File-HSnJL"
          },
          "targetHandle": {
            "fieldName": "inputs",
            "id": "RecursiveCharacterTextSplitter-i4QJP",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Document"
          }
        },
        "id": "reactflow__edge-File-HSnJL{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HSnJLœ}-RecursiveCharacterTextSplitter-i4QJP{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
        "selected": false,
        "source": "File-HSnJL",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HSnJLœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "RecursiveCharacterTextSplitter-i4QJP",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-i4QJP"
          },
          "targetHandle": {
            "fieldName": "inputs",
            "id": "AstraDB-ccjDs",
            "inputTypes": null,
            "type": "Record"
          }
        },
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-i4QJP{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}-AstraDB-ccjDs{œfieldNameœ:œinputsœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "selected": false,
        "source": "RecursiveCharacterTextSplitter-i4QJP",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "AstraDB-ccjDs",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-xpJHa"
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "AstraDB-ccjDs",
            "inputTypes": null,
            "type": "Embeddings"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-xpJHa{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}-AstraDB-ccjDs{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "selected": false,
        "source": "OpenAIEmbeddings-xpJHa",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "AstraDB-ccjDs",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-i4QJP",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}",
        "target": "Pinecone-dljg2",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "inputs",
            "id": "Pinecone-dljg2",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-i4QJP"
          }
        },
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-i4QJP{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}-Pinecone-dljg2{œfieldNameœ:œinputsœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-xpJHa",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}",
        "target": "Pinecone-dljg2",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Pinecone-dljg2",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-xpJHa"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-xpJHa{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}-Pinecone-dljg2{œfieldNameœ:œembeddingœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-YKhbh",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}",
        "target": "PineconeSearch-DwUFi",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "PineconeSearch-DwUFi",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-YKhbh"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-YKhbh{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}-PineconeSearch-DwUFi{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "className": ""
      },
      {
        "source": "PineconeSearch-DwUFi",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-DwUFiœ}",
        "target": "TextOutput-mFLsN",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-mFLsNœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-mFLsN",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "PineconeSearch",
            "id": "PineconeSearch-DwUFi"
          }
        },
        "id": "reactflow__edge-PineconeSearch-DwUFi{œbaseClassesœ:[œRecordœ],œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-DwUFiœ}-TextOutput-mFLsN{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-mFLsNœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-SYy6A",
        "sourceHandle": "{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}",
        "target": "RecordsToText-Vruik",
        "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-Vruikœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "records",
            "id": "RecordsToText-Vruik",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "str",
              "object",
              "Record"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-SYy6A"
          }
        },
        "id": "reactflow__edge-ChatInput-SYy6A{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}-RecordsToText-Vruik{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-Vruikœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "className": ""
      },
      {
        "source": "RecordsToText-Vruik",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}",
        "target": "PineconeSearch-DwUFi",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "PineconeSearch-DwUFi",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-Vruik"
          }
        },
        "id": "reactflow__edge-RecordsToText-Vruik{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}-PineconeSearch-DwUFi{œfieldNameœ:œinput_valueœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "RecordsToText-Vruik",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}",
        "target": "AstraDBSearch-fNO9s",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "AstraDBSearch-fNO9s",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-Vruik"
          }
        },
        "id": "reactflow__edge-RecordsToText-Vruik{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}-AstraDBSearch-fNO9s{œfieldNameœ:œinput_valueœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-YKhbh",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}",
        "target": "AstraDBSearch-fNO9s",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "AstraDBSearch-fNO9s",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-YKhbh"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-YKhbh{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}-AstraDBSearch-fNO9s{œfieldNameœ:œembeddingœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "className": ""
      },
      {
        "source": "AstraDBSearch-fNO9s",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œAstraDBSearchœ,œidœ:œAstraDBSearch-fNO9sœ}",
        "target": "TextOutput-5SqbW",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-5SqbWœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-5SqbW",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "AstraDBSearch",
            "id": "AstraDBSearch-fNO9s"
          }
        },
        "id": "reactflow__edge-AstraDBSearch-fNO9s{œbaseClassesœ:[œRecordœ],œdataTypeœ:œAstraDBSearchœ,œidœ:œAstraDBSearch-fNO9sœ}-TextOutput-5SqbW{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-5SqbWœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextOutput-mFLsN",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-mFLsNœ}",
        "target": "Prompt-bVTVl",
        "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "context",
            "id": "Prompt-bVTVl",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextOutput",
            "id": "TextOutput-mFLsN"
          }
        },
        "id": "reactflow__edge-TextOutput-mFLsN{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-mFLsNœ}-Prompt-bVTVl{œfieldNameœ:œcontextœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-SYy6A",
        "sourceHandle": "{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}",
        "target": "Prompt-bVTVl",
        "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "question",
            "id": "Prompt-bVTVl",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "str",
              "object",
              "Record"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-SYy6A"
          }
        },
        "id": "reactflow__edge-ChatInput-SYy6A{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}-Prompt-bVTVl{œfieldNameœ:œquestionœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Prompt-bVTVl",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-bVTVlœ}",
        "target": "OpenAIModel-W0vDJ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-W0vDJœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-W0vDJ",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-bVTVl"
          }
        },
        "id": "reactflow__edge-Prompt-bVTVl{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-bVTVlœ}-OpenAIModel-W0vDJ{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-W0vDJœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 50.50414871658677,
      "y": 248.59530673363372,
      "zoom": 0.35455931461399437
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "TextOutput": {
      "count": 2
    },
    "OpenAIEmbeddings": {
      "count": 2
    },
    "OpenAIModel": {
      "count": 1
    },
    "Prompt": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "File": {
      "count": 1
    },
    "RecursiveCharacterTextSplitter": {
      "count": 1
    },
    "AstraDBSearch": {
      "count": 1
    },
    "AstraDB": {
      "count": 1
    },
    "Pinecone": {
      "count": 1
    },
    "PineconeSearch": {
      "count": 1
    },
    "RecordsToText": {
      "count": 1
    },
    "total": 15
  },
  "original": {
    "id": "73c9995a-4d69-40ca-b769-952f8d19d667",
    "name": "Vector Store RAG - Pinecone or Astra DB",
    "description": "",
    "is_component": false,
    "liked_by_count": "33",
    "downloads_count": "519",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "TextOutput": {
        "count": 2
      },
      "OpenAIEmbeddings": {
        "count": 2
      },
      "OpenAIModel": {
        "count": 1
      },
      "Prompt": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "File": {
        "count": 1
      },
      "RecursiveCharacterTextSplitter": {
        "count": 1
      },
      "AstraDBSearch": {
        "count": 1
      },
      "AstraDB": {
        "count": 1
      },
      "Pinecone": {
        "count": 1
      },
      "PineconeSearch": {
        "count": 1
      },
      "RecordsToText": {
        "count": 1
      },
      "total": 15
    },
    "last_tested_version": "1.0.0a59",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "id": "ChatInput-SYy6A",
            "node": {
              "base_classes": [
                "Text",
                "str",
                "object",
                "Record"
              ],
              "beta": false,
              "custom_fields": {
                "input_value": null,
                "return_record": null,
                "sender": null,
                "sender_name": null,
                "session_id": null
              },
              "description": "Get chat inputs from the Playground.",
              "display_name": "Chat Input",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "icon": "ChatInput",
              "output_types": [
                "Message",
                "Text"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n        build_config[\"return_message\"] = {\n            \"display_name\": \"Return Record\",\n            \"advanced\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = True,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "input_value",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "who is Mrs. Stene and what grade does she teach and what other activities is she responsible for?"
                },
                "sender": {
                  "advanced": true,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "User"
                },
                "sender_name": {
                  "advanced": false,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender_name",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "User"
                },
                "session_id": {
                  "advanced": true,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "If provided, the message will be stored in the memory.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "session_id",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                }
              }
            },
            "type": "ChatInput"
          },
          "height": 391,
          "id": "ChatInput-SYy6A",
          "position": {
            "x": 227.0628962889166,
            "y": -76.12824984054234
          },
          "selected": false,
          "type": "genericNode",
          "width": 384,
          "dragging": false,
          "positionAbsolute": {
            "x": 227.0628962889166,
            "y": -76.12824984054234
          }
        },
        {
          "data": {
            "id": "TextOutput-mFLsN",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Extracted Chunks",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true
            },
            "type": "TextOutput",
            "description": "Display a text output in the Playground.",
            "display_name": "Extracted Chunks",
            "edited": false
          },
          "dragging": false,
          "height": 297,
          "id": "TextOutput-mFLsN",
          "position": {
            "x": 1750.7432952731947,
            "y": 932.4969401113462
          },
          "positionAbsolute": {
            "x": 1750.7432952731947,
            "y": 932.4969401113462
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "OpenAIEmbeddings-YKhbh",
            "node": {
              "base_classes": [
                "Embeddings"
              ],
              "beta": false,
              "custom_fields": {
                "allowed_special": null,
                "chunk_size": null,
                "client": null,
                "default_headers": null,
                "default_query": null,
                "deployment": null,
                "disallowed_special": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "description": "Generate embeddings using OpenAI models.",
              "display_name": "OpenAI Embeddings",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "output_types": [
                "Embeddings"
              ],
              "template": {
                "_type": "CustomComponent",
                "allowed_special": {
                  "advanced": true,
                  "display_name": "Allowed Special",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "allowed_special",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": []
                },
                "chunk_size": {
                  "advanced": true,
                  "display_name": "Chunk Size",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "chunk_size",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 1000
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Dict, List, Optional\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings, NestedDict\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\n                    \"text-embedding-3-small\",\n                    \"text-embedding-3-large\",\n                    \"text-embedding-ada-002\",\n                ],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"password\": True,\n                \"advanced\": True,\n            },\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\n                \"display_name\": \"OpenAI API Type\",\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\n                \"display_name\": \"TikToken Model Name\",\n                \"advanced\": True,\n            },\n            \"tiktoken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n            \"dimensions\": {\n                \"display_name\": \"Dimensions\",\n                \"info\": \"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        openai_api_key: str,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        deployment: str = \"text-embedding-ada-002\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-ada-002\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n        dimensions: Optional[int] = None,\n    ) -> Embeddings:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n            dimensions=dimensions,\n        )\n"
                },
                "default_headers": {
                  "advanced": true,
                  "display_name": "Default Headers",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "default_headers",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "dict"
                },
                "default_query": {
                  "advanced": true,
                  "display_name": "Default Query",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "default_query",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "NestedDict",
                  "value": {}
                },
                "deployment": {
                  "advanced": true,
                  "display_name": "Deployment",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "deployment",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "text-embedding-ada-002"
                },
                "disallowed_special": {
                  "advanced": true,
                  "display_name": "Disallowed Special",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "disallowed_special",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": [
                    "all"
                  ]
                },
                "embedding_ctx_length": {
                  "advanced": true,
                  "display_name": "Embedding Context Length",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "embedding_ctx_length",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 8191
                },
                "max_retries": {
                  "advanced": true,
                  "display_name": "Max Retries",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "max_retries",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 6
                },
                "model": {
                  "advanced": false,
                  "display_name": "Model",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model",
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "text-embedding-ada-002"
                },
                "model_kwargs": {
                  "advanced": true,
                  "display_name": "Model Kwargs",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model_kwargs",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "NestedDict",
                  "value": {}
                },
                "openai_api_base": {
                  "advanced": true,
                  "display_name": "OpenAI API Base",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_base",
                  "password": true,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "openai_api_key": {
                  "advanced": false,
                  "display_name": "OpenAI API Key",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_key",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "openai_api_type": {
                  "advanced": true,
                  "display_name": "OpenAI API Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_type",
                  "password": true,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "openai_api_version": {
                  "advanced": true,
                  "display_name": "OpenAI API Version",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_version",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "openai_organization": {
                  "advanced": true,
                  "display_name": "OpenAI Organization",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_organization",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "openai_proxy": {
                  "advanced": true,
                  "display_name": "OpenAI Proxy",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_proxy",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "request_timeout": {
                  "advanced": true,
                  "display_name": "Request Timeout",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "request_timeout",
                  "password": false,
                  "placeholder": "",
                  "rangeSpec": {
                    "max": 1,
                    "min": -1,
                    "step": 0.1,
                    "step_type": "float"
                  },
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "float"
                },
                "show_progress_bar": {
                  "advanced": true,
                  "display_name": "Show Progress Bar",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "show_progress_bar",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "skip_empty": {
                  "advanced": true,
                  "display_name": "Skip Empty",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "skip_empty",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "tiktoken_enable": {
                  "advanced": true,
                  "display_name": "TikToken Enable",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "tiktoken_enable",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": true
                },
                "tiktoken_model_name": {
                  "advanced": true,
                  "display_name": "TikToken Model Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "tiktoken_model_name",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                }
              }
            },
            "type": "OpenAIEmbeddings"
          },
          "dragging": false,
          "height": 391,
          "id": "OpenAIEmbeddings-YKhbh",
          "position": {
            "x": 701.835773983325,
            "y": 844.8926239802696
          },
          "selected": false,
          "type": "genericNode",
          "width": 384,
          "positionAbsolute": {
            "x": 701.835773983325,
            "y": 844.8926239802696
          }
        },
        {
          "data": {
            "id": "OpenAIModel-W0vDJ",
            "node": {
              "base_classes": [
                "object",
                "Text",
                "str"
              ],
              "beta": false,
              "custom_fields": {
                "input_value": null,
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "stream": null,
                "system_message": null,
                "temperature": null
              },
              "description": "Generates text using OpenAI LLMs.",
              "display_name": "OpenAI",
              "documentation": "",
              "field_formatters": {},
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "frozen": false,
              "icon": "OpenAI",
              "output_types": [
                "Text"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Input",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "input_value",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "max_tokens": {
                  "advanced": true,
                  "display_name": "Max Tokens",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "max_tokens",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 256
                },
                "model_kwargs": {
                  "advanced": true,
                  "display_name": "Model Kwargs",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model_kwargs",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "NestedDict",
                  "value": {}
                },
                "model_name": {
                  "advanced": false,
                  "display_name": "Model Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model_name",
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "gpt-3.5-turbo"
                },
                "openai_api_base": {
                  "advanced": true,
                  "display_name": "OpenAI API Base",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_base",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "openai_api_key": {
                  "advanced": false,
                  "display_name": "OpenAI API Key",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_key",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "stream": {
                  "advanced": true,
                  "display_name": "Stream",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "stream",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "system_message": {
                  "advanced": true,
                  "display_name": "System Message",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "System message to pass to the model.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "system_message",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "advanced": false,
                  "display_name": "Temperature",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "temperature",
                  "password": false,
                  "placeholder": "",
                  "rangeSpec": {
                    "max": 1,
                    "min": -1,
                    "step": 0.1,
                    "step_type": "float"
                  },
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "float",
                  "value": 0.1
                }
              }
            },
            "type": "OpenAIModel"
          },
          "dragging": false,
          "height": 571,
          "id": "OpenAIModel-W0vDJ",
          "position": {
            "x": 2806.687921982041,
            "y": 221.86420965862646
          },
          "positionAbsolute": {
            "x": 2806.687921982041,
            "y": 221.86420965862646
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "id": "Prompt-bVTVl",
            "node": {
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n"
                },
                "context": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context",
                  "display_name": "context",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "question": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "question",
                  "display_name": "question",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "template",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "prompt",
                  "value": "{context}\n\n---\n\nGiven the context above, answer the question as best as possible.  Include as much information as possible in your response that matches the question.\n\nQuestion: {question}\n\nAnswer: "
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "context",
                  "question"
                ]
              },
              "output_types": [
                "Prompt"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "type": "Prompt"
          },
          "dragging": false,
          "height": 513,
          "id": "Prompt-bVTVl",
          "position": {
            "x": 2295.9273695935312,
            "y": 89.94899263203561
          },
          "positionAbsolute": {
            "x": 2295.9273695935312,
            "y": 89.94899263203561
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "ChatOutput-n9VEd",
            "node": {
              "base_classes": [
                "object",
                "Text",
                "Record",
                "str"
              ],
              "beta": false,
              "custom_fields": {
                "input_value": null,
                "record_template": null,
                "return_record": null,
                "sender": null,
                "sender_name": null,
                "session_id": null
              },
              "description": "Display a chat message in the Playground.",
              "display_name": "Chat Output",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "icon": "ChatOutput",
              "output_types": [
                "Message",
                "Text"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "input_value",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "advanced": true,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "Machine"
                },
                "sender_name": {
                  "advanced": false,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender_name",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "AI"
                },
                "session_id": {
                  "advanced": true,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "If provided, the message will be stored in the memory.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "session_id",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                }
              }
            },
            "type": "ChatOutput"
          },
          "dragging": false,
          "height": 391,
          "id": "ChatOutput-n9VEd",
          "position": {
            "x": 3316.3578878231842,
            "y": 560.2760969402582
          },
          "positionAbsolute": {
            "x": 3316.3578878231842,
            "y": 560.2760969402582
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "File-HSnJL",
            "node": {
              "base_classes": [
                "Record"
              ],
              "beta": false,
              "custom_fields": {
                "path": null,
                "silent_errors": null
              },
              "description": "A generic file loader.",
              "display_name": "File",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "icon": "file-text",
              "output_types": [
                "Record"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n"
                },
                "path": {
                  "advanced": false,
                  "display_name": "Path",
                  "dynamic": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx"
                  ],
                  "file_path": "61474da4-53b4-4e6c-9461-96ff4d14cc71\\OSE Newsletter June 2024.pdf",
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "path",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "file",
                  "value": ""
                },
                "silent_errors": {
                  "advanced": true,
                  "display_name": "Silent Errors",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "If true, errors will not raise an exception.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "silent_errors",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                }
              }
            },
            "type": "File"
          },
          "dragging": false,
          "height": 289,
          "id": "File-HSnJL",
          "position": {
            "x": 3374.345316598131,
            "y": 2785.8809914274652
          },
          "positionAbsolute": {
            "x": 3374.345316598131,
            "y": 2785.8809914274652
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "RecursiveCharacterTextSplitter-i4QJP",
            "node": {
              "base_classes": [
                "Record"
              ],
              "beta": false,
              "custom_fields": {
                "chunk_overlap": null,
                "chunk_size": null,
                "inputs": null,
                "separators": null
              },
              "description": "Split text into chunks of a specified length.",
              "display_name": "Recursive Character Text Splitter",
              "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "output_types": [
                "Record"
              ],
              "template": {
                "_type": "CustomComponent",
                "chunk_overlap": {
                  "advanced": false,
                  "display_name": "Chunk Overlap",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The amount of overlap between chunks.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "chunk_overlap",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 200
                },
                "chunk_size": {
                  "advanced": false,
                  "display_name": "Chunk Size",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The maximum length of each chunk.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "chunk_size",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 1000
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n"
                },
                "inputs": {
                  "advanced": false,
                  "display_name": "Input",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The texts to split.",
                  "input_types": [
                    "Document",
                    "Record"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "inputs",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "Document"
                },
                "separators": {
                  "advanced": false,
                  "display_name": "Separators",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "separators",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": [
                    ""
                  ]
                }
              }
            },
            "type": "RecursiveCharacterTextSplitter"
          },
          "dragging": false,
          "height": 509,
          "id": "RecursiveCharacterTextSplitter-i4QJP",
          "position": {
            "x": 3926.084280005299,
            "y": 2203.5460507867997
          },
          "positionAbsolute": {
            "x": 3926.084280005299,
            "y": 2203.5460507867997
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "AstraDBSearch-fNO9s",
            "node": {
              "base_classes": [
                "Record"
              ],
              "beta": false,
              "custom_fields": {
                "api_endpoint": null,
                "batch_size": null,
                "bulk_delete_concurrency": null,
                "bulk_insert_batch_concurrency": null,
                "bulk_insert_overwrite_concurrency": null,
                "collection_indexing_policy": null,
                "collection_name": null,
                "embedding": null,
                "input_value": null,
                "metadata_indexing_exclude": null,
                "metadata_indexing_include": null,
                "metric": null,
                "namespace": null,
                "number_of_results": null,
                "pre_delete_collection": null,
                "search_type": null,
                "setup_mode": null,
                "token": null
              },
              "description": "Searches an existing Astra DB Vector Store.",
              "display_name": "Astra DB Search",
              "documentation": "",
              "field_formatters": {},
              "field_order": [
                "token",
                "api_endpoint",
                "collection_name",
                "input_value",
                "embedding"
              ],
              "frozen": false,
              "icon": "AstraDB",
              "output_types": [
                "Record"
              ],
              "template": {
                "_type": "CustomComponent",
                "api_endpoint": {
                  "advanced": false,
                  "display_name": "API Endpoint",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "API endpoint URL for the Astra DB service.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "api_endpoint",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "batch_size": {
                  "advanced": true,
                  "display_name": "Batch Size",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional number of records to process in a single batch.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "batch_size",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "bulk_delete_concurrency": {
                  "advanced": true,
                  "display_name": "Bulk Delete Concurrency",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional concurrency level for bulk delete operations.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "bulk_delete_concurrency",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "bulk_insert_batch_concurrency": {
                  "advanced": true,
                  "display_name": "Bulk Insert Batch Concurrency",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional concurrency level for bulk insert operations.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "bulk_insert_batch_concurrency",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "bulk_insert_overwrite_concurrency": {
                  "advanced": true,
                  "display_name": "Bulk Insert Overwrite Concurrency",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional concurrency level for bulk insert operations that overwrite existing records.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "bulk_insert_overwrite_concurrency",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import List, Optional\n\nfrom axiestudio.components.vectorstores.AstraDB import AstraDBVectorStoreComponent\nfrom axiestudio.components.vectorstores.base.model import LCVectorStoreComponent\nfrom axiestudio.field_typing import Embeddings, Text\nfrom axiestudio.schema import Record\n\n\nclass AstraDBSearchComponent(LCVectorStoreComponent):\n    display_name = \"Astra DB Search\"\n    description = \"Searches an existing Astra DB Vector Store.\"\n    icon = \"AstraDB\"\n    field_order = [\"token\", \"api_endpoint\", \"collection_name\", \"input_value\", \"embedding\"]\n\n    def build_config(self):\n        return {\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"input_value\": {\n                \"display_name\": \"Input Value\",\n                \"info\": \"Input value to search\",\n            },\n            \"embedding\": {\"display_name\": \"Embedding\", \"info\": \"Embedding to use\"},\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"info\": \"The name of the collection within Astra DB where the vectors will be stored.\",\n            },\n            \"token\": {\n                \"display_name\": \"Astra DB Application Token\",\n                \"info\": \"Authentication token for accessing Astra DB.\",\n                \"password\": True,\n            },\n            \"api_endpoint\": {\n                \"display_name\": \"API Endpoint\",\n                \"info\": \"API endpoint URL for the Astra DB service.\",\n            },\n            \"namespace\": {\n                \"display_name\": \"Namespace\",\n                \"info\": \"Optional namespace within Astra DB to use for the collection.\",\n                \"advanced\": True,\n            },\n            \"metric\": {\n                \"display_name\": \"Metric\",\n                \"info\": \"Optional distance metric for vector comparisons in the vector store.\",\n                \"advanced\": True,\n            },\n            \"batch_size\": {\n                \"display_name\": \"Batch Size\",\n                \"info\": \"Optional number of records to process in a single batch.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_batch_concurrency\": {\n                \"display_name\": \"Bulk Insert Batch Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_overwrite_concurrency\": {\n                \"display_name\": \"Bulk Insert Overwrite Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations that overwrite existing records.\",\n                \"advanced\": True,\n            },\n            \"bulk_delete_concurrency\": {\n                \"display_name\": \"Bulk Delete Concurrency\",\n                \"info\": \"Optional concurrency level for bulk delete operations.\",\n                \"advanced\": True,\n            },\n            \"setup_mode\": {\n                \"display_name\": \"Setup Mode\",\n                \"info\": \"Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.\",\n                \"options\": [\"Sync\", \"Async\", \"Off\"],\n                \"advanced\": True,\n            },\n            \"pre_delete_collection\": {\n                \"display_name\": \"Pre Delete Collection\",\n                \"info\": \"Boolean flag to determine whether to delete the collection before creating a new one.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_include\": {\n                \"display_name\": \"Metadata Indexing Include\",\n                \"info\": \"Optional list of metadata fields to include in the indexing.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_exclude\": {\n                \"display_name\": \"Metadata Indexing Exclude\",\n                \"info\": \"Optional list of metadata fields to exclude from the indexing.\",\n                \"advanced\": True,\n            },\n            \"collection_indexing_policy\": {\n                \"display_name\": \"Collection Indexing Policy\",\n                \"info\": \"Optional dictionary defining the indexing policy for the collection.\",\n                \"advanced\": True,\n            },\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        collection_name: str,\n        input_value: Text,\n        token: str,\n        api_endpoint: str,\n        search_type: str = \"Similarity\",\n        number_of_results: int = 4,\n        namespace: Optional[str] = None,\n        metric: Optional[str] = None,\n        batch_size: Optional[int] = None,\n        bulk_insert_batch_concurrency: Optional[int] = None,\n        bulk_insert_overwrite_concurrency: Optional[int] = None,\n        bulk_delete_concurrency: Optional[int] = None,\n        setup_mode: str = \"Sync\",\n        pre_delete_collection: bool = False,\n        metadata_indexing_include: Optional[List[str]] = None,\n        metadata_indexing_exclude: Optional[List[str]] = None,\n        collection_indexing_policy: Optional[dict] = None,\n    ) -> List[Record]:\n        vector_store = AstraDBVectorStoreComponent().build(\n            embedding=embedding,\n            collection_name=collection_name,\n            token=token,\n            api_endpoint=api_endpoint,\n            namespace=namespace,\n            metric=metric,\n            batch_size=batch_size,\n            bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n            bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n            bulk_delete_concurrency=bulk_delete_concurrency,\n            setup_mode=setup_mode,\n            pre_delete_collection=pre_delete_collection,\n            metadata_indexing_include=metadata_indexing_include,\n            metadata_indexing_exclude=metadata_indexing_exclude,\n            collection_indexing_policy=collection_indexing_policy,\n        )\n        try:\n            return self.search_with_vector_store(input_value, search_type, vector_store, k=number_of_results)\n        except KeyError as e:\n            if \"content\" in str(e):\n                raise ValueError(\n                    \"You should ingest data through Langflow (or LangChain) to query it in Langflow. Your collection does not contain a field name 'content'.\"\n                )\n            else:\n                raise e\n"
                },
                "collection_indexing_policy": {
                  "advanced": true,
                  "display_name": "Collection Indexing Policy",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional dictionary defining the indexing policy for the collection.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "collection_indexing_policy",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "dict"
                },
                "collection_name": {
                  "advanced": false,
                  "display_name": "Collection Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The name of the collection within Astra DB where the vectors will be stored.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "collection_name",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "axiestudio"
                },
                "embedding": {
                  "advanced": false,
                  "display_name": "Embedding",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Embedding to use",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "embedding",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "Embeddings"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Input Value",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Input value to search",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "input_value",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "metadata_indexing_exclude": {
                  "advanced": true,
                  "display_name": "Metadata Indexing Exclude",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional list of metadata fields to exclude from the indexing.",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "metadata_indexing_exclude",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "metadata_indexing_include": {
                  "advanced": true,
                  "display_name": "Metadata Indexing Include",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional list of metadata fields to include in the indexing.",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "metadata_indexing_include",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "metric": {
                  "advanced": true,
                  "display_name": "Metric",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional distance metric for vector comparisons in the vector store.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "metric",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "namespace": {
                  "advanced": true,
                  "display_name": "Namespace",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional namespace within Astra DB to use for the collection.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "namespace",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "number_of_results": {
                  "advanced": true,
                  "display_name": "Number of Results",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Number of results to return.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "number_of_results",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 4
                },
                "pre_delete_collection": {
                  "advanced": true,
                  "display_name": "Pre Delete Collection",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "pre_delete_collection",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "search_type": {
                  "advanced": false,
                  "display_name": "Search Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "search_type",
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "Similarity"
                },
                "setup_mode": {
                  "advanced": true,
                  "display_name": "Setup Mode",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "setup_mode",
                  "options": [
                    "Sync",
                    "Async",
                    "Off"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "Sync"
                },
                "token": {
                  "advanced": false,
                  "display_name": "Astra DB Application Token",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Authentication token for accessing Astra DB.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "token",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                }
              }
            },
            "type": "AstraDBSearch"
          },
          "dragging": false,
          "height": 721,
          "id": "AstraDBSearch-fNO9s",
          "position": {
            "x": 1224.6833446969779,
            "y": -504.47159050784
          },
          "positionAbsolute": {
            "x": 1224.6833446969779,
            "y": -504.47159050784
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "AstraDB-ccjDs",
            "node": {
              "base_classes": [
                "VectorStore"
              ],
              "beta": false,
              "custom_fields": {
                "api_endpoint": null,
                "batch_size": null,
                "bulk_delete_concurrency": null,
                "bulk_insert_batch_concurrency": null,
                "bulk_insert_overwrite_concurrency": null,
                "collection_indexing_policy": null,
                "collection_name": null,
                "embedding": null,
                "inputs": null,
                "metadata_indexing_exclude": null,
                "metadata_indexing_include": null,
                "metric": null,
                "namespace": null,
                "pre_delete_collection": null,
                "setup_mode": null,
                "token": null
              },
              "description": "Builds or loads an Astra DB Vector Store.",
              "display_name": "Astra DB",
              "documentation": "",
              "field_formatters": {},
              "field_order": [
                "token",
                "api_endpoint",
                "collection_name",
                "inputs",
                "embedding"
              ],
              "frozen": false,
              "icon": "AstraDB",
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "template": {
                "_type": "CustomComponent",
                "api_endpoint": {
                  "advanced": false,
                  "display_name": "API Endpoint",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "API endpoint URL for the Astra DB service.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "api_endpoint",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "batch_size": {
                  "advanced": true,
                  "display_name": "Batch Size",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional number of records to process in a single batch.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "batch_size",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "bulk_delete_concurrency": {
                  "advanced": true,
                  "display_name": "Bulk Delete Concurrency",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional concurrency level for bulk delete operations.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "bulk_delete_concurrency",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "bulk_insert_batch_concurrency": {
                  "advanced": true,
                  "display_name": "Bulk Insert Batch Concurrency",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional concurrency level for bulk insert operations.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "bulk_insert_batch_concurrency",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "bulk_insert_overwrite_concurrency": {
                  "advanced": true,
                  "display_name": "Bulk Insert Overwrite Concurrency",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional concurrency level for bulk insert operations that overwrite existing records.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "bulk_insert_overwrite_concurrency",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int"
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import List, Optional, Union\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings, VectorStore\nfrom axiestudio.schema import Record\nfrom langchain_core.retrievers import BaseRetriever\n\n\nclass AstraDBVectorStoreComponent(CustomComponent):\n    display_name = \"Astra DB\"\n    description = \"Builds or loads an Astra DB Vector Store.\"\n    icon = \"AstraDB\"\n    field_order = [\"token\", \"api_endpoint\", \"collection_name\", \"inputs\", \"embedding\"]\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Inputs\",\n                \"info\": \"Optional list of records to be processed and stored in the vector store.\",\n            },\n            \"embedding\": {\"display_name\": \"Embedding\", \"info\": \"Embedding to use\"},\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"info\": \"The name of the collection within Astra DB where the vectors will be stored.\",\n            },\n            \"token\": {\n                \"display_name\": \"Astra DB Application Token\",\n                \"info\": \"Authentication token for accessing Astra DB.\",\n                \"password\": True,\n            },\n            \"api_endpoint\": {\n                \"display_name\": \"API Endpoint\",\n                \"info\": \"API endpoint URL for the Astra DB service.\",\n            },\n            \"namespace\": {\n                \"display_name\": \"Namespace\",\n                \"info\": \"Optional namespace within Astra DB to use for the collection.\",\n                \"advanced\": True,\n            },\n            \"metric\": {\n                \"display_name\": \"Metric\",\n                \"info\": \"Optional distance metric for vector comparisons in the vector store.\",\n                \"advanced\": True,\n            },\n            \"batch_size\": {\n                \"display_name\": \"Batch Size\",\n                \"info\": \"Optional number of records to process in a single batch.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_batch_concurrency\": {\n                \"display_name\": \"Bulk Insert Batch Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_overwrite_concurrency\": {\n                \"display_name\": \"Bulk Insert Overwrite Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations that overwrite existing records.\",\n                \"advanced\": True,\n            },\n            \"bulk_delete_concurrency\": {\n                \"display_name\": \"Bulk Delete Concurrency\",\n                \"info\": \"Optional concurrency level for bulk delete operations.\",\n                \"advanced\": True,\n            },\n            \"setup_mode\": {\n                \"display_name\": \"Setup Mode\",\n                \"info\": \"Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.\",\n                \"options\": [\"Sync\", \"Async\", \"Off\"],\n                \"advanced\": True,\n            },\n            \"pre_delete_collection\": {\n                \"display_name\": \"Pre Delete Collection\",\n                \"info\": \"Boolean flag to determine whether to delete the collection before creating a new one.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_include\": {\n                \"display_name\": \"Metadata Indexing Include\",\n                \"info\": \"Optional list of metadata fields to include in the indexing.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_exclude\": {\n                \"display_name\": \"Metadata Indexing Exclude\",\n                \"info\": \"Optional list of metadata fields to exclude from the indexing.\",\n                \"advanced\": True,\n            },\n            \"collection_indexing_policy\": {\n                \"display_name\": \"Collection Indexing Policy\",\n                \"info\": \"Optional dictionary defining the indexing policy for the collection.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        token: str,\n        api_endpoint: str,\n        collection_name: str,\n        inputs: Optional[List[Record]] = None,\n        namespace: Optional[str] = None,\n        metric: Optional[str] = None,\n        batch_size: Optional[int] = None,\n        bulk_insert_batch_concurrency: Optional[int] = None,\n        bulk_insert_overwrite_concurrency: Optional[int] = None,\n        bulk_delete_concurrency: Optional[int] = None,\n        setup_mode: str = \"Sync\",\n        pre_delete_collection: bool = False,\n        metadata_indexing_include: Optional[List[str]] = None,\n        metadata_indexing_exclude: Optional[List[str]] = None,\n        collection_indexing_policy: Optional[dict] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            setup_mode_value = SetupMode[setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {setup_mode}\")\n        if inputs:\n            documents = [_input.to_lc_document() for _input in inputs]\n\n            vector_store = AstraDBVectorStore.from_documents(\n                documents=documents,\n                embedding=embedding,\n                collection_name=collection_name,\n                token=token,\n                api_endpoint=api_endpoint,\n                namespace=namespace,\n                metric=metric,\n                batch_size=batch_size,\n                bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n                bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n                bulk_delete_concurrency=bulk_delete_concurrency,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=pre_delete_collection,\n                metadata_indexing_include=metadata_indexing_include,\n                metadata_indexing_exclude=metadata_indexing_exclude,\n                collection_indexing_policy=collection_indexing_policy,\n            )\n        else:\n            vector_store = AstraDBVectorStore(\n                embedding=embedding,\n                collection_name=collection_name,\n                token=token,\n                api_endpoint=api_endpoint,\n                namespace=namespace,\n                metric=metric,\n                batch_size=batch_size,\n                bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n                bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n                bulk_delete_concurrency=bulk_delete_concurrency,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=pre_delete_collection,\n                metadata_indexing_include=metadata_indexing_include,\n                metadata_indexing_exclude=metadata_indexing_exclude,\n                collection_indexing_policy=collection_indexing_policy,\n            )\n\n        return vector_store\n        return vector_store\n"
                },
                "collection_indexing_policy": {
                  "advanced": true,
                  "display_name": "Collection Indexing Policy",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional dictionary defining the indexing policy for the collection.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "collection_indexing_policy",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "dict"
                },
                "collection_name": {
                  "advanced": false,
                  "display_name": "Collection Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The name of the collection within Astra DB where the vectors will be stored.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "collection_name",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "axiestudio"
                },
                "embedding": {
                  "advanced": false,
                  "display_name": "Embedding",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Embedding to use",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "embedding",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "Embeddings"
                },
                "inputs": {
                  "advanced": false,
                  "display_name": "Inputs",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional list of records to be processed and stored in the vector store.",
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "inputs",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "Record"
                },
                "metadata_indexing_exclude": {
                  "advanced": true,
                  "display_name": "Metadata Indexing Exclude",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional list of metadata fields to exclude from the indexing.",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "metadata_indexing_exclude",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "metadata_indexing_include": {
                  "advanced": true,
                  "display_name": "Metadata Indexing Include",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional list of metadata fields to include in the indexing.",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "metadata_indexing_include",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "metric": {
                  "advanced": true,
                  "display_name": "Metric",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional distance metric for vector comparisons in the vector store.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "metric",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "namespace": {
                  "advanced": true,
                  "display_name": "Namespace",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Optional namespace within Astra DB to use for the collection.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "namespace",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "pre_delete_collection": {
                  "advanced": true,
                  "display_name": "Pre Delete Collection",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "pre_delete_collection",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "setup_mode": {
                  "advanced": true,
                  "display_name": "Setup Mode",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "setup_mode",
                  "options": [
                    "Sync",
                    "Async",
                    "Off"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "Sync"
                },
                "token": {
                  "advanced": false,
                  "display_name": "Astra DB Application Token",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Authentication token for accessing Astra DB.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "token",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                }
              }
            },
            "type": "AstraDB"
          },
          "dragging": false,
          "height": 581,
          "id": "AstraDB-ccjDs",
          "position": {
            "x": 4525.728063904562,
            "y": 1893.9115091437052
          },
          "positionAbsolute": {
            "x": 4525.728063904562,
            "y": 1893.9115091437052
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "OpenAIEmbeddings-xpJHa",
            "node": {
              "base_classes": [
                "Embeddings"
              ],
              "beta": false,
              "custom_fields": {
                "allowed_special": null,
                "chunk_size": null,
                "client": null,
                "default_headers": null,
                "default_query": null,
                "deployment": null,
                "disallowed_special": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "description": "Generate embeddings using OpenAI models.",
              "display_name": "OpenAI Embeddings",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "output_types": [
                "Embeddings"
              ],
              "template": {
                "_type": "CustomComponent",
                "allowed_special": {
                  "advanced": true,
                  "display_name": "Allowed Special",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "allowed_special",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": []
                },
                "chunk_size": {
                  "advanced": true,
                  "display_name": "Chunk Size",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "chunk_size",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 1000
                },
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Dict, List, Optional\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings, NestedDict\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\n                    \"text-embedding-3-small\",\n                    \"text-embedding-3-large\",\n                    \"text-embedding-ada-002\",\n                ],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"password\": True,\n                \"advanced\": True,\n            },\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\n                \"display_name\": \"OpenAI API Type\",\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\n                \"display_name\": \"TikToken Model Name\",\n                \"advanced\": True,\n            },\n            \"tiktoken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n            \"dimensions\": {\n                \"display_name\": \"Dimensions\",\n                \"info\": \"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        openai_api_key: str,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        deployment: str = \"text-embedding-ada-002\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-ada-002\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n        dimensions: Optional[int] = None,\n    ) -> Embeddings:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n            dimensions=dimensions,\n        )\n"
                },
                "default_headers": {
                  "advanced": true,
                  "display_name": "Default Headers",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "default_headers",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "dict"
                },
                "default_query": {
                  "advanced": true,
                  "display_name": "Default Query",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "default_query",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "NestedDict",
                  "value": {}
                },
                "deployment": {
                  "advanced": true,
                  "display_name": "Deployment",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "deployment",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "text-embedding-ada-002"
                },
                "disallowed_special": {
                  "advanced": true,
                  "display_name": "Disallowed Special",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "disallowed_special",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": [
                    "all"
                  ]
                },
                "embedding_ctx_length": {
                  "advanced": true,
                  "display_name": "Embedding Context Length",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "embedding_ctx_length",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 8191
                },
                "max_retries": {
                  "advanced": true,
                  "display_name": "Max Retries",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "max_retries",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 6
                },
                "model": {
                  "advanced": false,
                  "display_name": "Model",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model",
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "text-embedding-ada-002"
                },
                "model_kwargs": {
                  "advanced": true,
                  "display_name": "Model Kwargs",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model_kwargs",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "NestedDict",
                  "value": {}
                },
                "openai_api_base": {
                  "advanced": true,
                  "display_name": "OpenAI API Base",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_base",
                  "password": true,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "openai_api_key": {
                  "advanced": false,
                  "display_name": "OpenAI API Key",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_key",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "openai_api_type": {
                  "advanced": true,
                  "display_name": "OpenAI API Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_type",
                  "password": true,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "openai_api_version": {
                  "advanced": true,
                  "display_name": "OpenAI API Version",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_version",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "openai_organization": {
                  "advanced": true,
                  "display_name": "OpenAI Organization",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_organization",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "openai_proxy": {
                  "advanced": true,
                  "display_name": "OpenAI Proxy",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_proxy",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "request_timeout": {
                  "advanced": true,
                  "display_name": "Request Timeout",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "request_timeout",
                  "password": false,
                  "placeholder": "",
                  "rangeSpec": {
                    "max": 1,
                    "min": -1,
                    "step": 0.1,
                    "step_type": "float"
                  },
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "float"
                },
                "show_progress_bar": {
                  "advanced": true,
                  "display_name": "Show Progress Bar",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "show_progress_bar",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "skip_empty": {
                  "advanced": true,
                  "display_name": "Skip Empty",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "skip_empty",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "tiktoken_enable": {
                  "advanced": true,
                  "display_name": "TikToken Enable",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "tiktoken_enable",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": true
                },
                "tiktoken_model_name": {
                  "advanced": true,
                  "display_name": "TikToken Model Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "tiktoken_model_name",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                }
              }
            },
            "type": "OpenAIEmbeddings"
          },
          "dragging": false,
          "height": 391,
          "id": "OpenAIEmbeddings-xpJHa",
          "position": {
            "x": 3926.7817240257136,
            "y": 2793.2741031258615
          },
          "positionAbsolute": {
            "x": 3926.7817240257136,
            "y": 2793.2741031258615
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "id": "Pinecone-dljg2",
          "type": "genericNode",
          "position": {
            "x": 4883.4380441408175,
            "y": 2566.349870994464
          },
          "data": {
            "type": "Pinecone",
            "node": {
              "template": {
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "inputs": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "inputs",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nfrom langchain_core.documents import Document\nfrom langchain_core.retrievers import BaseRetriever\nfrom langchain_core.vectorstores import VectorStore\nfrom langchain_pinecone._utilities import DistanceStrategy\nfrom langchain_pinecone.vectorstores import PineconeVectorStore\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.schema import Record\n\n\nclass PineconeComponent(CustomComponent):\n    display_name = \"Pinecone\"\n    description = \"Construct Pinecone wrapper from raw documents.\"\n    icon = \"Pinecone\"\n    field_order = [\"index_name\", \"namespace\", \"distance_strategy\", \"pinecone_api_key\", \"documents\", \"embedding\"]\n\n    def build_config(self):\n        distance_options = [e.value.title().replace(\"_\", \" \") for e in DistanceStrategy]\n        distance_value = distance_options[0]\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"namespace\": {\"display_name\": \"Namespace\"},\n            \"text_key\": {\"display_name\": \"Text Key\"},\n            \"distance_strategy\": {\n                \"display_name\": \"Distance Strategy\",\n                # get values from enum\n                # and make them title case for display\n                \"options\": distance_options,\n                \"advanced\": True,\n                \"value\": distance_value,\n            },\n            \"pinecone_api_key\": {\n                \"display_name\": \"Pinecone API Key\",\n                \"default\": \"\",\n                \"password\": True,\n                \"required\": True,\n            },\n            \"pool_threads\": {\n                \"display_name\": \"Pool Threads\",\n                \"default\": 1,\n                \"advanced\": True,\n            },\n        }\n\n    def from_existing_index(\n        self,\n        index_name: str,\n        embedding: Embeddings,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        pool_threads: int = 4,\n    ) -> PineconeVectorStore:\n        \"\"\"Load pinecone vectorstore from index name.\"\"\"\n        pinecone_index = PineconeVectorStore.get_pinecone_index(\n            index_name, pool_threads, pinecone_api_key=pinecone_api_key\n        )\n        return PineconeVectorStore(\n            index=pinecone_index,\n            embedding=embedding,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n        )\n\n    def from_documents(\n        self,\n        documents: List[Document],\n        embedding: Embeddings,\n        index_name: str,\n        pinecone_api_key: str | None,\n        text_key: str = \"text\",\n        namespace: Optional[str] = None,\n        pool_threads: int = 4,\n        distance_strategy: DistanceStrategy = DistanceStrategy.COSINE,\n        batch_size: int = 32,\n        upsert_kwargs: Optional[dict] = None,\n        embeddings_chunk_size: int = 1000,\n    ) -> PineconeVectorStore:\n        \"\"\"Create a new pinecone vectorstore from documents.\"\"\"\n        texts = [d.page_content for d in documents]\n        metadatas = [d.metadata for d in documents]\n        pinecone = self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=distance_strategy,\n            pool_threads=pool_threads,\n        )\n        pinecone.add_texts(\n            texts,\n            metadatas=metadatas,\n            ids=None,\n            namespace=namespace,\n            batch_size=batch_size,\n            embedding_chunk_size=embeddings_chunk_size,\n            **(upsert_kwargs or {}),\n        )\n        return pinecone\n\n    def build(\n        self,\n        embedding: Embeddings,\n        distance_strategy: str,\n        inputs: Optional[List[Record]] = None,\n        text_key: str = \"text\",\n        pool_threads: int = 4,\n        index_name: Optional[str] = None,\n        pinecone_api_key: Optional[str] = None,\n        namespace: Optional[str] = \"default\",\n    ) -> Union[VectorStore, BaseRetriever]:\n        # get distance strategy from string\n        distance_strategy = distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n        if not index_name:\n            raise ValueError(\"Index Name is required.\")\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        if documents:\n            return self.from_documents(\n                documents=documents,\n                embedding=embedding,\n                index_name=index_name,\n                pinecone_api_key=pinecone_api_key,\n                text_key=text_key,\n                namespace=namespace,\n                distance_strategy=_distance_strategy,\n                pool_threads=pool_threads,\n            )\n\n        return self.from_existing_index(\n            index_name=index_name,\n            embedding=embedding,\n            pinecone_api_key=pinecone_api_key,\n            text_key=text_key,\n            namespace=namespace,\n            distance_strategy=_distance_strategy,\n            pool_threads=pool_threads,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "distance_strategy": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Euclidean Distance",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Euclidean Distance",
                    "Max Inner Product",
                    "Cosine"
                  ],
                  "name": "distance_strategy",
                  "display_name": "Distance Strategy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "index_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "index_name",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "axiestudio"
                },
                "namespace": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "default",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "namespace",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "pinecone_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "pinecone_api_key",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "pool_threads": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 4,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pool_threads",
                  "display_name": "Pool Threads",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "text_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text_key",
                  "display_name": "Text Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Construct Pinecone wrapper from raw documents.",
              "icon": "Pinecone",
              "base_classes": [
                "BaseRetriever",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "VectorStore"
              ],
              "display_name": "Pinecone",
              "documentation": "",
              "custom_fields": {
                "embedding": null,
                "distance_strategy": null,
                "inputs": null,
                "text_key": null,
                "pool_threads": null,
                "index_name": null,
                "pinecone_api_key": null,
                "namespace": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "documents",
                "embedding"
              ],
              "beta": false
            },
            "id": "Pinecone-dljg2"
          },
          "selected": false,
          "width": 384,
          "height": 703,
          "positionAbsolute": {
            "x": 4883.4380441408175,
            "y": 2566.349870994464
          },
          "dragging": false
        },
        {
          "id": "PineconeSearch-DwUFi",
          "type": "genericNode",
          "position": {
            "x": 1228.611715433582,
            "y": 435.548284723767
          },
          "data": {
            "type": "PineconeSearch",
            "node": {
              "template": {
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional\n\nfrom langchain_pinecone._utilities import DistanceStrategy\n\nfrom axiestudio.components.vectorstores.base.model import LCVectorStoreComponent\nfrom axiestudio.components.vectorstores.Pinecone import PineconeComponent\nfrom axiestudio.field_typing import Embeddings, Text\nfrom axiestudio.field_typing.constants import NestedDict\nfrom axiestudio.schema import Record\n\n\nclass PineconeSearchComponent(PineconeComponent, LCVectorStoreComponent):\n    display_name = \"Pinecone Search\"\n    description = \"Search a Pinecone Vector Store for similar documents.\"\n    icon = \"Pinecone\"\n    field_order = [\"index_name\", \"namespace\", \"distance_strategy\", \"pinecone_api_key\", \"input_value\", \"embedding\"]\n\n    def build_config(self):\n        distance_options = [e.value.title().replace(\"_\", \" \") for e in DistanceStrategy]\n        distance_value = distance_options[0]\n        return {\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"namespace\": {\"display_name\": \"Namespace\", \"info\": \"Namespace for the index.\"},\n            \"distance_strategy\": {\n                \"display_name\": \"Distance Strategy\",\n                # get values from enum\n                # and make them title case for display\n                \"options\": distance_options,\n                \"advanced\": True,\n                \"value\": distance_value,\n            },\n            \"pinecone_api_key\": {\n                \"display_name\": \"Pinecone API Key\",\n                \"default\": \"\",\n                \"password\": True,\n            },\n            \"pool_threads\": {\n                \"display_name\": \"Pool Threads\",\n                \"default\": 1,\n                \"advanced\": True,\n            },\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n            \"text_key\": {\n                \"display_name\": \"Text Key\",\n                \"info\": \"Key in the record to use as text.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(  # type: ignore[override]\n        self,\n        input_value: Text,\n        embedding: Embeddings,\n        distance_strategy: str,\n        text_key: str = \"text\",\n        number_of_results: int = 4,\n        pool_threads: int = 4,\n        index_name: Optional[str] = None,\n        pinecone_api_key: Optional[str] = None,\n        namespace: Optional[str] = \"default\",\n        search_type: str = \"similarity\",\n        search_kwargs: Optional[NestedDict] = None,\n    ) -> List[Record]:  # type: ignore[override]\n        vector_store = super().build(\n            embedding=embedding,\n            distance_strategy=distance_strategy,\n            inputs=[],\n            text_key=text_key,\n            pool_threads=pool_threads,\n            index_name=index_name,\n            pinecone_api_key=pinecone_api_key,\n            namespace=namespace,\n        )\n        if not vector_store:\n            raise ValueError(\"Failed to load the Pinecone index.\")\n        if search_kwargs is None:\n            search_kwargs = {}\n\n        return self.search_with_vector_store(\n            vector_store=vector_store,\n            input_value=input_value,\n            search_type=search_type,\n            k=number_of_results,\n            **search_kwargs,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "distance_strategy": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Euclidean Distance",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Euclidean Distance",
                    "Max Inner Product",
                    "Cosine"
                  ],
                  "name": "distance_strategy",
                  "display_name": "Distance Strategy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "index_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "index_name",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "axiestudio"
                },
                "namespace": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "default",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "namespace",
                  "display_name": "Namespace",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Namespace for the index.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "number_of_results": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 4,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "number_of_results",
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "load_from_db": false,
                  "title_case": false
                },
                "pinecone_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "pinecone_api_key",
                  "display_name": "Pinecone API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "pool_threads": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 4,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pool_threads",
                  "display_name": "Pool Threads",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "search_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "search_kwargs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "search_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "similarity",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "name": "search_type",
                  "display_name": "Search Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "text_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text_key",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Key in the record to use as text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Search a Pinecone Vector Store for similar documents.",
              "icon": "Pinecone",
              "base_classes": [
                "Record"
              ],
              "display_name": "Pinecone Search",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "embedding": null,
                "distance_strategy": null,
                "text_key": null,
                "number_of_results": null,
                "pool_threads": null,
                "index_name": null,
                "pinecone_api_key": null,
                "namespace": null,
                "search_type": null,
                "search_kwargs": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "index_name",
                "namespace",
                "distance_strategy",
                "pinecone_api_key",
                "input_value",
                "embedding"
              ],
              "beta": false
            },
            "id": "PineconeSearch-DwUFi"
          },
          "selected": false,
          "width": 384,
          "height": 835,
          "positionAbsolute": {
            "x": 1228.611715433582,
            "y": 435.548284723767
          },
          "dragging": false
        },
        {
          "id": "RecordsToText-Vruik",
          "type": "genericNode",
          "position": {
            "x": 699.3760412506721,
            "y": 376.2577404382511
          },
          "data": {
            "type": "RecordsToText",
            "node": {
              "template": {
                "records": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "records",
                  "display_name": "Records",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The records to convert to text.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n                \"multiline\": True,\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "Text: {text}\\nData: {data}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Convert Records into plain text following a specified template.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Records To Text",
              "documentation": "",
              "custom_fields": {
                "records": null,
                "template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecordsToText-Vruik"
          },
          "selected": false,
          "width": 384,
          "height": 373,
          "positionAbsolute": {
            "x": 699.3760412506721,
            "y": 376.2577404382511
          },
          "dragging": false
        },
        {
          "id": "TextOutput-5SqbW",
          "type": "genericNode",
          "position": {
            "x": 1729.4382225937893,
            "y": 57.35990190495582
          },
          "data": {
            "id": "TextOutput-5SqbW",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Extracted Chunks",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "edited": true
            },
            "type": "TextOutput",
            "description": "Display a text output in the Playground.",
            "display_name": "Extracted Chunks",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": 1729.4382225937893,
            "y": 57.35990190495582
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "object",
                "Text",
                "str"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-W0vDJ"
            },
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-n9VEd",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-OpenAIModel-W0vDJ{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-W0vDJœ}-ChatOutput-n9VEd{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-n9VEdœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "selected": false,
          "source": "OpenAIModel-W0vDJ",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-W0vDJœ}",
          "style": {
            "stroke": "#555"
          },
          "target": "ChatOutput-n9VEd",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-n9VEdœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "File",
              "id": "File-HSnJL"
            },
            "targetHandle": {
              "fieldName": "inputs",
              "id": "RecursiveCharacterTextSplitter-i4QJP",
              "inputTypes": [
                "Document",
                "Record"
              ],
              "type": "Document"
            }
          },
          "id": "reactflow__edge-File-HSnJL{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HSnJLœ}-RecursiveCharacterTextSplitter-i4QJP{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
          "selected": false,
          "source": "File-HSnJL",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HSnJLœ}",
          "style": {
            "stroke": "#555"
          },
          "target": "RecursiveCharacterTextSplitter-i4QJP",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "RecursiveCharacterTextSplitter",
              "id": "RecursiveCharacterTextSplitter-i4QJP"
            },
            "targetHandle": {
              "fieldName": "inputs",
              "id": "AstraDB-ccjDs",
              "inputTypes": null,
              "type": "Record"
            }
          },
          "id": "reactflow__edge-RecursiveCharacterTextSplitter-i4QJP{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}-AstraDB-ccjDs{œfieldNameœ:œinputsœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "selected": false,
          "source": "RecursiveCharacterTextSplitter-i4QJP",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}",
          "style": {
            "stroke": "#555"
          },
          "target": "AstraDB-ccjDs",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "Embeddings"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-xpJHa"
            },
            "targetHandle": {
              "fieldName": "embedding",
              "id": "AstraDB-ccjDs",
              "inputTypes": null,
              "type": "Embeddings"
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-xpJHa{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}-AstraDB-ccjDs{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "selected": false,
          "source": "OpenAIEmbeddings-xpJHa",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}",
          "style": {
            "stroke": "#555"
          },
          "target": "AstraDB-ccjDs",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-ccjDsœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        },
        {
          "source": "RecursiveCharacterTextSplitter-i4QJP",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}",
          "target": "Pinecone-dljg2",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "inputs",
              "id": "Pinecone-dljg2",
              "inputTypes": [
                "Document",
                "Record"
              ],
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "RecursiveCharacterTextSplitter",
              "id": "RecursiveCharacterTextSplitter-i4QJP"
            }
          },
          "id": "reactflow__edge-RecursiveCharacterTextSplitter-i4QJP{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-i4QJPœ}-Pinecone-dljg2{œfieldNameœ:œinputsœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-xpJHa",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}",
          "target": "Pinecone-dljg2",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Pinecone-dljg2",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-xpJHa"
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-xpJHa{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-xpJHaœ}-Pinecone-dljg2{œfieldNameœ:œembeddingœ,œidœ:œPinecone-dljg2œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-YKhbh",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}",
          "target": "PineconeSearch-DwUFi",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "PineconeSearch-DwUFi",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-YKhbh"
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-YKhbh{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}-PineconeSearch-DwUFi{œfieldNameœ:œembeddingœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "className": ""
        },
        {
          "source": "PineconeSearch-DwUFi",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-DwUFiœ}",
          "target": "TextOutput-mFLsN",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-mFLsNœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-mFLsN",
              "inputTypes": [
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "PineconeSearch",
              "id": "PineconeSearch-DwUFi"
            }
          },
          "id": "reactflow__edge-PineconeSearch-DwUFi{œbaseClassesœ:[œRecordœ],œdataTypeœ:œPineconeSearchœ,œidœ:œPineconeSearch-DwUFiœ}-TextOutput-mFLsN{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-mFLsNœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-SYy6A",
          "sourceHandle": "{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}",
          "target": "RecordsToText-Vruik",
          "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-Vruikœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "records",
              "id": "RecordsToText-Vruik",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Text",
                "str",
                "object",
                "Record"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-SYy6A"
            }
          },
          "id": "reactflow__edge-ChatInput-SYy6A{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}-RecordsToText-Vruik{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-Vruikœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "className": ""
        },
        {
          "source": "RecordsToText-Vruik",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}",
          "target": "PineconeSearch-DwUFi",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "PineconeSearch-DwUFi",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-Vruik"
            }
          },
          "id": "reactflow__edge-RecordsToText-Vruik{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}-PineconeSearch-DwUFi{œfieldNameœ:œinput_valueœ,œidœ:œPineconeSearch-DwUFiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "RecordsToText-Vruik",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}",
          "target": "AstraDBSearch-fNO9s",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "AstraDBSearch-fNO9s",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-Vruik"
            }
          },
          "id": "reactflow__edge-RecordsToText-Vruik{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-Vruikœ}-AstraDBSearch-fNO9s{œfieldNameœ:œinput_valueœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-YKhbh",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}",
          "target": "AstraDBSearch-fNO9s",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "AstraDBSearch-fNO9s",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-YKhbh"
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-YKhbh{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-YKhbhœ}-AstraDBSearch-fNO9s{œfieldNameœ:œembeddingœ,œidœ:œAstraDBSearch-fNO9sœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "className": ""
        },
        {
          "source": "AstraDBSearch-fNO9s",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œAstraDBSearchœ,œidœ:œAstraDBSearch-fNO9sœ}",
          "target": "TextOutput-5SqbW",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-5SqbWœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-5SqbW",
              "inputTypes": [
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "AstraDBSearch",
              "id": "AstraDBSearch-fNO9s"
            }
          },
          "id": "reactflow__edge-AstraDBSearch-fNO9s{œbaseClassesœ:[œRecordœ],œdataTypeœ:œAstraDBSearchœ,œidœ:œAstraDBSearch-fNO9sœ}-TextOutput-5SqbW{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-5SqbWœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextOutput-mFLsN",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-mFLsNœ}",
          "target": "Prompt-bVTVl",
          "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "context",
              "id": "Prompt-bVTVl",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextOutput",
              "id": "TextOutput-mFLsN"
            }
          },
          "id": "reactflow__edge-TextOutput-mFLsN{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-mFLsNœ}-Prompt-bVTVl{œfieldNameœ:œcontextœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-SYy6A",
          "sourceHandle": "{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}",
          "target": "Prompt-bVTVl",
          "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "question",
              "id": "Prompt-bVTVl",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Text",
                "str",
                "object",
                "Record"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-SYy6A"
            }
          },
          "id": "reactflow__edge-ChatInput-SYy6A{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-SYy6Aœ}-Prompt-bVTVl{œfieldNameœ:œquestionœ,œidœ:œPrompt-bVTVlœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Prompt-bVTVl",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-bVTVlœ}",
          "target": "OpenAIModel-W0vDJ",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-W0vDJœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-W0vDJ",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-bVTVl"
            }
          },
          "id": "reactflow__edge-Prompt-bVTVl{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-bVTVlœ}-OpenAIModel-W0vDJ{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-W0vDJœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 50.50414871658677,
        "y": 248.59530673363372,
        "zoom": 0.35455931461399437
      }
    },
    "date_created": "2024-06-16T00:10:22.464Z",
    "date_updated": "2024-06-16T00:10:22.697Z",
    "status": "Public",
    "sort": null,
    "user_updated": "c0e1af3e-3789-414f-829f-e112c65df703",
    "user_created": {
      "username": "razorcx",
      "first_name": "Cory",
      "last_name": "LePage",
      "id": "c0e1af3e-3789-414f-829f-e112c65df703"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Vector Store",
          "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:00.103Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 104,
    "converter_version": "1.0.0"
  }
}