{
  "id": "ce132281-8cc3-43db-b257-26eedbf78c13",
  "name": "P14 De recurso FHIR a Grafo y consulta MODULAR",
  "description": "convertir recursos fhir a grafos e ingerirlos y después consultar :) Faltaría la parte del vector index, que está pendiente de probarse\nOBJETIVO:  separar el componente de consulta neo4j en varios módulos (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "meriialvarez",
    "first_name": "Maria",
    "last_name": "Alvarez Flores",
    "id": "b13de3e5-4b4a-46d3-ac15-796c0289bd51",
    "full_name": "Maria Alvarez Flores"
  },
  "store_url": "https://www.langflow.store/store/component/ce132281-8cc3-43db-b257-26eedbf78c13",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-10-31T09:21:08.407Z",
    "updated": "2024-10-31T09:21:08.467Z",
    "downloaded": "2025-08-19T17:50:07.415Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ModelConfigComponent-AFDIt",
        "type": "genericNode",
        "position": {
          "x": -2522.272780370577,
          "y": 427.40837675972546
        },
        "data": {
          "type": "ModelConfigComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass ModelConfigComponent(Component):\n    display_name = \"Model Configuration\"\n    description = \"Configure Embedding and LLM models\"\n    icon = \"model-settings\"\n\n    inputs = [\n        StrInput(name=\"huggingface_api_key\", display_name=\"HuggingFace API Key\"),\n        DropdownInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            options=[\"BAAI/bge-small-en-v1.5\"],\n            value=\"BAAI/bge-small-en-v1.5\",\n        ),\n        DropdownInput(\n            name=\"llm_model\",\n            display_name=\"LLM Model\",\n            options=[\"llama3\"],\n            value=\"llama3\",\n        ),\n    ]\n\n    # Aquí aseguramos que cada Output tiene un método asociado\n    outputs = [\n        Output(display_name=\"Selected Embedding Model\", name=\"embedding_modelOutput\", method=\"get_embedding_model\"),\n        Output(display_name=\"Selected LLM Model\", name=\"llm_modelOutput\", method=\"get_llm_model\"),\n    ]\n\n    # Método para devolver el modelo de embeddings seleccionado\n    def get_embedding_model(self):\n        return self.embedding_model  # Retorna el modelo seleccionado en el input de embeddings\n\n    # Método para devolver el modelo LLM seleccionado\n    def get_llm_model(self):\n        return self.llm_model  # Retorna el modelo seleccionado en el input de LLM\n\n    def _generate_hf_embedding(self, query):\n        # Usamos el modelo seleccionado para generar los embeddings\n        embedding_model = HuggingFaceEmbeddings(model_name=self.embedding_model)\n        return embedding_model.embed_query(query)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "embedding_model": {
                "trace_as_metadata": true,
                "options": [
                  "BAAI/bge-small-en-v1.5"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "BAAI/bge-small-en-v1.5",
                "name": "embedding_model",
                "display_name": "Embedding Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "huggingface_api_key": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "hf_PLACEHOLDER_TOKEN",
                "name": "huggingface_api_key",
                "display_name": "HuggingFace API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "llm_model": {
                "trace_as_metadata": true,
                "options": [
                  "llama3"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "llama3",
                "name": "llm_model",
                "display_name": "LLM Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Configure Embedding and LLM models",
            "icon": "model-settings",
            "base_classes": [
              "NoneType"
            ],
            "display_name": "P14 Model Config Component",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "embedding_modelOutput",
                "display_name": "Selected Embedding Model",
                "method": "get_embedding_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "llm_modelOutput",
                "display_name": "Selected LLM Model",
                "method": "get_llm_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "huggingface_api_key",
              "embedding_model",
              "llm_model"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ModelConfigComponent-AFDIt"
        },
        "selected": false,
        "width": 384,
        "height": 540,
        "dragging": false,
        "positionAbsolute": {
          "x": -2522.272780370577,
          "y": 427.40837675972546
        }
      },
      {
        "id": "Neo4jConnectionComponent-xIj5X",
        "type": "genericNode",
        "position": {
          "x": -2108.432664709784,
          "y": 437.88298558033256
        },
        "data": {
          "type": "Neo4jConnectionComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass Neo4jConnectionComponent(Component):\n    display_name = \"Neo4j Connection\"\n    description = \"Manage Neo4j Connection\"\n    icon = \"database\"\n\n    inputs = [\n        StrInput(name=\"neo4j_uri\", display_name=\"NEO4J URI\"),\n        StrInput(name=\"neo4j_username\", display_name=\"NEO4J USERNAME\"),\n        StrInput(name=\"neo4j_password\", display_name=\"NEO4J PASSWORD\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Neo4j URI\", name=\"neo4j_uri_OUTPUT\", method=\"get_neo4j_uri\"),\n        Output(display_name=\"Neo4j Username\", name=\"neo4j_username_OUTPUT\", method=\"get_neo4j_username\"),\n        Output(display_name=\"Neo4j Password\", name=\"neo4j_password_OUTPUT\", method=\"get_neo4j_password\"),\n    ]\n\n    # Método para retornar el valor del URI de Neo4j\n    def get_neo4j_uri(self):\n        return self.neo4j_uri  # Retorna el valor del URI desde el input\n\n    # Método para retornar el nombre de usuario de Neo4j\n    def get_neo4j_username(self):\n        return self.neo4j_username  # Retorna el nombre de usuario desde el input\n\n    # Método para retornar la contraseña de Neo4j\n    def get_neo4j_password(self):\n        return self.neo4j_password  # Retorna la contraseña desde el input\n\n    # Método para establecer la conexión con Neo4j\n    def get_connection(self):\n        return Neo4jGraph(\n            url=self.neo4j_uri,\n            username=self.neo4j_username,\n            password=self.neo4j_password\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "neo4j_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "12345678a",
                "name": "neo4j_password",
                "display_name": "NEO4J PASSWORD",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "neo4j_uri": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "neo4j://127.0.0.1:7687",
                "name": "neo4j_uri",
                "display_name": "NEO4J URI",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "neo4j_username": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "neo4j",
                "name": "neo4j_username",
                "display_name": "NEO4J USERNAME",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Manage Neo4j Connection",
            "icon": "database",
            "base_classes": [
              "NoneType"
            ],
            "display_name": "P14 Neo4J Connection",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "neo4j_uri_OUTPUT",
                "display_name": "Neo4j URI",
                "method": "get_neo4j_uri",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "neo4j_username_OUTPUT",
                "display_name": "Neo4j Username",
                "method": "get_neo4j_username",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "neo4j_password_OUTPUT",
                "display_name": "Neo4j Password",
                "method": "get_neo4j_password",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "neo4j_uri",
              "neo4j_username",
              "neo4j_password"
            ],
            "beta": false,
            "edited": true
          },
          "id": "Neo4jConnectionComponent-xIj5X"
        },
        "selected": false,
        "width": 384,
        "height": 596,
        "dragging": false,
        "positionAbsolute": {
          "x": -2108.432664709784,
          "y": 437.88298558033256
        }
      },
      {
        "id": "MainComponent-lulge",
        "type": "genericNode",
        "position": {
          "x": -708.5030850760688,
          "y": 1152.496060562613
        },
        "data": {
          "type": "MainComponent",
          "node": {
            "template": {
              "_type": "Component",
              "context": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context",
                "display_name": "Chat Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "question": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "question",
                "display_name": "Question",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "Numero de pacientes almacenaods"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass MainComponent(Component):\n    display_name = \"Main Component\"\n    description = \"Orchestrate all components\"\n    icon = \"brain\"\n\n    inputs = [\n        Input(name=\"context\", display_name=\"Chat Memory\"),\n        Input(name=\"question\", display_name=\"Question\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Answer\", name=\"answer\"),\n    ]\n\n    def run(self, context, question):\n        # Conexión a Neo4j\n        neo4j_component = Neo4jConnectionComponent()\n        connection = neo4j_component.get_connection()\n\n        # Configuración del modelo\n        model_config_component = ModelConfigComponent()\n        embedding_model = model_config_component._generate_hf_embedding(question)\n\n        # Realizar búsqueda en Neo4j\n        search_component = Neo4jSearchComponent()\n        retriever = search_component.perform_search(question)\n\n        # Construir la cadena y obtener la respuesta\n        chain_component = RetrievalChainComponent()\n        chain = chain_component.build_chain(retriever, \"llama3\")\n        answer = chain_component.get_answer(chain, question)\n\n        return answer\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Orchestrate all components",
            "icon": "brain",
            "base_classes": [],
            "display_name": "P14 Orquestador ",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [],
                "name": "answer",
                "display_name": "Answer",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "context",
              "question"
            ],
            "beta": false,
            "edited": true
          },
          "id": "MainComponent-lulge"
        },
        "selected": false,
        "width": 384,
        "height": 397,
        "dragging": false,
        "positionAbsolute": {
          "x": -708.5030850760688,
          "y": 1152.496060562613
        }
      },
      {
        "id": "Neo4jSearchComponent-5D9yI",
        "type": "genericNode",
        "position": {
          "x": -1608.314613744244,
          "y": 1151.8385893661937
        },
        "data": {
          "type": "Neo4jSearchComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom langchain_community.vectorstores import Neo4jVector\nfrom langchain_community.graphs import Neo4jGraph\nfrom langchain.embeddings.huggingface import HuggingFaceEmbeddings  \nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import Ollama  \nfrom typing import List\n\nclass Neo4jSearchComponent(Component):\n    display_name = \"Neo4j Search\"\n    description = \"Search in Neo4j with embeddings\"\n    icon = \"search\"\n\n    # Entradas necesarias para la búsqueda y la conexión a Neo4j\n    inputs = [\n        MultilineInput(\n            name=\"query\",\n            display_name=\"Search Query\"\n        ),\n        StrInput(name=\"neo4j_uri\", display_name=\"NEO4J URI\"),\n        StrInput(name=\"neo4j_username\", display_name=\"NEO4J USERNAME\"),\n        StrInput(name=\"neo4j_password\", display_name=\"NEO4J PASSWORD\"),\n    ]\n\n    # Salidas\n    outputs = [\n        Output(display_name=\"Search Results\", name=\"search_result\", method=\"get_search_results\"),\n        Output(display_name=\"Retriever\", name=\"retriever_result\", method=\"get_retriever_message\"),\n    ]\n\n    retriever = None  # Variable de clase para almacenar el retriever\n    search_results = None  # Variable de clase para almacenar los resultados de búsqueda\n    \n    def generate_embedding(self, query):\n        # Instanciar el modelo de embeddings de HuggingFace\n        embedding_model = HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\")\n        # Generar el embedding de la query\n        query_embedding = embedding_model.embed_query(query)\n        return query_embedding\n\n    def perform_search(self):\n        VECTOR_INDEX_NAME = \"fhir_text\"\n        VECTOR_NODE_LABEL = \"resource\"\n        VECTOR_SOURCE_PROPERTY = \"text\"\n\n        # Obtener el valor de la query y de los datos de conexión desde las entradas\n        query = self.query\n        neo4j_uri = self.neo4j_uri\n        neo4j_username = self.neo4j_username\n        neo4j_password = self.neo4j_password\n\n        # Generar el embedding de la query\n        query_embedding = self.generate_embedding(query)\n\n        # Conectar con Neo4j y realizar la búsqueda basada en embeddings\n        vector_store = Neo4jVector.from_existing_index(\n            embedding=HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\"),\n            url=neo4j_uri,\n            username=neo4j_username,\n            password=neo4j_password,\n            index_name=VECTOR_INDEX_NAME,\n            node_label=VECTOR_NODE_LABEL,\n            text_node_property=VECTOR_SOURCE_PROPERTY,\n            retrieval_query=query_embedding\n        )\n\n        # Asignar el retriever a la variable de clase y devolverlo\n        Neo4jSearchComponent.retriever = vector_store.as_retriever()\n        return Neo4jSearchComponent.retriever\n\n    def get_retriever_message(self):\n        # Obtener el retriever a través de la búsqueda\n        retriever = self.perform_search()\n        # Crear un mensaje que contenga el retriever\n        message = Message(\n            content=f\"Retriever successfully created: {retriever}\"  # Formatea el contenido del mensaje\n        )\n        return message\n\n    def get_search_results(self):\n        # Ejecutar la búsqueda y almacenar los resultados\n        search_results = self.perform_search()\n        Neo4jSearchComponent.search_results = search_results  # Almacena los resultados de búsqueda\n        return search_results\n        ## return Neo4jSearchComponent.search_results",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "neo4j_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "12345678a",
                "name": "neo4j_password",
                "display_name": "NEO4J PASSWORD",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "neo4j_uri": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "neo4j://127.0.0.1:7687",
                "name": "neo4j_uri",
                "display_name": "NEO4J URI",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "neo4j_username": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "neo4j",
                "name": "neo4j_username",
                "display_name": "NEO4J USERNAME",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Search in Neo4j with embeddings",
            "icon": "search",
            "base_classes": [
              "NoneType"
            ],
            "display_name": "P14 Neo4J search 5",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "search_result",
                "display_name": "Search Results",
                "method": "get_search_results",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "retriever_result",
                "display_name": "Retriever",
                "method": "get_retriever_message",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "query",
              "neo4j_uri",
              "neo4j_username",
              "neo4j_password"
            ],
            "beta": false,
            "edited": true
          },
          "id": "Neo4jSearchComponent-5D9yI"
        },
        "selected": true,
        "width": 384,
        "height": 635,
        "positionAbsolute": {
          "x": -1608.314613744244,
          "y": 1151.8385893661937
        },
        "dragging": false
      },
      {
        "id": "RetrievalChainComponent-HWH34",
        "type": "genericNode",
        "position": {
          "x": -1159.1080987840296,
          "y": 1175.2032896001142
        },
        "data": {
          "type": "RetrievalChainComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm_model": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm_model",
                "display_name": "LLM Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "llama3"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass RetrievalChainComponent(Component):\n    display_name = \"Retrieval Chain\"\n    description = \"Build and run Retrieval Chain\"\n    icon = \"chain\"\n\n    inputs = [\n        Input(name=\"llm_model\", display_name=\"LLM Model\"),\n        MultilineInput(name=\"question\", display_name=\"Question\"),\n    \n    ]\n\n    outputs = [\n        Output(display_name=\"Answer\", name=\"answer\", method=\"get_answer\"),\n    ]\n\n    def build_chain(self, retriever, llm_model, context):\n        chain = RetrievalQAWithSourcesChain.from_chain_type(\n            Ollama(model=llm_model),\n            chain_type=\"stuff\",\n            chain_type_kwargs={\"prompt\": self._build_prompt(context)},\n            retriever=retriever\n        )\n        return chain\n\n    def _build_prompt(self, summaries: str) -> PromptTemplate:\n        template = \"\"\"\n        <instrucciones>\n        Instrucción: Eres un asistente médico especializado en la interpretación y respuesta a preguntas basadas en registros médicos electrónicos (EHR). Tu objetivo es proporcionar información médica precisa y útil, fundamentada exclusivamente en los datos disponibles.\n    \n        Reglas a seguir:\n        \n        Uso del contexto: Asegúrate de considerar toda la información contenida en el campo \"Contexto\" para elaborar tus respuestas. Cada detalle puede ser crucial para la comprensión del caso.\n        \n        Fidelidad a los datos: Tu respuesta debe basarse completamente en el contenido del contexto. No inventes ni introduzcas información que no esté explícitamente respaldada por los registros.\n        \n        Estructuración clara: Organiza tu respuesta de manera clara y lógica. Utiliza encabezados y párrafos para separar distintas secciones si es necesario, facilitando así la lectura y la comprensión.\n        \n        Precisión y concisión: Proporciona respuestas completas, pero evita la redundancia. Sé directo y claro, incluyendo solo los datos más relevantes para la pregunta planteada.\n        \n        Tono y formalidad: Escribe tus respuestas en español, manteniendo un tono formal y técnico, adecuado para la naturaleza médica de las consultas. Evita el uso de jerga innecesaria, pero utiliza el vocabulario técnico apropiado cuando sea pertinente.\n        \n        Contexto: {summaries}\n        \n        Pregunta: {question}\n        \n        Respuesta: Proporciona una respuesta completa y detallada, asegurándote de que se relacione directamente con la información del contexto y responda de manera precisa a la pregunta formulada.\n        \"\"\"\n        return PromptTemplate(template=template.format(summaries=summaries))\n\n    def get_answer(self):\n        # Obtener 'question' directamente desde 'self'\n        if not hasattr(self, \"question\"):\n            raise ValueError(\"The 'question' attribute is missing. Ensure it's passed correctly as an input.\")\n    \n        question = self.question  # Asigna 'question' desde el atributo directamente\n    \n        # Obtener el retriever de Neo4jSearchComponent\n        retriever = Neo4jSearchComponent.retriever\n        if retriever is None:\n            raise ValueError(\"No retriever found. Ensure Neo4jSearchComponent has been executed.\")\n    \n        # Obtener el contexto desde los resultados de búsqueda de Neo4jSearchComponent\n        context = Neo4jSearchComponent.search_results\n        if context is None:\n            raise ValueError(\"No search results found. Ensure Neo4jSearchComponent has been executed.\")\n    \n        # Obtener el modelo de lenguaje desde 'self'\n        if not hasattr(self, \"llm_model\"):\n            raise ValueError(\"The 'llm_model' attribute is missing. Ensure it's passed correctly as an input.\")\n        \n        llm_model = self.llm_model  # Asigna 'llm_model' desde el atributo directamente\n    \n        # Construir la cadena de recuperación\n        chain = self.build_chain(retriever, llm_model, context)\n    \n        # Ejecutar la cadena con la pregunta\n        response = chain({\"question\": question.lower()}, return_only_outputs=True)\n    \n        return response['answer']\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "question": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Numero de pacientes almacenaods",
                "name": "question",
                "display_name": "Question",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Build and run Retrieval Chain",
            "icon": "chain",
            "base_classes": [
              "NoneType"
            ],
            "display_name": "P14 Retrieval Chain Component  2",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "answer",
                "display_name": "Answer",
                "method": "get_answer",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "llm_model",
              "question"
            ],
            "beta": false,
            "edited": true
          },
          "id": "RetrievalChainComponent-HWH34"
        },
        "selected": false,
        "width": 384,
        "height": 405,
        "positionAbsolute": {
          "x": -1159.1080987840296,
          "y": 1175.2032896001142
        },
        "dragging": false
      },
      {
        "id": "Neo4jSearchComponent-tlZLa",
        "type": "genericNode",
        "position": {
          "x": -1648.4225862082137,
          "y": 434.0370218301947
        },
        "data": {
          "type": "Neo4jSearchComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom langchain_community.vectorstores import Neo4jVector\nfrom langchain_community.graphs import Neo4jGraph\nfrom langchain.embeddings.huggingface import HuggingFaceEmbeddings  \nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import Ollama  \nfrom typing import List\n\nclass Neo4jSearchComponent(Component):\n    display_name = \"Neo4j Search\"\n    description = \"Search in Neo4j with embeddings\"\n    icon = \"search\"\n\n    # Entradas necesarias para la búsqueda y la conexión a Neo4j\n    inputs = [\n        MultilineInput(\n            name=\"query\",\n            display_name=\"Search Query\"\n        ),\n        StrInput(name=\"neo4j_uri\", display_name=\"NEO4J URI\"),\n        StrInput(name=\"neo4j_username\", display_name=\"NEO4J USERNAME\"),\n        StrInput(name=\"neo4j_password\", display_name=\"NEO4J PASSWORD\"),\n    ]\n\n    # Salidas\n    outputs = [\n        Output(display_name=\"Search Results\", name=\"search_result\", method=\"get_search_results\"),\n        Output(display_name=\"Retriever\", name=\"retriever_result\", method=\"get_retriever_message\"),\n    ]\n\n    retriever = None  # Variable de clase para almacenar el retriever\n\n    def generate_embedding(self, query):\n        # Instanciar el modelo de embeddings de HuggingFace\n        embedding_model = HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\")\n        # Generar el embedding de la query\n        query_embedding = embedding_model.embed_query(query)\n        return query_embedding\n\n    def perform_search(self):\n        VECTOR_INDEX_NAME = \"fhir_text\"\n        VECTOR_NODE_LABEL = \"resource\"\n        VECTOR_SOURCE_PROPERTY = \"text\"\n\n        # Obtener el valor de la query y de los datos de conexión desde las entradas\n        query = self.query\n        neo4j_uri = self.neo4j_uri\n        neo4j_username = self.neo4j_username\n        neo4j_password = self.neo4j_password\n\n        # Generar el embedding de la query\n        query_embedding = self.generate_embedding(query)\n\n        # Conectar con Neo4j y realizar la búsqueda basada en embeddings\n        vector_store = Neo4jVector.from_existing_index(\n            embedding=HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\"),\n            url=neo4j_uri,\n            username=neo4j_username,\n            password=neo4j_password,\n            index_name=VECTOR_INDEX_NAME,\n            node_label=VECTOR_NODE_LABEL,\n            text_node_property=VECTOR_SOURCE_PROPERTY,\n            retrieval_query=query_embedding\n        )\n\n        # Asignar el retriever a la variable de clase y devolverlo\n        Neo4jSearchComponent.retriever = vector_store.as_retriever()\n        return Neo4jSearchComponent.retriever\n\n    def get_retriever_message(self):\n        # Obtener el retriever a través de la búsqueda\n        retriever = self.perform_search()\n        # Crear un mensaje que contenga el retriever\n        message = Message(\n            content=f\"Retriever successfully created: {retriever}\"  # Formatea el contenido del mensaje\n        )\n        return message\n\n    def get_search_results(self):\n        # Ejecutar la búsqueda usando la consulta proporcionada y devolver los resultados\n        search_results = self.perform_search()\n        return search_results\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "neo4j_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "12345678a",
                "name": "neo4j_password",
                "display_name": "NEO4J PASSWORD",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "neo4j_uri": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "neo4j://127.0.0.1:7687",
                "name": "neo4j_uri",
                "display_name": "NEO4J URI",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "neo4j_username": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "neo4j",
                "name": "neo4j_username",
                "display_name": "NEO4J USERNAME",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Search in Neo4j with embeddings",
            "icon": "search",
            "base_classes": [
              "NoneType"
            ],
            "display_name": "P14 Neo4J search 4 (ok)",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "search_result",
                "display_name": "Search Results",
                "method": "get_search_results",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "NoneType"
                ],
                "selected": "NoneType",
                "name": "retriever_result",
                "display_name": "Retriever",
                "method": "get_retriever_message",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "query",
              "neo4j_uri",
              "neo4j_username",
              "neo4j_password"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "Neo4jSearchComponent-tlZLa"
        },
        "selected": false,
        "width": 384,
        "height": 635,
        "positionAbsolute": {
          "x": -1648.4225862082137,
          "y": 434.0370218301947
        },
        "dragging": false
      },
      {
        "id": "ChatInput-hmyR7",
        "type": "genericNode",
        "position": {
          "x": -2325.936298054189,
          "y": 1170.240687877414
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Numero de pacientes almacenaods",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatInput-hmyR7"
        },
        "selected": false,
        "width": 384,
        "height": 319,
        "positionAbsolute": {
          "x": -2325.936298054189,
          "y": 1170.240687877414
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ChatInput-hmyR7",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Neo4jSearchComponent-tlZLa",
        "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-tlZLaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "query",
            "id": "Neo4jSearchComponent-tlZLa",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-hmyR7",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-hmyR7{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Neo4jSearchComponent-tlZLa{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-tlZLaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-hmyR7",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Neo4jSearchComponent-5D9yI",
        "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-5D9yIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "query",
            "id": "Neo4jSearchComponent-5D9yI",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-hmyR7",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-hmyR7{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Neo4jSearchComponent-5D9yI{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-5D9yIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 1920.2994136670616,
      "y": -412.650015133692,
      "zoom": 0.7054244156162186
    }
  },
  "metadata": {
    "ModelConfigComponent": {
      "count": 1
    },
    "Neo4jConnectionComponent": {
      "count": 1
    },
    "MainComponent": {
      "count": 1
    },
    "Neo4jSearchComponent": {
      "count": 2
    },
    "RetrievalChainComponent": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "ce132281-8cc3-43db-b257-26eedbf78c13",
    "name": "P14 De recurso FHIR a Grafo y consulta MODULAR",
    "description": "convertir recursos fhir a grafos e ingerirlos y después consultar :) Faltaría la parte del vector index, que está pendiente de probarse\nOBJETIVO:  separar el componente de consulta neo4j en varios módulos",
    "is_component": false,
    "liked_by_count": "1",
    "downloads_count": "20",
    "metadata": {
      "ModelConfigComponent": {
        "count": 1
      },
      "Neo4jConnectionComponent": {
        "count": 1
      },
      "MainComponent": {
        "count": 1
      },
      "Neo4jSearchComponent": {
        "count": 2
      },
      "RetrievalChainComponent": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "1.0.14",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ModelConfigComponent-AFDIt",
          "type": "genericNode",
          "position": {
            "x": -2522.272780370577,
            "y": 427.40837675972546
          },
          "data": {
            "type": "ModelConfigComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass ModelConfigComponent(Component):\n    display_name = \"Model Configuration\"\n    description = \"Configure Embedding and LLM models\"\n    icon = \"model-settings\"\n\n    inputs = [\n        StrInput(name=\"huggingface_api_key\", display_name=\"HuggingFace API Key\"),\n        DropdownInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            options=[\"BAAI/bge-small-en-v1.5\"],\n            value=\"BAAI/bge-small-en-v1.5\",\n        ),\n        DropdownInput(\n            name=\"llm_model\",\n            display_name=\"LLM Model\",\n            options=[\"llama3\"],\n            value=\"llama3\",\n        ),\n    ]\n\n    # Aquí aseguramos que cada Output tiene un método asociado\n    outputs = [\n        Output(display_name=\"Selected Embedding Model\", name=\"embedding_modelOutput\", method=\"get_embedding_model\"),\n        Output(display_name=\"Selected LLM Model\", name=\"llm_modelOutput\", method=\"get_llm_model\"),\n    ]\n\n    # Método para devolver el modelo de embeddings seleccionado\n    def get_embedding_model(self):\n        return self.embedding_model  # Retorna el modelo seleccionado en el input de embeddings\n\n    # Método para devolver el modelo LLM seleccionado\n    def get_llm_model(self):\n        return self.llm_model  # Retorna el modelo seleccionado en el input de LLM\n\n    def _generate_hf_embedding(self, query):\n        # Usamos el modelo seleccionado para generar los embeddings\n        embedding_model = HuggingFaceEmbeddings(model_name=self.embedding_model)\n        return embedding_model.embed_query(query)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "embedding_model": {
                  "trace_as_metadata": true,
                  "options": [
                    "BAAI/bge-small-en-v1.5"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "BAAI/bge-small-en-v1.5",
                  "name": "embedding_model",
                  "display_name": "Embedding Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "huggingface_api_key": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "hf_PLACEHOLDER_TOKEN",
                  "name": "huggingface_api_key",
                  "display_name": "HuggingFace API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "llm_model": {
                  "trace_as_metadata": true,
                  "options": [
                    "llama3"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "llama3",
                  "name": "llm_model",
                  "display_name": "LLM Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                }
              },
              "description": "Configure Embedding and LLM models",
              "icon": "model-settings",
              "base_classes": [
                "NoneType"
              ],
              "display_name": "P14 Model Config Component",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "embedding_modelOutput",
                  "display_name": "Selected Embedding Model",
                  "method": "get_embedding_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "llm_modelOutput",
                  "display_name": "Selected LLM Model",
                  "method": "get_llm_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "huggingface_api_key",
                "embedding_model",
                "llm_model"
              ],
              "beta": false,
              "edited": true
            },
            "id": "ModelConfigComponent-AFDIt"
          },
          "selected": false,
          "width": 384,
          "height": 540,
          "dragging": false,
          "positionAbsolute": {
            "x": -2522.272780370577,
            "y": 427.40837675972546
          }
        },
        {
          "id": "Neo4jConnectionComponent-xIj5X",
          "type": "genericNode",
          "position": {
            "x": -2108.432664709784,
            "y": 437.88298558033256
          },
          "data": {
            "type": "Neo4jConnectionComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass Neo4jConnectionComponent(Component):\n    display_name = \"Neo4j Connection\"\n    description = \"Manage Neo4j Connection\"\n    icon = \"database\"\n\n    inputs = [\n        StrInput(name=\"neo4j_uri\", display_name=\"NEO4J URI\"),\n        StrInput(name=\"neo4j_username\", display_name=\"NEO4J USERNAME\"),\n        StrInput(name=\"neo4j_password\", display_name=\"NEO4J PASSWORD\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Neo4j URI\", name=\"neo4j_uri_OUTPUT\", method=\"get_neo4j_uri\"),\n        Output(display_name=\"Neo4j Username\", name=\"neo4j_username_OUTPUT\", method=\"get_neo4j_username\"),\n        Output(display_name=\"Neo4j Password\", name=\"neo4j_password_OUTPUT\", method=\"get_neo4j_password\"),\n    ]\n\n    # Método para retornar el valor del URI de Neo4j\n    def get_neo4j_uri(self):\n        return self.neo4j_uri  # Retorna el valor del URI desde el input\n\n    # Método para retornar el nombre de usuario de Neo4j\n    def get_neo4j_username(self):\n        return self.neo4j_username  # Retorna el nombre de usuario desde el input\n\n    # Método para retornar la contraseña de Neo4j\n    def get_neo4j_password(self):\n        return self.neo4j_password  # Retorna la contraseña desde el input\n\n    # Método para establecer la conexión con Neo4j\n    def get_connection(self):\n        return Neo4jGraph(\n            url=self.neo4j_uri,\n            username=self.neo4j_username,\n            password=self.neo4j_password\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "neo4j_password": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "12345678a",
                  "name": "neo4j_password",
                  "display_name": "NEO4J PASSWORD",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "neo4j_uri": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "neo4j://127.0.0.1:7687",
                  "name": "neo4j_uri",
                  "display_name": "NEO4J URI",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "neo4j_username": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "neo4j",
                  "name": "neo4j_username",
                  "display_name": "NEO4J USERNAME",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Manage Neo4j Connection",
              "icon": "database",
              "base_classes": [
                "NoneType"
              ],
              "display_name": "P14 Neo4J Connection",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "neo4j_uri_OUTPUT",
                  "display_name": "Neo4j URI",
                  "method": "get_neo4j_uri",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "neo4j_username_OUTPUT",
                  "display_name": "Neo4j Username",
                  "method": "get_neo4j_username",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "neo4j_password_OUTPUT",
                  "display_name": "Neo4j Password",
                  "method": "get_neo4j_password",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "neo4j_uri",
                "neo4j_username",
                "neo4j_password"
              ],
              "beta": false,
              "edited": true
            },
            "id": "Neo4jConnectionComponent-xIj5X"
          },
          "selected": false,
          "width": 384,
          "height": 596,
          "dragging": false,
          "positionAbsolute": {
            "x": -2108.432664709784,
            "y": 437.88298558033256
          }
        },
        {
          "id": "MainComponent-lulge",
          "type": "genericNode",
          "position": {
            "x": -708.5030850760688,
            "y": 1152.496060562613
          },
          "data": {
            "type": "MainComponent",
            "node": {
              "template": {
                "_type": "Component",
                "context": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context",
                  "display_name": "Chat Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "question": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "question",
                  "display_name": "Question",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "Numero de pacientes almacenaods"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass MainComponent(Component):\n    display_name = \"Main Component\"\n    description = \"Orchestrate all components\"\n    icon = \"brain\"\n\n    inputs = [\n        Input(name=\"context\", display_name=\"Chat Memory\"),\n        Input(name=\"question\", display_name=\"Question\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Answer\", name=\"answer\"),\n    ]\n\n    def run(self, context, question):\n        # Conexión a Neo4j\n        neo4j_component = Neo4jConnectionComponent()\n        connection = neo4j_component.get_connection()\n\n        # Configuración del modelo\n        model_config_component = ModelConfigComponent()\n        embedding_model = model_config_component._generate_hf_embedding(question)\n\n        # Realizar búsqueda en Neo4j\n        search_component = Neo4jSearchComponent()\n        retriever = search_component.perform_search(question)\n\n        # Construir la cadena y obtener la respuesta\n        chain_component = RetrievalChainComponent()\n        chain = chain_component.build_chain(retriever, \"llama3\")\n        answer = chain_component.get_answer(chain, question)\n\n        return answer\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                }
              },
              "description": "Orchestrate all components",
              "icon": "brain",
              "base_classes": [],
              "display_name": "P14 Orquestador ",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [],
                  "name": "answer",
                  "display_name": "Answer",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "context",
                "question"
              ],
              "beta": false,
              "edited": true
            },
            "id": "MainComponent-lulge"
          },
          "selected": false,
          "width": 384,
          "height": 397,
          "dragging": false,
          "positionAbsolute": {
            "x": -708.5030850760688,
            "y": 1152.496060562613
          }
        },
        {
          "id": "Neo4jSearchComponent-5D9yI",
          "type": "genericNode",
          "position": {
            "x": -1608.314613744244,
            "y": 1151.8385893661937
          },
          "data": {
            "type": "Neo4jSearchComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom langchain_community.vectorstores import Neo4jVector\nfrom langchain_community.graphs import Neo4jGraph\nfrom langchain.embeddings.huggingface import HuggingFaceEmbeddings  \nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import Ollama  \nfrom typing import List\n\nclass Neo4jSearchComponent(Component):\n    display_name = \"Neo4j Search\"\n    description = \"Search in Neo4j with embeddings\"\n    icon = \"search\"\n\n    # Entradas necesarias para la búsqueda y la conexión a Neo4j\n    inputs = [\n        MultilineInput(\n            name=\"query\",\n            display_name=\"Search Query\"\n        ),\n        StrInput(name=\"neo4j_uri\", display_name=\"NEO4J URI\"),\n        StrInput(name=\"neo4j_username\", display_name=\"NEO4J USERNAME\"),\n        StrInput(name=\"neo4j_password\", display_name=\"NEO4J PASSWORD\"),\n    ]\n\n    # Salidas\n    outputs = [\n        Output(display_name=\"Search Results\", name=\"search_result\", method=\"get_search_results\"),\n        Output(display_name=\"Retriever\", name=\"retriever_result\", method=\"get_retriever_message\"),\n    ]\n\n    retriever = None  # Variable de clase para almacenar el retriever\n    search_results = None  # Variable de clase para almacenar los resultados de búsqueda\n    \n    def generate_embedding(self, query):\n        # Instanciar el modelo de embeddings de HuggingFace\n        embedding_model = HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\")\n        # Generar el embedding de la query\n        query_embedding = embedding_model.embed_query(query)\n        return query_embedding\n\n    def perform_search(self):\n        VECTOR_INDEX_NAME = \"fhir_text\"\n        VECTOR_NODE_LABEL = \"resource\"\n        VECTOR_SOURCE_PROPERTY = \"text\"\n\n        # Obtener el valor de la query y de los datos de conexión desde las entradas\n        query = self.query\n        neo4j_uri = self.neo4j_uri\n        neo4j_username = self.neo4j_username\n        neo4j_password = self.neo4j_password\n\n        # Generar el embedding de la query\n        query_embedding = self.generate_embedding(query)\n\n        # Conectar con Neo4j y realizar la búsqueda basada en embeddings\n        vector_store = Neo4jVector.from_existing_index(\n            embedding=HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\"),\n            url=neo4j_uri,\n            username=neo4j_username,\n            password=neo4j_password,\n            index_name=VECTOR_INDEX_NAME,\n            node_label=VECTOR_NODE_LABEL,\n            text_node_property=VECTOR_SOURCE_PROPERTY,\n            retrieval_query=query_embedding\n        )\n\n        # Asignar el retriever a la variable de clase y devolverlo\n        Neo4jSearchComponent.retriever = vector_store.as_retriever()\n        return Neo4jSearchComponent.retriever\n\n    def get_retriever_message(self):\n        # Obtener el retriever a través de la búsqueda\n        retriever = self.perform_search()\n        # Crear un mensaje que contenga el retriever\n        message = Message(\n            content=f\"Retriever successfully created: {retriever}\"  # Formatea el contenido del mensaje\n        )\n        return message\n\n    def get_search_results(self):\n        # Ejecutar la búsqueda y almacenar los resultados\n        search_results = self.perform_search()\n        Neo4jSearchComponent.search_results = search_results  # Almacena los resultados de búsqueda\n        return search_results\n        ## return Neo4jSearchComponent.search_results",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "neo4j_password": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "12345678a",
                  "name": "neo4j_password",
                  "display_name": "NEO4J PASSWORD",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "neo4j_uri": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "neo4j://127.0.0.1:7687",
                  "name": "neo4j_uri",
                  "display_name": "NEO4J URI",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "neo4j_username": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "neo4j",
                  "name": "neo4j_username",
                  "display_name": "NEO4J USERNAME",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Search in Neo4j with embeddings",
              "icon": "search",
              "base_classes": [
                "NoneType"
              ],
              "display_name": "P14 Neo4J search 5",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "search_result",
                  "display_name": "Search Results",
                  "method": "get_search_results",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "retriever_result",
                  "display_name": "Retriever",
                  "method": "get_retriever_message",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "query",
                "neo4j_uri",
                "neo4j_username",
                "neo4j_password"
              ],
              "beta": false,
              "edited": true
            },
            "id": "Neo4jSearchComponent-5D9yI"
          },
          "selected": true,
          "width": 384,
          "height": 635,
          "positionAbsolute": {
            "x": -1608.314613744244,
            "y": 1151.8385893661937
          },
          "dragging": false
        },
        {
          "id": "RetrievalChainComponent-HWH34",
          "type": "genericNode",
          "position": {
            "x": -1159.1080987840296,
            "y": 1175.2032896001142
          },
          "data": {
            "type": "RetrievalChainComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm_model": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm_model",
                  "display_name": "LLM Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "llama3"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass RetrievalChainComponent(Component):\n    display_name = \"Retrieval Chain\"\n    description = \"Build and run Retrieval Chain\"\n    icon = \"chain\"\n\n    inputs = [\n        Input(name=\"llm_model\", display_name=\"LLM Model\"),\n        MultilineInput(name=\"question\", display_name=\"Question\"),\n    \n    ]\n\n    outputs = [\n        Output(display_name=\"Answer\", name=\"answer\", method=\"get_answer\"),\n    ]\n\n    def build_chain(self, retriever, llm_model, context):\n        chain = RetrievalQAWithSourcesChain.from_chain_type(\n            Ollama(model=llm_model),\n            chain_type=\"stuff\",\n            chain_type_kwargs={\"prompt\": self._build_prompt(context)},\n            retriever=retriever\n        )\n        return chain\n\n    def _build_prompt(self, summaries: str) -> PromptTemplate:\n        template = \"\"\"\n        <instrucciones>\n        Instrucción: Eres un asistente médico especializado en la interpretación y respuesta a preguntas basadas en registros médicos electrónicos (EHR). Tu objetivo es proporcionar información médica precisa y útil, fundamentada exclusivamente en los datos disponibles.\n    \n        Reglas a seguir:\n        \n        Uso del contexto: Asegúrate de considerar toda la información contenida en el campo \"Contexto\" para elaborar tus respuestas. Cada detalle puede ser crucial para la comprensión del caso.\n        \n        Fidelidad a los datos: Tu respuesta debe basarse completamente en el contenido del contexto. No inventes ni introduzcas información que no esté explícitamente respaldada por los registros.\n        \n        Estructuración clara: Organiza tu respuesta de manera clara y lógica. Utiliza encabezados y párrafos para separar distintas secciones si es necesario, facilitando así la lectura y la comprensión.\n        \n        Precisión y concisión: Proporciona respuestas completas, pero evita la redundancia. Sé directo y claro, incluyendo solo los datos más relevantes para la pregunta planteada.\n        \n        Tono y formalidad: Escribe tus respuestas en español, manteniendo un tono formal y técnico, adecuado para la naturaleza médica de las consultas. Evita el uso de jerga innecesaria, pero utiliza el vocabulario técnico apropiado cuando sea pertinente.\n        \n        Contexto: {summaries}\n        \n        Pregunta: {question}\n        \n        Respuesta: Proporciona una respuesta completa y detallada, asegurándote de que se relacione directamente con la información del contexto y responda de manera precisa a la pregunta formulada.\n        \"\"\"\n        return PromptTemplate(template=template.format(summaries=summaries))\n\n    def get_answer(self):\n        # Obtener 'question' directamente desde 'self'\n        if not hasattr(self, \"question\"):\n            raise ValueError(\"The 'question' attribute is missing. Ensure it's passed correctly as an input.\")\n    \n        question = self.question  # Asigna 'question' desde el atributo directamente\n    \n        # Obtener el retriever de Neo4jSearchComponent\n        retriever = Neo4jSearchComponent.retriever\n        if retriever is None:\n            raise ValueError(\"No retriever found. Ensure Neo4jSearchComponent has been executed.\")\n    \n        # Obtener el contexto desde los resultados de búsqueda de Neo4jSearchComponent\n        context = Neo4jSearchComponent.search_results\n        if context is None:\n            raise ValueError(\"No search results found. Ensure Neo4jSearchComponent has been executed.\")\n    \n        # Obtener el modelo de lenguaje desde 'self'\n        if not hasattr(self, \"llm_model\"):\n            raise ValueError(\"The 'llm_model' attribute is missing. Ensure it's passed correctly as an input.\")\n        \n        llm_model = self.llm_model  # Asigna 'llm_model' desde el atributo directamente\n    \n        # Construir la cadena de recuperación\n        chain = self.build_chain(retriever, llm_model, context)\n    \n        # Ejecutar la cadena con la pregunta\n        response = chain({\"question\": question.lower()}, return_only_outputs=True)\n    \n        return response['answer']\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "question": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Numero de pacientes almacenaods",
                  "name": "question",
                  "display_name": "Question",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Build and run Retrieval Chain",
              "icon": "chain",
              "base_classes": [
                "NoneType"
              ],
              "display_name": "P14 Retrieval Chain Component  2",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "answer",
                  "display_name": "Answer",
                  "method": "get_answer",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "llm_model",
                "question"
              ],
              "beta": false,
              "edited": true
            },
            "id": "RetrievalChainComponent-HWH34"
          },
          "selected": false,
          "width": 384,
          "height": 405,
          "positionAbsolute": {
            "x": -1159.1080987840296,
            "y": 1175.2032896001142
          },
          "dragging": false
        },
        {
          "id": "Neo4jSearchComponent-tlZLa",
          "type": "genericNode",
          "position": {
            "x": -1648.4225862082137,
            "y": 434.0370218301947
          },
          "data": {
            "type": "Neo4jSearchComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom langchain_community.vectorstores import Neo4jVector\nfrom langchain_community.graphs import Neo4jGraph\nfrom langchain.embeddings.huggingface import HuggingFaceEmbeddings  \nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import Ollama  \nfrom typing import List\n\nclass Neo4jSearchComponent(Component):\n    display_name = \"Neo4j Search\"\n    description = \"Search in Neo4j with embeddings\"\n    icon = \"search\"\n\n    # Entradas necesarias para la búsqueda y la conexión a Neo4j\n    inputs = [\n        MultilineInput(\n            name=\"query\",\n            display_name=\"Search Query\"\n        ),\n        StrInput(name=\"neo4j_uri\", display_name=\"NEO4J URI\"),\n        StrInput(name=\"neo4j_username\", display_name=\"NEO4J USERNAME\"),\n        StrInput(name=\"neo4j_password\", display_name=\"NEO4J PASSWORD\"),\n    ]\n\n    # Salidas\n    outputs = [\n        Output(display_name=\"Search Results\", name=\"search_result\", method=\"get_search_results\"),\n        Output(display_name=\"Retriever\", name=\"retriever_result\", method=\"get_retriever_message\"),\n    ]\n\n    retriever = None  # Variable de clase para almacenar el retriever\n\n    def generate_embedding(self, query):\n        # Instanciar el modelo de embeddings de HuggingFace\n        embedding_model = HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\")\n        # Generar el embedding de la query\n        query_embedding = embedding_model.embed_query(query)\n        return query_embedding\n\n    def perform_search(self):\n        VECTOR_INDEX_NAME = \"fhir_text\"\n        VECTOR_NODE_LABEL = \"resource\"\n        VECTOR_SOURCE_PROPERTY = \"text\"\n\n        # Obtener el valor de la query y de los datos de conexión desde las entradas\n        query = self.query\n        neo4j_uri = self.neo4j_uri\n        neo4j_username = self.neo4j_username\n        neo4j_password = self.neo4j_password\n\n        # Generar el embedding de la query\n        query_embedding = self.generate_embedding(query)\n\n        # Conectar con Neo4j y realizar la búsqueda basada en embeddings\n        vector_store = Neo4jVector.from_existing_index(\n            embedding=HuggingFaceEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\"),\n            url=neo4j_uri,\n            username=neo4j_username,\n            password=neo4j_password,\n            index_name=VECTOR_INDEX_NAME,\n            node_label=VECTOR_NODE_LABEL,\n            text_node_property=VECTOR_SOURCE_PROPERTY,\n            retrieval_query=query_embedding\n        )\n\n        # Asignar el retriever a la variable de clase y devolverlo\n        Neo4jSearchComponent.retriever = vector_store.as_retriever()\n        return Neo4jSearchComponent.retriever\n\n    def get_retriever_message(self):\n        # Obtener el retriever a través de la búsqueda\n        retriever = self.perform_search()\n        # Crear un mensaje que contenga el retriever\n        message = Message(\n            content=f\"Retriever successfully created: {retriever}\"  # Formatea el contenido del mensaje\n        )\n        return message\n\n    def get_search_results(self):\n        # Ejecutar la búsqueda usando la consulta proporcionada y devolver los resultados\n        search_results = self.perform_search()\n        return search_results\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "neo4j_password": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "12345678a",
                  "name": "neo4j_password",
                  "display_name": "NEO4J PASSWORD",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "neo4j_uri": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "neo4j://127.0.0.1:7687",
                  "name": "neo4j_uri",
                  "display_name": "NEO4J URI",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "neo4j_username": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "neo4j",
                  "name": "neo4j_username",
                  "display_name": "NEO4J USERNAME",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Search in Neo4j with embeddings",
              "icon": "search",
              "base_classes": [
                "NoneType"
              ],
              "display_name": "P14 Neo4J search 4 (ok)",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "search_result",
                  "display_name": "Search Results",
                  "method": "get_search_results",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "NoneType"
                  ],
                  "selected": "NoneType",
                  "name": "retriever_result",
                  "display_name": "Retriever",
                  "method": "get_retriever_message",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "query",
                "neo4j_uri",
                "neo4j_username",
                "neo4j_password"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "Neo4jSearchComponent-tlZLa"
          },
          "selected": false,
          "width": 384,
          "height": 635,
          "positionAbsolute": {
            "x": -1648.4225862082137,
            "y": 434.0370218301947
          },
          "dragging": false
        },
        {
          "id": "ChatInput-hmyR7",
          "type": "genericNode",
          "position": {
            "x": -2325.936298054189,
            "y": 1170.240687877414
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Numero de pacientes almacenaods",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatInput-hmyR7"
          },
          "selected": false,
          "width": 384,
          "height": 319,
          "positionAbsolute": {
            "x": -2325.936298054189,
            "y": 1170.240687877414
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "ChatInput-hmyR7",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Neo4jSearchComponent-tlZLa",
          "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-tlZLaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "query",
              "id": "Neo4jSearchComponent-tlZLa",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-hmyR7",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-hmyR7{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Neo4jSearchComponent-tlZLa{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-tlZLaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-hmyR7",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Neo4jSearchComponent-5D9yI",
          "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-5D9yIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "query",
              "id": "Neo4jSearchComponent-5D9yI",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-hmyR7",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-hmyR7{œdataTypeœ:œChatInputœ,œidœ:œChatInput-hmyR7œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Neo4jSearchComponent-5D9yI{œfieldNameœ:œqueryœ,œidœ:œNeo4jSearchComponent-5D9yIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 1920.2994136670616,
        "y": -412.650015133692,
        "zoom": 0.7054244156162186
      }
    },
    "date_created": "2024-10-31T09:21:08.407Z",
    "date_updated": "2024-10-31T09:21:08.467Z",
    "status": "Public",
    "sort": null,
    "user_updated": "b13de3e5-4b4a-46d3-ac15-796c0289bd51",
    "user_created": {
      "username": "meriialvarez",
      "first_name": "Maria",
      "last_name": "Alvarez Flores",
      "id": "b13de3e5-4b4a-46d3-ac15-796c0289bd51"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.681Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 66,
    "converter_version": "1.0.0"
  }
}