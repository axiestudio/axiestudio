{
  "id": "f57ffb88-29b9-496a-aa60-682ad286798a",
  "name": "List Pages [Notion]",
  "description": "Query a Notion database with filtering and sorting. The input should be a JSON string containing the 'filter' and 'sorts' objects. Example input:\n{\"filter\": {\"property\": \"Status\", \"select\": {\"equals\": \"Done\"}}, \"sorts\": [{\"timestamp\": \"created_time\", \"direction\": \"descending\"}]} (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/f57ffb88-29b9-496a-aa60-682ad286798a",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-22T21:48:40.701Z",
    "updated": "2024-08-22T21:48:40.730Z",
    "downloaded": "2025-08-19T17:50:06.770Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "NotionListPages",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\r\nimport json\r\nfrom typing import Dict, Any, List, Optional\r\nfrom pydantic import BaseModel, Field\r\n\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, StrInput, MultilineInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\n\r\nclass NotionListPages(LCToolComponent):\r\n    display_name: str = \"List Pages [Notion]\"\r\n    description: str = (\r\n        \"Query a Notion database with filtering and sorting. \"\r\n        \"The input should be a JSON string containing the 'filter' and 'sorts' objects. \"\r\n        \"Example input:\\n\"\r\n        '{\"filter\": {\"property\": \"Status\", \"select\": {\"equals\": \"Done\"}}, \"sorts\": [{\"timestamp\": \"created_time\", \"direction\": \"descending\"}]}'\r\n    )\r\n    documentation: str = \"https://docs.axiestudio.org/integrations/notion/list-pages\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"notion_secret\",\r\n            display_name=\"Notion Secret\",\r\n            info=\"The Notion integration token.\",\r\n            required=True,\r\n        ),\r\n        StrInput(\r\n            name=\"database_id\",\r\n            display_name=\"Database ID\",\r\n            info=\"The ID of the Notion database to query.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"query_json\",\r\n            display_name=\"Database query (JSON)\",\r\n            info=\"A JSON string containing the filters and sorts that will be used for querying the database. Leave empty for no filters or sorts.\",\r\n        ),\r\n    ]\r\n\r\n    class NotionListPagesSchema(BaseModel):\r\n        database_id: str = Field(..., description=\"The ID of the Notion database to query.\")\r\n        query_json: Optional[str] = Field(default=\"\", description=\"A JSON string containing the filters and sorts for querying the database. Leave empty for no filters or sorts.\")\r\n\r\n    def run_model(self) -> List[Data]:\r\n        result = self._query_notion_database(self.database_id, self.query_json)\r\n        \r\n        if isinstance(result, str):\r\n            # An error occurred, return it as a single record\r\n            return [Data(text=result)]\r\n        \r\n        records = []\r\n        combined_text = f\"Pages found: {len(result)}\\n\\n\"\r\n        \r\n        for page in result:\r\n            page_data = {\r\n                'id': page['id'],\r\n                'url': page['url'],\r\n                'created_time': page['created_time'],\r\n                'last_edited_time': page['last_edited_time'],\r\n                'properties': page['properties'],\r\n            }\r\n\r\n            text = (\r\n                f\"id: {page['id']}\\n\"\r\n                f\"url: {page['url']}\\n\"\r\n                f\"created_time: {page['created_time']}\\n\"\r\n                f\"last_edited_time: {page['last_edited_time']}\\n\"\r\n                f\"properties: {json.dumps(page['properties'], indent=2)}\\n\\n\"\r\n            )\r\n\r\n            combined_text += text\r\n            records.append(Data(text=text, **page_data))\r\n         \r\n        self.status = records\r\n        return records\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"notion_list_pages\",\r\n            description=self.description,\r\n            func=self._query_notion_database,\r\n            args_schema=self.NotionListPagesSchema,\r\n        )\r\n\r\n    def _query_notion_database(self, database_id: str, query_json: Optional[str] = None) -> List[Dict[str, Any]] | str:\r\n        url = f\"https://api.notion.com/v1/databases/{database_id}/query\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {self.notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        query_payload = {}\r\n        if query_json and query_json.strip():\r\n            try:\r\n                query_payload = json.loads(query_json)\r\n            except json.JSONDecodeError as e:\r\n                return f\"Invalid JSON format for query: {str(e)}\"\r\n        \r\n        print(\"NOTION QUERY PAYLOAD\")\r\n        print(query_payload)\r\n        \r\n        try:\r\n            response = requests.post(url, headers=headers, json=query_payload)\r\n            response.raise_for_status()\r\n            results = response.json()\r\n            return results['results']\r\n        except requests.exceptions.RequestException as e:\r\n            return f\"Error querying Notion database: {str(e)}\"\r\n        except KeyError:\r\n            return \"Unexpected response format from Notion API\"\r\n        except Exception as e:\r\n            return f\"An unexpected error occurred: {str(e)}\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database_id": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "database_id",
                "value": "",
                "display_name": "Database ID",
                "advanced": true,
                "dynamic": false,
                "info": "The ID of the Notion database to query.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "notion_secret": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "notion_secret",
                "value": "",
                "display_name": "Notion Secret",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The Notion integration token.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "query_json": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "query_json",
                "value": "",
                "display_name": "Database query (JSON)",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A JSON string containing the filters and sorts that will be used for querying the database. Leave empty for no filters or sorts.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Query a Notion database with filtering and sorting. The input should be a JSON string containing the 'filter' and 'sorts' objects. Example input:\n{\"filter\": {\"property\": \"Status\", \"select\": {\"equals\": \"Done\"}}, \"sorts\": [{\"timestamp\": \"created_time\", \"direction\": \"descending\"}]}",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "Data",
              "list",
              "Sequence",
              "Tool"
            ],
            "display_name": "List Pages [Notion]",
            "documentation": "https://docs.axiestudio.org/integrations/notion/list-pages",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data",
                  "list"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              },
              {
                "types": [
                  "Tool",
                  "Sequence"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "notion_secret",
              "database_id",
              "query_json"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.15",
            "official": false
          },
          "id": "NotionListPages-F78m7"
        },
        "id": "NotionListPages-F78m7",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "NotionListPages": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "f57ffb88-29b9-496a-aa60-682ad286798a",
    "name": "List Pages [Notion]",
    "description": "Query a Notion database with filtering and sorting. The input should be a JSON string containing the 'filter' and 'sorts' objects. Example input:\n{\"filter\": {\"property\": \"Status\", \"select\": {\"equals\": \"Done\"}}, \"sorts\": [{\"timestamp\": \"created_time\", \"direction\": \"descending\"}]}",
    "is_component": true,
    "liked_by_count": "1",
    "downloads_count": "37",
    "metadata": {
      "NotionListPages": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "NotionListPages",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\r\nimport json\r\nfrom typing import Dict, Any, List, Optional\r\nfrom pydantic import BaseModel, Field\r\n\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, StrInput, MultilineInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\n\r\nclass NotionListPages(LCToolComponent):\r\n    display_name: str = \"List Pages [Notion]\"\r\n    description: str = (\r\n        \"Query a Notion database with filtering and sorting. \"\r\n        \"The input should be a JSON string containing the 'filter' and 'sorts' objects. \"\r\n        \"Example input:\\n\"\r\n        '{\"filter\": {\"property\": \"Status\", \"select\": {\"equals\": \"Done\"}}, \"sorts\": [{\"timestamp\": \"created_time\", \"direction\": \"descending\"}]}'\r\n    )\r\n    documentation: str = \"https://docs.axiestudio.org/integrations/notion/list-pages\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"notion_secret\",\r\n            display_name=\"Notion Secret\",\r\n            info=\"The Notion integration token.\",\r\n            required=True,\r\n        ),\r\n        StrInput(\r\n            name=\"database_id\",\r\n            display_name=\"Database ID\",\r\n            info=\"The ID of the Notion database to query.\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"query_json\",\r\n            display_name=\"Database query (JSON)\",\r\n            info=\"A JSON string containing the filters and sorts that will be used for querying the database. Leave empty for no filters or sorts.\",\r\n        ),\r\n    ]\r\n\r\n    class NotionListPagesSchema(BaseModel):\r\n        database_id: str = Field(..., description=\"The ID of the Notion database to query.\")\r\n        query_json: Optional[str] = Field(default=\"\", description=\"A JSON string containing the filters and sorts for querying the database. Leave empty for no filters or sorts.\")\r\n\r\n    def run_model(self) -> List[Data]:\r\n        result = self._query_notion_database(self.database_id, self.query_json)\r\n        \r\n        if isinstance(result, str):\r\n            # An error occurred, return it as a single record\r\n            return [Data(text=result)]\r\n        \r\n        records = []\r\n        combined_text = f\"Pages found: {len(result)}\\n\\n\"\r\n        \r\n        for page in result:\r\n            page_data = {\r\n                'id': page['id'],\r\n                'url': page['url'],\r\n                'created_time': page['created_time'],\r\n                'last_edited_time': page['last_edited_time'],\r\n                'properties': page['properties'],\r\n            }\r\n\r\n            text = (\r\n                f\"id: {page['id']}\\n\"\r\n                f\"url: {page['url']}\\n\"\r\n                f\"created_time: {page['created_time']}\\n\"\r\n                f\"last_edited_time: {page['last_edited_time']}\\n\"\r\n                f\"properties: {json.dumps(page['properties'], indent=2)}\\n\\n\"\r\n            )\r\n\r\n            combined_text += text\r\n            records.append(Data(text=text, **page_data))\r\n         \r\n        self.status = records\r\n        return records\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"notion_list_pages\",\r\n            description=self.description,\r\n            func=self._query_notion_database,\r\n            args_schema=self.NotionListPagesSchema,\r\n        )\r\n\r\n    def _query_notion_database(self, database_id: str, query_json: Optional[str] = None) -> List[Dict[str, Any]] | str:\r\n        url = f\"https://api.notion.com/v1/databases/{database_id}/query\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {self.notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        query_payload = {}\r\n        if query_json and query_json.strip():\r\n            try:\r\n                query_payload = json.loads(query_json)\r\n            except json.JSONDecodeError as e:\r\n                return f\"Invalid JSON format for query: {str(e)}\"\r\n        \r\n        print(\"NOTION QUERY PAYLOAD\")\r\n        print(query_payload)\r\n        \r\n        try:\r\n            response = requests.post(url, headers=headers, json=query_payload)\r\n            response.raise_for_status()\r\n            results = response.json()\r\n            return results['results']\r\n        except requests.exceptions.RequestException as e:\r\n            return f\"Error querying Notion database: {str(e)}\"\r\n        except KeyError:\r\n            return \"Unexpected response format from Notion API\"\r\n        except Exception as e:\r\n            return f\"An unexpected error occurred: {str(e)}\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database_id": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "database_id",
                  "value": "",
                  "display_name": "Database ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The ID of the Notion database to query.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "notion_secret": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "notion_secret",
                  "value": "",
                  "display_name": "Notion Secret",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The Notion integration token.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "query_json": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "query_json",
                  "value": "",
                  "display_name": "Database query (JSON)",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "A JSON string containing the filters and sorts that will be used for querying the database. Leave empty for no filters or sorts.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Query a Notion database with filtering and sorting. The input should be a JSON string containing the 'filter' and 'sorts' objects. Example input:\n{\"filter\": {\"property\": \"Status\", \"select\": {\"equals\": \"Done\"}}, \"sorts\": [{\"timestamp\": \"created_time\", \"direction\": \"descending\"}]}",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "Data",
                "list",
                "Sequence",
                "Tool"
              ],
              "display_name": "List Pages [Notion]",
              "documentation": "https://docs.axiestudio.org/integrations/notion/list-pages",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "list"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                },
                {
                  "types": [
                    "Tool",
                    "Sequence"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "notion_secret",
                "database_id",
                "query_json"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.15",
              "official": false
            },
            "id": "NotionListPages-F78m7"
          },
          "id": "NotionListPages-F78m7",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-22T21:48:40.701Z",
    "date_updated": "2024-08-22T21:48:40.730Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:12.566Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 12,
    "converter_version": "1.0.0"
  }
}