{
  "id": "455dbc05-70a2-4eb6-9ef2-49c508c68bb3",
  "name": "Prompt to Tool",
  "description": "Creates a prompt template and returns a Tool (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "Amaralkarl",
    "first_name": "Claudinei",
    "last_name": "de Carvalho",
    "id": "66be7526-cacc-46ac-a9f3-bcd93344190c",
    "full_name": "Claudinei de Carvalho"
  },
  "store_url": "https://www.langflow.store/store/component/455dbc05-70a2-4eb6-9ef2-49c508c68bb3",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-23T00:51:13.064Z",
    "updated": "2024-09-23T00:51:13.153Z",
    "downloaded": "2025-08-19T17:50:06.344Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Prompt",
        "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "PromptToToolComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.field_typing import Tool\r\nfrom axiestudio.io import Output, PromptInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.base.prompts.api_utils import process_prompt_template\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template.utils import update_template_values\r\n\r\nclass PromptToToolComponent(Component):\r\n    display_name = \"Prompt to Tool\"\r\n    description = \"Creates a prompt template and returns a Tool\"\r\n    icon = \"prompts\"\r\n\r\n    inputs = [\r\n        PromptInput(name=\"template\", display_name=\"Template\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Tool\", name=\"tool\", method=\"process_prompt_to_tool\"),\r\n    ]\r\n\r\n    async def process_prompt_to_tool(self) -> Tool:\r\n        # Obtém o texto do prompt gerado\r\n        prompt = await Message.from_template_and_variables(**self._attributes)\r\n        self.status = prompt.text\r\n        data = Data(text=prompt)\r\n        tool = Tool(\r\n            name=\"prompt_tool_processor\",\r\n            description=\"A tool to process the generated prompt message.\",\r\n            func=lambda: data,\r\n        )\r\n        return tool\r\n\r\n    def _update_template(self, frontend_node: dict):\r\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\r\n        custom_fields = frontend_node[\"custom_fields\"]\r\n        frontend_node_template = frontend_node[\"template\"]\r\n        _ = process_prompt_template(\r\n            template=prompt_template,\r\n            name=\"template\",\r\n            custom_fields=custom_fields,\r\n            frontend_node_template=frontend_node_template,\r\n        )\r\n        return frontend_node\r\n\r\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\r\n        \"\"\"\r\n        This function is called after the code validation is done.\r\n        \"\"\"\r\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\r\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\r\n        # Kept it duplicated for backwards compatibility\r\n        _ = process_prompt_template(\r\n            template=template,\r\n            name=\"template\",\r\n            custom_fields=frontend_node[\"custom_fields\"],\r\n            frontend_node_template=frontend_node[\"template\"],\r\n        )\r\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\r\n        # and update the frontend_node with those values\r\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\r\n        return frontend_node\r\n\r\n    def _get_fallback_input(self, **kwargs):\r\n        return DefaultPromptField(**kwargs)\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "edfasfasfs",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              }
            },
            "description": "Creates a prompt template and returns a Tool",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Tool"
            ],
            "name": "",
            "display_name": "Prompt to Tool",
            "documentation": "",
            "custom_fields": {
              "template": []
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tool",
                "hidden": null,
                "display_name": "Tool",
                "method": "process_prompt_to_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": true,
            "lf_version": "1.0.18",
            "official": false
          },
          "id": "CustomComponent-HH7FZ"
        },
        "id": "CustomComponent-HH7FZ",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "455dbc05-70a2-4eb6-9ef2-49c508c68bb3",
    "name": "Prompt to Tool",
    "description": "Creates a prompt template and returns a Tool",
    "is_component": true,
    "liked_by_count": "6",
    "downloads_count": "90",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "PromptToToolComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.field_typing import Tool\r\nfrom axiestudio.io import Output, PromptInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.base.prompts.api_utils import process_prompt_template\r\nfrom axiestudio.schema.message import Message\r\nfrom axiestudio.template.utils import update_template_values\r\n\r\nclass PromptToToolComponent(Component):\r\n    display_name = \"Prompt to Tool\"\r\n    description = \"Creates a prompt template and returns a Tool\"\r\n    icon = \"prompts\"\r\n\r\n    inputs = [\r\n        PromptInput(name=\"template\", display_name=\"Template\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Tool\", name=\"tool\", method=\"process_prompt_to_tool\"),\r\n    ]\r\n\r\n    async def process_prompt_to_tool(self) -> Tool:\r\n        # Obtém o texto do prompt gerado\r\n        prompt = await Message.from_template_and_variables(**self._attributes)\r\n        self.status = prompt.text\r\n        data = Data(text=prompt)\r\n        tool = Tool(\r\n            name=\"prompt_tool_processor\",\r\n            description=\"A tool to process the generated prompt message.\",\r\n            func=lambda: data,\r\n        )\r\n        return tool\r\n\r\n    def _update_template(self, frontend_node: dict):\r\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\r\n        custom_fields = frontend_node[\"custom_fields\"]\r\n        frontend_node_template = frontend_node[\"template\"]\r\n        _ = process_prompt_template(\r\n            template=prompt_template,\r\n            name=\"template\",\r\n            custom_fields=custom_fields,\r\n            frontend_node_template=frontend_node_template,\r\n        )\r\n        return frontend_node\r\n\r\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\r\n        \"\"\"\r\n        This function is called after the code validation is done.\r\n        \"\"\"\r\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\r\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\r\n        # Kept it duplicated for backwards compatibility\r\n        _ = process_prompt_template(\r\n            template=template,\r\n            name=\"template\",\r\n            custom_fields=frontend_node[\"custom_fields\"],\r\n            frontend_node_template=frontend_node[\"template\"],\r\n        )\r\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\r\n        # and update the frontend_node with those values\r\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\r\n        return frontend_node\r\n\r\n    def _get_fallback_input(self, **kwargs):\r\n        return DefaultPromptField(**kwargs)\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "edfasfasfs",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                }
              },
              "description": "Creates a prompt template and returns a Tool",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Tool"
              ],
              "name": "",
              "display_name": "Prompt to Tool",
              "documentation": "",
              "custom_fields": {
                "template": []
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "tool",
                  "hidden": null,
                  "display_name": "Tool",
                  "method": "process_prompt_to_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": true,
              "lf_version": "1.0.18",
              "official": false
            },
            "id": "CustomComponent-HH7FZ"
          },
          "id": "CustomComponent-HH7FZ",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-09-23T00:51:13.064Z",
    "date_updated": "2024-09-23T00:51:13.153Z",
    "status": "Public",
    "sort": null,
    "user_updated": "66be7526-cacc-46ac-a9f3-bcd93344190c",
    "user_created": {
      "username": "Amaralkarl",
      "first_name": "Claudinei",
      "last_name": "de Carvalho",
      "id": "66be7526-cacc-46ac-a9f3-bcd93344190c"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Prompt",
          "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:09.861Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 14,
    "converter_version": "1.0.0"
  }
}