{
  "id": "230d677b-5524-4747-96f3-e783bd9fecf8",
  "name": "Limpa Caracteres não ASCII",
  "description": "Cleans non-ASCII characters from specified text fields in a Data object. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "Makiprodan",
    "first_name": "Maki",
    "last_name": "Prodan",
    "id": "c2e2e2e3-47a3-4fb2-a2ce-fea216603b8a",
    "full_name": "Maki Prodan"
  },
  "store_url": "https://www.langflow.store/store/component/230d677b-5524-4747-96f3-e783bd9fecf8",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-18T18:52:04.086Z",
    "updated": "2024-07-18T18:52:04.210Z",
    "downloaded": "2025-08-19T17:50:06.481Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Vector Store",
        "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.9",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "CleanTextDataComponent",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import DataInput, MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass CleanTextDataComponent(Component):\r\n    display_name = \"Clean Text Data Component\"\r\n    description = \"Cleans non-ASCII characters from specified text fields in a Data object.\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"recycle\"\r\n    name = \"CleanTextDataComponent\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data\", display_name=\"Data\", value=None),\r\n        MessageTextInput(name=\"fields_to_clean\", display_name=\"Fields to Clean\", value=\"\", is_list=True, info=\"List of fields to clean. Leave empty to clean all fields.\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Cleaned Data\", name=\"cleaned_data\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> list[Data]:\r\n        if isinstance(self.data, list):\r\n            cleaned_data = [self.clean_data(d) for d in self.data]\r\n            self.status = cleaned_data\r\n            return cleaned_data\r\n        elif isinstance(self.data, Data):\r\n            cleaned_data = self.clean_data(self.data)\r\n            self.status = cleaned_data\r\n            return [cleaned_data]\r\n        else:\r\n            self.status = Data(data={\"error\": \"Invalid input data\"})\r\n            return [self.status]\r\n\r\n    def clean_data(self, data: Data) -> Data:\r\n        replacements = {\r\n            'á': 'a', 'ã': 'a', 'â': 'a', 'à': 'a', 'ä': 'a',\r\n            'é': 'e', 'ê': 'e', 'è': 'e', 'ë': 'e',\r\n            'í': 'i', 'î': 'i', 'ì': 'i', 'ï': 'i',\r\n            'ó': 'o', 'õ': 'o', 'ô': 'o', 'ò': 'o', 'ö': 'o',\r\n            'ú': 'u', 'û': 'u', 'ù': 'u', 'ü': 'u',\r\n            'ç': 'c',\r\n            'Á': 'A', 'Ã': 'A', 'Â': 'A', 'À': 'A', 'Ä': 'A',\r\n            'É': 'E', 'Ê': 'E', 'È': 'E', 'Ë': 'E',\r\n            'Í': 'I', 'Î': 'I', 'Ì': 'I', 'Ï': 'I',\r\n            'Ó': 'O', 'Õ': 'O', 'Ô': 'O', 'Ò': 'O', 'Ö': 'O',\r\n            'Ú': 'U', 'Û': 'U', 'Ù': 'U', 'Ü': 'U',\r\n            'Ç': 'C',\r\n            'ñ': 'n', 'Ñ': 'N'\r\n        }\r\n\r\n        def replace_characters(text):\r\n            return ''.join(replacements.get(c, c) for c in text)\r\n\r\n        def clean_field(value):\r\n            if isinstance(value, str):\r\n                return replace_characters(value)\r\n            elif isinstance(value, dict):\r\n                return {k: clean_field(v) for k, v in value.items()}\r\n            elif isinstance(value, list):\r\n                return [clean_field(v) for v in value]\r\n            else:\r\n                return value\r\n\r\n        fields_to_clean = self.fields_to_clean or []\r\n\r\n        def should_clean_field(field_name):\r\n            return not fields_to_clean or field_name in fields_to_clean\r\n\r\n        if hasattr(data, 'data'):\r\n            cleaned_data = {key: clean_field(value) if should_clean_field(key) else value for key, value in data.data.items()}\r\n            data.data = cleaned_data\r\n        else:\r\n            data.data = {\"error\": \"Invalid data structure\"}\r\n\r\n        return data\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "fields_to_clean": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": [
                  "text"
                ],
                "name": "fields_to_clean",
                "display_name": "Fields to Clean",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "List of fields to clean. Leave empty to clean all fields.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Cleans non-ASCII characters from specified text fields in a Data object.",
            "icon": "recycle",
            "base_classes": [
              "Data"
            ],
            "display_name": "Limpa Caracteres não ASCII",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "cleaned_data",
                "display_name": "Cleaned Data",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "fields_to_clean"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "CleanTextDataComponent-oJbUu",
          "description": "Cleans non-ASCII characters from specified text fields in a Data object.",
          "display_name": "Limpa Caracteres não ASCII"
        },
        "id": "CleanTextDataComponent-oJbUu",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CleanTextDataComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "230d677b-5524-4747-96f3-e783bd9fecf8",
    "name": "Limpa Caracteres não ASCII",
    "description": "Cleans non-ASCII characters from specified text fields in a Data object.",
    "is_component": true,
    "liked_by_count": "3",
    "downloads_count": "23",
    "metadata": {
      "CleanTextDataComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.9",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "CleanTextDataComponent",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import DataInput, MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass CleanTextDataComponent(Component):\r\n    display_name = \"Clean Text Data Component\"\r\n    description = \"Cleans non-ASCII characters from specified text fields in a Data object.\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"recycle\"\r\n    name = \"CleanTextDataComponent\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data\", display_name=\"Data\", value=None),\r\n        MessageTextInput(name=\"fields_to_clean\", display_name=\"Fields to Clean\", value=\"\", is_list=True, info=\"List of fields to clean. Leave empty to clean all fields.\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Cleaned Data\", name=\"cleaned_data\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> list[Data]:\r\n        if isinstance(self.data, list):\r\n            cleaned_data = [self.clean_data(d) for d in self.data]\r\n            self.status = cleaned_data\r\n            return cleaned_data\r\n        elif isinstance(self.data, Data):\r\n            cleaned_data = self.clean_data(self.data)\r\n            self.status = cleaned_data\r\n            return [cleaned_data]\r\n        else:\r\n            self.status = Data(data={\"error\": \"Invalid input data\"})\r\n            return [self.status]\r\n\r\n    def clean_data(self, data: Data) -> Data:\r\n        replacements = {\r\n            'á': 'a', 'ã': 'a', 'â': 'a', 'à': 'a', 'ä': 'a',\r\n            'é': 'e', 'ê': 'e', 'è': 'e', 'ë': 'e',\r\n            'í': 'i', 'î': 'i', 'ì': 'i', 'ï': 'i',\r\n            'ó': 'o', 'õ': 'o', 'ô': 'o', 'ò': 'o', 'ö': 'o',\r\n            'ú': 'u', 'û': 'u', 'ù': 'u', 'ü': 'u',\r\n            'ç': 'c',\r\n            'Á': 'A', 'Ã': 'A', 'Â': 'A', 'À': 'A', 'Ä': 'A',\r\n            'É': 'E', 'Ê': 'E', 'È': 'E', 'Ë': 'E',\r\n            'Í': 'I', 'Î': 'I', 'Ì': 'I', 'Ï': 'I',\r\n            'Ó': 'O', 'Õ': 'O', 'Ô': 'O', 'Ò': 'O', 'Ö': 'O',\r\n            'Ú': 'U', 'Û': 'U', 'Ù': 'U', 'Ü': 'U',\r\n            'Ç': 'C',\r\n            'ñ': 'n', 'Ñ': 'N'\r\n        }\r\n\r\n        def replace_characters(text):\r\n            return ''.join(replacements.get(c, c) for c in text)\r\n\r\n        def clean_field(value):\r\n            if isinstance(value, str):\r\n                return replace_characters(value)\r\n            elif isinstance(value, dict):\r\n                return {k: clean_field(v) for k, v in value.items()}\r\n            elif isinstance(value, list):\r\n                return [clean_field(v) for v in value]\r\n            else:\r\n                return value\r\n\r\n        fields_to_clean = self.fields_to_clean or []\r\n\r\n        def should_clean_field(field_name):\r\n            return not fields_to_clean or field_name in fields_to_clean\r\n\r\n        if hasattr(data, 'data'):\r\n            cleaned_data = {key: clean_field(value) if should_clean_field(key) else value for key, value in data.data.items()}\r\n            data.data = cleaned_data\r\n        else:\r\n            data.data = {\"error\": \"Invalid data structure\"}\r\n\r\n        return data\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "fields_to_clean": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": [
                    "text"
                  ],
                  "name": "fields_to_clean",
                  "display_name": "Fields to Clean",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "List of fields to clean. Leave empty to clean all fields.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Cleans non-ASCII characters from specified text fields in a Data object.",
              "icon": "recycle",
              "base_classes": [
                "Data"
              ],
              "display_name": "Limpa Caracteres não ASCII",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "cleaned_data",
                  "display_name": "Cleaned Data",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "fields_to_clean"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "CleanTextDataComponent-oJbUu",
            "description": "Cleans non-ASCII characters from specified text fields in a Data object.",
            "display_name": "Limpa Caracteres não ASCII"
          },
          "id": "CleanTextDataComponent-oJbUu",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-07-18T18:52:04.086Z",
    "date_updated": "2024-07-18T18:52:04.210Z",
    "status": "Public",
    "sort": null,
    "user_updated": "c2e2e2e3-47a3-4fb2-a2ce-fea216603b8a",
    "user_created": {
      "username": "Makiprodan",
      "first_name": "Maki",
      "last_name": "Prodan",
      "id": "c2e2e2e3-47a3-4fb2-a2ce-fea216603b8a"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Vector Store",
          "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:09.267Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 10,
    "converter_version": "1.0.0"
  }
}