{
  "id": "74207ab9-af59-4cb9-b9f6-87d8ba0dbf13",
  "name": "Text to Data Loader",
  "description": "Converts Text into a Data object with metadata. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "mieslep",
    "first_name": "Phil",
    "last_name": "Miesle",
    "id": "9d20ffdb-ed66-469f-b1db-272eb675d093",
    "full_name": "Phil Miesle"
  },
  "store_url": "https://www.langflow.store/store/component/74207ab9-af59-4cb9-b9f6-87d8ba0dbf13",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-10-09T12:51:13.593Z",
    "updated": "2024-10-09T13:10:10.713Z",
    "downloaded": "2025-08-19T17:50:07.605Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "TextDataLoader",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\r\nimport base64\r\nimport os\r\nimport tempfile\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.io import MessageTextInput, Output, DictInput\r\nimport logging\r\n\r\nclass TextDataLoader(Component):\r\n    display_name = \"Text to Data Loader\"\r\n    description = \"Converts Text into a Data object with metadata.\"\r\n    icon = \"file-text\"\r\n    name = \"TextDataLoader\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"text\", display_name=\"Text\", required=True),\r\n        DictInput(\r\n            name=\"metadata\",\r\n            display_name=\"Metadata\",\r\n            info='Metadata to add to the Data object. When calling as a tweak, this should be as a list of dictionaries, i.e. [{\"key1\":123},{\"key2\":\"abc\"}]',\r\n            is_list=True,\r\n        ),\r\n    ]\r\n    \r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"process_text\"),\r\n    ]\r\n    \r\n    def process_text(self) -> Data:\r\n        # Ensure metadata is a dictionary and handle cases where it's empty\r\n        metadata = self.metadata or {}\r\n\r\n        # Filter out entries with empty keys\r\n        metadata = {k: v for k, v in metadata.items() if k} or {}\r\n        \r\n        return_data = Data(\r\n            text=self.text, \r\n            **metadata\r\n        )   \r\n\r\n        self.status = return_data\r\n        return return_data\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "metadata": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "metadata",
                "value": [
                  {
                    "": ""
                  }
                ],
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "Metadata to add to the Data object. When calling as a tweak, this should be as a list of dictionaries, i.e. [{\"key1\":123},{\"key2\":\"abc\"}]",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "load_from_db": false
              },
              "text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "text",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Converts Text into a Data object with metadata.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "Text to Data Loader",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "process_text",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "text",
              "metadata"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "TextDataLoader-8iZdu"
        },
        "id": "TextDataLoader-8iZdu",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "TextDataLoader": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "74207ab9-af59-4cb9-b9f6-87d8ba0dbf13",
    "name": "Text to Data Loader",
    "description": "Converts Text into a Data object with metadata.",
    "is_component": true,
    "liked_by_count": "3",
    "downloads_count": "72",
    "metadata": {
      "TextDataLoader": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "TextDataLoader",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\r\nimport base64\r\nimport os\r\nimport tempfile\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.io import MessageTextInput, Output, DictInput\r\nimport logging\r\n\r\nclass TextDataLoader(Component):\r\n    display_name = \"Text to Data Loader\"\r\n    description = \"Converts Text into a Data object with metadata.\"\r\n    icon = \"file-text\"\r\n    name = \"TextDataLoader\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"text\", display_name=\"Text\", required=True),\r\n        DictInput(\r\n            name=\"metadata\",\r\n            display_name=\"Metadata\",\r\n            info='Metadata to add to the Data object. When calling as a tweak, this should be as a list of dictionaries, i.e. [{\"key1\":123},{\"key2\":\"abc\"}]',\r\n            is_list=True,\r\n        ),\r\n    ]\r\n    \r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"process_text\"),\r\n    ]\r\n    \r\n    def process_text(self) -> Data:\r\n        # Ensure metadata is a dictionary and handle cases where it's empty\r\n        metadata = self.metadata or {}\r\n\r\n        # Filter out entries with empty keys\r\n        metadata = {k: v for k, v in metadata.items() if k} or {}\r\n        \r\n        return_data = Data(\r\n            text=self.text, \r\n            **metadata\r\n        )   \r\n\r\n        self.status = return_data\r\n        return return_data\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "metadata": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "metadata",
                  "value": [
                    {
                      "": ""
                    }
                  ],
                  "display_name": "Metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Metadata to add to the Data object. When calling as a tweak, this should be as a list of dictionaries, i.e. [{\"key1\":123},{\"key2\":\"abc\"}]",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput",
                  "load_from_db": false
                },
                "text": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "text",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Converts Text into a Data object with metadata.",
              "icon": "file-text",
              "base_classes": [
                "Data"
              ],
              "display_name": "Text to Data Loader",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "process_text",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "text",
                "metadata"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "TextDataLoader-8iZdu"
          },
          "id": "TextDataLoader-8iZdu",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-10-09T12:51:13.593Z",
    "date_updated": "2024-10-09T13:10:10.713Z",
    "status": "Public",
    "sort": null,
    "user_updated": "9d20ffdb-ed66-469f-b1db-272eb675d093",
    "user_created": {
      "username": "mieslep",
      "first_name": "Phil",
      "last_name": "Miesle",
      "id": "9d20ffdb-ed66-469f-b1db-272eb675d093"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:10.613Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 6,
    "converter_version": "1.0.0"
  }
}