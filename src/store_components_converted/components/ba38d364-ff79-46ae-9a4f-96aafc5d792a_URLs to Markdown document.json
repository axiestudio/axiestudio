{
  "id": "ba38d364-ff79-46ae-9a4f-96aafc5d792a",
  "name": "URLs to Markdown document",
  "description": "Fetches HTML from URLs, parses it, and converts to Markdown. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "appoks",
    "first_name": "Johnathan Rad端nz",
    "last_name": "Rad端nz",
    "id": "91fd1e9c-c965-4845-a8ce-b81d962e690b",
    "full_name": "Johnathan Rad端nz Rad端nz"
  },
  "store_url": "https://www.langflow.store/store/component/ba38d364-ff79-46ae-9a4f-96aafc5d792a",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-04T15:45:15.691Z",
    "updated": "2024-08-04T22:51:47.310Z",
    "downloaded": "2025-08-19T17:50:05.416Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "URLToMarkdownConverter",
          "node": {
            "template": {
              "_type": "Component",
              "search_results": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_results",
                "display_name": "Search results with URLs",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "List of retrieved URLs from a search engine to converto to Markdown",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\nimport html2text\nfrom loguru import logger\nfrom bs4 import BeautifulSoup\nfrom typing import List\n\nfrom axiestudio.schema import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.io import DataInput, DropdownInput, IntInput, MessageTextInput, NestedDictInput, Output\nfrom axiestudio.template import Output\n\nclass URLToMarkdownConverter(Component):\n    display_name = \"URL to Markdown Converter\"\n    description = \"Fetches HTML from URLs, parses it, and converts to Markdown.\"\n    icon = \"file-text\"\n\n    inputs = [\n        DataInput(\n            name=\"search_results\",\n            display_name=\"Search results with URLs\",\n            info=\"List of retrieved URLs from a search engine to converto to Markdown\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Markdown Output\", name=\"markdown_output\", method=\"process_urls\"),\n    ]\n\n    def process_urls(self) -> List[Data]:\n        search_results: List[Data] = self.search_results\n        processed_urls = []\n        \n        for result in search_results:\n            url = result.link\n            new_item = result.data.copy()\n            \n            try:\n                logger.error(result.link)\n\n                # 1. Extract HTML from the response\n                response = requests.get(url)\n                html_content = response.text\n\n                # 2. Parse the HTML\n                soup = BeautifulSoup(html_content, 'html.parser')\n\n                # 3. Convert the document to Markdown Format\n                h = html2text.HTML2Text()\n                h.ignore_links = False\n                markdown_content = h.handle(str(soup))\n                \n                new_item[\"markdown\"] = markdown_content\n                processed_urls.append(Data(data=new_item))\n            except Exception as e:\n                raise\n            \n        # self.status = processed_urls\n        return processed_urls\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Fetches HTML from URLs, parses it, and converts to Markdown.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "URLs to Markdown document",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "markdown_output",
                "display_name": "Markdown Output",
                "method": "process_urls",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "search_results"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "CustomComponent-azoqA"
        },
        "id": "CustomComponent-azoqA",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "ba38d364-ff79-46ae-9a4f-96aafc5d792a",
    "name": "URLs to Markdown document",
    "description": "Fetches HTML from URLs, parses it, and converts to Markdown.",
    "is_component": true,
    "liked_by_count": "17",
    "downloads_count": "114",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.14",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "URLToMarkdownConverter",
            "node": {
              "template": {
                "_type": "Component",
                "search_results": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "search_results",
                  "display_name": "Search results with URLs",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "List of retrieved URLs from a search engine to converto to Markdown",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\nimport html2text\nfrom loguru import logger\nfrom bs4 import BeautifulSoup\nfrom typing import List\n\nfrom axiestudio.schema import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.io import DataInput, DropdownInput, IntInput, MessageTextInput, NestedDictInput, Output\nfrom axiestudio.template import Output\n\nclass URLToMarkdownConverter(Component):\n    display_name = \"URL to Markdown Converter\"\n    description = \"Fetches HTML from URLs, parses it, and converts to Markdown.\"\n    icon = \"file-text\"\n\n    inputs = [\n        DataInput(\n            name=\"search_results\",\n            display_name=\"Search results with URLs\",\n            info=\"List of retrieved URLs from a search engine to converto to Markdown\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Markdown Output\", name=\"markdown_output\", method=\"process_urls\"),\n    ]\n\n    def process_urls(self) -> List[Data]:\n        search_results: List[Data] = self.search_results\n        processed_urls = []\n        \n        for result in search_results:\n            url = result.link\n            new_item = result.data.copy()\n            \n            try:\n                logger.error(result.link)\n\n                # 1. Extract HTML from the response\n                response = requests.get(url)\n                html_content = response.text\n\n                # 2. Parse the HTML\n                soup = BeautifulSoup(html_content, 'html.parser')\n\n                # 3. Convert the document to Markdown Format\n                h = html2text.HTML2Text()\n                h.ignore_links = False\n                markdown_content = h.handle(str(soup))\n                \n                new_item[\"markdown\"] = markdown_content\n                processed_urls.append(Data(data=new_item))\n            except Exception as e:\n                raise\n            \n        # self.status = processed_urls\n        return processed_urls\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                }
              },
              "description": "Fetches HTML from URLs, parses it, and converts to Markdown.",
              "icon": "file-text",
              "base_classes": [
                "Data"
              ],
              "display_name": "URLs to Markdown document",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "markdown_output",
                  "display_name": "Markdown Output",
                  "method": "process_urls",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "search_results"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "CustomComponent-azoqA"
          },
          "id": "CustomComponent-azoqA",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-04T15:45:15.691Z",
    "date_updated": "2024-08-04T22:51:47.310Z",
    "status": "Public",
    "sort": null,
    "user_updated": "91fd1e9c-c965-4845-a8ce-b81d962e690b",
    "user_created": {
      "username": "appoks",
      "first_name": "Johnathan Rad端nz",
      "last_name": "Rad端nz",
      "id": "91fd1e9c-c965-4845-a8ce-b81d962e690b"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.586Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 10,
    "converter_version": "1.0.0"
  }
}