{
  "id": "d1caf72f-4433-4597-adcb-7b31f285507e",
  "name": "Prompt with History",
  "description": "",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "Tayam0nline",
    "first_name": "Tayam",
    "last_name": "El Jebari",
    "id": "dd4138af-3e22-4d41-a2d4-2579a28c7af4",
    "full_name": "Tayam El Jebari"
  },
  "store_url": "https://www.langflow.store/store/component/d1caf72f-4433-4597-adcb-7b31f285507e",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-04T09:50:41.519Z",
    "updated": "2024-07-04T09:50:41.741Z",
    "downloaded": "2025-08-19T17:50:05.676Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.6",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "id": "GroupNode-r0mid",
          "type": "GroupNode",
          "node": {
            "display_name": "Prompt with History",
            "documentation": "",
            "description": "",
            "template": {
              "code_PromptComponent-KYRBR": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "PromptComponent-OoMcT",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "template_PromptComponent-KYRBR": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "proxy": {
                  "id": "PromptComponent-OoMcT",
                  "field": "template"
                }
              },
              "context_PromptComponent-KYRBR": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context",
                "display_name": "context",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "PromptComponent-OoMcT",
                  "field": "context"
                }
              },
              "question_PromptComponent-KYRBR": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "question",
                "display_name": "question",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "PromptComponent-OoMcT",
                  "field": "question"
                }
              },
              "code_Memory-iGzuM": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "Memory-Nf75B",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "n_messages_Memory-iGzuM": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 100,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Memory-Nf75B",
                  "field": "n_messages"
                }
              },
              "order_Memory-iGzuM": {
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ascending",
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-Nf75B",
                  "field": "order"
                }
              },
              "sender_Memory-iGzuM": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine and User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-Nf75B",
                  "field": "sender"
                }
              },
              "sender_name_Memory-iGzuM": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-Nf75B",
                  "field": "sender_name"
                }
              },
              "session_id_Memory-iGzuM": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-Nf75B",
                  "field": "session_id"
                }
              },
              "template_Memory-iGzuM": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{sender_name}: {text}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-Nf75B",
                  "field": "template"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "PromptComponent-OoMcT",
                    "type": "genericNode",
                    "position": {
                      "x": 2142.4742006664223,
                      "y": 378.36552030200767
                    },
                    "data": {
                      "type": "PromptComponent",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "template": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                            "name": "template",
                            "display_name": "Template",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "prompt"
                          },
                          "context": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "context",
                            "display_name": "context",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "history": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "history",
                            "display_name": "history",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "question": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "question",
                            "display_name": "question",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                          "template": [
                            "context",
                            "history",
                            "question"
                          ]
                        },
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "prompt",
                            "display_name": "Prompt Message",
                            "method": "build_prompt",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "template"
                        ],
                        "beta": false,
                        "edited": true
                      },
                      "id": "PromptComponent-OoMcT",
                      "description": "Create a prompt template with dynamic variables.",
                      "display_name": "Prompt",
                      "edited": false
                    },
                    "selected": true,
                    "width": 384,
                    "height": 611,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": 2142.4742006664223,
                      "y": 378.36552030200767
                    }
                  },
                  {
                    "id": "Memory-Nf75B",
                    "type": "genericNode",
                    "position": {
                      "x": 1606.6943944782909,
                      "y": 546.1947858575902
                    },
                    "data": {
                      "type": "Memory",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "n_messages": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": 100,
                            "name": "n_messages",
                            "display_name": "Number of Messages",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of messages to retrieve.",
                            "title_case": false,
                            "type": "int"
                          },
                          "order": {
                            "trace_as_metadata": true,
                            "options": [
                              "Ascending",
                              "Descending"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Ascending",
                            "name": "order",
                            "display_name": "Order",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Order of the messages.",
                            "title_case": false,
                            "type": "str"
                          },
                          "sender": {
                            "trace_as_metadata": true,
                            "options": [
                              "Machine",
                              "User",
                              "Machine and User"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Machine and User",
                            "name": "sender",
                            "display_name": "Sender Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Type of sender.",
                            "title_case": false,
                            "type": "str"
                          },
                          "sender_name": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "sender_name",
                            "display_name": "Sender Name",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "Name of the sender.",
                            "title_case": false,
                            "type": "str"
                          },
                          "session_id": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "session_id",
                            "display_name": "Session ID",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "Session ID of the chat history.",
                            "title_case": false,
                            "type": "str"
                          },
                          "template": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "{sender_name}: {text}",
                            "name": "template",
                            "display_name": "Template",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Retrieves stored chat messages.",
                        "icon": "message-square-more",
                        "base_classes": [
                          "Data",
                          "Message"
                        ],
                        "display_name": "Chat Memory",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "messages",
                            "display_name": "Chat History",
                            "method": "retrieve_messages",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "messages_text",
                            "display_name": "Messages (Text)",
                            "method": "retrieve_messages_as_text",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "sender",
                          "sender_name",
                          "n_messages",
                          "session_id",
                          "order",
                          "template"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "Memory-Nf75B"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 267,
                    "positionAbsolute": {
                      "x": 1606.6943944782909,
                      "y": 546.1947858575902
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "Memory-Nf75B",
                    "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-Nf75Bœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "PromptComponent-OoMcT",
                    "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-OoMcTœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "history",
                        "id": "PromptComponent-OoMcT",
                        "inputTypes": [
                          "Message",
                          "Text"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-Nf75B",
                        "name": "messages_text",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Memory-Nf75B{œdataTypeœ:œMemoryœ,œidœ:œMemory-Nf75Bœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-PromptComponent-OoMcT{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-OoMcTœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                    "className": "",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Jubilant Stonebraker",
              "description": "",
              "id": "1lfTQ"
            },
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "PromptComponent-KYRBR_prompt",
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false,
                "proxy": {
                  "id": "PromptComponent-OoMcT",
                  "name": "prompt",
                  "nodeDisplayName": "Prompt"
                }
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "Memory-iGzuM_messages",
                "display_name": "Chat History",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Memory-Nf75B",
                  "name": "messages",
                  "nodeDisplayName": "Chat Memory"
                },
                "hidden": true
              }
            ],
            "official": false
          }
        },
        "id": "GroupNode-r0mid",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "GroupNode": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "d1caf72f-4433-4597-adcb-7b31f285507e",
    "name": "Prompt with History",
    "description": "",
    "is_component": true,
    "liked_by_count": "4",
    "downloads_count": "58",
    "metadata": {
      "GroupNode": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.6",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "id": "GroupNode-r0mid",
            "type": "GroupNode",
            "node": {
              "display_name": "Prompt with History",
              "documentation": "",
              "description": "",
              "template": {
                "code_PromptComponent-KYRBR": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "PromptComponent-OoMcT",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "template_PromptComponent-KYRBR": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "proxy": {
                    "id": "PromptComponent-OoMcT",
                    "field": "template"
                  }
                },
                "context_PromptComponent-KYRBR": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context",
                  "display_name": "context",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "PromptComponent-OoMcT",
                    "field": "context"
                  }
                },
                "question_PromptComponent-KYRBR": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "question",
                  "display_name": "question",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "PromptComponent-OoMcT",
                    "field": "question"
                  }
                },
                "code_Memory-iGzuM": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "n_messages_Memory-iGzuM": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 100,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "field": "n_messages"
                  }
                },
                "order_Memory-iGzuM": {
                  "trace_as_metadata": true,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Ascending",
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "field": "order"
                  }
                },
                "sender_Memory-iGzuM": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine and User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "field": "sender"
                  }
                },
                "sender_name_Memory-iGzuM": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "field": "sender_name"
                  }
                },
                "session_id_Memory-iGzuM": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "field": "session_id"
                  }
                },
                "template_Memory-iGzuM": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{sender_name}: {text}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "field": "template"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "PromptComponent-OoMcT",
                      "type": "genericNode",
                      "position": {
                        "x": 2142.4742006664223,
                        "y": 378.36552030200767
                      },
                      "data": {
                        "type": "PromptComponent",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "template": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                              "name": "template",
                              "display_name": "Template",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "prompt"
                            },
                            "context": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "context",
                              "display_name": "context",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "history": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "history",
                              "display_name": "history",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "question": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "question",
                              "display_name": "question",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Create a prompt template with dynamic variables.",
                          "icon": "prompts",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "Prompt",
                          "documentation": "",
                          "custom_fields": {
                            "template": [
                              "context",
                              "history",
                              "question"
                            ]
                          },
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "prompt",
                              "display_name": "Prompt Message",
                              "method": "build_prompt",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "template"
                          ],
                          "beta": false,
                          "edited": true
                        },
                        "id": "PromptComponent-OoMcT",
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "edited": false
                      },
                      "selected": true,
                      "width": 384,
                      "height": 611,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": 2142.4742006664223,
                        "y": 378.36552030200767
                      }
                    },
                    {
                      "id": "Memory-Nf75B",
                      "type": "genericNode",
                      "position": {
                        "x": 1606.6943944782909,
                        "y": 546.1947858575902
                      },
                      "data": {
                        "type": "Memory",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "n_messages": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": 100,
                              "name": "n_messages",
                              "display_name": "Number of Messages",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of messages to retrieve.",
                              "title_case": false,
                              "type": "int"
                            },
                            "order": {
                              "trace_as_metadata": true,
                              "options": [
                                "Ascending",
                                "Descending"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Ascending",
                              "name": "order",
                              "display_name": "Order",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Order of the messages.",
                              "title_case": false,
                              "type": "str"
                            },
                            "sender": {
                              "trace_as_metadata": true,
                              "options": [
                                "Machine",
                                "User",
                                "Machine and User"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Machine and User",
                              "name": "sender",
                              "display_name": "Sender Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Type of sender.",
                              "title_case": false,
                              "type": "str"
                            },
                            "sender_name": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "sender_name",
                              "display_name": "Sender Name",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "Name of the sender.",
                              "title_case": false,
                              "type": "str"
                            },
                            "session_id": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "session_id",
                              "display_name": "Session ID",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "Session ID of the chat history.",
                              "title_case": false,
                              "type": "str"
                            },
                            "template": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "{sender_name}: {text}",
                              "name": "template",
                              "display_name": "Template",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Retrieves stored chat messages.",
                          "icon": "message-square-more",
                          "base_classes": [
                            "Data",
                            "Message"
                          ],
                          "display_name": "Chat Memory",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "messages",
                              "display_name": "Chat History",
                              "method": "retrieve_messages",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "messages_text",
                              "display_name": "Messages (Text)",
                              "method": "retrieve_messages_as_text",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order",
                            "template"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "Memory-Nf75B"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 267,
                      "positionAbsolute": {
                        "x": 1606.6943944782909,
                        "y": 546.1947858575902
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "Memory-Nf75B",
                      "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-Nf75Bœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "PromptComponent-OoMcT",
                      "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-OoMcTœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "history",
                          "id": "PromptComponent-OoMcT",
                          "inputTypes": [
                            "Message",
                            "Text"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "Memory",
                          "id": "Memory-Nf75B",
                          "name": "messages_text",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Memory-Nf75B{œdataTypeœ:œMemoryœ,œidœ:œMemory-Nf75Bœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-PromptComponent-OoMcT{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-OoMcTœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                      "className": "",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Jubilant Stonebraker",
                "description": "",
                "id": "1lfTQ"
              },
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "PromptComponent-KYRBR_prompt",
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false,
                  "proxy": {
                    "id": "PromptComponent-OoMcT",
                    "name": "prompt",
                    "nodeDisplayName": "Prompt"
                  }
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "Memory-iGzuM_messages",
                  "display_name": "Chat History",
                  "method": "retrieve_messages",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Memory-Nf75B",
                    "name": "messages",
                    "nodeDisplayName": "Chat Memory"
                  },
                  "hidden": true
                }
              ],
              "official": false
            }
          },
          "id": "GroupNode-r0mid",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-07-04T09:50:41.519Z",
    "date_updated": "2024-07-04T09:50:41.741Z",
    "status": "Public",
    "sort": null,
    "user_updated": "dd4138af-3e22-4d41-a2d4-2579a28c7af4",
    "user_created": {
      "username": "Tayam0nline",
      "first_name": "Tayam",
      "last_name": "El Jebari",
      "id": "dd4138af-3e22-4d41-a2d4-2579a28c7af4"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.937Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 44,
    "converter_version": "1.0.0"
  }
}