{
  "id": "fa3c1a2e-7b9b-4e04-a980-eb91d13084e9",
  "name": "Page Content Viewer [Notion]",
  "description": "Retrieve the content of a Notion page as plain text. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/fa3c1a2e-7b9b-4e04-a980-eb91d13084e9",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-22T21:48:02.492Z",
    "updated": "2024-08-22T21:48:02.528Z",
    "downloaded": "2025-08-19T17:50:06.772Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "NotionPageContent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\r\nfrom typing import Dict, Any, Union\r\nfrom pydantic import BaseModel, Field\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, StrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\n\r\nclass NotionPageContent(LCToolComponent):\r\n    display_name = \"Page Content Viewer [Notion]\"\r\n    description = \"Retrieve the content of a Notion page as plain text.\"\r\n    documentation = \"https://docs.axiestudio.org/integrations/notion/page-content-viewer\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"page_id\",\r\n            display_name=\"Page ID\",\r\n            info=\"The ID of the Notion page to retrieve.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"notion_secret\",\r\n            display_name=\"Notion Secret\",\r\n            info=\"The Notion integration token.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    class NotionPageContentSchema(BaseModel):\r\n        page_id: str = Field(..., description=\"The ID of the Notion page to retrieve.\")\r\n\r\n    def run_model(self) -> Data:\r\n        result = self._retrieve_page_content(self.page_id)\r\n        if isinstance(result, str) and result.startswith(\"Error:\"):\r\n            # An error occurred, return it as text\r\n            return Data(text=result)\r\n        else:\r\n            # Success, return the content\r\n            return Data(text=result, data={\"content\": result})\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"notion_page_content\",\r\n            description=\"Retrieve the content of a Notion page as plain text.\",\r\n            func=self._retrieve_page_content,\r\n            args_schema=self.NotionPageContentSchema,\r\n        )\r\n\r\n    def _retrieve_page_content(self, page_id: str) -> str:\r\n        blocks_url = f\"https://api.notion.com/v1/blocks/{page_id}/children?page_size=100\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {self.notion_secret}\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n        try:\r\n            blocks_response = requests.get(blocks_url, headers=headers)\r\n            blocks_response.raise_for_status()\r\n            blocks_data = blocks_response.json()\r\n            return self.parse_blocks(blocks_data.get(\"results\", []))\r\n        except requests.exceptions.RequestException as e:\r\n            error_message = f\"Error: Failed to retrieve Notion page content. {str(e)}\"\r\n            if hasattr(e, 'response') and e.response is not None:\r\n                error_message += f\" Status code: {e.response.status_code}, Response: {e.response.text}\"\r\n            return error_message\r\n        except Exception as e:\r\n            return f\"Error: An unexpected error occurred while retrieving Notion page content. {str(e)}\"\r\n\r\n    def parse_blocks(self, blocks: list) -> str:\r\n        content = \"\"\r\n        for block in blocks:\r\n            block_type = block.get(\"type\")\r\n            if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"quote\"]:\r\n                content += self.parse_rich_text(block[block_type].get(\"rich_text\", [])) + \"\\n\\n\"\r\n            elif block_type in [\"bulleted_list_item\", \"numbered_list_item\"]:\r\n                content += self.parse_rich_text(block[block_type].get(\"rich_text\", [])) + \"\\n\"\r\n            elif block_type == \"to_do\":\r\n                content += self.parse_rich_text(block[\"to_do\"].get(\"rich_text\", [])) + \"\\n\"\r\n            elif block_type == \"code\":\r\n                content += self.parse_rich_text(block[\"code\"].get(\"rich_text\", [])) + \"\\n\\n\"\r\n            elif block_type == \"image\":\r\n                content += f\"[Image: {block['image'].get('external', {}).get('url', 'No URL')}]\\n\\n\"\r\n            elif block_type == \"divider\":\r\n                content += \"---\\n\\n\"\r\n        return content.strip()\r\n\r\n    def parse_rich_text(self, rich_text: list) -> str:\r\n        return \"\".join(segment.get(\"plain_text\", \"\") for segment in rich_text)\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        return self._retrieve_page_content(*args, **kwargs)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "notion_secret": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "notion_secret",
                "value": "",
                "display_name": "Notion Secret",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The Notion integration token.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "page_id": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "page_id",
                "value": "",
                "display_name": "Page ID",
                "advanced": true,
                "dynamic": false,
                "info": "The ID of the Notion page to retrieve.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Retrieve the content of a Notion page as plain text.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "Data",
              "list",
              "Sequence",
              "Tool"
            ],
            "display_name": "Page Content Viewer [Notion]",
            "documentation": "https://docs.axiestudio.org/integrations/notion/page-content-viewer",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data",
                  "list"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              },
              {
                "types": [
                  "Tool",
                  "Sequence"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "page_id",
              "notion_secret"
            ],
            "beta": false,
            "edited": true,
            "official": false,
            "lf_version": "1.0.15"
          },
          "id": "NotionPageContent-5corK"
        },
        "id": "NotionPageContent-5corK",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "NotionPageContent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "fa3c1a2e-7b9b-4e04-a980-eb91d13084e9",
    "name": "Page Content Viewer [Notion]",
    "description": "Retrieve the content of a Notion page as plain text.",
    "is_component": true,
    "liked_by_count": "3",
    "downloads_count": "30",
    "metadata": {
      "NotionPageContent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "NotionPageContent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\r\nfrom typing import Dict, Any, Union\r\nfrom pydantic import BaseModel, Field\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, StrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\n\r\nclass NotionPageContent(LCToolComponent):\r\n    display_name = \"Page Content Viewer [Notion]\"\r\n    description = \"Retrieve the content of a Notion page as plain text.\"\r\n    documentation = \"https://docs.axiestudio.org/integrations/notion/page-content-viewer\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"page_id\",\r\n            display_name=\"Page ID\",\r\n            info=\"The ID of the Notion page to retrieve.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"notion_secret\",\r\n            display_name=\"Notion Secret\",\r\n            info=\"The Notion integration token.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    class NotionPageContentSchema(BaseModel):\r\n        page_id: str = Field(..., description=\"The ID of the Notion page to retrieve.\")\r\n\r\n    def run_model(self) -> Data:\r\n        result = self._retrieve_page_content(self.page_id)\r\n        if isinstance(result, str) and result.startswith(\"Error:\"):\r\n            # An error occurred, return it as text\r\n            return Data(text=result)\r\n        else:\r\n            # Success, return the content\r\n            return Data(text=result, data={\"content\": result})\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"notion_page_content\",\r\n            description=\"Retrieve the content of a Notion page as plain text.\",\r\n            func=self._retrieve_page_content,\r\n            args_schema=self.NotionPageContentSchema,\r\n        )\r\n\r\n    def _retrieve_page_content(self, page_id: str) -> str:\r\n        blocks_url = f\"https://api.notion.com/v1/blocks/{page_id}/children?page_size=100\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {self.notion_secret}\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n        try:\r\n            blocks_response = requests.get(blocks_url, headers=headers)\r\n            blocks_response.raise_for_status()\r\n            blocks_data = blocks_response.json()\r\n            return self.parse_blocks(blocks_data.get(\"results\", []))\r\n        except requests.exceptions.RequestException as e:\r\n            error_message = f\"Error: Failed to retrieve Notion page content. {str(e)}\"\r\n            if hasattr(e, 'response') and e.response is not None:\r\n                error_message += f\" Status code: {e.response.status_code}, Response: {e.response.text}\"\r\n            return error_message\r\n        except Exception as e:\r\n            return f\"Error: An unexpected error occurred while retrieving Notion page content. {str(e)}\"\r\n\r\n    def parse_blocks(self, blocks: list) -> str:\r\n        content = \"\"\r\n        for block in blocks:\r\n            block_type = block.get(\"type\")\r\n            if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"quote\"]:\r\n                content += self.parse_rich_text(block[block_type].get(\"rich_text\", [])) + \"\\n\\n\"\r\n            elif block_type in [\"bulleted_list_item\", \"numbered_list_item\"]:\r\n                content += self.parse_rich_text(block[block_type].get(\"rich_text\", [])) + \"\\n\"\r\n            elif block_type == \"to_do\":\r\n                content += self.parse_rich_text(block[\"to_do\"].get(\"rich_text\", [])) + \"\\n\"\r\n            elif block_type == \"code\":\r\n                content += self.parse_rich_text(block[\"code\"].get(\"rich_text\", [])) + \"\\n\\n\"\r\n            elif block_type == \"image\":\r\n                content += f\"[Image: {block['image'].get('external', {}).get('url', 'No URL')}]\\n\\n\"\r\n            elif block_type == \"divider\":\r\n                content += \"---\\n\\n\"\r\n        return content.strip()\r\n\r\n    def parse_rich_text(self, rich_text: list) -> str:\r\n        return \"\".join(segment.get(\"plain_text\", \"\") for segment in rich_text)\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        return self._retrieve_page_content(*args, **kwargs)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "notion_secret": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "notion_secret",
                  "value": "",
                  "display_name": "Notion Secret",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The Notion integration token.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "page_id": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "page_id",
                  "value": "",
                  "display_name": "Page ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The ID of the Notion page to retrieve.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Retrieve the content of a Notion page as plain text.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "Data",
                "list",
                "Sequence",
                "Tool"
              ],
              "display_name": "Page Content Viewer [Notion]",
              "documentation": "https://docs.axiestudio.org/integrations/notion/page-content-viewer",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "list"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                },
                {
                  "types": [
                    "Tool",
                    "Sequence"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "page_id",
                "notion_secret"
              ],
              "beta": false,
              "edited": true,
              "official": false,
              "lf_version": "1.0.15"
            },
            "id": "NotionPageContent-5corK"
          },
          "id": "NotionPageContent-5corK",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-22T21:48:02.492Z",
    "date_updated": "2024-08-22T21:48:02.528Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:12.644Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 12,
    "converter_version": "1.0.0"
  }
}