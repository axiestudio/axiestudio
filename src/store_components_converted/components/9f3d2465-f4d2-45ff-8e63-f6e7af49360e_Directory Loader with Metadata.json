{
  "id": "9f3d2465-f4d2-45ff-8e63-f6e7af49360e",
  "name": "Directory Loader with Metadata",
  "description": "Load files from a directory and generate metadata including a GUID and file name. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "alpha23",
    "first_name": "Duane",
    "last_name": "Webber",
    "id": "670a7528-f27b-408d-b340-27bfb37876b0",
    "full_name": "Duane Webber"
  },
  "store_url": "https://www.langflow.store/store/component/9f3d2465-f4d2-45ff-8e63-f6e7af49360e",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-27T02:03:22.199Z",
    "updated": "2024-05-27T02:03:22.224Z",
    "downloaded": "2025-08-19T17:50:05.463Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.12",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import os\nimport uuid\nimport glob\nfrom typing import Any, Dict, List\nfrom axiestudio import CustomComponent\nfrom langchain.schema import Document\n\nclass DirectoryLoaderWithMetaData(CustomComponent):\n    display_name: str = \"Directory Loader with Metadata\"\n    description: str = \"Load files from a directory and generate metadata including a GUID and file name.\"\n    beta = True\n\n    loaders_info: List[Dict[str, Any]] = [\n        {\n            \"loader\": \"AirbyteJSONLoader\",\n            \"name\": \"Airbyte JSON (.jsonl)\",\n            \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n            \"defaultFor\": [\"jsonl\"],\n            \"allowedTypes\": [\"jsonl\"],\n        },\n        {\n            \"loader\": \"JSONLoader\",\n            \"name\": \"JSON (.json)\",\n            \"import\": \"langchain.document_loaders.JSONLoader\",\n            \"defaultFor\": [\"json\"],\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"BSHTMLLoader\",\n            \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"CSVLoader\",\n            \"name\": \"CSV (.csv)\",\n            \"import\": \"langchain.document_loaders.CSVLoader\",\n            \"defaultFor\": [\"csv\"],\n            \"allowedTypes\": [\"csv\"],\n        },\n        {\n            \"loader\": \"CoNLLULoader\",\n            \"name\": \"CoNLL-U (.conllu)\",\n            \"import\": \"langchain.document_loaders.CoNLLULoader\",\n            \"defaultFor\": [\"conllu\"],\n            \"allowedTypes\": [\"conllu\"],\n        },\n        {\n            \"loader\": \"EverNoteLoader\",\n            \"name\": \"EverNote (.enex)\",\n            \"import\": \"langchain.document_loaders.EverNoteLoader\",\n            \"defaultFor\": [\"enex\"],\n            \"allowedTypes\": [\"enex\"],\n        },\n        {\n            \"loader\": \"FacebookChatLoader\",\n            \"name\": \"Facebook Chat (.json)\",\n            \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"OutlookMessageLoader\",\n            \"name\": \"Outlook Message (.msg)\",\n            \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n            \"defaultFor\": [\"msg\"],\n            \"allowedTypes\": [\"msg\"],\n        },\n        {\n            \"loader\": \"PyPDFLoader\",\n            \"name\": \"PyPDF (.pdf)\",\n            \"import\": \"langchain.document_loaders.PyPDFLoader\",\n            \"defaultFor\": [\"pdf\"],\n            \"allowedTypes\": [\"pdf\"],\n        },\n        {\n            \"loader\": \"STRLoader\",\n            \"name\": \"Subtitle (.str)\",\n            \"import\": \"langchain.document_loaders.STRLoader\",\n            \"defaultFor\": [\"str\"],\n            \"allowedTypes\": [\"str\"],\n        },\n        {\n            \"loader\": \"TextLoader\",\n            \"name\": \"Text (.txt)\",\n            \"import\": \"langchain.document_loaders.TextLoader\",\n            \"defaultFor\": [\"txt\"],\n            \"allowedTypes\": [\"txt\"],\n        },\n        {\n            \"loader\": \"UnstructuredEmailLoader\",\n            \"name\": \"Unstructured Email (.eml)\",\n            \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n            \"defaultFor\": [\"eml\"],\n            \"allowedTypes\": [\"eml\"],\n        },\n        {\n            \"loader\": \"UnstructuredHTMLLoader\",\n            \"name\": \"Unstructured HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n            \"defaultFor\": [\"html\", \"htm\"],\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"UnstructuredMarkdownLoader\",\n            \"name\": \"Unstructured Markdown (.md)\",\n            \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n            \"defaultFor\": [\"md\"],\n            \"allowedTypes\": [\"md\"],\n        },\n        {\n            \"loader\": \"UnstructuredPowerPointLoader\",\n            \"name\": \"Unstructured PowerPoint (.pptx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n            \"defaultFor\": [\"pptx\"],\n            \"allowedTypes\": [\"pptx\"],\n        },\n        {\n            \"loader\": \"UnstructuredWordLoader\",\n            \"name\": \"Unstructured Word (.docx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n            \"defaultFor\": [\"docx\"],\n            \"allowedTypes\": [\"docx\"],\n        },\n    ]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"directory_path\": {\n                \"display_name\": \"Directory Path\",\n                \"required\": True,\n                \"field_type\": \"str\",  # Update this if specific directory type is supported\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def load_file(self, file_path: str, loader: str) -> List[Document]:\n        file_type = file_path.split(\".\")[-1]\n\n        # Map the selected loader name to its information\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Automatically determine the loader based on the file extension\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n\n        loader_import: str = selected_loader_info[\"import\"]\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Dynamically import the loader\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path).load()\n        return result\n\n    def recursive_glob(self, directory_path, depth):\n        pattern = \"/**/*.*\" if depth > 0 else \"/*.*\"\n        return [file for file in glob.glob(directory_path + pattern, recursive=True) if file.count(os.sep) <= depth + directory_path.count(os.sep)]\n\n    def build(self, directory_path: str, loader: str, depth: int = 3) -> List[Document]:\n        # Check if the directory exists\n        if not os.path.exists(directory_path):\n            raise ValueError(f\"Directory not found: {directory_path}\")\n\n        suffixes = list(set([ext for loader_info in self.loaders_info for ext in loader_info[\"allowedTypes\"]]))\n\n        files = self.recursive_glob(directory_path, depth=depth)\n        files = [f for f in files if f.split('.')[-1] in suffixes]\n\n        docs = []\n        for file in files:\n            doc = self.load_file(file, loader)\n            guid = str(uuid.uuid4())\n            for d in doc:\n                d.metadata['document_id'] = guid\n                d.metadata['file_name'] = file\n            docs.extend(doc)\n        return docs\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "depth": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 3,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "depth",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "directory_path": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "directory_path",
                "display_name": "Directory Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "/home"
              },
              "loader": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Automatic",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Automatic",
                  "Airbyte JSON (.jsonl)",
                  "JSON (.json)",
                  "BeautifulSoup4 HTML (.html, .htm)",
                  "CSV (.csv)",
                  "CoNLL-U (.conllu)",
                  "EverNote (.enex)",
                  "Facebook Chat (.json)",
                  "Outlook Message (.msg)",
                  "PyPDF (.pdf)",
                  "Subtitle (.str)",
                  "Text (.txt)",
                  "Unstructured Email (.eml)",
                  "Unstructured HTML (.html, .htm)",
                  "Unstructured Markdown (.md)",
                  "Unstructured PowerPoint (.pptx)",
                  "Unstructured Word (.docx)"
                ],
                "name": "loader",
                "display_name": "Loader",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Load files from a directory and generate metadata including a GUID and file name.",
            "base_classes": [
              "Document"
            ],
            "display_name": "Directory Loader with Metadata",
            "documentation": "",
            "custom_fields": {
              "directory_path": null,
              "loader": null,
              "depth": null
            },
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "Data-ZGCPq",
          "description": "Load files from a directory and generate metadata including a GUID and file name.",
          "display_name": "Directory Loader with Metadata"
        },
        "id": "Data-ZGCPq",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "Data": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "9f3d2465-f4d2-45ff-8e63-f6e7af49360e",
    "name": "Directory Loader with Metadata",
    "description": "Load files from a directory and generate metadata including a GUID and file name.",
    "is_component": true,
    "liked_by_count": "18",
    "downloads_count": "173",
    "metadata": {
      "Data": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "0.6.12",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import os\nimport uuid\nimport glob\nfrom typing import Any, Dict, List\nfrom axiestudio import CustomComponent\nfrom langchain.schema import Document\n\nclass DirectoryLoaderWithMetaData(CustomComponent):\n    display_name: str = \"Directory Loader with Metadata\"\n    description: str = \"Load files from a directory and generate metadata including a GUID and file name.\"\n    beta = True\n\n    loaders_info: List[Dict[str, Any]] = [\n        {\n            \"loader\": \"AirbyteJSONLoader\",\n            \"name\": \"Airbyte JSON (.jsonl)\",\n            \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n            \"defaultFor\": [\"jsonl\"],\n            \"allowedTypes\": [\"jsonl\"],\n        },\n        {\n            \"loader\": \"JSONLoader\",\n            \"name\": \"JSON (.json)\",\n            \"import\": \"langchain.document_loaders.JSONLoader\",\n            \"defaultFor\": [\"json\"],\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"BSHTMLLoader\",\n            \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"CSVLoader\",\n            \"name\": \"CSV (.csv)\",\n            \"import\": \"langchain.document_loaders.CSVLoader\",\n            \"defaultFor\": [\"csv\"],\n            \"allowedTypes\": [\"csv\"],\n        },\n        {\n            \"loader\": \"CoNLLULoader\",\n            \"name\": \"CoNLL-U (.conllu)\",\n            \"import\": \"langchain.document_loaders.CoNLLULoader\",\n            \"defaultFor\": [\"conllu\"],\n            \"allowedTypes\": [\"conllu\"],\n        },\n        {\n            \"loader\": \"EverNoteLoader\",\n            \"name\": \"EverNote (.enex)\",\n            \"import\": \"langchain.document_loaders.EverNoteLoader\",\n            \"defaultFor\": [\"enex\"],\n            \"allowedTypes\": [\"enex\"],\n        },\n        {\n            \"loader\": \"FacebookChatLoader\",\n            \"name\": \"Facebook Chat (.json)\",\n            \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n            \"allowedTypes\": [\"json\"],\n        },\n        {\n            \"loader\": \"OutlookMessageLoader\",\n            \"name\": \"Outlook Message (.msg)\",\n            \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n            \"defaultFor\": [\"msg\"],\n            \"allowedTypes\": [\"msg\"],\n        },\n        {\n            \"loader\": \"PyPDFLoader\",\n            \"name\": \"PyPDF (.pdf)\",\n            \"import\": \"langchain.document_loaders.PyPDFLoader\",\n            \"defaultFor\": [\"pdf\"],\n            \"allowedTypes\": [\"pdf\"],\n        },\n        {\n            \"loader\": \"STRLoader\",\n            \"name\": \"Subtitle (.str)\",\n            \"import\": \"langchain.document_loaders.STRLoader\",\n            \"defaultFor\": [\"str\"],\n            \"allowedTypes\": [\"str\"],\n        },\n        {\n            \"loader\": \"TextLoader\",\n            \"name\": \"Text (.txt)\",\n            \"import\": \"langchain.document_loaders.TextLoader\",\n            \"defaultFor\": [\"txt\"],\n            \"allowedTypes\": [\"txt\"],\n        },\n        {\n            \"loader\": \"UnstructuredEmailLoader\",\n            \"name\": \"Unstructured Email (.eml)\",\n            \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n            \"defaultFor\": [\"eml\"],\n            \"allowedTypes\": [\"eml\"],\n        },\n        {\n            \"loader\": \"UnstructuredHTMLLoader\",\n            \"name\": \"Unstructured HTML (.html, .htm)\",\n            \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n            \"defaultFor\": [\"html\", \"htm\"],\n            \"allowedTypes\": [\"html\", \"htm\"],\n        },\n        {\n            \"loader\": \"UnstructuredMarkdownLoader\",\n            \"name\": \"Unstructured Markdown (.md)\",\n            \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n            \"defaultFor\": [\"md\"],\n            \"allowedTypes\": [\"md\"],\n        },\n        {\n            \"loader\": \"UnstructuredPowerPointLoader\",\n            \"name\": \"Unstructured PowerPoint (.pptx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n            \"defaultFor\": [\"pptx\"],\n            \"allowedTypes\": [\"pptx\"],\n        },\n        {\n            \"loader\": \"UnstructuredWordLoader\",\n            \"name\": \"Unstructured Word (.docx)\",\n            \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n            \"defaultFor\": [\"docx\"],\n            \"allowedTypes\": [\"docx\"],\n        },\n    ]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"directory_path\": {\n                \"display_name\": \"Directory Path\",\n                \"required\": True,\n                \"field_type\": \"str\",  # Update this if specific directory type is supported\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def load_file(self, file_path: str, loader: str) -> List[Document]:\n        file_type = file_path.split(\".\")[-1]\n\n        # Map the selected loader name to its information\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Automatically determine the loader based on the file extension\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n\n        loader_import: str = selected_loader_info[\"import\"]\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Dynamically import the loader\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path).load()\n        return result\n\n    def recursive_glob(self, directory_path, depth):\n        pattern = \"/**/*.*\" if depth > 0 else \"/*.*\"\n        return [file for file in glob.glob(directory_path + pattern, recursive=True) if file.count(os.sep) <= depth + directory_path.count(os.sep)]\n\n    def build(self, directory_path: str, loader: str, depth: int = 3) -> List[Document]:\n        # Check if the directory exists\n        if not os.path.exists(directory_path):\n            raise ValueError(f\"Directory not found: {directory_path}\")\n\n        suffixes = list(set([ext for loader_info in self.loaders_info for ext in loader_info[\"allowedTypes\"]]))\n\n        files = self.recursive_glob(directory_path, depth=depth)\n        files = [f for f in files if f.split('.')[-1] in suffixes]\n\n        docs = []\n        for file in files:\n            doc = self.load_file(file, loader)\n            guid = str(uuid.uuid4())\n            for d in doc:\n                d.metadata['document_id'] = guid\n                d.metadata['file_name'] = file\n            docs.extend(doc)\n        return docs\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "depth": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 3,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "depth",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "directory_path": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "directory_path",
                  "display_name": "Directory Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "/home"
                },
                "loader": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Automatic",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Automatic",
                    "Airbyte JSON (.jsonl)",
                    "JSON (.json)",
                    "BeautifulSoup4 HTML (.html, .htm)",
                    "CSV (.csv)",
                    "CoNLL-U (.conllu)",
                    "EverNote (.enex)",
                    "Facebook Chat (.json)",
                    "Outlook Message (.msg)",
                    "PyPDF (.pdf)",
                    "Subtitle (.str)",
                    "Text (.txt)",
                    "Unstructured Email (.eml)",
                    "Unstructured HTML (.html, .htm)",
                    "Unstructured Markdown (.md)",
                    "Unstructured PowerPoint (.pptx)",
                    "Unstructured Word (.docx)"
                  ],
                  "name": "loader",
                  "display_name": "Loader",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Load files from a directory and generate metadata including a GUID and file name.",
              "base_classes": [
                "Document"
              ],
              "display_name": "Directory Loader with Metadata",
              "documentation": "",
              "custom_fields": {
                "directory_path": null,
                "loader": null,
                "depth": null
              },
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "Data-ZGCPq",
            "description": "Load files from a directory and generate metadata including a GUID and file name.",
            "display_name": "Directory Loader with Metadata"
          },
          "id": "Data-ZGCPq",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-05-27T02:03:22.199Z",
    "date_updated": "2024-05-27T02:03:22.224Z",
    "status": "Public",
    "sort": null,
    "user_updated": "670a7528-f27b-408d-b340-27bfb37876b0",
    "user_created": {
      "username": "alpha23",
      "first_name": "Duane",
      "last_name": "Webber",
      "id": "670a7528-f27b-408d-b340-27bfb37876b0"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.174Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 2,
    "converter_version": "1.0.0"
  }
}