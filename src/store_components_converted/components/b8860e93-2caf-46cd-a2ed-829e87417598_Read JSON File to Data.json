{
  "id": "b8860e93-2caf-46cd-a2ed-829e87417598",
  "name": "Read JSON File to Data",
  "description": "Reads a JSON file and returns its contents as structured Data objects. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/b8860e93-2caf-46cd-a2ed-829e87417598",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-15T01:25:46.931Z",
    "updated": "2024-08-15T01:25:46.954Z",
    "downloaded": "2025-08-19T17:50:05.511Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "ReadJSONToData",
          "node": {
            "template": {
              "_type": "Component",
              "path": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "json"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "path",
                "value": "",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "The JSON file to read.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\r\nfrom typing import Union, List, Dict, Any\r\nimport json\r\n\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import FileInput, BoolInput, Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass ReadJSONToData(Component):\r\n    display_name = \"Read JSON to Data\"\r\n    description = \"Reads a JSON file and returns its contents as structured Data objects.\"\r\n    icon = \"file-json\"\r\n\r\n    inputs = [\r\n        FileInput(\r\n            name=\"path\",\r\n            display_name=\"Path\",\r\n            file_types=[\"json\"],\r\n            info=\"The JSON file to read.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"silent_errors\",\r\n            display_name=\"Silent Errors\",\r\n            advanced=True,\r\n            info=\"If true, errors will not raise an exception.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"read_json_to_data\"),\r\n    ]\r\n\r\n    def read_json_to_data(self) -> Union[Data, List[Data]]:\r\n        if not self.path:\r\n            raise ValueError(\"Please, upload a JSON file to use this component.\")\r\n        \r\n        resolved_path = self.resolve_path(self.path)\r\n        silent_errors = self.silent_errors\r\n\r\n        extension = Path(resolved_path).suffix[1:].lower()\r\n        if extension != \"json\":\r\n            raise ValueError(f\"Unsupported file type: {extension}. Only JSON files are supported.\")\r\n\r\n        try:\r\n            with open(resolved_path, 'r', encoding='utf-8') as json_file:\r\n                json_content = json.load(json_file)\r\n\r\n            if isinstance(json_content, list):\r\n                data_objects = [Data(**item) for item in json_content]\r\n                self.status = f\"Successfully loaded {len(data_objects)} JSON objects\"\r\n                return data_objects\r\n            elif isinstance(json_content, dict):\r\n                data_object = Data(**json_content)\r\n                self.status = data_object\r\n                return data_object\r\n            else:\r\n                raise ValueError(\"JSON content was neither a dict nor a list\")\r\n\r\n        except json.JSONDecodeError as e:\r\n            error_message = f\"Error decoding JSON from {resolved_path}: {str(e)}\"\r\n            self.status = error_message\r\n            if silent_errors:\r\n                return Data()\r\n            raise ValueError(error_message)\r\n        except Exception as e:\r\n            error_message = f\"Error reading JSON file: {str(e)}\"\r\n            self.status = error_message\r\n            if silent_errors:\r\n                return Data()\r\n            raise RuntimeError(error_message)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Reads a JSON file and returns its contents as structured Data objects.",
            "icon": "file-json",
            "base_classes": [
              "Data",
              "List"
            ],
            "display_name": "Read JSON File to Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data",
                  "List"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "read_json_to_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "silent_errors"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "CustomComponent-UExE5"
        },
        "id": "CustomComponent-UExE5",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "b8860e93-2caf-46cd-a2ed-829e87417598",
    "name": "Read JSON File to Data",
    "description": "Reads a JSON file and returns its contents as structured Data objects.",
    "is_component": true,
    "liked_by_count": "14",
    "downloads_count": "133",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "ReadJSONToData",
            "node": {
              "template": {
                "_type": "Component",
                "path": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "json"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "path",
                  "value": "",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The JSON file to read.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\r\nfrom typing import Union, List, Dict, Any\r\nimport json\r\n\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import FileInput, BoolInput, Output\r\nfrom axiestudio.schema import Data\r\n\r\nclass ReadJSONToData(Component):\r\n    display_name = \"Read JSON to Data\"\r\n    description = \"Reads a JSON file and returns its contents as structured Data objects.\"\r\n    icon = \"file-json\"\r\n\r\n    inputs = [\r\n        FileInput(\r\n            name=\"path\",\r\n            display_name=\"Path\",\r\n            file_types=[\"json\"],\r\n            info=\"The JSON file to read.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"silent_errors\",\r\n            display_name=\"Silent Errors\",\r\n            advanced=True,\r\n            info=\"If true, errors will not raise an exception.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"read_json_to_data\"),\r\n    ]\r\n\r\n    def read_json_to_data(self) -> Union[Data, List[Data]]:\r\n        if not self.path:\r\n            raise ValueError(\"Please, upload a JSON file to use this component.\")\r\n        \r\n        resolved_path = self.resolve_path(self.path)\r\n        silent_errors = self.silent_errors\r\n\r\n        extension = Path(resolved_path).suffix[1:].lower()\r\n        if extension != \"json\":\r\n            raise ValueError(f\"Unsupported file type: {extension}. Only JSON files are supported.\")\r\n\r\n        try:\r\n            with open(resolved_path, 'r', encoding='utf-8') as json_file:\r\n                json_content = json.load(json_file)\r\n\r\n            if isinstance(json_content, list):\r\n                data_objects = [Data(**item) for item in json_content]\r\n                self.status = f\"Successfully loaded {len(data_objects)} JSON objects\"\r\n                return data_objects\r\n            elif isinstance(json_content, dict):\r\n                data_object = Data(**json_content)\r\n                self.status = data_object\r\n                return data_object\r\n            else:\r\n                raise ValueError(\"JSON content was neither a dict nor a list\")\r\n\r\n        except json.JSONDecodeError as e:\r\n            error_message = f\"Error decoding JSON from {resolved_path}: {str(e)}\"\r\n            self.status = error_message\r\n            if silent_errors:\r\n                return Data()\r\n            raise ValueError(error_message)\r\n        except Exception as e:\r\n            error_message = f\"Error reading JSON file: {str(e)}\"\r\n            self.status = error_message\r\n            if silent_errors:\r\n                return Data()\r\n            raise RuntimeError(error_message)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "silent_errors",
                  "value": false,
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Reads a JSON file and returns its contents as structured Data objects.",
              "icon": "file-json",
              "base_classes": [
                "Data",
                "List"
              ],
              "display_name": "Read JSON File to Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "List"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "read_json_to_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "path",
                "silent_errors"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "CustomComponent-UExE5"
          },
          "id": "CustomComponent-UExE5",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-15T01:25:46.931Z",
    "date_updated": "2024-08-15T01:25:46.954Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.553Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 6,
    "converter_version": "1.0.0"
  }
}