{
  "id": "1e6a3b49-d75c-4fc9-831b-7aaf4505f5c7",
  "name": "Langgraph StateGraph",
  "description": "Receives nodes, edges, conditional edges and a state as a pydantic model or typed dict.\n\nThe node is an Data object with `name` and `run_function` attributes\n\nThe edge is an Data object with `previous` and `next` attributes\n\nThe conditional edge is an Data object with `previous` and `routing_function` attributes (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "renancleyson-dev",
    "first_name": "Renan",
    "last_name": "Cleyson",
    "id": "104d0dde-15a3-4ed0-b9fd-c20c56946737",
    "full_name": "Renan Cleyson"
  },
  "store_url": "https://www.langflow.store/store/component/1e6a3b49-d75c-4fc9-831b-7aaf4505f5c7",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-03T03:03:51.775Z",
    "updated": "2024-09-03T23:27:09.715Z",
    "downloaded": "2025-08-19T17:50:06.924Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.16",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "StateGraphCompoent",
          "node": {
            "template": {
              "_type": "Component",
              "conditional_edges": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "conditional_edges",
                "value": "",
                "display_name": "Conditional Edges",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "edges": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "edges",
                "value": "",
                "display_name": "Edges",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "nodes": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "nodes",
                "value": "",
                "display_name": "Nodes",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "state": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "state",
                "value": "",
                "display_name": "State",
                "advanced": false,
                "input_types": [
                  "BaseModel",
                  "TypedDict"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom langgraph.graph import StateGraph\nfrom langgraph.graph.graph import CompiledGraph\n\n\nclass StateGraphCompoent(Component):\n    display_name = \"LangGraph StateGraph\"\n    description = \"\\n\\n\".join((\n        \"Receives nodes, edges, conditional edges and a state as a pydantic model or typed dict.\",\n        \"The node is an Data object with `name` and `run_function` attributes\",\n        \"The edge is an Data object with `previous` and `next` attributes\",\n        \"The conditional edge is an Data object with `previous` and `routing_function` attributes\",\n    ))\n    documentation: str = \"https://langchain-ai.github.io/langgraph/tutorials/introduction\"\n    icon = \"link\"\n    name = \"StateGraphCompoent\"\n\n    inputs = [\n        MessageTextInput(name=\"input\", display_name=\"Input\"),\n        HandleInput(name=\"nodes\", display_name=\"Nodes\", input_types=[\"Data\"], is_list=True),\n        HandleInput(name=\"edges\", display_name=\"Edges\", input_types=[\"Data\"], is_list=True),\n        HandleInput(name=\"conditional_edges\", display_name=\"Conditional Edges\", input_types=[\"Data\"], is_list=True),\n        HandleInput(name=\"state\", display_name=\"State\", input_types=[\"BaseModel\", \"TypedDict\"], required=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n        Output(display_name=\"Graph\", name=\"graph\", method=\"build_graph\"),\n    ]\n    \n    def build_output(self) -> str:\n        if not self.input:\n            return\n\n        graph = self.build_graph()\n        return list(graph.stream({\"messages\": [self.input]}))\n\n    def build_graph(self) -> CompiledGraph:\n        graph_builder = StateGraph(self.state)\n        nodes = self.nodes or []\n        edges = self.edges or []\n        conditional_edges = self.conditional_edges or []\n\n        for node in nodes:\n            graph_builder.add_node(node.name, node.run_function)\n\n        for edge in edges:\n            graph_builder.add_edge(edge.previous, edge.next)\n\n        for edge in conditional_edges:\n            graph_builder.add_conditional_edges(edge.previous, edge.routing_function)\n\n        return graph_builder.compile()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Receives nodes, edges, conditional edges and a state as a pydantic model or typed dict.\n\nThe node is an Data object with `name` and `run_function` attributes\n\nThe edge is an Data object with `previous` and `next` attributes\n\nThe conditional edge is an Data object with `previous` and `routing_function` attributes",
            "icon": "link",
            "base_classes": [
              "CompiledGraph",
              "Text"
            ],
            "display_name": "Langgraph StateGraph",
            "documentation": "https://langchain-ai.github.io/langgraph/tutorials/introduction",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "CompiledGraph"
                ],
                "selected": "CompiledGraph",
                "name": "graph",
                "display_name": "Graph",
                "method": "build_graph",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input",
              "nodes",
              "edges",
              "conditional_edges",
              "state"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "CustomComponent-Cn6FW"
        },
        "id": "CustomComponent-Cn6FW",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "1e6a3b49-d75c-4fc9-831b-7aaf4505f5c7",
    "name": "Langgraph StateGraph",
    "description": "Receives nodes, edges, conditional edges and a state as a pydantic model or typed dict.\n\nThe node is an Data object with `name` and `run_function` attributes\n\nThe edge is an Data object with `previous` and `next` attributes\n\nThe conditional edge is an Data object with `previous` and `routing_function` attributes",
    "is_component": true,
    "liked_by_count": "26",
    "downloads_count": "131",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.16",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "StateGraphCompoent",
            "node": {
              "template": {
                "_type": "Component",
                "conditional_edges": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "conditional_edges",
                  "value": "",
                  "display_name": "Conditional Edges",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "edges": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "edges",
                  "value": "",
                  "display_name": "Edges",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "nodes": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "nodes",
                  "value": "",
                  "display_name": "Nodes",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "state": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "state",
                  "value": "",
                  "display_name": "State",
                  "advanced": false,
                  "input_types": [
                    "BaseModel",
                    "TypedDict"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom langgraph.graph import StateGraph\nfrom langgraph.graph.graph import CompiledGraph\n\n\nclass StateGraphCompoent(Component):\n    display_name = \"LangGraph StateGraph\"\n    description = \"\\n\\n\".join((\n        \"Receives nodes, edges, conditional edges and a state as a pydantic model or typed dict.\",\n        \"The node is an Data object with `name` and `run_function` attributes\",\n        \"The edge is an Data object with `previous` and `next` attributes\",\n        \"The conditional edge is an Data object with `previous` and `routing_function` attributes\",\n    ))\n    documentation: str = \"https://langchain-ai.github.io/langgraph/tutorials/introduction\"\n    icon = \"link\"\n    name = \"StateGraphCompoent\"\n\n    inputs = [\n        MessageTextInput(name=\"input\", display_name=\"Input\"),\n        HandleInput(name=\"nodes\", display_name=\"Nodes\", input_types=[\"Data\"], is_list=True),\n        HandleInput(name=\"edges\", display_name=\"Edges\", input_types=[\"Data\"], is_list=True),\n        HandleInput(name=\"conditional_edges\", display_name=\"Conditional Edges\", input_types=[\"Data\"], is_list=True),\n        HandleInput(name=\"state\", display_name=\"State\", input_types=[\"BaseModel\", \"TypedDict\"], required=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n        Output(display_name=\"Graph\", name=\"graph\", method=\"build_graph\"),\n    ]\n    \n    def build_output(self) -> str:\n        if not self.input:\n            return\n\n        graph = self.build_graph()\n        return list(graph.stream({\"messages\": [self.input]}))\n\n    def build_graph(self) -> CompiledGraph:\n        graph_builder = StateGraph(self.state)\n        nodes = self.nodes or []\n        edges = self.edges or []\n        conditional_edges = self.conditional_edges or []\n\n        for node in nodes:\n            graph_builder.add_node(node.name, node.run_function)\n\n        for edge in edges:\n            graph_builder.add_edge(edge.previous, edge.next)\n\n        for edge in conditional_edges:\n            graph_builder.add_conditional_edges(edge.previous, edge.routing_function)\n\n        return graph_builder.compile()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Receives nodes, edges, conditional edges and a state as a pydantic model or typed dict.\n\nThe node is an Data object with `name` and `run_function` attributes\n\nThe edge is an Data object with `previous` and `next` attributes\n\nThe conditional edge is an Data object with `previous` and `routing_function` attributes",
              "icon": "link",
              "base_classes": [
                "CompiledGraph",
                "Text"
              ],
              "display_name": "Langgraph StateGraph",
              "documentation": "https://langchain-ai.github.io/langgraph/tutorials/introduction",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "output",
                  "display_name": "Output",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "CompiledGraph"
                  ],
                  "selected": "CompiledGraph",
                  "name": "graph",
                  "display_name": "Graph",
                  "method": "build_graph",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input",
                "nodes",
                "edges",
                "conditional_edges",
                "state"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "CustomComponent-Cn6FW"
          },
          "id": "CustomComponent-Cn6FW",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-09-03T03:03:51.775Z",
    "date_updated": "2024-09-03T23:27:09.715Z",
    "status": "Public",
    "sort": null,
    "user_updated": "104d0dde-15a3-4ed0-b9fd-c20c56946737",
    "user_created": {
      "username": "renancleyson-dev",
      "first_name": "Renan",
      "last_name": "Cleyson",
      "id": "104d0dde-15a3-4ed0-b9fd-c20c56946737"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:09.174Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}