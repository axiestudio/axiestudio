{
  "id": "b752c75e-5389-452d-84b9-f407acd4b9bf",
  "name": "SQLite Query Executor",
  "description": "Executes a given SQL query on a specified SQLite database. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "Fabio Braga",
    "first_name": "Fabio",
    "last_name": "Braga",
    "id": "cbc14150-3856-4a71-90b3-f9755a81b82b",
    "full_name": "Fabio Braga"
  },
  "store_url": "https://www.langflow.store/store/component/b752c75e-5389-452d-84b9-f407acd4b9bf",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-14T17:22:07.151Z",
    "updated": "2024-08-14T17:22:07.228Z",
    "downloaded": "2025-08-19T17:50:05.231Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "SQLiteQueryTool",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Union\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom sqlalchemy import create_engine, text\r\nfrom sqlalchemy.exc import SQLAlchemyError\r\n\r\nclass SQLiteQueryTool(LCToolComponent):\r\n    display_name = \"SQLite Query Executor\"\r\n    description = \"Executes a given SQL query on a specified SQLite database.\"\r\n    name = \"SQLiteQueryTool\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"database_name\",\r\n            display_name=\"Database Name\",\r\n            info=\"Name of the SQLite database file.\",\r\n            required=True\r\n        ),\r\n        MultilineInput(\r\n            name=\"query\",\r\n            display_name=\"SQL Query\",\r\n            info=\"SQL query to be executed on the database.\",\r\n            required=True\r\n        )\r\n    ]\r\n\r\n    def run_model(self) -> Union[Data, list[Data]]:\r\n        database_name = self.database_name\r\n        query = self.query\r\n\r\n        # Connect to the SQLite database using SQLAlchemy\r\n        engine = create_engine(f\"sqlite:///{database_name}\")\r\n\r\n        try:\r\n            with engine.connect() as connection:\r\n                result = connection.execute(text(query))\r\n                rows = result.fetchall()\r\n                keys = result.keys()\r\n                results = [dict(zip(keys, row)) for row in rows]\r\n\r\n            list_data = [Data(data=row, text=row['info']) for row in results]\r\n            self.status = list_data\r\n            return list_data\r\n\r\n        except SQLAlchemyError as e:\r\n            self.status = f\"Error executing query: {str(e)}\"\r\n            return [Data(data={\"error\": str(e)})]\r\n\r\n    def build_tool(self) -> Tool:\r\n        return Tool(\r\n            name=\"sqlite_query_tool\",\r\n            description=\"Executes a given SQL query on a specified SQLite database.\",\r\n            func=self.run_model,\r\n        )\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "database_name",
                "value": "database.db",
                "display_name": "Database Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the SQLite database file.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "query",
                "value": "SELECT field1, field2 FROM my_table",
                "display_name": "SQL Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "SQL query to be executed on the database.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Executes a given SQL query on a specified SQLite database.",
            "base_classes": [
              "Data",
              "list",
              "Sequence",
              "Tool"
            ],
            "display_name": "SQLite Query Executor",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data",
                  "list"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Sequence",
                  "Tool"
                ],
                "selected": "Sequence",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "database_name",
              "query"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "SQLiteQueryTool-hpGsE"
        },
        "id": "SQLiteQueryTool-hpGsE",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "SQLiteQueryTool": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "b752c75e-5389-452d-84b9-f407acd4b9bf",
    "name": "SQLite Query Executor",
    "description": "Executes a given SQL query on a specified SQLite database.",
    "is_component": true,
    "liked_by_count": "11",
    "downloads_count": "123",
    "metadata": {
      "SQLiteQueryTool": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "SQLiteQueryTool",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Union\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom sqlalchemy import create_engine, text\r\nfrom sqlalchemy.exc import SQLAlchemyError\r\n\r\nclass SQLiteQueryTool(LCToolComponent):\r\n    display_name = \"SQLite Query Executor\"\r\n    description = \"Executes a given SQL query on a specified SQLite database.\"\r\n    name = \"SQLiteQueryTool\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"database_name\",\r\n            display_name=\"Database Name\",\r\n            info=\"Name of the SQLite database file.\",\r\n            required=True\r\n        ),\r\n        MultilineInput(\r\n            name=\"query\",\r\n            display_name=\"SQL Query\",\r\n            info=\"SQL query to be executed on the database.\",\r\n            required=True\r\n        )\r\n    ]\r\n\r\n    def run_model(self) -> Union[Data, list[Data]]:\r\n        database_name = self.database_name\r\n        query = self.query\r\n\r\n        # Connect to the SQLite database using SQLAlchemy\r\n        engine = create_engine(f\"sqlite:///{database_name}\")\r\n\r\n        try:\r\n            with engine.connect() as connection:\r\n                result = connection.execute(text(query))\r\n                rows = result.fetchall()\r\n                keys = result.keys()\r\n                results = [dict(zip(keys, row)) for row in rows]\r\n\r\n            list_data = [Data(data=row, text=row['info']) for row in results]\r\n            self.status = list_data\r\n            return list_data\r\n\r\n        except SQLAlchemyError as e:\r\n            self.status = f\"Error executing query: {str(e)}\"\r\n            return [Data(data={\"error\": str(e)})]\r\n\r\n    def build_tool(self) -> Tool:\r\n        return Tool(\r\n            name=\"sqlite_query_tool\",\r\n            description=\"Executes a given SQL query on a specified SQLite database.\",\r\n            func=self.run_model,\r\n        )\r\n\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "database_name",
                  "value": "database.db",
                  "display_name": "Database Name",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the SQLite database file.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "query",
                  "value": "SELECT field1, field2 FROM my_table",
                  "display_name": "SQL Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "SQL query to be executed on the database.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Executes a given SQL query on a specified SQLite database.",
              "base_classes": [
                "Data",
                "list",
                "Sequence",
                "Tool"
              ],
              "display_name": "SQLite Query Executor",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "list"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Sequence",
                    "Tool"
                  ],
                  "selected": "Sequence",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "database_name",
                "query"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "SQLiteQueryTool-hpGsE"
          },
          "id": "SQLiteQueryTool-hpGsE",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-14T17:22:07.151Z",
    "date_updated": "2024-08-14T17:22:07.228Z",
    "status": "Public",
    "sort": null,
    "user_updated": "cbc14150-3856-4a71-90b3-f9755a81b82b",
    "user_created": {
      "username": "Fabio Braga",
      "first_name": "Fabio",
      "last_name": "Braga",
      "id": "cbc14150-3856-4a71-90b3-f9755a81b82b"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.495Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}