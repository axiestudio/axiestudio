{
  "id": "99c5ef05-411f-42da-90e3-67628eaa7dbf",
  "name": "ReAct Agent",
  "description": "The ReAct Agent implements a specific architecture allowing the agent to reason when the retrieved information is not relevant or not. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "misbah",
    "first_name": "Menlo Park Lab",
    "last_name": "Lab",
    "id": "8ca3c638-244a-4d41-ae61-bc145776bd63",
    "full_name": "Menlo Park Lab Lab"
  },
  "store_url": "https://www.langflow.store/store/component/99c5ef05-411f-42da-90e3-67628eaa7dbf",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-19T19:07:29.639Z",
    "updated": "2024-09-19T19:07:29.692Z",
    "downloaded": "2025-08-19T17:50:07.172Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "ReAct Agent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "An LLM Model Object.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool",
                  "BaseTool"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, BoolInput\nfrom axiestudio.schema import Data\n\nfrom typing import List, Tuple\nimport os\nfrom typing import Union\nfrom axiestudio.field_typing import AgentExecutor\n\nfrom langchain.agents import AgentExecutor, create_react_agent\nfrom langchain_openai import OpenAI\nfrom langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.base.agents.agent import LCAgentComponent\n\nclass ReactAgent(LCToolsAgentComponent):\n    display_name = \"ReAct Agent\"\n    description = \"The ReAct Agent implements a specific architecture allowing the agent to reason when the retrieved information is not relevant or not.\"\n    documentation: str = \"https://python.langchain.com/v0.1/docs/modules/agents/agent_types/react/\"\n    icon = \"LangChain\"\n    name = \"ReAct Agent\"\n\n    inputs = LCToolsAgentComponent._base_inputs + [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True, info=\"An LLM Model Object.\"),\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\", info=\"User Input Value\"),\n        MultilineInput(\n            name=\"prompt_template\", display_name=\"Prompt\", info=\"The prompt template. It must contain the'input' key.\", value=\"Answer the following questions as best you can. You have access to the following tools:\\n\\n{tools}\\n\\nUse the following format:\\n\\nQuestion: the input question you must answer\\nThought: you should always think about what to do\\nAction: the action to take, should be one of [{tool_names}]\\nAction Input: the input to the action\\nObservation: the result of the action\\n... (this Thought/Action/Action Input/Observation can repeat N times)\\nThought: I now know the final answer\\nFinal Answer: the final answer to the original input question\\n\\nBegin!\\n\\nQuestion: {input}\\nThought:{agent_scratchpad}\"\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_agent_response\"),\n        Output(display_name=\"Agent\", name=\"agent\", method=\"build_agent\"),\n    ]\n\n    def build_agent_response(self) -> Message:\n        prompt = PromptTemplate(\n            input_variables = [\"tools\", \"tool_names\", \"input\", \"agent_scratchpad\"],\n            template=self.prompt_template\n        )\n        agent = create_react_agent(self.llm, self.tools, prompt)\n        agent_executor = AgentExecutor(agent=agent, tools=self.tools, verbose=self.verbose, max_iterations=self.max_iterations)\n        output_agent = agent_executor.invoke({\"input\": self.input_value})[\"output\"]\n        self.status = Message(text=output_agent)\n        return Message(text=output_agent)\n    \n    def build_agent(self) -> AgentExecutor:\n        prompt = PromptTemplate(\n            input_variables = [\"tools\", \"tool_names\", \"input\", \"agent_scratchpad\"],\n            template=self.prompt_template\n        )\n        agent = create_react_agent(self.llm, self.tools, prompt)\n        agent_executor = AgentExecutor(agent=agent, tools=self.tools, verbose=self.verbose, max_iterations=self.max_iterations)\n        self.status = str(agent_executor)\n        return agent_executor",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "User Input Value",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 30,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "prompt_template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "prompt_template",
                "value": "Answer the following questions as best you can. You have access to the following tools:\n\n{tools}\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [{tool_names}]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought/Action/Action Input/Observation can repeat N times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin!\n\nQuestion: {input}\nThought:{agent_scratchpad}",
                "display_name": "Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The prompt template. It must contain the'input' key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "The ReAct Agent implements a specific architecture allowing the agent to reason when the retrieved information is not relevant or not.",
            "icon": "LangChain",
            "base_classes": [
              "AgentExecutor",
              "Message"
            ],
            "display_name": "ReAct Agent",
            "documentation": "https://python.langchain.com/v0.1/docs/modules/agents/agent_types/react/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "display_name": "Response",
                "method": "build_agent_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "AgentExecutor"
                ],
                "selected": "AgentExecutor",
                "name": "agent",
                "display_name": "Agent",
                "method": "build_agent",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "tools",
              "llm",
              "input_value",
              "prompt_template"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18",
            "official": false
          },
          "id": "ReAct Agent-AcFZC"
        },
        "id": "ReAct Agent-AcFZC",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "ReAct Agent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "99c5ef05-411f-42da-90e3-67628eaa7dbf",
    "name": "ReAct Agent",
    "description": "The ReAct Agent implements a specific architecture allowing the agent to reason when the retrieved information is not relevant or not.",
    "is_component": true,
    "liked_by_count": "16",
    "downloads_count": "172",
    "metadata": {
      "ReAct Agent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "ReAct Agent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "An LLM Model Object.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tools",
                  "value": "",
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool",
                    "BaseTool"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput",
                  "load_from_db": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, BoolInput\nfrom axiestudio.schema import Data\n\nfrom typing import List, Tuple\nimport os\nfrom typing import Union\nfrom axiestudio.field_typing import AgentExecutor\n\nfrom langchain.agents import AgentExecutor, create_react_agent\nfrom langchain_openai import OpenAI\nfrom langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.base.agents.agent import LCAgentComponent\n\nclass ReactAgent(LCToolsAgentComponent):\n    display_name = \"ReAct Agent\"\n    description = \"The ReAct Agent implements a specific architecture allowing the agent to reason when the retrieved information is not relevant or not.\"\n    documentation: str = \"https://python.langchain.com/v0.1/docs/modules/agents/agent_types/react/\"\n    icon = \"LangChain\"\n    name = \"ReAct Agent\"\n\n    inputs = LCToolsAgentComponent._base_inputs + [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True, info=\"An LLM Model Object.\"),\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\", info=\"User Input Value\"),\n        MultilineInput(\n            name=\"prompt_template\", display_name=\"Prompt\", info=\"The prompt template. It must contain the'input' key.\", value=\"Answer the following questions as best you can. You have access to the following tools:\\n\\n{tools}\\n\\nUse the following format:\\n\\nQuestion: the input question you must answer\\nThought: you should always think about what to do\\nAction: the action to take, should be one of [{tool_names}]\\nAction Input: the input to the action\\nObservation: the result of the action\\n... (this Thought/Action/Action Input/Observation can repeat N times)\\nThought: I now know the final answer\\nFinal Answer: the final answer to the original input question\\n\\nBegin!\\n\\nQuestion: {input}\\nThought:{agent_scratchpad}\"\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_agent_response\"),\n        Output(display_name=\"Agent\", name=\"agent\", method=\"build_agent\"),\n    ]\n\n    def build_agent_response(self) -> Message:\n        prompt = PromptTemplate(\n            input_variables = [\"tools\", \"tool_names\", \"input\", \"agent_scratchpad\"],\n            template=self.prompt_template\n        )\n        agent = create_react_agent(self.llm, self.tools, prompt)\n        agent_executor = AgentExecutor(agent=agent, tools=self.tools, verbose=self.verbose, max_iterations=self.max_iterations)\n        output_agent = agent_executor.invoke({\"input\": self.input_value})[\"output\"]\n        self.status = Message(text=output_agent)\n        return Message(text=output_agent)\n    \n    def build_agent(self) -> AgentExecutor:\n        prompt = PromptTemplate(\n            input_variables = [\"tools\", \"tool_names\", \"input\", \"agent_scratchpad\"],\n            template=self.prompt_template\n        )\n        agent = create_react_agent(self.llm, self.tools, prompt)\n        agent_executor = AgentExecutor(agent=agent, tools=self.tools, verbose=self.verbose, max_iterations=self.max_iterations)\n        self.status = str(agent_executor)\n        return agent_executor",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "handle_parsing_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "handle_parsing_errors",
                  "value": true,
                  "display_name": "Handle Parse Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input Value",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "User Input Value",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "max_iterations": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_iterations",
                  "value": 30,
                  "display_name": "Max Iterations",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "prompt_template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "prompt_template",
                  "value": "Answer the following questions as best you can. You have access to the following tools:\n\n{tools}\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [{tool_names}]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought/Action/Action Input/Observation can repeat N times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin!\n\nQuestion: {input}\nThought:{agent_scratchpad}",
                  "display_name": "Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The prompt template. It must contain the'input' key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "verbose",
                  "value": true,
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "The ReAct Agent implements a specific architecture allowing the agent to reason when the retrieved information is not relevant or not.",
              "icon": "LangChain",
              "base_classes": [
                "AgentExecutor",
                "Message"
              ],
              "display_name": "ReAct Agent",
              "documentation": "https://python.langchain.com/v0.1/docs/modules/agents/agent_types/react/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "response",
                  "display_name": "Response",
                  "method": "build_agent_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "AgentExecutor"
                  ],
                  "selected": "AgentExecutor",
                  "name": "agent",
                  "display_name": "Agent",
                  "method": "build_agent",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "handle_parsing_errors",
                "verbose",
                "max_iterations",
                "tools",
                "llm",
                "input_value",
                "prompt_template"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18",
              "official": false
            },
            "id": "ReAct Agent-AcFZC"
          },
          "id": "ReAct Agent-AcFZC",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-09-19T19:07:29.639Z",
    "date_updated": "2024-09-19T19:07:29.692Z",
    "status": "Public",
    "sort": null,
    "user_updated": "8ca3c638-244a-4d41-ae61-bc145776bd63",
    "user_created": {
      "username": "misbah",
      "first_name": "Menlo Park Lab",
      "last_name": "Lab",
      "id": "8ca3c638-244a-4d41-ae61-bc145776bd63"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.109Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 10,
    "converter_version": "1.0.0"
  }
}