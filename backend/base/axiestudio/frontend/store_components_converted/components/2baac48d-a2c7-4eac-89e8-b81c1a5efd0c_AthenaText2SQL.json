{
  "id": "2baac48d-a2c7-4eac-89e8-b81c1a5efd0c",
  "name": "AthenaText2SQL",
  "description": "",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "ck",
    "first_name": "chriskaspar",
    "last_name": "aws",
    "id": "a7b85039-5948-473b-8636-f32e985cae24",
    "full_name": "chriskaspar aws"
  },
  "store_url": "https://www.langflow.store/store/component/2baac48d-a2c7-4eac-89e8-b81c1a5efd0c",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-29T22:09:55.171Z",
    "updated": "2024-08-29T22:09:55.194Z",
    "downloaded": "2025-08-19T17:50:06.304Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": true,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "AthenaSQLDatabaseComponent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "aws_access_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_access_key",
                "value": "",
                "display_name": "Access Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "aws_secret_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_secret_key",
                "value": "",
                "display_name": "Secret Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import logging\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs import StrInput, SecretStrInput, MultilineInput\nfrom axiestudio.io import Output\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_AI\nimport boto3\nimport time\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nclass AthenaSQLDatabaseComponent(Component):\n    icon = \"database\"  # Choose an appropriate icon from lucide.dev/icons\n\n    inputs = [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(name=\"prompt\", display_name=\"Prompt\", info=\"The input prompt for generating SQL.\"),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        StrInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        StrInput(name=\"s3_staging_dir\", display_name=\"S3 Staging Directory\"),\n        StrInput(name=\"database_name\", display_name=\"Database Name\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Message\", name=\"build_results\", method=\"build_results\")\n    ]\n\n    async def build_results(self) -> Message:\n        # Retrieve input values using self.get_input or equivalent method\n        aws_access_key = self.aws_access_key\n        aws_secret_key = self.aws_secret_key \n        region_name = self.region_name \n        s3_staging_dir = self.s3_staging_dir \n        database_name = self.database_name \n\n        \n        logger.debug(\"Region Name: %s\", region_name)\n        logger.debug(\"S3 Staging Directory: %s\", s3_staging_dir)\n        logger.debug(\"Database Name: %s\", database_name)\n\n        # Initialize AWS session\n        session = boto3.Session(\n            aws_access_key_id=aws_access_key,\n            aws_secret_access_key=aws_secret_key,\n            region_name=region_name,\n        )\n\n        athena_client = session.client('athena')\n\n        # Generate SQL using LLM\n        prompt = self.prompt\n        llm = self.llm\n        logger.debug(\"Prompt: %s\", prompt)\n        generated_sql = await self.generate_sql(prompt, llm)\n\n        # Execute the SQL query using Athena API\n        query_results = await self.execute_query(athena_client, generated_sql, database_name, s3_staging_dir)\n\n        # Return results as a Message\n        return {\n            \"message\": Message(\n                content=query_results,\n                sender_name=MESSAGE_SENDER_NAME_AI,\n                sender_type=MESSAGE_SENDER_AI\n            )\n        }\n\n    async def generate_sql(self, prompt: str, llm, max_attempts: int = 4) -> str:\n        attempt = 0\n        sql_query = None  # Initialize sql_query to None to ensure it's defined\n        while attempt < max_attempts:\n            logger.debug(\"Attempt %d to generate SQL\", attempt + 1)\n            try:\n                generated_sql = await llm.predict(prompt)\n                logger.debug(\"Generated SQL: %s\", generated_sql)\n                \n                if \"```\" not in generated_sql:\n                    logger.warning(\"No code block found in generated SQL. Full response: %s\", generated_sql)\n                    raise ValueError(\"Invalid SQL format. No code block detected.\")\n\n                query_str = generated_sql.split(\"```\")[1]\n                query_str = \" \".join(query_str.split(\"\\n\")).strip()\n                sql_query = query_str[3:] if query_str.startswith(\"sql\") else query_str\n                logger.debug(\"Parsed SQL Query: %s\", sql_query)\n\n                # Implement your logic to check the SQL syntax\n                syntax_check_msg = await self.syntax_checker(sql_query)\n                logger.debug(\"SQL Syntax Check Result: %s\", syntax_check_msg)\n\n                if syntax_check_msg == 'Passed':\n                    logger.debug(\"SQL query passed syntax check.\")\n                    return sql_query\n                else:\n                    logger.warning(\"SQL syntax error: %s\", syntax_check_msg)\n                    prompt = (\n                        f\"{prompt}\\n\"\n                        f\"This is a syntax error: {syntax_check_msg}. \"\n                        f\"Please generate an alternative SQL query which corrects the syntax error.\"\n                    )\n                    attempt += 1\n            except Exception as e:\n                logger.error(\"Error during SQL generation: %s\", str(e))\n                attempt += 1\n\n        if sql_query is None:\n            logger.error(\"Failed to generate a valid SQL query after %d attempts\", max_attempts)\n            raise ValueError(\"Failed to generate a valid SQL query after multiple attempts.\")\n        return sql_query\n\n    async def syntax_checker(self, sql_query: str) -> str:\n        # Implement syntax checking logic here, return 'Passed' if successful\n        logger.debug(\"Checking SQL syntax for query: %s\", sql_query)\n        # In reality, you'd run some checks here. For now, we assume it passes.\n        return 'Passed'\n\n    async def execute_query(self, athena_client, sql_query: str, database_name: str, s3_staging_dir: str) -> str:\n        # Start the query execution\n        logger.debug(\"Executing SQL query: %s\", sql_query)\n        response = athena_client.start_query_execution(\n            QueryString=sql_query,\n            QueryExecutionContext={'Database': database_name},\n            ResultConfiguration={'OutputLocation': s3_staging_dir}\n        )\n        query_execution_id = response['QueryExecutionId']\n        logger.debug(\"Query Execution ID: %s\", query_execution_id)\n\n        # Wait for the query to complete\n        while True:\n            response = athena_client.get_query_execution(QueryExecutionId=query_execution_id)\n            status = response['QueryExecution']['Status']['State']\n            logger.debug(\"Query status: %s\", status)\n            if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\n                break\n            time.sleep(1)  # Wait before checking the query status again\n\n        if status == 'SUCCEEDED':\n            # Fetch the query results\n            results = athena_client.get_query_results(QueryExecutionId=query_execution_id)\n            return self.format_results(results)\n        else:\n            logger.error(\"Query failed with status %s: %s\", status, response['QueryExecution']['Status']['StateChangeReason'])\n            return f\"Query {status}: {response['QueryExecution']['Status']['StateChangeReason']}\"\n\n    def format_results(self, results):\n        # Format the results from Athena into a readable string or another structure\n        formatted_results = []\n        for row in results['ResultSet']['Rows']:\n            formatted_results.append([col['VarCharValue'] for col in row['Data']])\n\n        return formatted_results\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "database_name",
                "value": "athena_db",
                "display_name": "Database Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "prompt",
                "value": "get top 3 customer",
                "display_name": "Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input prompt for generating SQL.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "region_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "region_name",
                "value": "us-east-1",
                "display_name": "Region Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "s3_staging_dir": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "s3_staging_dir",
                "value": "s3://athena-destination-store-ckaspar/",
                "display_name": "S3 Staging Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "icon": "database",
            "base_classes": [
              "Message"
            ],
            "display_name": "AthenaText2SQL",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "build_results",
                "display_name": "Message",
                "method": "build_results",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "llm",
              "prompt",
              "aws_access_key",
              "aws_secret_key",
              "region_name",
              "s3_staging_dir",
              "database_name"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "CustomComponent-izHm8"
        },
        "id": "CustomComponent-izHm8",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "2baac48d-a2c7-4eac-89e8-b81c1a5efd0c",
    "name": "AthenaText2SQL",
    "description": "",
    "is_component": true,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": true,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "AthenaSQLDatabaseComponent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "aws_access_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_access_key",
                  "value": "",
                  "display_name": "Access Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "aws_secret_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_secret_key",
                  "value": "",
                  "display_name": "Secret Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import logging\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs import StrInput, SecretStrInput, MultilineInput\nfrom axiestudio.io import Output\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_AI\nimport boto3\nimport time\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nclass AthenaSQLDatabaseComponent(Component):\n    icon = \"database\"  # Choose an appropriate icon from lucide.dev/icons\n\n    inputs = [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(name=\"prompt\", display_name=\"Prompt\", info=\"The input prompt for generating SQL.\"),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        StrInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        StrInput(name=\"s3_staging_dir\", display_name=\"S3 Staging Directory\"),\n        StrInput(name=\"database_name\", display_name=\"Database Name\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Message\", name=\"build_results\", method=\"build_results\")\n    ]\n\n    async def build_results(self) -> Message:\n        # Retrieve input values using self.get_input or equivalent method\n        aws_access_key = self.aws_access_key\n        aws_secret_key = self.aws_secret_key \n        region_name = self.region_name \n        s3_staging_dir = self.s3_staging_dir \n        database_name = self.database_name \n\n        \n        logger.debug(\"Region Name: %s\", region_name)\n        logger.debug(\"S3 Staging Directory: %s\", s3_staging_dir)\n        logger.debug(\"Database Name: %s\", database_name)\n\n        # Initialize AWS session\n        session = boto3.Session(\n            aws_access_key_id=aws_access_key,\n            aws_secret_access_key=aws_secret_key,\n            region_name=region_name,\n        )\n\n        athena_client = session.client('athena')\n\n        # Generate SQL using LLM\n        prompt = self.prompt\n        llm = self.llm\n        logger.debug(\"Prompt: %s\", prompt)\n        generated_sql = await self.generate_sql(prompt, llm)\n\n        # Execute the SQL query using Athena API\n        query_results = await self.execute_query(athena_client, generated_sql, database_name, s3_staging_dir)\n\n        # Return results as a Message\n        return {\n            \"message\": Message(\n                content=query_results,\n                sender_name=MESSAGE_SENDER_NAME_AI,\n                sender_type=MESSAGE_SENDER_AI\n            )\n        }\n\n    async def generate_sql(self, prompt: str, llm, max_attempts: int = 4) -> str:\n        attempt = 0\n        sql_query = None  # Initialize sql_query to None to ensure it's defined\n        while attempt < max_attempts:\n            logger.debug(\"Attempt %d to generate SQL\", attempt + 1)\n            try:\n                generated_sql = await llm.predict(prompt)\n                logger.debug(\"Generated SQL: %s\", generated_sql)\n                \n                if \"```\" not in generated_sql:\n                    logger.warning(\"No code block found in generated SQL. Full response: %s\", generated_sql)\n                    raise ValueError(\"Invalid SQL format. No code block detected.\")\n\n                query_str = generated_sql.split(\"```\")[1]\n                query_str = \" \".join(query_str.split(\"\\n\")).strip()\n                sql_query = query_str[3:] if query_str.startswith(\"sql\") else query_str\n                logger.debug(\"Parsed SQL Query: %s\", sql_query)\n\n                # Implement your logic to check the SQL syntax\n                syntax_check_msg = await self.syntax_checker(sql_query)\n                logger.debug(\"SQL Syntax Check Result: %s\", syntax_check_msg)\n\n                if syntax_check_msg == 'Passed':\n                    logger.debug(\"SQL query passed syntax check.\")\n                    return sql_query\n                else:\n                    logger.warning(\"SQL syntax error: %s\", syntax_check_msg)\n                    prompt = (\n                        f\"{prompt}\\n\"\n                        f\"This is a syntax error: {syntax_check_msg}. \"\n                        f\"Please generate an alternative SQL query which corrects the syntax error.\"\n                    )\n                    attempt += 1\n            except Exception as e:\n                logger.error(\"Error during SQL generation: %s\", str(e))\n                attempt += 1\n\n        if sql_query is None:\n            logger.error(\"Failed to generate a valid SQL query after %d attempts\", max_attempts)\n            raise ValueError(\"Failed to generate a valid SQL query after multiple attempts.\")\n        return sql_query\n\n    async def syntax_checker(self, sql_query: str) -> str:\n        # Implement syntax checking logic here, return 'Passed' if successful\n        logger.debug(\"Checking SQL syntax for query: %s\", sql_query)\n        # In reality, you'd run some checks here. For now, we assume it passes.\n        return 'Passed'\n\n    async def execute_query(self, athena_client, sql_query: str, database_name: str, s3_staging_dir: str) -> str:\n        # Start the query execution\n        logger.debug(\"Executing SQL query: %s\", sql_query)\n        response = athena_client.start_query_execution(\n            QueryString=sql_query,\n            QueryExecutionContext={'Database': database_name},\n            ResultConfiguration={'OutputLocation': s3_staging_dir}\n        )\n        query_execution_id = response['QueryExecutionId']\n        logger.debug(\"Query Execution ID: %s\", query_execution_id)\n\n        # Wait for the query to complete\n        while True:\n            response = athena_client.get_query_execution(QueryExecutionId=query_execution_id)\n            status = response['QueryExecution']['Status']['State']\n            logger.debug(\"Query status: %s\", status)\n            if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\n                break\n            time.sleep(1)  # Wait before checking the query status again\n\n        if status == 'SUCCEEDED':\n            # Fetch the query results\n            results = athena_client.get_query_results(QueryExecutionId=query_execution_id)\n            return self.format_results(results)\n        else:\n            logger.error(\"Query failed with status %s: %s\", status, response['QueryExecution']['Status']['StateChangeReason'])\n            return f\"Query {status}: {response['QueryExecution']['Status']['StateChangeReason']}\"\n\n    def format_results(self, results):\n        # Format the results from Athena into a readable string or another structure\n        formatted_results = []\n        for row in results['ResultSet']['Rows']:\n            formatted_results.append([col['VarCharValue'] for col in row['Data']])\n\n        return formatted_results\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "database_name",
                  "value": "athena_db",
                  "display_name": "Database Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "prompt",
                  "value": "get top 3 customer",
                  "display_name": "Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The input prompt for generating SQL.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "region_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "region_name",
                  "value": "us-east-1",
                  "display_name": "Region Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "s3_staging_dir": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "s3_staging_dir",
                  "value": "s3://athena-destination-store-ckaspar/",
                  "display_name": "S3 Staging Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "icon": "database",
              "base_classes": [
                "Message"
              ],
              "display_name": "AthenaText2SQL",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "build_results",
                  "display_name": "Message",
                  "method": "build_results",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "llm",
                "prompt",
                "aws_access_key",
                "aws_secret_key",
                "region_name",
                "s3_staging_dir",
                "database_name"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "CustomComponent-izHm8"
          },
          "id": "CustomComponent-izHm8",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-29T22:09:55.171Z",
    "date_updated": "2024-08-29T22:09:55.194Z",
    "status": "Public",
    "sort": null,
    "user_updated": "a7b85039-5948-473b-8636-f32e985cae24",
    "user_created": {
      "username": "ck",
      "first_name": "chriskaspar",
      "last_name": "aws",
      "id": "a7b85039-5948-473b-8636-f32e985cae24"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:09.407Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 10,
    "converter_version": "1.0.0"
  }
}