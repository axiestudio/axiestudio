{
  "id": "d1563721-e3b3-4664-b59c-2a8841c0e29b",
  "name": "Untitled document (1)",
  "description": "Language Models, Mapped and Mastered. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "jifeng",
    "first_name": "乱红倾世",
    "last_name": "lhqs",
    "id": "f7fd126a-b3da-42d2-a893-2d195fa3bd87",
    "full_name": "乱红倾世 lhqs"
  },
  "store_url": "https://www.langflow.store/store/component/d1563721-e3b3-4664-b59c-2a8841c0e29b",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-05T14:10:21.237Z",
    "updated": "2024-06-05T14:10:21.268Z",
    "downloaded": "2025-08-19T17:50:05.353Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a43",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatOpenAISpecs-sfbZi",
        "type": "genericNode",
        "position": {
          "x": 346.709679090716,
          "y": -209.59560082837197
        },
        "data": {
          "type": "ChatOpenAISpecs",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n    icon = \"OpenAI\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\"display_name\": \"Model Name\", \"advanced\": False, \"options\": MODEL_NAMES},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 0,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4o\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> BaseLanguageModel:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        return ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-3.5-turbo",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "icon": "OpenAI",
            "base_classes": [
              "BaseLanguageModel",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOpenAISpecs-sfbZi"
        },
        "selected": false,
        "width": 384,
        "height": 563,
        "positionAbsolute": {
          "x": 346.709679090716,
          "y": -209.59560082837197
        },
        "dragging": false
      },
      {
        "id": "AgentComponent-hxoXa",
        "type": "genericNode",
        "position": {
          "x": 1122.6708753850494,
          "y": 10.463209950926398
        },
        "data": {
          "type": "AgentComponent",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "tools": {
                "type": "Tool",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tools",
                "display_name": "Tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, List, Optional, cast\n\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.prompts.chat import HumanMessagePromptTemplate, SystemMessagePromptTemplate\n\nfrom axiestudio.base.agents.agent import LCAgentComponent\nfrom axiestudio.base.agents.utils import AGENTS, AgentSpec, get_agents_list\nfrom axiestudio.field_typing import BaseLanguageModel, Text, Tool\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.schema.schema import Record\n\n\nclass AgentComponent(LCAgentComponent):\n    display_name = \"Agent\"\n    description = \"Run any LangChain agent using a simplified interface.\"\n    field_order = [\n        \"agent_name\",\n        \"llm\",\n        \"tools\",\n        \"prompt\",\n        \"tool_template\",\n        \"handle_parsing_errors\",\n        \"memory\",\n        \"input_value\",\n    ]\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"user_prompt\": {\n                \"display_name\": \"Prompt\",\n                \"multiline\": True,\n                \"info\": \"This prompt must contain 'tools' and 'agent_scratchpad' keys.\",\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to be passed to the LLM.\",\n                \"advanced\": True,\n            },\n            \"tool_template\": {\n                \"display_name\": \"Tool Template\",\n                \"info\": \"Template for rendering tools in the prompt. Tools have 'name' and 'description' keys.\",\n                \"advanced\": True,\n            },\n            \"handle_parsing_errors\": {\n                \"display_name\": \"Handle Parsing Errors\",\n                \"info\": \"If True, the agent will handle parsing errors. If False, the agent will raise an error.\",\n                \"advanced\": True,\n            },\n            \"message_history\": {\n                \"display_name\": \"Message History\",\n                \"info\": \"Message history to pass to the agent.\",\n            },\n            \"input_value\": {\n                \"display_name\": \"Input\",\n                \"info\": \"Input text to pass to the agent.\",\n            },\n            \"langchain_hub_api_key\": {\n                \"display_name\": \"LangChain Hub API Key\",\n                \"info\": \"API key to use for LangChain Hub. If provided, prompts will be fetched from LangChain Hub.\",\n                \"advanced\": True,\n            },\n        }\n\n\n\n\n    async def build(\n        self,\n        input_value: str,\n        llm: BaseLanguageModel,\n        tools: List[Tool],\n        system_message: str = \"You are a helpful assistant. Help the user answer any questions.\",\n        user_prompt: str = \"{input}\",\n        handle_parsing_errors: bool = True,\n    ) -> Text:\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\n                    \"system\",\n                    \"You are a helpful assistant. Make sure to use the tavily_search_results_json tool for information.\",\n                ),\n                (\"placeholder\", \"{chat_history}\"),\n                (\"human\", \"{input}\"),\n                (\"placeholder\", \"{agent_scratchpad}\"),\n            ]\n        )\n        \n        # Construct the Tools agent\n        agent = create_tool_calling_agent(llm, tools, prompt)\n        agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n        result = agent_executor.invoke({\"input\": input_value})\n        \n        self.status = result\n        return result\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "handle_parsing_errors",
                "display_name": "Handle Parsing Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If True, the agent will handle parsing errors. If False, the agent will raise an error.",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "Input text to pass to the agent.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "今天发生了哪些事"
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "You are a helpful assistant. Help the user answer any questions.",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to be passed to the LLM.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "user_prompt": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{input}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "user_prompt",
                "display_name": "Prompt",
                "advanced": false,
                "dynamic": false,
                "info": "This prompt must contain 'tools' and 'agent_scratchpad' keys.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Run any LangChain agent using a simplified interface.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Agent",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "llm": null,
              "tools": null,
              "system_message": null,
              "user_prompt": null,
              "handle_parsing_errors": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "agent_name",
              "llm",
              "tools",
              "prompt",
              "tool_template",
              "handle_parsing_errors",
              "memory",
              "input_value"
            ],
            "beta": false
          },
          "id": "AgentComponent-hxoXa",
          "description": "Run any LangChain agent using a simplified interface.",
          "display_name": "Agent"
        },
        "selected": false,
        "width": 384,
        "height": 499,
        "positionAbsolute": {
          "x": 1122.6708753850494,
          "y": 10.463209950926398
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-oHWtv",
        "type": "genericNode",
        "position": {
          "x": 454.19254615013904,
          "y": 482.99219214275735
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\nfrom langchain_core.tools import tool\nfrom langchain.agents import tool, initialize_agent\nfrom axiestudio.field_typing import BaseLanguageModel, Text, Tool\nimport re\nimport os\nos.environ['SERPAPI_API_KEY'] = '6440db49d273f66af22ca3a3aa6115e4f6be60dc9ef4ef403ccfd67f4d099e20'\nos.environ['OPENAI_API_KEY'] = 'sk-PLACEHOLDER_API_KEY'\n# os.environ[\"LANGCHAIN_TRACING_V2\"] = \"true\"\n# os.environ[\"LANGCHAIN_PROJECT\"] = \"Langchain-FirstTest\"\n# os.environ[\"LANGCHAIN_API_KEY\"] = \"ls__dc51e669849b4e6c8c033095fddde6dd\"\nos.environ[\"TAVILY_API_KEY\"] = \"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\"\n\n\nfrom langchain_community.tools import DuckDuckGoSearchRun\nfrom duckduckgo_search import DDGS\n\nclass Component(CustomComponent):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n\n    def build_config(self):\n        return {}\n\n    def build(self) -> Tool:\n        @tool(\"duckduckgo_search\")\n        def duckduckgo_search(query):\n            \"duckduck search\"\n            results = DDGS().text(query, max_results=5)\n            return results\n        return duckduckgo_search\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Use as a template to create your own component.",
            "icon": "custom_components",
            "base_classes": [
              "BaseTool",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "Tool"
            ],
            "display_name": "DuckDuckGoSearchRun",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {},
            "output_types": [
              "Tool"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-oHWtv",
          "description": "Use as a template to create your own component.",
          "display_name": "DuckDuckGoSearchRun"
        },
        "selected": true,
        "width": 384,
        "height": 199,
        "positionAbsolute": {
          "x": 454.19254615013904,
          "y": 482.99219214275735
        },
        "dragging": true
      },
      {
        "id": "TextOutput-BYNIv",
        "type": "genericNode",
        "position": {
          "x": 1822.2484543059416,
          "y": 330.6187382921494
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Output",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-BYNIv"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ChatOpenAISpecs-sfbZi",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-sfbZiœ}",
        "target": "AgentComponent-hxoXa",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "AgentComponent-hxoXa",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable"
            ],
            "dataType": "ChatOpenAISpecs",
            "id": "ChatOpenAISpecs-sfbZi"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-ChatOpenAISpecs-sfbZi{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-sfbZiœ}-AgentComponent-hxoXa{œfieldNameœ:œllmœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "CustomComponent-oHWtv",
        "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-oHWtvœ}",
        "target": "AgentComponent-hxoXa",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentComponent-hxoXa",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseTool",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "Tool"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-oHWtv"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-oHWtv{œbaseClassesœ:[œBaseToolœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-oHWtvœ}-AgentComponent-hxoXa{œfieldNameœ:œtoolsœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œToolœ}"
      },
      {
        "source": "AgentComponent-hxoXa",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAgentComponentœ,œidœ:œAgentComponent-hxoXaœ}",
        "target": "TextOutput-BYNIv",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-BYNIvœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-BYNIv",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "AgentComponent",
            "id": "AgentComponent-hxoXa"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-AgentComponent-hxoXa{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAgentComponentœ,œidœ:œAgentComponent-hxoXaœ}-TextOutput-BYNIv{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-BYNIvœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": -247.28490185172313,
      "y": 9.94313698914442,
      "zoom": 0.8044083709419259
    }
  },
  "metadata": {
    "ChatOpenAISpecs": {
      "count": 1
    },
    "AgentComponent": {
      "count": 1
    },
    "CustomComponent": {
      "count": 1
    },
    "TextOutput": {
      "count": 1
    },
    "total": 4
  },
  "original": {
    "id": "d1563721-e3b3-4664-b59c-2a8841c0e29b",
    "name": "Untitled document (1)",
    "description": "Language Models, Mapped and Mastered.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "2",
    "metadata": {
      "ChatOpenAISpecs": {
        "count": 1
      },
      "AgentComponent": {
        "count": 1
      },
      "CustomComponent": {
        "count": 1
      },
      "TextOutput": {
        "count": 1
      },
      "total": 4
    },
    "last_tested_version": "1.0.0a43",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatOpenAISpecs-sfbZi",
          "type": "genericNode",
          "position": {
            "x": 346.709679090716,
            "y": -209.59560082837197
          },
          "data": {
            "type": "ChatOpenAISpecs",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n    icon = \"OpenAI\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\"display_name\": \"Model Name\", \"advanced\": False, \"options\": MODEL_NAMES},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 0,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4o\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> BaseLanguageModel:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        return ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-3.5-turbo",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "icon": "OpenAI",
              "base_classes": [
                "BaseLanguageModel",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOpenAISpecs-sfbZi"
          },
          "selected": false,
          "width": 384,
          "height": 563,
          "positionAbsolute": {
            "x": 346.709679090716,
            "y": -209.59560082837197
          },
          "dragging": false
        },
        {
          "id": "AgentComponent-hxoXa",
          "type": "genericNode",
          "position": {
            "x": 1122.6708753850494,
            "y": 10.463209950926398
          },
          "data": {
            "type": "AgentComponent",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "tools": {
                  "type": "Tool",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tools",
                  "display_name": "Tools",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, List, Optional, cast\n\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.prompts.chat import HumanMessagePromptTemplate, SystemMessagePromptTemplate\n\nfrom axiestudio.base.agents.agent import LCAgentComponent\nfrom axiestudio.base.agents.utils import AGENTS, AgentSpec, get_agents_list\nfrom axiestudio.field_typing import BaseLanguageModel, Text, Tool\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.schema.schema import Record\n\n\nclass AgentComponent(LCAgentComponent):\n    display_name = \"Agent\"\n    description = \"Run any LangChain agent using a simplified interface.\"\n    field_order = [\n        \"agent_name\",\n        \"llm\",\n        \"tools\",\n        \"prompt\",\n        \"tool_template\",\n        \"handle_parsing_errors\",\n        \"memory\",\n        \"input_value\",\n    ]\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"user_prompt\": {\n                \"display_name\": \"Prompt\",\n                \"multiline\": True,\n                \"info\": \"This prompt must contain 'tools' and 'agent_scratchpad' keys.\",\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to be passed to the LLM.\",\n                \"advanced\": True,\n            },\n            \"tool_template\": {\n                \"display_name\": \"Tool Template\",\n                \"info\": \"Template for rendering tools in the prompt. Tools have 'name' and 'description' keys.\",\n                \"advanced\": True,\n            },\n            \"handle_parsing_errors\": {\n                \"display_name\": \"Handle Parsing Errors\",\n                \"info\": \"If True, the agent will handle parsing errors. If False, the agent will raise an error.\",\n                \"advanced\": True,\n            },\n            \"message_history\": {\n                \"display_name\": \"Message History\",\n                \"info\": \"Message history to pass to the agent.\",\n            },\n            \"input_value\": {\n                \"display_name\": \"Input\",\n                \"info\": \"Input text to pass to the agent.\",\n            },\n            \"langchain_hub_api_key\": {\n                \"display_name\": \"LangChain Hub API Key\",\n                \"info\": \"API key to use for LangChain Hub. If provided, prompts will be fetched from LangChain Hub.\",\n                \"advanced\": True,\n            },\n        }\n\n\n\n\n    async def build(\n        self,\n        input_value: str,\n        llm: BaseLanguageModel,\n        tools: List[Tool],\n        system_message: str = \"You are a helpful assistant. Help the user answer any questions.\",\n        user_prompt: str = \"{input}\",\n        handle_parsing_errors: bool = True,\n    ) -> Text:\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\n                    \"system\",\n                    \"You are a helpful assistant. Make sure to use the tavily_search_results_json tool for information.\",\n                ),\n                (\"placeholder\", \"{chat_history}\"),\n                (\"human\", \"{input}\"),\n                (\"placeholder\", \"{agent_scratchpad}\"),\n            ]\n        )\n        \n        # Construct the Tools agent\n        agent = create_tool_calling_agent(llm, tools, prompt)\n        agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n        result = agent_executor.invoke({\"input\": input_value})\n        \n        self.status = result\n        return result\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "handle_parsing_errors": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "handle_parsing_errors",
                  "display_name": "Handle Parsing Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, the agent will handle parsing errors. If False, the agent will raise an error.",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Input text to pass to the agent.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "今天发生了哪些事"
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "You are a helpful assistant. Help the user answer any questions.",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to be passed to the LLM.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "user_prompt": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{input}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "user_prompt",
                  "display_name": "Prompt",
                  "advanced": false,
                  "dynamic": false,
                  "info": "This prompt must contain 'tools' and 'agent_scratchpad' keys.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Run any LangChain agent using a simplified interface.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Agent",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "llm": null,
                "tools": null,
                "system_message": null,
                "user_prompt": null,
                "handle_parsing_errors": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "agent_name",
                "llm",
                "tools",
                "prompt",
                "tool_template",
                "handle_parsing_errors",
                "memory",
                "input_value"
              ],
              "beta": false
            },
            "id": "AgentComponent-hxoXa",
            "description": "Run any LangChain agent using a simplified interface.",
            "display_name": "Agent"
          },
          "selected": false,
          "width": 384,
          "height": 499,
          "positionAbsolute": {
            "x": 1122.6708753850494,
            "y": 10.463209950926398
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-oHWtv",
          "type": "genericNode",
          "position": {
            "x": 454.19254615013904,
            "y": 482.99219214275735
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\nfrom langchain_core.tools import tool\nfrom langchain.agents import tool, initialize_agent\nfrom axiestudio.field_typing import BaseLanguageModel, Text, Tool\nimport re\nimport os\nos.environ['SERPAPI_API_KEY'] = '6440db49d273f66af22ca3a3aa6115e4f6be60dc9ef4ef403ccfd67f4d099e20'\nos.environ['OPENAI_API_KEY'] = 'sk-PLACEHOLDER_API_KEY'\n# os.environ[\"LANGCHAIN_TRACING_V2\"] = \"true\"\n# os.environ[\"LANGCHAIN_PROJECT\"] = \"Langchain-FirstTest\"\n# os.environ[\"LANGCHAIN_API_KEY\"] = \"ls__dc51e669849b4e6c8c033095fddde6dd\"\nos.environ[\"TAVILY_API_KEY\"] = \"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\"\n\n\nfrom langchain_community.tools import DuckDuckGoSearchRun\nfrom duckduckgo_search import DDGS\n\nclass Component(CustomComponent):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n\n    def build_config(self):\n        return {}\n\n    def build(self) -> Tool:\n        @tool(\"duckduckgo_search\")\n        def duckduckgo_search(query):\n            \"duckduck search\"\n            results = DDGS().text(query, max_results=5)\n            return results\n        return duckduckgo_search\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Use as a template to create your own component.",
              "icon": "custom_components",
              "base_classes": [
                "BaseTool",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "Tool"
              ],
              "display_name": "DuckDuckGoSearchRun",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {},
              "output_types": [
                "Tool"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-oHWtv",
            "description": "Use as a template to create your own component.",
            "display_name": "DuckDuckGoSearchRun"
          },
          "selected": true,
          "width": 384,
          "height": 199,
          "positionAbsolute": {
            "x": 454.19254615013904,
            "y": 482.99219214275735
          },
          "dragging": true
        },
        {
          "id": "TextOutput-BYNIv",
          "type": "genericNode",
          "position": {
            "x": 1822.2484543059416,
            "y": 330.6187382921494
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: Optional[str] = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Output",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-BYNIv"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "ChatOpenAISpecs-sfbZi",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-sfbZiœ}",
          "target": "AgentComponent-hxoXa",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "AgentComponent-hxoXa",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable"
              ],
              "dataType": "ChatOpenAISpecs",
              "id": "ChatOpenAISpecs-sfbZi"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-ChatOpenAISpecs-sfbZi{œbaseClassesœ:[œBaseLanguageModelœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ],œdataTypeœ:œChatOpenAISpecsœ,œidœ:œChatOpenAISpecs-sfbZiœ}-AgentComponent-hxoXa{œfieldNameœ:œllmœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "CustomComponent-oHWtv",
          "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-oHWtvœ}",
          "target": "AgentComponent-hxoXa",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentComponent-hxoXa",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseTool",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "Tool"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-oHWtv"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-oHWtv{œbaseClassesœ:[œBaseToolœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-oHWtvœ}-AgentComponent-hxoXa{œfieldNameœ:œtoolsœ,œidœ:œAgentComponent-hxoXaœ,œinputTypesœ:null,œtypeœ:œToolœ}"
        },
        {
          "source": "AgentComponent-hxoXa",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAgentComponentœ,œidœ:œAgentComponent-hxoXaœ}",
          "target": "TextOutput-BYNIv",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-BYNIvœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-BYNIv",
              "inputTypes": [
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "AgentComponent",
              "id": "AgentComponent-hxoXa"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-AgentComponent-hxoXa{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAgentComponentœ,œidœ:œAgentComponent-hxoXaœ}-TextOutput-BYNIv{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-BYNIvœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": -247.28490185172313,
        "y": 9.94313698914442,
        "zoom": 0.8044083709419259
      }
    },
    "date_created": "2024-06-05T14:10:21.237Z",
    "date_updated": "2024-06-05T14:10:21.268Z",
    "status": "Public",
    "sort": null,
    "user_updated": "f7fd126a-b3da-42d2-a893-2d195fa3bd87",
    "user_created": {
      "username": "jifeng",
      "first_name": "乱红倾世",
      "last_name": "lhqs",
      "id": "f7fd126a-b3da-42d2-a893-2d195fa3bd87"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.895Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 32,
    "converter_version": "1.0.0"
  }
}