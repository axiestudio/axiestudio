{
  "id": "56b288ba-a4f4-4b9b-ac7a-8a3aaa0e4086",
  "name": "ACETEK - Vectara Example",
  "description": "Student Handbook (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "WookeysAI",
    "first_name": "Vinayak",
    "last_name": "Habbu",
    "id": "25afb7e2-5b9a-4f7c-a4a8-d5884a0b12cb",
    "full_name": "Vinayak Habbu"
  },
  "store_url": "https://www.langflow.store/store/component/56b288ba-a4f4-4b9b-ac7a-8a3aaa0e4086",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-04-20T15:13:46.681Z",
    "updated": "2024-04-20T15:13:46.721Z",
    "downloaded": "2025-08-19T17:50:04.999Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.16",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "width": 384,
        "height": 339,
        "id": "RetrievalQA-8LwsV",
        "type": "genericNode",
        "position": {
          "x": 1338.4006276430111,
          "y": 172.3464189357058
        },
        "data": {
          "type": "RetrievalQA",
          "node": {
            "template": {
              "callbacks": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                "list": true,
                "display_name": "callbacks"
              },
              "combine_documents_chain": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "combine_documents_chain",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseCombineDocumentsChain",
                "list": false
              },
              "memory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseMemory",
                "list": false,
                "display_name": "memory"
              },
              "retriever": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseRetriever",
                "list": false
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "query",
                "password": false,
                "name": "input_key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "display_name": "input_key"
              },
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false,
                "display_name": "metadata"
              },
              "output_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "result",
                "password": false,
                "name": "output_key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "display_name": "output_key"
              },
              "return_source_documents": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "return_source_documents",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false,
                "display_name": "return_source_documents"
              },
              "tags": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true,
                "display_name": "tags"
              },
              "verbose": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false,
                "display_name": "verbose"
              },
              "_type": "RetrievalQA"
            },
            "description": "Chain for question-answering against an index.",
            "base_classes": [
              "BaseRetrievalQA",
              "RetrievalQA",
              "Chain",
              "Callable"
            ],
            "display_name": "RetrievalQA",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://python.langchain.com/docs/modules/chains/popular/vector_db_qa",
            "beta": false,
            "error": null
          },
          "id": "RetrievalQA-8LwsV"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1338.4006276430111,
          "y": 172.3464189357058
        },
        "dragging": false
      },
      {
        "width": 98,
        "height": 98,
        "id": "CombineDocsChain-jh3Rn",
        "type": "genericNode",
        "position": {
          "x": 522.6905879607156,
          "y": -108.64636096275193
        },
        "data": {
          "type": "CombineDocsChain",
          "node": {
            "template": {
              "llm": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseLanguageModel",
                "list": false
              },
              "chain_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "stuff",
                "password": false,
                "options": [
                  "stuff",
                  "map_reduce",
                  "map_rerank",
                  "refine"
                ],
                "name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true,
                "display_name": "chain_type"
              },
              "_type": "load_qa_chain"
            },
            "description": "Load question answering chain.",
            "base_classes": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "display_name": "CombineDocsChain",
            "custom_fields": {},
            "output_types": [],
            "documentation": "",
            "beta": false,
            "error": null
          },
          "id": "CombineDocsChain-jh3Rn",
          "showNode": false
        },
        "selected": false,
        "positionAbsolute": {
          "x": 522.6905879607156,
          "y": -108.64636096275193
        },
        "dragging": false
      },
      {
        "id": "Vectara-nfmbW",
        "type": "genericNode",
        "position": {
          "x": 519.1694381536898,
          "y": 311.0524585703274
        },
        "data": {
          "type": "Vectara",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "If provided, will be upserted to corpus (optional)"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import tempfile\nimport urllib\nimport urllib.request\nfrom typing import List, Optional, Union\n\nfrom langchain_community.embeddings import FakeEmbeddings\nfrom langchain_community.vectorstores.vectara import Vectara\nfrom langchain_core.vectorstores import VectorStore\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Document\n\n\nclass VectaraComponent(CustomComponent):\n    display_name: str = \"Vectara\"\n    description: str = \"Implementation of Vector Store using Vectara\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/vectara\"\n    beta = True\n    field_config = {\n        \"vectara_customer_id\": {\n            \"display_name\": \"Vectara Customer ID\",\n        },\n        \"vectara_corpus_id\": {\n            \"display_name\": \"Vectara Corpus ID\",\n        },\n        \"vectara_api_key\": {\n            \"display_name\": \"Vectara API Key\",\n            \"password\": True,\n        },\n        \"documents\": {\"display_name\": \"Documents\", \"info\": \"If provided, will be upserted to corpus (optional)\"},\n        \"files_url\": {\n            \"display_name\": \"Files Url\",\n            \"info\": \"Make vectara object using url of files (optional)\",\n        },\n    }\n\n    def build(\n        self,\n        vectara_customer_id: str,\n        vectara_corpus_id: str,\n        vectara_api_key: str,\n        files_url: Optional[List[str]] = None,\n        documents: Optional[Document] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        source = \"Langflow\"\n\n        if documents is not None:\n            return Vectara.from_documents(\n                documents=documents,\n                embedding=FakeEmbeddings(size=768),\n                vectara_customer_id=vectara_customer_id,\n                vectara_corpus_id=vectara_corpus_id,\n                vectara_api_key=vectara_api_key,\n                source=source,\n            )\n\n        if files_url is not None:\n            files_list = []\n            for url in files_url:\n                name = tempfile.NamedTemporaryFile().name\n                urllib.request.urlretrieve(url, name)\n                files_list.append(name)\n\n            return Vectara.from_files(\n                files=files_list,\n                embedding=FakeEmbeddings(size=768),\n                vectara_customer_id=vectara_customer_id,\n                vectara_corpus_id=vectara_corpus_id,\n                vectara_api_key=vectara_api_key,\n                source=source,\n            )\n\n        return Vectara(\n            vectara_customer_id=vectara_customer_id,\n            vectara_corpus_id=vectara_corpus_id,\n            vectara_api_key=vectara_api_key,\n            source=source,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": ""
              },
              "files_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "files_url",
                "display_name": "Files Url",
                "advanced": false,
                "dynamic": false,
                "info": "Make vectara object using url of files (optional)"
              },
              "vectara_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "vectara_api_key",
                "display_name": "Vectara API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "value": ""
              },
              "vectara_corpus_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectara_corpus_id",
                "display_name": "Vectara Corpus ID",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "value": "3"
              },
              "vectara_customer_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectara_customer_id",
                "display_name": "Vectara Customer ID",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "value": "2929442869"
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Vectara",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Vectara",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/vectara",
            "custom_fields": {
              "documents": null,
              "files_url": null,
              "vectara_api_key": null,
              "vectara_corpus_id": null,
              "vectara_customer_id": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Vectara-nfmbW",
          "showNode": false
        },
        "selected": false,
        "width": 98,
        "height": 98,
        "positionAbsolute": {
          "x": 519.1694381536898,
          "y": 311.0524585703274
        },
        "dragging": false
      },
      {
        "id": "ChatOpenAI-U6dPq",
        "type": "genericNode",
        "position": {
          "x": 9.568020695132532,
          "y": 120.81452705546135
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": ""
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "500",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-1106-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem."
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "1",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                }
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-U6dPq",
          "showNode": false
        },
        "selected": false,
        "width": 98,
        "height": 98,
        "positionAbsolute": {
          "x": 9.568020695132532,
          "y": 120.81452705546135
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "CombineDocsChain-jh3Rn",
        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-jh3Rnœ}",
        "target": "RetrievalQA-8LwsV",
        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
        "data": {
          "targetHandle": {
            "fieldName": "combine_documents_chain",
            "id": "RetrievalQA-8LwsV",
            "inputTypes": null,
            "type": "BaseCombineDocumentsChain"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "dataType": "CombineDocsChain",
            "id": "CombineDocsChain-jh3Rn"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CombineDocsChain-jh3Rn{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-jh3Rnœ}-RetrievalQA-8LwsV{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
        "selected": false
      },
      {
        "source": "Vectara-nfmbW",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œVectaraœ,œidœ:œVectara-nfmbWœ}",
        "target": "RetrievalQA-8LwsV",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQA-8LwsV",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Vectara",
            "id": "Vectara-nfmbW"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Vectara-nfmbW{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œVectaraœ,œidœ:œVectara-nfmbWœ}-RetrievalQA-8LwsV{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "ChatOpenAI-U6dPq",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-U6dPqœ}",
        "target": "CombineDocsChain-jh3Rn",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-jh3Rnœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CombineDocsChain-jh3Rn",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-U6dPq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-U6dPq{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-U6dPqœ}-CombineDocsChain-jh3Rn{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-jh3Rnœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      }
    ],
    "viewport": {
      "x": 87.8129080613163,
      "y": 157.22634497192723,
      "zoom": 0.5374316196739088
    }
  },
  "metadata": {
    "RetrievalQA": {
      "count": 1
    },
    "CombineDocsChain": {
      "count": 1
    },
    "Vectara": {
      "count": 1
    },
    "ChatOpenAI": {
      "count": 1
    },
    "total": 4
  },
  "original": {
    "id": "56b288ba-a4f4-4b9b-ac7a-8a3aaa0e4086",
    "name": "ACETEK - Vectara Example",
    "description": "Student Handbook",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "RetrievalQA": {
        "count": 1
      },
      "CombineDocsChain": {
        "count": 1
      },
      "Vectara": {
        "count": 1
      },
      "ChatOpenAI": {
        "count": 1
      },
      "total": 4
    },
    "last_tested_version": "0.6.16",
    "private": true,
    "data": {
      "nodes": [
        {
          "width": 384,
          "height": 339,
          "id": "RetrievalQA-8LwsV",
          "type": "genericNode",
          "position": {
            "x": 1338.4006276430111,
            "y": 172.3464189357058
          },
          "data": {
            "type": "RetrievalQA",
            "node": {
              "template": {
                "callbacks": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "callbacks",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                  "list": true,
                  "display_name": "callbacks"
                },
                "combine_documents_chain": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "combine_documents_chain",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "BaseCombineDocumentsChain",
                  "list": false
                },
                "memory": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "BaseMemory",
                  "list": false,
                  "display_name": "memory"
                },
                "retriever": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "BaseRetriever",
                  "list": false
                },
                "input_key": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "query",
                  "password": false,
                  "name": "input_key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "display_name": "input_key"
                },
                "metadata": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "dict",
                  "list": false,
                  "display_name": "metadata"
                },
                "output_key": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "result",
                  "password": false,
                  "name": "output_key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": false,
                  "display_name": "output_key"
                },
                "return_source_documents": {
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "password": false,
                  "name": "return_source_documents",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "bool",
                  "list": false,
                  "display_name": "return_source_documents"
                },
                "tags": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "tags",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": true,
                  "display_name": "tags"
                },
                "verbose": {
                  "required": false,
                  "placeholder": "",
                  "show": false,
                  "multiline": false,
                  "password": false,
                  "name": "verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "type": "bool",
                  "list": false,
                  "display_name": "verbose"
                },
                "_type": "RetrievalQA"
              },
              "description": "Chain for question-answering against an index.",
              "base_classes": [
                "BaseRetrievalQA",
                "RetrievalQA",
                "Chain",
                "Callable"
              ],
              "display_name": "RetrievalQA",
              "custom_fields": {},
              "output_types": [],
              "documentation": "https://python.langchain.com/docs/modules/chains/popular/vector_db_qa",
              "beta": false,
              "error": null
            },
            "id": "RetrievalQA-8LwsV"
          },
          "selected": false,
          "positionAbsolute": {
            "x": 1338.4006276430111,
            "y": 172.3464189357058
          },
          "dragging": false
        },
        {
          "width": 98,
          "height": 98,
          "id": "CombineDocsChain-jh3Rn",
          "type": "genericNode",
          "position": {
            "x": 522.6905879607156,
            "y": -108.64636096275193
          },
          "data": {
            "type": "CombineDocsChain",
            "node": {
              "template": {
                "llm": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "BaseLanguageModel",
                  "list": false
                },
                "chain_type": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "value": "stuff",
                  "password": false,
                  "options": [
                    "stuff",
                    "map_reduce",
                    "map_rerank",
                    "refine"
                  ],
                  "name": "chain_type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "type": "str",
                  "list": true,
                  "display_name": "chain_type"
                },
                "_type": "load_qa_chain"
              },
              "description": "Load question answering chain.",
              "base_classes": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "display_name": "CombineDocsChain",
              "custom_fields": {},
              "output_types": [],
              "documentation": "",
              "beta": false,
              "error": null
            },
            "id": "CombineDocsChain-jh3Rn",
            "showNode": false
          },
          "selected": false,
          "positionAbsolute": {
            "x": 522.6905879607156,
            "y": -108.64636096275193
          },
          "dragging": false
        },
        {
          "id": "Vectara-nfmbW",
          "type": "genericNode",
          "position": {
            "x": 519.1694381536898,
            "y": 311.0524585703274
          },
          "data": {
            "type": "Vectara",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "If provided, will be upserted to corpus (optional)"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import tempfile\nimport urllib\nimport urllib.request\nfrom typing import List, Optional, Union\n\nfrom langchain_community.embeddings import FakeEmbeddings\nfrom langchain_community.vectorstores.vectara import Vectara\nfrom langchain_core.vectorstores import VectorStore\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Document\n\n\nclass VectaraComponent(CustomComponent):\n    display_name: str = \"Vectara\"\n    description: str = \"Implementation of Vector Store using Vectara\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/vectara\"\n    beta = True\n    field_config = {\n        \"vectara_customer_id\": {\n            \"display_name\": \"Vectara Customer ID\",\n        },\n        \"vectara_corpus_id\": {\n            \"display_name\": \"Vectara Corpus ID\",\n        },\n        \"vectara_api_key\": {\n            \"display_name\": \"Vectara API Key\",\n            \"password\": True,\n        },\n        \"documents\": {\"display_name\": \"Documents\", \"info\": \"If provided, will be upserted to corpus (optional)\"},\n        \"files_url\": {\n            \"display_name\": \"Files Url\",\n            \"info\": \"Make vectara object using url of files (optional)\",\n        },\n    }\n\n    def build(\n        self,\n        vectara_customer_id: str,\n        vectara_corpus_id: str,\n        vectara_api_key: str,\n        files_url: Optional[List[str]] = None,\n        documents: Optional[Document] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        source = \"Langflow\"\n\n        if documents is not None:\n            return Vectara.from_documents(\n                documents=documents,\n                embedding=FakeEmbeddings(size=768),\n                vectara_customer_id=vectara_customer_id,\n                vectara_corpus_id=vectara_corpus_id,\n                vectara_api_key=vectara_api_key,\n                source=source,\n            )\n\n        if files_url is not None:\n            files_list = []\n            for url in files_url:\n                name = tempfile.NamedTemporaryFile().name\n                urllib.request.urlretrieve(url, name)\n                files_list.append(name)\n\n            return Vectara.from_files(\n                files=files_list,\n                embedding=FakeEmbeddings(size=768),\n                vectara_customer_id=vectara_customer_id,\n                vectara_corpus_id=vectara_corpus_id,\n                vectara_api_key=vectara_api_key,\n                source=source,\n            )\n\n        return Vectara(\n            vectara_customer_id=vectara_customer_id,\n            vectara_corpus_id=vectara_corpus_id,\n            vectara_api_key=vectara_api_key,\n            source=source,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": ""
                },
                "files_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "files_url",
                  "display_name": "Files Url",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Make vectara object using url of files (optional)"
                },
                "vectara_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "vectara_api_key",
                  "display_name": "Vectara API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "value": ""
                },
                "vectara_corpus_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectara_corpus_id",
                  "display_name": "Vectara Corpus ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "value": "3"
                },
                "vectara_customer_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectara_customer_id",
                  "display_name": "Vectara Customer ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "value": "2929442869"
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Vectara",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Vectara",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/vectara",
              "custom_fields": {
                "documents": null,
                "files_url": null,
                "vectara_api_key": null,
                "vectara_corpus_id": null,
                "vectara_customer_id": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Vectara-nfmbW",
            "showNode": false
          },
          "selected": false,
          "width": 98,
          "height": 98,
          "positionAbsolute": {
            "x": 519.1694381536898,
            "y": 311.0524585703274
          },
          "dragging": false
        },
        {
          "id": "ChatOpenAI-U6dPq",
          "type": "genericNode",
          "position": {
            "x": 9.568020695132532,
            "y": 120.81452705546135
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": ""
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "500",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-1106-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem."
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "1",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  }
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-U6dPq",
            "showNode": false
          },
          "selected": false,
          "width": 98,
          "height": 98,
          "positionAbsolute": {
            "x": 9.568020695132532,
            "y": 120.81452705546135
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "CombineDocsChain-jh3Rn",
          "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-jh3Rnœ}",
          "target": "RetrievalQA-8LwsV",
          "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
          "data": {
            "targetHandle": {
              "fieldName": "combine_documents_chain",
              "id": "RetrievalQA-8LwsV",
              "inputTypes": null,
              "type": "BaseCombineDocumentsChain"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "dataType": "CombineDocsChain",
              "id": "CombineDocsChain-jh3Rn"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CombineDocsChain-jh3Rn{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-jh3Rnœ}-RetrievalQA-8LwsV{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
          "selected": false
        },
        {
          "source": "Vectara-nfmbW",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œVectaraœ,œidœ:œVectara-nfmbWœ}",
          "target": "RetrievalQA-8LwsV",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "RetrievalQA-8LwsV",
              "inputTypes": null,
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Vectara",
              "id": "Vectara-nfmbW"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Vectara-nfmbW{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œVectaraœ,œidœ:œVectara-nfmbWœ}-RetrievalQA-8LwsV{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-8LwsVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
        },
        {
          "source": "ChatOpenAI-U6dPq",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-U6dPqœ}",
          "target": "CombineDocsChain-jh3Rn",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-jh3Rnœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CombineDocsChain-jh3Rn",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-U6dPq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatOpenAI-U6dPq{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-U6dPqœ}-CombineDocsChain-jh3Rn{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-jh3Rnœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        }
      ],
      "viewport": {
        "x": 87.8129080613163,
        "y": 157.22634497192723,
        "zoom": 0.5374316196739088
      }
    },
    "date_created": "2024-04-20T15:13:46.681Z",
    "date_updated": "2024-04-20T15:13:46.721Z",
    "status": "Public",
    "sort": null,
    "user_updated": "25afb7e2-5b9a-4f7c-a4a8-d5884a0b12cb",
    "user_created": {
      "username": "WookeysAI",
      "first_name": "Vinayak",
      "last_name": "Habbu",
      "id": "25afb7e2-5b9a-4f7c-a4a8-d5884a0b12cb"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:58.180Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}