{
  "id": "85a3b875-e130-4dc6-bfdc-f1356928006e",
  "name": "sharecheckcamino123",
  "description": "Where Language Meets Logic. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Zod12",
    "first_name": "General",
    "last_name": "Zod",
    "id": "c076bce5-81d3-4b8b-a6a3-dee007e34c3d",
    "full_name": "General Zod"
  },
  "store_url": "https://www.langflow.store/store/component/85a3b875-e130-4dc6-bfdc-f1356928006e",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-09T06:32:39.215Z",
    "updated": "2024-07-09T06:32:39.291Z",
    "downloaded": "2025-08-19T17:50:06.500Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.7",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "APIRequest-4TBmZ",
        "type": "genericNode",
        "position": {
          "x": -222,
          "y": -15.751922631573962
        },
        "data": {
          "type": "APIRequest",
          "node": {
            "template": {
              "body": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "body",
                "display_name": "Body",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The body to send with the request (for POST, PATCH, PUT).",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\r\nimport json\r\nfrom typing import Any, List, Optional, Dict\r\n\r\nimport httpx\r\nfrom loguru import logger\r\n\r\nfrom axiestudio.base.curl.parse import parse_context\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.field_typing import NestedDict\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.schema.dotdict import dotdict\r\n\r\n\r\nclass APIRequest(CustomComponent):\r\n    display_name: str = \"Custom API Request\"\r\n    description: str = \"Make HTTP requests given one or more URLs.\"\r\n    output_types: list[str] = [\"Record\"]\r\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\r\n    icon = \"Globe\"\r\n\r\n    field_config = {\r\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\r\n        \"curl\": {\r\n            \"display_name\": \"Curl\",\r\n            \"info\": \"Paste a curl command to populate the fields.\",\r\n            \"refresh_button\": True,\r\n            \"refresh_button_text\": \"\",\r\n        },\r\n        \"method\": {\r\n            \"display_name\": \"Method\",\r\n            \"info\": \"The HTTP method to use.\",\r\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\r\n            \"value\": \"GET\",\r\n        },\r\n        \"headers\": {\r\n            \"display_name\": \"Headers\",\r\n            \"info\": \"The headers to send with the request.\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"body\": {\r\n            \"display_name\": \"Body\",\r\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"timeout\": {\r\n            \"display_name\": \"Timeout\",\r\n            \"info\": \"The timeout to use for the request.\",\r\n            \"value\": 5,\r\n        },\r\n    }\r\n\r\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\r\n        try:\r\n            parsed = parse_context(curl)\r\n            build_config[\"urls\"][\"value\"] = [parsed.url]\r\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\r\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\r\n\r\n            try:\r\n                json_data = json.loads(parsed.data)\r\n                build_config[\"body\"][\"value\"] = json_data\r\n            except json.JSONDecodeError as e:\r\n                print(e)\r\n        except Exception as exc:\r\n            logger.error(f\"Error parsing curl: {exc}\")\r\n            raise ValueError(f\"Error parsing curl: {exc}\")\r\n        return build_config\r\n\r\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\r\n        if field_name == \"curl\" and field_value is not None:\r\n            build_config = self.parse_curl(field_value, build_config)\r\n        return build_config\r\n\r\n    async def make_request(\r\n        self,\r\n        client: httpx.AsyncClient,\r\n        method: str,\r\n        url: str,\r\n        headers: Optional[dict] = None,\r\n        body: Optional[dict] = None,\r\n        timeout: int = 5,\r\n    ) -> str:  # Change return type to str\r\n        method = method.upper()\r\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\r\n            raise ValueError(f\"Unsupported method: {method}\")\r\n\r\n        data = body if body else None\r\n        payload = json.dumps(data)\r\n        try:\r\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\r\n            try:\r\n                result = response.json()\r\n            except Exception:\r\n                result = response.text\r\n            pid = result.get(\"pid\", \"\")\r\n            if not pid:\r\n                raise ValueError(\"PID not found in the response\")\r\n            return pid  # Return only the pid\r\n        except httpx.TimeoutException:\r\n            raise ValueError(\"Request timed out\")\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error occurred: {exc}\")\r\n\r\n    async def build(\r\n        self,\r\n        method: str,\r\n        urls: List[str],\r\n        curl: Optional[str] = None,\r\n        headers: Optional[NestedDict] = {},\r\n        body: Optional[NestedDict] = {},\r\n        timeout: int = 5,\r\n    ) -> List[str]:  # Change return type to List[str]\r\n        if headers is None:\r\n            headers_dict = {}\r\n        elif isinstance(headers, Record):\r\n            headers_dict = headers.data\r\n        else:\r\n            headers_dict = headers\r\n\r\n        bodies = []\r\n        if body:\r\n            if not isinstance(body, list):\r\n                bodies = [body]\r\n            else:\r\n                bodies = body\r\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\r\n\r\n        if len(urls) != len(bodies):\r\n            # add bodies with None\r\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\r\n        async with httpx.AsyncClient() as client:\r\n            results = await asyncio.gather(\r\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\r\n            )\r\n        return results  # Return list of pids\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "curl": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "curl",
                "display_name": "Curl",
                "advanced": false,
                "dynamic": false,
                "info": "Paste a curl command to populate the fields.",
                "refresh_button": true,
                "refresh_button_text": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "headers": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "method": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "POST",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ],
                "name": "method",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "The HTTP method to use.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "urls",
                "display_name": "URLs",
                "advanced": false,
                "dynamic": false,
                "info": "URLs to make requests to.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": [
                  "http://54.177.8.72:5000/api/v1/radiometric"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Make HTTP requests given one or more URLs.",
            "icon": "Globe",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Custom API Request",
            "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
            "custom_fields": {
              "method": null,
              "urls": null,
              "curl": null,
              "headers": null,
              "body": null,
              "timeout": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "urls",
              "curl",
              "method",
              "headers",
              "body",
              "timeout"
            ],
            "beta": false,
            "edited": true,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "APIRequest-4TBmZ",
          "description": "Make HTTP requests given one or more URLs.",
          "display_name": "Custom API Request"
        },
        "selected": false,
        "width": 384,
        "height": 776
      },
      {
        "id": "CustomComponent-MfTgy",
        "type": "genericNode",
        "position": {
          "x": 221.12450031065327,
          "y": 90.47138661680407
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "headers": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "check_interval": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "check_interval",
                "display_name": "Check Interval",
                "advanced": false,
                "dynamic": false,
                "info": "Interval in seconds between status checks.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\r\nimport json\r\nfrom typing import Optional, Dict\r\n\r\nimport httpx\r\nfrom axiestudio.interface.custom.custom_component import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass ProcessStatus(CustomComponent):\r\n    display_name: str = \"Process Status\"\r\n    description: str = \"Check the status of a process given a PID.\"\r\n    output_types: list[str] = [\"Record\"]\r\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\r\n    icon = \"Globe\"\r\n\r\n    field_config = {\r\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\r\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\r\n        \"headers\": {\r\n            \"display_name\": \"Headers\",\r\n            \"info\": \"The headers to send with the request.\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"timeout\": {\r\n            \"display_name\": \"Timeout\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"The timeout to use for the request.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n        \"check_interval\": {\r\n            \"display_name\": \"Check Interval\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"Interval in seconds between status checks.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n    }\r\n\r\n    async def make_status_request(\r\n        self,\r\n        client: httpx.AsyncClient,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Dict[str, str]] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        try:\r\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\r\n            try:\r\n                result = response.json()\r\n            except Exception:\r\n                result = response.text\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": response.status_code,\r\n                \"result\": result,\r\n            })\r\n        except httpx.TimeoutException:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 408,\r\n                \"error\": \"Request timed out\",\r\n            })\r\n        except Exception as exc:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 500,\r\n                \"error\": str(exc),\r\n            })\r\n\r\n    async def build(\r\n        self,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Record] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n        check_interval: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        if not pid:\r\n            raise ValueError(\"PID is empty.\")\r\n        headers_dict = headers.data if headers else {}\r\n        while True:\r\n            async with httpx.AsyncClient() as client:\r\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\r\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\r\n                return result\r\n            await asyncio.sleep(check_interval)\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pid": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pid",
                "display_name": "PID",
                "advanced": false,
                "dynamic": false,
                "info": "The process ID to check status for.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "status_url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "status_url",
                "display_name": "Status URL",
                "advanced": false,
                "dynamic": false,
                "info": "URL to check process status.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "http://54.177.8.72:5000/api/v1/process-status"
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Check the status of a process given a PID.",
            "icon": "Globe",
            "base_classes": [
              "Record"
            ],
            "display_name": "Process Status",
            "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
            "custom_fields": {
              "status_url": null,
              "pid": null,
              "headers": null,
              "timeout": null,
              "check_interval": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "status_url",
              "pid",
              "headers",
              "timeout",
              "check_interval"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-MfTgy",
          "description": "Check the status of a process given a PID.",
          "display_name": "Custom Component"
        },
        "selected": false,
        "width": 384,
        "height": 574
      },
      {
        "id": "CustomAPIRequest-Eqjf4",
        "type": "genericNode",
        "position": {
          "x": 709.3465611277999,
          "y": -15.608439533660032
        },
        "data": {
          "type": "CustomAPIRequest",
          "node": {
            "template": {
              "body": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "body",
                "display_name": "Body",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The body to send with the request (for POST, PATCH, PUT).",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\nimport json\nfrom typing import Any, List, Optional, Dict\n\nimport httpx\nfrom loguru import logger\n\nfrom axiestudio.base.curl.parse import parse_context\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.schema import Record\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CustomAPIRequest(CustomComponent):\n    display_name: str = \"Custom API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"curl\": {\n            \"display_name\": \"Curl\",\n            \"info\": \"Paste a curl command to populate the fields.\",\n            \"refresh_button\": True,\n            \"refresh_button_text\": \"\",\n        },\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            try:\n                json_data = json.loads(parsed.data)\n                build_config[\"body\"][\"value\"] = json_data\n            except json.JSONDecodeError as e:\n                print(e)\n        except Exception as exc:\n            logger.error(f\"Error parsing curl: {exc}\")\n            raise ValueError(f\"Error parsing curl: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"curl\" and field_value is not None:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> str:  # Change return type to str\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            pid = result.get(\"pid\", \"\")\n            if not pid:\n                raise ValueError(\"PID not found in the response\")\n            return pid  # Return only the pid\n        except httpx.TimeoutException:\n            raise ValueError(\"Request timed out\")\n        except Exception as exc:\n            raise ValueError(f\"Error occurred: {exc}\")\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        curl: Optional[str] = None,\n        headers: Optional[NestedDict] = {},\n        body: Optional[NestedDict] = {},\n        timeout: int = 5,\n    ) -> List[str]:  # Change return type to List[str]\n        if headers is None:\n            headers_dict = {}\n        elif isinstance(headers, Record):\n            headers_dict = headers.data\n        else:\n            headers_dict = headers\n\n        bodies = []\n        if body:\n            if not isinstance(body, list):\n                bodies = [body]\n            else:\n                bodies = body\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        return results  # Return list of pids\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "curl": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "curl",
                "display_name": "Curl",
                "advanced": false,
                "dynamic": false,
                "info": "Paste a curl command to populate the fields.",
                "refresh_button": true,
                "refresh_button_text": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "headers": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "method": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "POST",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ],
                "name": "method",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "The HTTP method to use.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "urls",
                "display_name": "URLs",
                "advanced": false,
                "dynamic": false,
                "info": "URLs to make requests to.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": [
                  "http://54.177.8.72:5000/api/v1/atmospheric"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Make HTTP requests given one or more URLs.",
            "icon": "Globe",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Custom API Request",
            "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
            "custom_fields": {
              "method": null,
              "urls": null,
              "curl": null,
              "headers": null,
              "body": null,
              "timeout": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "urls",
              "curl",
              "method",
              "headers",
              "body",
              "timeout"
            ],
            "beta": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "CustomAPIRequest-Eqjf4"
        },
        "selected": false,
        "width": 384,
        "height": 776
      },
      {
        "id": "CustomComponent-fPh7X",
        "type": "genericNode",
        "position": {
          "x": 1175.394901392329,
          "y": 97.24659230879189
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "headers": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "check_interval": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "check_interval",
                "display_name": "Check Interval",
                "advanced": false,
                "dynamic": false,
                "info": "Interval in seconds between status checks.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\r\nimport json\r\nfrom typing import Optional, Dict\r\n\r\nimport httpx\r\nfrom axiestudio.interface.custom.custom_component import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass ProcessStatus(CustomComponent):\r\n    display_name: str = \"Process Status\"\r\n    description: str = \"Check the status of a process given a PID.\"\r\n    output_types: list[str] = [\"Record\"]\r\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\r\n    icon = \"Globe\"\r\n\r\n    field_config = {\r\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\r\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\r\n        \"headers\": {\r\n            \"display_name\": \"Headers\",\r\n            \"info\": \"The headers to send with the request.\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"timeout\": {\r\n            \"display_name\": \"Timeout\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"The timeout to use for the request.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n        \"check_interval\": {\r\n            \"display_name\": \"Check Interval\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"Interval in seconds between status checks.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n    }\r\n\r\n    async def make_status_request(\r\n        self,\r\n        client: httpx.AsyncClient,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Dict[str, str]] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        try:\r\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\r\n            try:\r\n                result = response.json()\r\n            except Exception:\r\n                result = response.text\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": response.status_code,\r\n                \"result\": result,\r\n            })\r\n        except httpx.TimeoutException:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 408,\r\n                \"error\": \"Request timed out\",\r\n            })\r\n        except Exception as exc:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 500,\r\n                \"error\": str(exc),\r\n            })\r\n\r\n    async def build(\r\n        self,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Record] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n        check_interval: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        if not pid:\r\n            raise ValueError(\"PID is empty.\")\r\n        headers_dict = headers.data if headers else {}\r\n        while True:\r\n            async with httpx.AsyncClient() as client:\r\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\r\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\r\n                return result\r\n            await asyncio.sleep(check_interval)\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pid": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pid",
                "display_name": "PID",
                "advanced": false,
                "dynamic": false,
                "info": "The process ID to check status for.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "status_url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "status_url",
                "display_name": "Status URL",
                "advanced": false,
                "dynamic": false,
                "info": "URL to check process status.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "http://54.177.8.72:5000/api/v1/process-status"
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Check the status of a process given a PID.",
            "icon": "Globe",
            "base_classes": [
              "Record"
            ],
            "display_name": "Process Status",
            "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
            "custom_fields": {
              "status_url": null,
              "pid": null,
              "headers": null,
              "timeout": null,
              "check_interval": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "status_url",
              "pid",
              "headers",
              "timeout",
              "check_interval"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-fPh7X",
          "description": "Check the status of a process given a PID.",
          "display_name": "Custom Component"
        },
        "selected": false,
        "width": 384,
        "height": 574
      },
      {
        "id": "CustomAPIRequest-EXAdR",
        "type": "genericNode",
        "position": {
          "x": 1678.525357733292,
          "y": -21.039241601598235
        },
        "data": {
          "type": "CustomAPIRequest",
          "node": {
            "template": {
              "body": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "body",
                "display_name": "Body",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The body to send with the request (for POST, PATCH, PUT).",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\nimport json\nfrom typing import Any, List, Optional, Dict\n\nimport httpx\nfrom loguru import logger\n\nfrom axiestudio.base.curl.parse import parse_context\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.schema import Record\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CustomAPIRequest(CustomComponent):\n    display_name: str = \"Custom API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"curl\": {\n            \"display_name\": \"Curl\",\n            \"info\": \"Paste a curl command to populate the fields.\",\n            \"refresh_button\": True,\n            \"refresh_button_text\": \"\",\n        },\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            try:\n                json_data = json.loads(parsed.data)\n                build_config[\"body\"][\"value\"] = json_data\n            except json.JSONDecodeError as e:\n                print(e)\n        except Exception as exc:\n            logger.error(f\"Error parsing curl: {exc}\")\n            raise ValueError(f\"Error parsing curl: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"curl\" and field_value is not None:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> str:  # Change return type to str\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            pid = result.get(\"pid\", \"\")\n            if not pid:\n                raise ValueError(\"PID not found in the response\")\n            return pid  # Return only the pid\n        except httpx.TimeoutException:\n            raise ValueError(\"Request timed out\")\n        except Exception as exc:\n            raise ValueError(f\"Error occurred: {exc}\")\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        curl: Optional[str] = None,\n        headers: Optional[NestedDict] = {},\n        body: Optional[NestedDict] = {},\n        timeout: int = 5,\n    ) -> List[str]:  # Change return type to List[str]\n        if headers is None:\n            headers_dict = {}\n        elif isinstance(headers, Record):\n            headers_dict = headers.data\n        else:\n            headers_dict = headers\n\n        bodies = []\n        if body:\n            if not isinstance(body, list):\n                bodies = [body]\n            else:\n                bodies = body\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        return results  # Return list of pids\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "curl": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "curl",
                "display_name": "Curl",
                "advanced": false,
                "dynamic": false,
                "info": "Paste a curl command to populate the fields.",
                "refresh_button": true,
                "refresh_button_text": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "headers": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "method": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "POST",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ],
                "name": "method",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "The HTTP method to use.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "urls",
                "display_name": "URLs",
                "advanced": false,
                "dynamic": false,
                "info": "URLs to make requests to.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": [
                  "http://54.177.8.72:5000/api/v1/denoising"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Make HTTP requests given one or more URLs.",
            "icon": "Globe",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Custom API Request",
            "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
            "custom_fields": {
              "method": null,
              "urls": null,
              "curl": null,
              "headers": null,
              "body": null,
              "timeout": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "urls",
              "curl",
              "method",
              "headers",
              "body",
              "timeout"
            ],
            "beta": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "CustomAPIRequest-EXAdR"
        },
        "selected": false,
        "width": 384,
        "height": 776
      },
      {
        "id": "ProcessStatus-UVzMW",
        "type": "genericNode",
        "position": {
          "x": 2141.7494267537486,
          "y": 95.664496717509
        },
        "data": {
          "type": "ProcessStatus",
          "node": {
            "template": {
              "headers": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "check_interval": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "check_interval",
                "display_name": "Check Interval",
                "advanced": false,
                "dynamic": false,
                "info": "Interval in seconds between status checks.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\nimport json\nfrom typing import Optional, Dict\n\nimport httpx\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass ProcessStatus(CustomComponent):\n    display_name: str = \"Process Status\"\n    description: str = \"Check the status of a process given a PID.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"field_type\": \"int\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 30,  # 5 minutes\n        },\n        \"check_interval\": {\n            \"display_name\": \"Check Interval\",\n            \"field_type\": \"int\",\n            \"info\": \"Interval in seconds between status checks.\",\n            \"value\": 30,  # 5 minutes\n        },\n    }\n\n    async def make_status_request(\n        self,\n        client: httpx.AsyncClient,\n        status_url: str,\n        pid: str,\n        headers: Optional[Dict[str, str]] = None,\n        timeout: int = 30,  # 5 minutes\n    ) -> Record:\n        try:\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": response.status_code,\n                \"result\": result,\n            })\n        except httpx.TimeoutException:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 408,\n                \"error\": \"Request timed out\",\n            })\n        except Exception as exc:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 500,\n                \"error\": str(exc),\n            })\n\n    async def build(\n        self,\n        status_url: str,\n        pid: str,\n        headers: Optional[Record] = None,\n        timeout: int = 30,  # 5 minutes\n        check_interval: int = 30,  # 5 minutes\n    ) -> Record:\n        if not pid:\n            raise ValueError(\"PID is empty.\")\n        headers_dict = headers.data if headers else {}\n        while True:\n            async with httpx.AsyncClient() as client:\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\n                return result\n            await asyncio.sleep(check_interval)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pid": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pid",
                "display_name": "PID",
                "advanced": false,
                "dynamic": false,
                "info": "The process ID to check status for.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "status_url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "status_url",
                "display_name": "Status URL",
                "advanced": false,
                "dynamic": false,
                "info": "URL to check process status.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "http://54.177.8.72:5000/api/v1/process-status"
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Check the status of a process given a PID.",
            "icon": "Globe",
            "base_classes": [
              "Record"
            ],
            "display_name": "Process Status",
            "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
            "custom_fields": {
              "status_url": null,
              "pid": null,
              "headers": null,
              "timeout": null,
              "check_interval": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "status_url",
              "pid",
              "headers",
              "timeout",
              "check_interval"
            ],
            "beta": false
          },
          "id": "ProcessStatus-UVzMW"
        },
        "selected": false,
        "width": 384,
        "height": 574
      },
      {
        "id": "CustomAPIRequest-1N00p",
        "type": "genericNode",
        "position": {
          "x": 2610.3598221581633,
          "y": -35.40277862548828
        },
        "data": {
          "type": "CustomAPIRequest",
          "node": {
            "template": {
              "body": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "body",
                "display_name": "Body",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The body to send with the request (for POST, PATCH, PUT).",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\nimport json\nfrom typing import Any, List, Optional, Dict\n\nimport httpx\nfrom loguru import logger\n\nfrom axiestudio.base.curl.parse import parse_context\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.schema import Record\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CustomAPIRequest(CustomComponent):\n    display_name: str = \"Custom API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"curl\": {\n            \"display_name\": \"Curl\",\n            \"info\": \"Paste a curl command to populate the fields.\",\n            \"refresh_button\": True,\n            \"refresh_button_text\": \"\",\n        },\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            try:\n                json_data = json.loads(parsed.data)\n                build_config[\"body\"][\"value\"] = json_data\n            except json.JSONDecodeError as e:\n                print(e)\n        except Exception as exc:\n            logger.error(f\"Error parsing curl: {exc}\")\n            raise ValueError(f\"Error parsing curl: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"curl\" and field_value is not None:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> str:  # Change return type to str\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            pid = result.get(\"pid\", \"\")\n            if not pid:\n                raise ValueError(\"PID not found in the response\")\n            return pid  # Return only the pid\n        except httpx.TimeoutException:\n            raise ValueError(\"Request timed out\")\n        except Exception as exc:\n            raise ValueError(f\"Error occurred: {exc}\")\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        curl: Optional[str] = None,\n        headers: Optional[NestedDict] = {},\n        body: Optional[NestedDict] = {},\n        timeout: int = 5,\n    ) -> List[str]:  # Change return type to List[str]\n        if headers is None:\n            headers_dict = {}\n        elif isinstance(headers, Record):\n            headers_dict = headers.data\n        else:\n            headers_dict = headers\n\n        bodies = []\n        if body:\n            if not isinstance(body, list):\n                bodies = [body]\n            else:\n                bodies = body\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        return results  # Return list of pids\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "curl": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "curl",
                "display_name": "Curl",
                "advanced": false,
                "dynamic": false,
                "info": "Paste a curl command to populate the fields.",
                "refresh_button": true,
                "refresh_button_text": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "headers": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "method": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "POST",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ],
                "name": "method",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "The HTTP method to use.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "urls": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "urls",
                "display_name": "URLs",
                "advanced": false,
                "dynamic": false,
                "info": "URLs to make requests to.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": [
                  "http://54.177.8.72:5000/api/v1/cloud_detection"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Make HTTP requests given one or more URLs.",
            "icon": "Globe",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Custom API Request",
            "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
            "custom_fields": {
              "method": null,
              "urls": null,
              "curl": null,
              "headers": null,
              "body": null,
              "timeout": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "urls",
              "curl",
              "method",
              "headers",
              "body",
              "timeout"
            ],
            "beta": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "Text",
                "display_name": "Text",
                "hidden": false
              }
            ]
          },
          "id": "CustomAPIRequest-1N00p"
        },
        "selected": false,
        "width": 384,
        "height": 776
      },
      {
        "id": "ProcessStatus-NBxVg",
        "type": "genericNode",
        "position": {
          "x": 3093.333754586469,
          "y": 70.52830692570132
        },
        "data": {
          "type": "ProcessStatus",
          "node": {
            "template": {
              "headers": {
                "type": "Record",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "headers",
                "display_name": "Headers",
                "advanced": false,
                "input_types": [
                  "Record"
                ],
                "dynamic": false,
                "info": "The headers to send with the request.",
                "load_from_db": false,
                "title_case": false
              },
              "check_interval": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "check_interval",
                "display_name": "Check Interval",
                "advanced": false,
                "dynamic": false,
                "info": "Interval in seconds between status checks.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import asyncio\nimport json\nfrom typing import Optional, Dict\n\nimport httpx\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass ProcessStatus(CustomComponent):\n    display_name: str = \"Process Status\"\n    description: str = \"Check the status of a process given a PID.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"field_type\": \"int\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 30,  # 5 minutes\n        },\n        \"check_interval\": {\n            \"display_name\": \"Check Interval\",\n            \"field_type\": \"int\",\n            \"info\": \"Interval in seconds between status checks.\",\n            \"value\": 30,  # 5 minutes\n        },\n    }\n\n    async def make_status_request(\n        self,\n        client: httpx.AsyncClient,\n        status_url: str,\n        pid: str,\n        headers: Optional[Dict[str, str]] = None,\n        timeout: int = 30,  # 5 minutes\n    ) -> Record:\n        try:\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": response.status_code,\n                \"result\": result,\n            })\n        except httpx.TimeoutException:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 408,\n                \"error\": \"Request timed out\",\n            })\n        except Exception as exc:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 500,\n                \"error\": str(exc),\n            })\n\n    async def build(\n        self,\n        status_url: str,\n        pid: str,\n        headers: Optional[Record] = None,\n        timeout: int = 30,  # 5 minutes\n        check_interval: int = 30,  # 5 minutes\n    ) -> Record:\n        if not pid:\n            raise ValueError(\"PID is empty.\")\n        headers_dict = headers.data if headers else {}\n        while True:\n            async with httpx.AsyncClient() as client:\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\n                return result\n            await asyncio.sleep(check_interval)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pid": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "pid",
                "display_name": "PID",
                "advanced": false,
                "dynamic": false,
                "info": "The process ID to check status for.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "status_url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "status_url",
                "display_name": "Status URL",
                "advanced": false,
                "dynamic": false,
                "info": "URL to check process status.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "http://54.177.8.72:5000/api/v1/process-status"
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 30,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "The timeout to use for the request.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Check the status of a process given a PID.",
            "icon": "Globe",
            "base_classes": [
              "Record"
            ],
            "display_name": "Process Status",
            "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
            "custom_fields": {
              "status_url": null,
              "pid": null,
              "headers": null,
              "timeout": null,
              "check_interval": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "status_url",
              "pid",
              "headers",
              "timeout",
              "check_interval"
            ],
            "beta": false
          },
          "id": "ProcessStatus-NBxVg"
        },
        "selected": false,
        "width": 384,
        "height": 574
      }
    ],
    "edges": [
      {
        "source": "APIRequest-4TBmZ",
        "target": "CustomComponent-MfTgy",
        "sourceHandle": "{œdataTypeœ:œAPIRequestœ,œidœ:œAPIRequest-4TBmZœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
        "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œCustomComponent-MfTgyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-APIRequest-4TBmZ{œdataTypeœ:œAPIRequestœ,œidœ:œAPIRequest-4TBmZœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-CustomComponent-MfTgy{œfieldNameœ:œpidœ,œidœ:œCustomComponent-MfTgyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pid",
            "id": "CustomComponent-MfTgy",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "APIRequest",
            "id": "APIRequest-4TBmZ",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "selected": false
      },
      {
        "source": "CustomAPIRequest-EXAdR",
        "target": "ProcessStatus-UVzMW",
        "sourceHandle": "{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-EXAdRœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
        "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œProcessStatus-UVzMWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomAPIRequest-EXAdR{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-EXAdRœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-ProcessStatus-UVzMW{œfieldNameœ:œpidœ,œidœ:œProcessStatus-UVzMWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pid",
            "id": "ProcessStatus-UVzMW",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomAPIRequest",
            "id": "CustomAPIRequest-EXAdR",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "selected": false
      },
      {
        "source": "CustomAPIRequest-1N00p",
        "target": "ProcessStatus-NBxVg",
        "sourceHandle": "{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-1N00pœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
        "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œProcessStatus-NBxVgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomAPIRequest-1N00p{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-1N00pœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-ProcessStatus-NBxVg{œfieldNameœ:œpidœ,œidœ:œProcessStatus-NBxVgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pid",
            "id": "ProcessStatus-NBxVg",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomAPIRequest",
            "id": "CustomAPIRequest-1N00p",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "selected": false
      },
      {
        "source": "CustomAPIRequest-Eqjf4",
        "target": "CustomComponent-fPh7X",
        "sourceHandle": "{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-Eqjf4œ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
        "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œCustomComponent-fPh7Xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CustomAPIRequest-Eqjf4{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-Eqjf4œ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-CustomComponent-fPh7X{œfieldNameœ:œpidœ,œidœ:œCustomComponent-fPh7Xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pid",
            "id": "CustomComponent-fPh7X",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomAPIRequest",
            "id": "CustomAPIRequest-Eqjf4",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          }
        },
        "selected": false
      }
    ],
    "viewport": {
      "x": 99.36761790602884,
      "y": 258.8758011611904,
      "zoom": 0.6278366370560717
    }
  },
  "metadata": {
    "APIRequest": {
      "count": 1
    },
    "CustomComponent": {
      "count": 2
    },
    "CustomAPIRequest": {
      "count": 3
    },
    "ProcessStatus": {
      "count": 2
    },
    "total": 8
  },
  "original": {
    "id": "85a3b875-e130-4dc6-bfdc-f1356928006e",
    "name": "sharecheckcamino123",
    "description": "Where Language Meets Logic.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "APIRequest": {
        "count": 1
      },
      "CustomComponent": {
        "count": 2
      },
      "CustomAPIRequest": {
        "count": 3
      },
      "ProcessStatus": {
        "count": 2
      },
      "total": 8
    },
    "last_tested_version": "1.0.7",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "APIRequest-4TBmZ",
          "type": "genericNode",
          "position": {
            "x": -222,
            "y": -15.751922631573962
          },
          "data": {
            "type": "APIRequest",
            "node": {
              "template": {
                "body": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "body",
                  "display_name": "Body",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The body to send with the request (for POST, PATCH, PUT).",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\r\nimport json\r\nfrom typing import Any, List, Optional, Dict\r\n\r\nimport httpx\r\nfrom loguru import logger\r\n\r\nfrom axiestudio.base.curl.parse import parse_context\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.field_typing import NestedDict\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.schema.dotdict import dotdict\r\n\r\n\r\nclass APIRequest(CustomComponent):\r\n    display_name: str = \"Custom API Request\"\r\n    description: str = \"Make HTTP requests given one or more URLs.\"\r\n    output_types: list[str] = [\"Record\"]\r\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\r\n    icon = \"Globe\"\r\n\r\n    field_config = {\r\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\r\n        \"curl\": {\r\n            \"display_name\": \"Curl\",\r\n            \"info\": \"Paste a curl command to populate the fields.\",\r\n            \"refresh_button\": True,\r\n            \"refresh_button_text\": \"\",\r\n        },\r\n        \"method\": {\r\n            \"display_name\": \"Method\",\r\n            \"info\": \"The HTTP method to use.\",\r\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\r\n            \"value\": \"GET\",\r\n        },\r\n        \"headers\": {\r\n            \"display_name\": \"Headers\",\r\n            \"info\": \"The headers to send with the request.\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"body\": {\r\n            \"display_name\": \"Body\",\r\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"timeout\": {\r\n            \"display_name\": \"Timeout\",\r\n            \"info\": \"The timeout to use for the request.\",\r\n            \"value\": 5,\r\n        },\r\n    }\r\n\r\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\r\n        try:\r\n            parsed = parse_context(curl)\r\n            build_config[\"urls\"][\"value\"] = [parsed.url]\r\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\r\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\r\n\r\n            try:\r\n                json_data = json.loads(parsed.data)\r\n                build_config[\"body\"][\"value\"] = json_data\r\n            except json.JSONDecodeError as e:\r\n                print(e)\r\n        except Exception as exc:\r\n            logger.error(f\"Error parsing curl: {exc}\")\r\n            raise ValueError(f\"Error parsing curl: {exc}\")\r\n        return build_config\r\n\r\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\r\n        if field_name == \"curl\" and field_value is not None:\r\n            build_config = self.parse_curl(field_value, build_config)\r\n        return build_config\r\n\r\n    async def make_request(\r\n        self,\r\n        client: httpx.AsyncClient,\r\n        method: str,\r\n        url: str,\r\n        headers: Optional[dict] = None,\r\n        body: Optional[dict] = None,\r\n        timeout: int = 5,\r\n    ) -> str:  # Change return type to str\r\n        method = method.upper()\r\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\r\n            raise ValueError(f\"Unsupported method: {method}\")\r\n\r\n        data = body if body else None\r\n        payload = json.dumps(data)\r\n        try:\r\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\r\n            try:\r\n                result = response.json()\r\n            except Exception:\r\n                result = response.text\r\n            pid = result.get(\"pid\", \"\")\r\n            if not pid:\r\n                raise ValueError(\"PID not found in the response\")\r\n            return pid  # Return only the pid\r\n        except httpx.TimeoutException:\r\n            raise ValueError(\"Request timed out\")\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error occurred: {exc}\")\r\n\r\n    async def build(\r\n        self,\r\n        method: str,\r\n        urls: List[str],\r\n        curl: Optional[str] = None,\r\n        headers: Optional[NestedDict] = {},\r\n        body: Optional[NestedDict] = {},\r\n        timeout: int = 5,\r\n    ) -> List[str]:  # Change return type to List[str]\r\n        if headers is None:\r\n            headers_dict = {}\r\n        elif isinstance(headers, Record):\r\n            headers_dict = headers.data\r\n        else:\r\n            headers_dict = headers\r\n\r\n        bodies = []\r\n        if body:\r\n            if not isinstance(body, list):\r\n                bodies = [body]\r\n            else:\r\n                bodies = body\r\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\r\n\r\n        if len(urls) != len(bodies):\r\n            # add bodies with None\r\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\r\n        async with httpx.AsyncClient() as client:\r\n            results = await asyncio.gather(\r\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\r\n            )\r\n        return results  # Return list of pids\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "curl": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "curl",
                  "display_name": "Curl",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Paste a curl command to populate the fields.",
                  "refresh_button": true,
                  "refresh_button_text": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "headers": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "method": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "POST",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "GET",
                    "POST",
                    "PATCH",
                    "PUT"
                  ],
                  "name": "method",
                  "display_name": "Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The HTTP method to use.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "urls",
                  "display_name": "URLs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URLs to make requests to.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": [
                    "http://54.177.8.72:5000/api/v1/radiometric"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Make HTTP requests given one or more URLs.",
              "icon": "Globe",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Custom API Request",
              "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
              "custom_fields": {
                "method": null,
                "urls": null,
                "curl": null,
                "headers": null,
                "body": null,
                "timeout": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "urls",
                "curl",
                "method",
                "headers",
                "body",
                "timeout"
              ],
              "beta": false,
              "edited": true,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "APIRequest-4TBmZ",
            "description": "Make HTTP requests given one or more URLs.",
            "display_name": "Custom API Request"
          },
          "selected": false,
          "width": 384,
          "height": 776
        },
        {
          "id": "CustomComponent-MfTgy",
          "type": "genericNode",
          "position": {
            "x": 221.12450031065327,
            "y": 90.47138661680407
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "headers": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "check_interval": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "check_interval",
                  "display_name": "Check Interval",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Interval in seconds between status checks.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\r\nimport json\r\nfrom typing import Optional, Dict\r\n\r\nimport httpx\r\nfrom axiestudio.interface.custom.custom_component import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass ProcessStatus(CustomComponent):\r\n    display_name: str = \"Process Status\"\r\n    description: str = \"Check the status of a process given a PID.\"\r\n    output_types: list[str] = [\"Record\"]\r\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\r\n    icon = \"Globe\"\r\n\r\n    field_config = {\r\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\r\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\r\n        \"headers\": {\r\n            \"display_name\": \"Headers\",\r\n            \"info\": \"The headers to send with the request.\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"timeout\": {\r\n            \"display_name\": \"Timeout\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"The timeout to use for the request.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n        \"check_interval\": {\r\n            \"display_name\": \"Check Interval\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"Interval in seconds between status checks.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n    }\r\n\r\n    async def make_status_request(\r\n        self,\r\n        client: httpx.AsyncClient,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Dict[str, str]] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        try:\r\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\r\n            try:\r\n                result = response.json()\r\n            except Exception:\r\n                result = response.text\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": response.status_code,\r\n                \"result\": result,\r\n            })\r\n        except httpx.TimeoutException:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 408,\r\n                \"error\": \"Request timed out\",\r\n            })\r\n        except Exception as exc:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 500,\r\n                \"error\": str(exc),\r\n            })\r\n\r\n    async def build(\r\n        self,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Record] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n        check_interval: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        if not pid:\r\n            raise ValueError(\"PID is empty.\")\r\n        headers_dict = headers.data if headers else {}\r\n        while True:\r\n            async with httpx.AsyncClient() as client:\r\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\r\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\r\n                return result\r\n            await asyncio.sleep(check_interval)\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "pid": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pid",
                  "display_name": "PID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The process ID to check status for.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "status_url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "status_url",
                  "display_name": "Status URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URL to check process status.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "http://54.177.8.72:5000/api/v1/process-status"
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Check the status of a process given a PID.",
              "icon": "Globe",
              "base_classes": [
                "Record"
              ],
              "display_name": "Process Status",
              "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
              "custom_fields": {
                "status_url": null,
                "pid": null,
                "headers": null,
                "timeout": null,
                "check_interval": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "status_url",
                "pid",
                "headers",
                "timeout",
                "check_interval"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-MfTgy",
            "description": "Check the status of a process given a PID.",
            "display_name": "Custom Component"
          },
          "selected": false,
          "width": 384,
          "height": 574
        },
        {
          "id": "CustomAPIRequest-Eqjf4",
          "type": "genericNode",
          "position": {
            "x": 709.3465611277999,
            "y": -15.608439533660032
          },
          "data": {
            "type": "CustomAPIRequest",
            "node": {
              "template": {
                "body": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "body",
                  "display_name": "Body",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The body to send with the request (for POST, PATCH, PUT).",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\nimport json\nfrom typing import Any, List, Optional, Dict\n\nimport httpx\nfrom loguru import logger\n\nfrom axiestudio.base.curl.parse import parse_context\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.schema import Record\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CustomAPIRequest(CustomComponent):\n    display_name: str = \"Custom API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"curl\": {\n            \"display_name\": \"Curl\",\n            \"info\": \"Paste a curl command to populate the fields.\",\n            \"refresh_button\": True,\n            \"refresh_button_text\": \"\",\n        },\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            try:\n                json_data = json.loads(parsed.data)\n                build_config[\"body\"][\"value\"] = json_data\n            except json.JSONDecodeError as e:\n                print(e)\n        except Exception as exc:\n            logger.error(f\"Error parsing curl: {exc}\")\n            raise ValueError(f\"Error parsing curl: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"curl\" and field_value is not None:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> str:  # Change return type to str\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            pid = result.get(\"pid\", \"\")\n            if not pid:\n                raise ValueError(\"PID not found in the response\")\n            return pid  # Return only the pid\n        except httpx.TimeoutException:\n            raise ValueError(\"Request timed out\")\n        except Exception as exc:\n            raise ValueError(f\"Error occurred: {exc}\")\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        curl: Optional[str] = None,\n        headers: Optional[NestedDict] = {},\n        body: Optional[NestedDict] = {},\n        timeout: int = 5,\n    ) -> List[str]:  # Change return type to List[str]\n        if headers is None:\n            headers_dict = {}\n        elif isinstance(headers, Record):\n            headers_dict = headers.data\n        else:\n            headers_dict = headers\n\n        bodies = []\n        if body:\n            if not isinstance(body, list):\n                bodies = [body]\n            else:\n                bodies = body\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        return results  # Return list of pids\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "curl": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "curl",
                  "display_name": "Curl",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Paste a curl command to populate the fields.",
                  "refresh_button": true,
                  "refresh_button_text": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "headers": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "method": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "POST",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "GET",
                    "POST",
                    "PATCH",
                    "PUT"
                  ],
                  "name": "method",
                  "display_name": "Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The HTTP method to use.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "urls",
                  "display_name": "URLs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URLs to make requests to.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": [
                    "http://54.177.8.72:5000/api/v1/atmospheric"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Make HTTP requests given one or more URLs.",
              "icon": "Globe",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Custom API Request",
              "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
              "custom_fields": {
                "method": null,
                "urls": null,
                "curl": null,
                "headers": null,
                "body": null,
                "timeout": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "urls",
                "curl",
                "method",
                "headers",
                "body",
                "timeout"
              ],
              "beta": false,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "CustomAPIRequest-Eqjf4"
          },
          "selected": false,
          "width": 384,
          "height": 776
        },
        {
          "id": "CustomComponent-fPh7X",
          "type": "genericNode",
          "position": {
            "x": 1175.394901392329,
            "y": 97.24659230879189
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "headers": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "check_interval": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "check_interval",
                  "display_name": "Check Interval",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Interval in seconds between status checks.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\r\nimport json\r\nfrom typing import Optional, Dict\r\n\r\nimport httpx\r\nfrom axiestudio.interface.custom.custom_component import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass ProcessStatus(CustomComponent):\r\n    display_name: str = \"Process Status\"\r\n    description: str = \"Check the status of a process given a PID.\"\r\n    output_types: list[str] = [\"Record\"]\r\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\r\n    icon = \"Globe\"\r\n\r\n    field_config = {\r\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\r\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\r\n        \"headers\": {\r\n            \"display_name\": \"Headers\",\r\n            \"info\": \"The headers to send with the request.\",\r\n            \"input_types\": [\"Record\"],\r\n        },\r\n        \"timeout\": {\r\n            \"display_name\": \"Timeout\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"The timeout to use for the request.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n        \"check_interval\": {\r\n            \"display_name\": \"Check Interval\",\r\n            \"field_type\": \"int\",\r\n            \"info\": \"Interval in seconds between status checks.\",\r\n            \"value\": 30,  # 5 minutes\r\n        },\r\n    }\r\n\r\n    async def make_status_request(\r\n        self,\r\n        client: httpx.AsyncClient,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Dict[str, str]] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        try:\r\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\r\n            try:\r\n                result = response.json()\r\n            except Exception:\r\n                result = response.text\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": response.status_code,\r\n                \"result\": result,\r\n            })\r\n        except httpx.TimeoutException:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 408,\r\n                \"error\": \"Request timed out\",\r\n            })\r\n        except Exception as exc:\r\n            return Record(data={\r\n                \"source\": status_url,\r\n                \"headers\": headers,\r\n                \"params\": {\"pid\": pid},\r\n                \"status_code\": 500,\r\n                \"error\": str(exc),\r\n            })\r\n\r\n    async def build(\r\n        self,\r\n        status_url: str,\r\n        pid: str,\r\n        headers: Optional[Record] = None,\r\n        timeout: int = 30,  # 5 minutes\r\n        check_interval: int = 30,  # 5 minutes\r\n    ) -> Record:\r\n        if not pid:\r\n            raise ValueError(\"PID is empty.\")\r\n        headers_dict = headers.data if headers else {}\r\n        while True:\r\n            async with httpx.AsyncClient() as client:\r\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\r\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\r\n                return result\r\n            await asyncio.sleep(check_interval)\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "pid": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pid",
                  "display_name": "PID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The process ID to check status for.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "status_url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "status_url",
                  "display_name": "Status URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URL to check process status.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "http://54.177.8.72:5000/api/v1/process-status"
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Check the status of a process given a PID.",
              "icon": "Globe",
              "base_classes": [
                "Record"
              ],
              "display_name": "Process Status",
              "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
              "custom_fields": {
                "status_url": null,
                "pid": null,
                "headers": null,
                "timeout": null,
                "check_interval": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "status_url",
                "pid",
                "headers",
                "timeout",
                "check_interval"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-fPh7X",
            "description": "Check the status of a process given a PID.",
            "display_name": "Custom Component"
          },
          "selected": false,
          "width": 384,
          "height": 574
        },
        {
          "id": "CustomAPIRequest-EXAdR",
          "type": "genericNode",
          "position": {
            "x": 1678.525357733292,
            "y": -21.039241601598235
          },
          "data": {
            "type": "CustomAPIRequest",
            "node": {
              "template": {
                "body": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "body",
                  "display_name": "Body",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The body to send with the request (for POST, PATCH, PUT).",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\nimport json\nfrom typing import Any, List, Optional, Dict\n\nimport httpx\nfrom loguru import logger\n\nfrom axiestudio.base.curl.parse import parse_context\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.schema import Record\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CustomAPIRequest(CustomComponent):\n    display_name: str = \"Custom API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"curl\": {\n            \"display_name\": \"Curl\",\n            \"info\": \"Paste a curl command to populate the fields.\",\n            \"refresh_button\": True,\n            \"refresh_button_text\": \"\",\n        },\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            try:\n                json_data = json.loads(parsed.data)\n                build_config[\"body\"][\"value\"] = json_data\n            except json.JSONDecodeError as e:\n                print(e)\n        except Exception as exc:\n            logger.error(f\"Error parsing curl: {exc}\")\n            raise ValueError(f\"Error parsing curl: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"curl\" and field_value is not None:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> str:  # Change return type to str\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            pid = result.get(\"pid\", \"\")\n            if not pid:\n                raise ValueError(\"PID not found in the response\")\n            return pid  # Return only the pid\n        except httpx.TimeoutException:\n            raise ValueError(\"Request timed out\")\n        except Exception as exc:\n            raise ValueError(f\"Error occurred: {exc}\")\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        curl: Optional[str] = None,\n        headers: Optional[NestedDict] = {},\n        body: Optional[NestedDict] = {},\n        timeout: int = 5,\n    ) -> List[str]:  # Change return type to List[str]\n        if headers is None:\n            headers_dict = {}\n        elif isinstance(headers, Record):\n            headers_dict = headers.data\n        else:\n            headers_dict = headers\n\n        bodies = []\n        if body:\n            if not isinstance(body, list):\n                bodies = [body]\n            else:\n                bodies = body\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        return results  # Return list of pids\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "curl": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "curl",
                  "display_name": "Curl",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Paste a curl command to populate the fields.",
                  "refresh_button": true,
                  "refresh_button_text": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "headers": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "method": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "POST",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "GET",
                    "POST",
                    "PATCH",
                    "PUT"
                  ],
                  "name": "method",
                  "display_name": "Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The HTTP method to use.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "urls",
                  "display_name": "URLs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URLs to make requests to.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": [
                    "http://54.177.8.72:5000/api/v1/denoising"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Make HTTP requests given one or more URLs.",
              "icon": "Globe",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Custom API Request",
              "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
              "custom_fields": {
                "method": null,
                "urls": null,
                "curl": null,
                "headers": null,
                "body": null,
                "timeout": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "urls",
                "curl",
                "method",
                "headers",
                "body",
                "timeout"
              ],
              "beta": false,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "CustomAPIRequest-EXAdR"
          },
          "selected": false,
          "width": 384,
          "height": 776
        },
        {
          "id": "ProcessStatus-UVzMW",
          "type": "genericNode",
          "position": {
            "x": 2141.7494267537486,
            "y": 95.664496717509
          },
          "data": {
            "type": "ProcessStatus",
            "node": {
              "template": {
                "headers": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "check_interval": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "check_interval",
                  "display_name": "Check Interval",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Interval in seconds between status checks.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\nimport json\nfrom typing import Optional, Dict\n\nimport httpx\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass ProcessStatus(CustomComponent):\n    display_name: str = \"Process Status\"\n    description: str = \"Check the status of a process given a PID.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"field_type\": \"int\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 30,  # 5 minutes\n        },\n        \"check_interval\": {\n            \"display_name\": \"Check Interval\",\n            \"field_type\": \"int\",\n            \"info\": \"Interval in seconds between status checks.\",\n            \"value\": 30,  # 5 minutes\n        },\n    }\n\n    async def make_status_request(\n        self,\n        client: httpx.AsyncClient,\n        status_url: str,\n        pid: str,\n        headers: Optional[Dict[str, str]] = None,\n        timeout: int = 30,  # 5 minutes\n    ) -> Record:\n        try:\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": response.status_code,\n                \"result\": result,\n            })\n        except httpx.TimeoutException:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 408,\n                \"error\": \"Request timed out\",\n            })\n        except Exception as exc:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 500,\n                \"error\": str(exc),\n            })\n\n    async def build(\n        self,\n        status_url: str,\n        pid: str,\n        headers: Optional[Record] = None,\n        timeout: int = 30,  # 5 minutes\n        check_interval: int = 30,  # 5 minutes\n    ) -> Record:\n        if not pid:\n            raise ValueError(\"PID is empty.\")\n        headers_dict = headers.data if headers else {}\n        while True:\n            async with httpx.AsyncClient() as client:\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\n                return result\n            await asyncio.sleep(check_interval)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "pid": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pid",
                  "display_name": "PID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The process ID to check status for.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "status_url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "status_url",
                  "display_name": "Status URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URL to check process status.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "http://54.177.8.72:5000/api/v1/process-status"
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Check the status of a process given a PID.",
              "icon": "Globe",
              "base_classes": [
                "Record"
              ],
              "display_name": "Process Status",
              "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
              "custom_fields": {
                "status_url": null,
                "pid": null,
                "headers": null,
                "timeout": null,
                "check_interval": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "status_url",
                "pid",
                "headers",
                "timeout",
                "check_interval"
              ],
              "beta": false
            },
            "id": "ProcessStatus-UVzMW"
          },
          "selected": false,
          "width": 384,
          "height": 574
        },
        {
          "id": "CustomAPIRequest-1N00p",
          "type": "genericNode",
          "position": {
            "x": 2610.3598221581633,
            "y": -35.40277862548828
          },
          "data": {
            "type": "CustomAPIRequest",
            "node": {
              "template": {
                "body": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "body",
                  "display_name": "Body",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The body to send with the request (for POST, PATCH, PUT).",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\nimport json\nfrom typing import Any, List, Optional, Dict\n\nimport httpx\nfrom loguru import logger\n\nfrom axiestudio.base.curl.parse import parse_context\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom axiestudio.schema import Record\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CustomAPIRequest(CustomComponent):\n    display_name: str = \"Custom API Request\"\n    description: str = \"Make HTTP requests given one or more URLs.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#api-request\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"urls\": {\"display_name\": \"URLs\", \"info\": \"URLs to make requests to.\"},\n        \"curl\": {\n            \"display_name\": \"Curl\",\n            \"info\": \"Paste a curl command to populate the fields.\",\n            \"refresh_button\": True,\n            \"refresh_button_text\": \"\",\n        },\n        \"method\": {\n            \"display_name\": \"Method\",\n            \"info\": \"The HTTP method to use.\",\n            \"options\": [\"GET\", \"POST\", \"PATCH\", \"PUT\"],\n            \"value\": \"GET\",\n        },\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"body\": {\n            \"display_name\": \"Body\",\n            \"info\": \"The body to send with the request (for POST, PATCH, PUT).\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 5,\n        },\n    }\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            try:\n                json_data = json.loads(parsed.data)\n                build_config[\"body\"][\"value\"] = json_data\n            except json.JSONDecodeError as e:\n                print(e)\n        except Exception as exc:\n            logger.error(f\"Error parsing curl: {exc}\")\n            raise ValueError(f\"Error parsing curl: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"curl\" and field_value is not None:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n    ) -> str:  # Change return type to str\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        data = body if body else None\n        payload = json.dumps(data)\n        try:\n            response = await client.request(method, url, headers=headers, content=payload, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            pid = result.get(\"pid\", \"\")\n            if not pid:\n                raise ValueError(\"PID not found in the response\")\n            return pid  # Return only the pid\n        except httpx.TimeoutException:\n            raise ValueError(\"Request timed out\")\n        except Exception as exc:\n            raise ValueError(f\"Error occurred: {exc}\")\n\n    async def build(\n        self,\n        method: str,\n        urls: List[str],\n        curl: Optional[str] = None,\n        headers: Optional[NestedDict] = {},\n        body: Optional[NestedDict] = {},\n        timeout: int = 5,\n    ) -> List[str]:  # Change return type to List[str]\n        if headers is None:\n            headers_dict = {}\n        elif isinstance(headers, Record):\n            headers_dict = headers.data\n        else:\n            headers_dict = headers\n\n        bodies = []\n        if body:\n            if not isinstance(body, list):\n                bodies = [body]\n            else:\n                bodies = body\n            bodies = [b.data if isinstance(b, Record) else b for b in bodies]  # type: ignore\n\n        if len(urls) != len(bodies):\n            # add bodies with None\n            bodies += [None] * (len(urls) - len(bodies))  # type: ignore\n        async with httpx.AsyncClient() as client:\n            results = await asyncio.gather(\n                *[self.make_request(client, method, u, headers_dict, rec, timeout) for u, rec in zip(urls, bodies)]\n            )\n        return results  # Return list of pids\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "curl": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "curl",
                  "display_name": "Curl",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Paste a curl command to populate the fields.",
                  "refresh_button": true,
                  "refresh_button_text": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "headers": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "method": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "POST",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "GET",
                    "POST",
                    "PATCH",
                    "PUT"
                  ],
                  "name": "method",
                  "display_name": "Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The HTTP method to use.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "urls": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "urls",
                  "display_name": "URLs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URLs to make requests to.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": [
                    "http://54.177.8.72:5000/api/v1/cloud_detection"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Make HTTP requests given one or more URLs.",
              "icon": "Globe",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Custom API Request",
              "documentation": "https://docs.axiestudio.org/components/utilities#api-request",
              "custom_fields": {
                "method": null,
                "urls": null,
                "curl": null,
                "headers": null,
                "body": null,
                "timeout": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "urls",
                "curl",
                "method",
                "headers",
                "body",
                "timeout"
              ],
              "beta": false,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "Text",
                  "display_name": "Text",
                  "hidden": false
                }
              ]
            },
            "id": "CustomAPIRequest-1N00p"
          },
          "selected": false,
          "width": 384,
          "height": 776
        },
        {
          "id": "ProcessStatus-NBxVg",
          "type": "genericNode",
          "position": {
            "x": 3093.333754586469,
            "y": 70.52830692570132
          },
          "data": {
            "type": "ProcessStatus",
            "node": {
              "template": {
                "headers": {
                  "type": "Record",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "headers",
                  "display_name": "Headers",
                  "advanced": false,
                  "input_types": [
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "The headers to send with the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "check_interval": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "check_interval",
                  "display_name": "Check Interval",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Interval in seconds between status checks.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import asyncio\nimport json\nfrom typing import Optional, Dict\n\nimport httpx\nfrom axiestudio.interface.custom.custom_component import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass ProcessStatus(CustomComponent):\n    display_name: str = \"Process Status\"\n    description: str = \"Check the status of a process given a PID.\"\n    output_types: list[str] = [\"Record\"]\n    documentation: str = \"https://docs.axiestudio.org/components/utilities#process-status\"\n    icon = \"Globe\"\n\n    field_config = {\n        \"status_url\": {\"display_name\": \"Status URL\", \"info\": \"URL to check process status.\"},\n        \"pid\": {\"display_name\": \"PID\", \"info\": \"The process ID to check status for.\", \"field_type\": \"str\"},\n        \"headers\": {\n            \"display_name\": \"Headers\",\n            \"info\": \"The headers to send with the request.\",\n            \"input_types\": [\"Record\"],\n        },\n        \"timeout\": {\n            \"display_name\": \"Timeout\",\n            \"field_type\": \"int\",\n            \"info\": \"The timeout to use for the request.\",\n            \"value\": 30,  # 5 minutes\n        },\n        \"check_interval\": {\n            \"display_name\": \"Check Interval\",\n            \"field_type\": \"int\",\n            \"info\": \"Interval in seconds between status checks.\",\n            \"value\": 30,  # 5 minutes\n        },\n    }\n\n    async def make_status_request(\n        self,\n        client: httpx.AsyncClient,\n        status_url: str,\n        pid: str,\n        headers: Optional[Dict[str, str]] = None,\n        timeout: int = 30,  # 5 minutes\n    ) -> Record:\n        try:\n            response = await client.get(status_url, headers=headers, params={\"pid\": pid}, timeout=timeout)\n            try:\n                result = response.json()\n            except Exception:\n                result = response.text\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": response.status_code,\n                \"result\": result,\n            })\n        except httpx.TimeoutException:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 408,\n                \"error\": \"Request timed out\",\n            })\n        except Exception as exc:\n            return Record(data={\n                \"source\": status_url,\n                \"headers\": headers,\n                \"params\": {\"pid\": pid},\n                \"status_code\": 500,\n                \"error\": str(exc),\n            })\n\n    async def build(\n        self,\n        status_url: str,\n        pid: str,\n        headers: Optional[Record] = None,\n        timeout: int = 30,  # 5 minutes\n        check_interval: int = 30,  # 5 minutes\n    ) -> Record:\n        if not pid:\n            raise ValueError(\"PID is empty.\")\n        headers_dict = headers.data if headers else {}\n        while True:\n            async with httpx.AsyncClient() as client:\n                result = await self.make_status_request(client, status_url, pid, headers_dict, timeout)\n            if result.data.get(\"result\", {}).get(\"status\") == \"Completed\":\n                return result\n            await asyncio.sleep(check_interval)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "pid": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "pid",
                  "display_name": "PID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The process ID to check status for.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "status_url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "status_url",
                  "display_name": "Status URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "URL to check process status.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "http://54.177.8.72:5000/api/v1/process-status"
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 30,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The timeout to use for the request.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Check the status of a process given a PID.",
              "icon": "Globe",
              "base_classes": [
                "Record"
              ],
              "display_name": "Process Status",
              "documentation": "https://docs.axiestudio.org/components/utilities#process-status",
              "custom_fields": {
                "status_url": null,
                "pid": null,
                "headers": null,
                "timeout": null,
                "check_interval": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "status_url",
                "pid",
                "headers",
                "timeout",
                "check_interval"
              ],
              "beta": false
            },
            "id": "ProcessStatus-NBxVg"
          },
          "selected": false,
          "width": 384,
          "height": 574
        }
      ],
      "edges": [
        {
          "source": "APIRequest-4TBmZ",
          "target": "CustomComponent-MfTgy",
          "sourceHandle": "{œdataTypeœ:œAPIRequestœ,œidœ:œAPIRequest-4TBmZœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
          "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œCustomComponent-MfTgyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-APIRequest-4TBmZ{œdataTypeœ:œAPIRequestœ,œidœ:œAPIRequest-4TBmZœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-CustomComponent-MfTgy{œfieldNameœ:œpidœ,œidœ:œCustomComponent-MfTgyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "pid",
              "id": "CustomComponent-MfTgy",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "APIRequest",
              "id": "APIRequest-4TBmZ",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "selected": false
        },
        {
          "source": "CustomAPIRequest-EXAdR",
          "target": "ProcessStatus-UVzMW",
          "sourceHandle": "{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-EXAdRœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
          "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œProcessStatus-UVzMWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomAPIRequest-EXAdR{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-EXAdRœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-ProcessStatus-UVzMW{œfieldNameœ:œpidœ,œidœ:œProcessStatus-UVzMWœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "pid",
              "id": "ProcessStatus-UVzMW",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "CustomAPIRequest",
              "id": "CustomAPIRequest-EXAdR",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "selected": false
        },
        {
          "source": "CustomAPIRequest-1N00p",
          "target": "ProcessStatus-NBxVg",
          "sourceHandle": "{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-1N00pœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
          "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œProcessStatus-NBxVgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomAPIRequest-1N00p{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-1N00pœ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-ProcessStatus-NBxVg{œfieldNameœ:œpidœ,œidœ:œProcessStatus-NBxVgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "pid",
              "id": "ProcessStatus-NBxVg",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "CustomAPIRequest",
              "id": "CustomAPIRequest-1N00p",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "selected": false
        },
        {
          "source": "CustomAPIRequest-Eqjf4",
          "target": "CustomComponent-fPh7X",
          "sourceHandle": "{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-Eqjf4œ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}",
          "targetHandle": "{œfieldNameœ:œpidœ,œidœ:œCustomComponent-fPh7Xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "id": "reactflow__edge-CustomAPIRequest-Eqjf4{œdataTypeœ:œCustomAPIRequestœ,œidœ:œCustomAPIRequest-Eqjf4œ,œnameœ:œTextœ,œoutput_typesœ:[œTextœ]}-CustomComponent-fPh7X{œfieldNameœ:œpidœ,œidœ:œCustomComponent-fPh7Xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "pid",
              "id": "CustomComponent-fPh7X",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "CustomAPIRequest",
              "id": "CustomAPIRequest-Eqjf4",
              "name": "Text",
              "output_types": [
                "Text"
              ]
            }
          },
          "selected": false
        }
      ],
      "viewport": {
        "x": 99.36761790602884,
        "y": 258.8758011611904,
        "zoom": 0.6278366370560717
      }
    },
    "date_created": "2024-07-09T06:32:39.215Z",
    "date_updated": "2024-07-09T06:32:39.291Z",
    "status": "Public",
    "sort": null,
    "user_updated": "c076bce5-81d3-4b8b-a6a3-dee007e34c3d",
    "user_created": {
      "username": "Zod12",
      "first_name": "General",
      "last_name": "Zod",
      "id": "c076bce5-81d3-4b8b-a6a3-dee007e34c3d"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:01.114Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 88,
    "converter_version": "1.0.0"
  }
}