{
  "id": "08d6d675-eae2-4928-9532-8ea8ca38153b",
  "name": "LinkedIn Content Creator",
  "description": "Created any type of linkedin content. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/08d6d675-eae2-4928-9532-8ea8ca38153b",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-08T06:07:31.946Z",
    "updated": "2024-06-08T06:07:32.034Z",
    "downloaded": "2025-08-19T17:50:05.549Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a49",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatInput-eG2tS",
        "type": "genericNode",
        "position": {
          "x": 1056.0233047156012,
          "y": 907.6727771311195
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "proceed"
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Felipe",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-eG2tS"
        },
        "selected": false,
        "width": 384,
        "height": 469,
        "positionAbsolute": {
          "x": 1056.0233047156012,
          "y": 907.6727771311195
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-6izIg",
        "type": "genericNode",
        "position": {
          "x": 3189.523894175428,
          "y": 400.79088447483787
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "LinkedIn Briefing Agent",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-6izIg"
        },
        "selected": false,
        "width": 384,
        "height": 477,
        "dragging": false,
        "positionAbsolute": {
          "x": 3189.523894175428,
          "y": 400.79088447483787
        }
      },
      {
        "id": "MemoryComponent-ak26x",
        "type": "genericNode",
        "position": {
          "x": 1071.151251705466,
          "y": 402.96016201135274
        },
        "data": {
          "type": "MemoryComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "20",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "load_from_db": false,
                "title_case": false
              },
              "order": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Descending",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{sender_name}: {text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine and User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "icon": "history",
            "base_classes": [
              "str",
              "Text",
              "object"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "session_id": null,
              "n_messages": null,
              "order": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": true
          },
          "id": "MemoryComponent-ak26x",
          "description": "Retrieves stored chat messages given a specific Session ID.",
          "display_name": "Chat Memory"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "dragging": false,
        "positionAbsolute": {
          "x": 1071.151251705466,
          "y": 402.96016201135274
        }
      },
      {
        "id": "Prompt-TuTEh",
        "type": "genericNode",
        "position": {
          "x": 1608.1190576457827,
          "y": 843.4591584571979
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "\n# Instructions\nYour role is a LinkedIn agent specializing in collecting necessary information from users to dispatch a writing task to the content writer agent.\n\nEngage in a conversation with the user, captured in the \"answer\" field of a JSON object. Analyze the user's input to extract relevant information for the following categories:\n\nUser Context:\n- user_name\n- user_title\n- user_company\n- user_industry\n- user_skills\n- user_achievements\n- user_unique_value_proposition\n- user_goals\n\nTask Details:\n- document_type\n- target_audience\n- key_points\n- call_to_action\n- keywords\n- tone\n- length\n\nIf the user provides a detailed request, analyze the information and suggest answers for any missing fields. Only ask questions if the given information is too vague or insufficient to proceed with the task.\n\nGuide the user through the process of constructing a comprehensive brief by asking relevant questions and offering suggestions based on their role, company, and industry. Tailor your suggestions to align with the user's goals and the information they provide about their skills, achievements, and unique value proposition.\n\nOnce you have gathered sufficient information, provide a summary of the brief for the user to review and confirm. Before dispatching the task to the content writer, ask for the user's confirmation to proceed. Only dispatch the task when the user authorizes you to do so.\n\nOutput Format:\n- If still gathering information, output only the \"answer\" field in the JSON object, containing your response to the user.\n- Once all essential information is collected, output the \"answer\" field with a summary of the collected information and a request for the user's confirmation to proceed.\n- If the user confirms, output the complete JSON object with \"answer\", \"user_context\", \"extra_context\", and \"task\" fields, filling in any missing information with \"unknown\".\n\n# Example\nUser: I want to create a LinkedIn post that highlights my experience in project management and how it has contributed to the success of my company. Can you help me craft this post?\n\n<answer>\nAbsolutely! I'd be happy to assist you in creating a compelling LinkedIn post that showcases your project management experience and its impact on your company's success. To ensure the post aligns with your professional goals and highlights your unique value proposition, could you please provide some more information about your role, company, and industry? It would also be helpful to know the specific projects or achievements you'd like to emphasize, your target audience, and the desired tone and length of the post. Feel free to include any other details you think are relevant to demonstrating your expertise in project management.\n</answer>\n\nUser: I am a Senior Project Manager at a leading software development company in the tech industry. I have over 10 years of experience in managing complex projects and have successfully delivered several high-profile projects that have contributed to my company's growth and profitability. I want to focus on a recent project where I led a cross-functional team to develop and launch a new product ahead of schedule and under budget. The target audience would be other professionals in the tech industry, potential employers, and colleagues.\n\nLet's keep the tone professional and engaging, highlighting the importance of effective project management in driving business success. Around 300 words should work well.\n\n<answer>\nThanks for providing those details! Here's a summary of your LinkedIn post brief:\n\nUser Context:\n- Name: [Your Name]\n- Title: Senior Project Manager\n- Company: [Your Company]\n- Industry: Tech\n- Skills: Project management, cross-functional team leadership\n- Achievements: Successfully delivered high-profile projects contributing to company growth and profitability\n- Unique Value Proposition: 10+ years of experience managing complex projects in the tech industry\n- Goals: Showcase project management expertise and its impact on company success, engage other tech professionals and potential employers\n\nTask Details:\n- Document Type: LinkedIn post\n- Target Audience: Professionals in the tech industry, potential employers, colleagues\n- Key Points: Recent project success – led cross-functional team, developed and launched new product ahead of schedule and under budget\n- Tone: Professional, engaging, highlighting the importance of effective project management in driving business success\n- Length: Around 300 words\n\nPlease review this information and let me know if you'd like me to proceed with creating your LinkedIn post or if there are any changes you'd like to make.\n</answer>\n\nUser: This looks great! Please go ahead and create the post.\n\n(\n\"answer\": \"Excellent! I'll get started on crafting your LinkedIn post right away. You can expect to receive the completed post shortly.\",\n\"user_context\": (\n\"user_name\": \"[Your Name]\",\n\"user_title\": \"Senior Project Manager\",\n\"user_company\": \"[Your Company]\",\n\"user_industry\": \"Tech\",\n\"user_skills\": \"Project management, cross-functional team leadership\",\n\"user_achievements\": \"Successfully delivered high-profile projects contributing to company growth and profitability\",\n\"user_unique_value_proposition\": \"10+ years of experience managing complex projects in the tech industry\",\n\"user_goals\": \"Showcase project management expertise and its impact on company success, engage other tech professionals and potential employers\"\n),\n\"task\": (\n\"document_type\": \"LinkedIn post\",\n\"target_audience\": \"Professionals in the tech industry, potential employers, colleagues\",\n\"key_points\": \"Recent project success – led cross-functional team, developed and launched new product ahead of schedule and under budget\",\n\"tone\": \"Professional, engaging, highlighting the importance of effective project management in driving business success\",\n\"length\": \"Around 300 words\"\n)\n)\n\nRemember to structure your output using JSON, with the \"answer\" field containing your response to the user. Analyze the user's input to suggest answers for missing fields, and only ask questions if the given information is too vague. Include a summary of the collected information and request the user's confirmation before dispatching the task. Only include the \"user_context\", \"extra_context\", and \"task\" fields when the user has confirmed and authorized you to proceed with the task.\n\n# Inputs\n## Message History\n{history}\n\n## User Message\n{input}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "history": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "history",
                "display_name": "history",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "input": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input",
                "display_name": "input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "history",
                "input"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-TuTEh",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 477,
        "dragging": false,
        "positionAbsolute": {
          "x": 1608.1190576457827,
          "y": 843.4591584571979
        }
      },
      {
        "id": "TextOutput-1sU0O",
        "type": "genericNode",
        "position": {
          "x": 1592.994243073491,
          "y": 444.2946541669819
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as output.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: str = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "str",
              "object",
              "Text"
            ],
            "display_name": "Inspect Memory",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextOutput-1sU0O"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 1592.994243073491,
          "y": 444.2946541669819
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-GYs6i",
        "type": "genericNode",
        "position": {
          "x": 2054.0961003750285,
          "y": 458.9912385941035
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\r\nfrom axiestudio.field_typing import NestedDict, Text\r\n\r\n\r\nclass OpenAIModelComponent(LCModelComponent):\r\n    display_name = \"OpenAI\"\r\n    description = \"Generates text using OpenAI LLMs.\"\r\n    icon = \"OpenAI\"\r\n\r\n    field_order = [\r\n        \"max_tokens\",\r\n        \"model_kwargs\",\r\n        \"model_name\",\r\n        \"openai_api_base\",\r\n        \"openai_api_key\",\r\n        \"temperature\",\r\n        \"input_value\",\r\n        \"system_message\",\r\n        \"stream\",\r\n        \"json_mode\",\r\n        \"seed\",\r\n    ]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\"},\r\n            \"max_tokens\": {\r\n                \"display_name\": \"Max Tokens\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_kwargs\": {\r\n                \"display_name\": \"Model Kwargs\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_name\": {\r\n                \"display_name\": \"Model Name\",\r\n                \"advanced\": False,\r\n                \"options\": MODEL_NAMES,\r\n            },\r\n            \"openai_api_base\": {\r\n                \"display_name\": \"OpenAI API Base\",\r\n                \"advanced\": True,\r\n                \"info\": (\r\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\r\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\r\n                ),\r\n            },\r\n            \"openai_api_key\": {\r\n                \"display_name\": \"OpenAI API Key\",\r\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\r\n                \"advanced\": False,\r\n                \"password\": True,\r\n            },\r\n            \"temperature\": {\r\n                \"display_name\": \"Temperature\",\r\n                \"advanced\": False,\r\n                \"value\": 0.1,\r\n            },\r\n            \"stream\": {\r\n                \"display_name\": \"Stream\",\r\n                \"info\": STREAM_INFO_TEXT,\r\n                \"advanced\": True,\r\n            },\r\n            \"system_message\": {\r\n                \"display_name\": \"System Message\",\r\n                \"info\": \"System message to pass to the model.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"json_mode\": {\r\n                \"display_name\": \"JSON Mode\",\r\n                \"info\": \"Enable JSON mode for the model output.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"seed\": {\r\n                \"display_name\": \"Seed\",\r\n                \"info\": \"The seed controls the reproducibility of the job.\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        input_value: Text,\r\n        openai_api_key: str,\r\n        temperature: float,\r\n        model_name: str = \"gpt-4o\",\r\n        max_tokens: Optional[int] = 256,\r\n        model_kwargs: NestedDict = {},\r\n        openai_api_base: Optional[str] = None,\r\n        stream: bool = False,\r\n        system_message: Optional[str] = None,\r\n        json_mode: bool = False,\r\n        seed: Optional[int] = None,\r\n    ) -> Text:\r\n        if not openai_api_base:\r\n            openai_api_base = \"https://api.openai.com/v1\"\r\n        if openai_api_key:\r\n            api_key = SecretStr(openai_api_key)\r\n        else:\r\n            api_key = None\r\n\r\n        response_format = None\r\n        if json_mode:\r\n            response_format = {\"type\": \"json_object\"}\r\n\r\n        output = ChatOpenAI(\r\n            max_tokens=max_tokens,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=api_key,\r\n            temperature=temperature,\r\n            response_format=response_format,\r\n            seed=seed,\r\n        )\r\n\r\n        return self.get_chat_result(output, stream, input_value, system_message)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "json_mode": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_mode",
                "display_name": "JSON Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Enable JSON mode for the model output.",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4096",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-turbo",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "seed": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "seed",
                "display_name": "Seed",
                "advanced": false,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "load_from_db": false,
                "title_case": false,
                "value": "88"
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs, with optional JSON Mode and Seed parameters.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI - Json Mode + Seed",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null,
              "json_mode": null,
              "seed": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream",
              "json_mode",
              "seed"
            ],
            "beta": false,
            "official": false
          },
          "id": "OpenAIModel-GYs6i"
        },
        "selected": false,
        "width": 384,
        "height": 831,
        "positionAbsolute": {
          "x": 2054.0961003750285,
          "y": 458.9912385941035
        },
        "dragging": false
      },
      {
        "id": "Prompt-1QzTI",
        "type": "genericNode",
        "position": {
          "x": 1658.2339159873336,
          "y": 1898.7505902765563
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "# LinkedIn Content Writing Task\n\nYou are an AI assistant performing a zero-shot LinkedIn content writing task for a user. The necessary information about the user and task will be provided in the `{{user_context}}` and `{{task}}` variables.\n\n## Instructions\n\n1. Review the user's context in `{{user_context}}`, which may include:\n   - `\"user_name\"`: The user's full name\n   - `\"user_title\"`: The user's current job title\n   - `\"user_company\"`: The user's current company\n   - `\"user_industry\"`: The user's industry\n   - `\"user_skills\"`: The user's relevant skills and expertise\n   - `\"user_achievements\"`: The user's notable achievements and accomplishments\n   - `\"user_unique_value_proposition\"`: The user's unique value proposition or competitive advantage\n   - `\"user_goals\"`: The user's objectives for the content\n\n2. Examine the additional context provided in `{{extra_context}}`, which contains the message history sent by the user to the briefing agent. This may include:\n   - Specific examples or anecdotes that the user wants to incorporate into their LinkedIn profile content\n   - Additional background information or context that the user provided during the briefing process\n   - Any other relevant details or preferences that the user mentioned in their conversation with the briefing agent\n   - Use this extra context to enhance the personalization and relevance of the generated content, while ensuring it aligns with the user's goals and target audience\n\n3. Examine the task details in `{{task}}`, which may include:\n   - `\"document_type\"`: The type of LinkedIn content to be written\n   - `\"target_audience\"`: The intended audience for the content\n   - `\"key_points\"`: The main points to be highlighted in the content\n   - `\"call_to_action\"`: The desired action for the target audience to take after reading the content\n   - `\"keywords\"`: Specific words or phrases to be included in the content\n   - `\"tone\"`: The desired tone of the content\n   - `\"length\"`: The approximate word count for the content\n\n4. Using the provided user context, extra context, and task information, create a piece of content that:\n   - Is tailored to the user's background, skills, achievements, and goals\n   - Effectively reaches and engages the specified target audience\n   - Emphasizes the key points and unique value proposition mentioned in the task\n   - Incorporates the specified keywords naturally throughout the content\n   - Includes a clear call-to-action for the target audience\n   - Maintains the desired tone and length\n   - Uses storytelling techniques to make the content more engaging and memorable\n   - Is structured with a strong headline, opening hook, body paragraphs highlighting achievements and skills, and a closing call-to-action\n\n5. Output the generated content using Markdown formatting, without any additional commentary or explanations.\n\n## Inputs\n\n### {{user_context}}\n{user_context}\n\n### {{extra_context}}\n{extra_context}\n\n### {{task}}\n{task}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "user_context": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "user_context",
                "display_name": "user_context",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "task": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "task",
                "display_name": "task",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "extra_context": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "extra_context",
                "display_name": "extra_context",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "user_context",
                "extra_context",
                "task"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-1QzTI",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "dragging": false,
        "positionAbsolute": {
          "x": 1658.2339159873336,
          "y": 1898.7505902765563
        }
      },
      {
        "id": "AnthropicModel-tRkAy",
        "type": "genericNode",
        "position": {
          "x": 2501.9987164447593,
          "y": 2191.627816049223
        },
        "data": {
          "type": "AnthropicModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "anthropic_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "anthropic_api_key",
                "display_name": "Anthropic API Key",
                "advanced": false,
                "dynamic": false,
                "info": "Your Anthropic API key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "anthropic_api_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "anthropic_api_url",
                "display_name": "Anthropic API URL",
                "advanced": true,
                "dynamic": false,
                "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false,
                "value": "4096"
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "claude-3-opus-20240229",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307",
                  "claude-2.1",
                  "claude-2.0",
                  "claude-instant-1.2",
                  "claude-instant-1"
                ],
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate text using Anthropic Chat&Completion LLMs.",
            "icon": "Anthropic",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Anthropic 5",
            "documentation": "",
            "custom_fields": {
              "model": null,
              "input_value": null,
              "system_message": null,
              "anthropic_api_key": null,
              "max_tokens": null,
              "temperature": null,
              "anthropic_api_url": null,
              "stream": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "model",
              "anthropic_api_key",
              "max_tokens",
              "temperature",
              "anthropic_api_url",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "AnthropicModel-tRkAy"
        },
        "selected": false,
        "width": 384,
        "height": 649,
        "positionAbsolute": {
          "x": 2501.9987164447593,
          "y": 2191.627816049223
        },
        "dragging": false
      },
      {
        "id": "GroqModel-VMd5p",
        "type": "genericNode",
        "position": {
          "x": 2093.2079306342357,
          "y": 2227.564324511186
        },
        "data": {
          "type": "GroqModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "The input to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_groq import ChatGroq\nfrom axiestudio.base.models.groq_constants import MODEL_NAMES\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n\n    field_order = [\n        \"groq_api_key\",\n        \"model\",\n        \"max_output_tokens\",\n        \"temperature\",\n        \"top_k\",\n        \"top_p\",\n        \"n\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"groq_api_key\": {\n                \"display_name\": \"Groq API Key\",\n                \"info\": \"API key for the Groq API.\",\n                \"password\": True,\n            },\n            \"groq_api_base\": {\n                \"display_name\": \"Groq API Base\",\n                \"info\": \"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n                \"advanced\": True,\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Output Tokens\",\n                \"info\": \"The maximum number of tokens to generate.\",\n                \"advanced\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"info\": \"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            },\n            \"n\": {\n                \"display_name\": \"N\",\n                \"info\": \"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model\",\n                \"info\": \"The name of the model to use. Supported examples: gemini-pro\",\n                \"options\": MODEL_NAMES,\n            },\n            \"input_value\": {\"display_name\": \"Input\", \"info\": \"The input to the model.\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        groq_api_key: str,\n        model_name: str,\n        input_value: Text,\n        groq_api_base: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: float = 0.1,\n        n: Optional[int] = 1,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        output = ChatGroq(\n            model_name=model_name,\n            max_tokens=max_tokens or None,  # type: ignore\n            temperature=temperature,\n            groq_api_base=groq_api_base,\n            n=n or 1,\n            groq_api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "groq_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "groq_api_base",
                "display_name": "Groq API Base",
                "advanced": true,
                "dynamic": false,
                "info": "Base URL path for API requests, leave blank if not using a proxy or service emulator.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "groq_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "groq_api_key",
                "display_name": "Groq API Key",
                "advanced": false,
                "dynamic": false,
                "info": "API key for the Groq API.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Output Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate.",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "llama3-8b-8192",
                  "llama3-70b-8192",
                  "mixtral-8x7b-32768",
                  "gemma-7b-it"
                ],
                "name": "model_name",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "The name of the model to use. Supported examples: gemini-pro",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "llama3-70b-8192"
              },
              "n": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n",
                "display_name": "N",
                "advanced": true,
                "dynamic": false,
                "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                "load_from_db": false,
                "title_case": false
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate text using Groq.",
            "icon": "Groq",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Groq - 4",
            "documentation": "",
            "custom_fields": {
              "groq_api_key": null,
              "model_name": null,
              "input_value": null,
              "groq_api_base": null,
              "max_tokens": null,
              "temperature": null,
              "n": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "groq_api_key",
              "model",
              "max_output_tokens",
              "temperature",
              "top_k",
              "top_p",
              "n",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "GroqModel-VMd5p"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "positionAbsolute": {
          "x": 2093.2079306342357,
          "y": 2227.564324511186
        },
        "dragging": false
      },
      {
        "id": "GoogleGenerativeAIModel-afWQS",
        "type": "genericNode",
        "position": {
          "x": 2913.2582162190906,
          "y": 1589.01115831421
        },
        "data": {
          "type": "GoogleGenerativeAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "The input to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom pydantic.v1 import SecretStr\nfrom axiestudio.field_typing import Text, RangeSpec\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\n\n\nclass GoogleGenerativeAIComponent(LCModelComponent):\n    display_name: str = \"Google Generative AI\"\n    description: str = \"Generate text using Google Generative AI.\"\n    icon = \"GoogleGenerativeAI\"\n\n    field_order = [\n        \"google_api_key\",\n        \"model\",\n        \"max_output_tokens\",\n        \"temperature\",\n        \"top_k\",\n        \"top_p\",\n        \"n\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"google_api_key\": {\n                \"display_name\": \"Google API Key\",\n                \"info\": \"The Google API Key to use for the Google Generative AI.\",\n            },\n            \"max_output_tokens\": {\n                \"display_name\": \"Max Output Tokens\",\n                \"info\": \"The maximum number of tokens to generate.\",\n                \"advanced\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"info\": \"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"info\": \"Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.\",\n                \"rangeSpec\": RangeSpec(min=0, max=2, step=0.1),\n                \"advanced\": True,\n            },\n            \"top_p\": {\n                \"display_name\": \"Top P\",\n                \"info\": \"The maximum cumulative probability of tokens to consider when sampling.\",\n                \"advanced\": True,\n            },\n            \"n\": {\n                \"display_name\": \"N\",\n                \"info\": \"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n                \"advanced\": True,\n            },\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"info\": \"The name of the model to use. Supported examples: gemini-pro\",\n                \"options\": [\"gemini-1.5-pro\", \"gemini-1.5-flash\"],\n            },\n            \"code\": {\n                \"advanced\": True,\n            },\n            \"input_value\": {\"display_name\": \"Input\", \"info\": \"The input to the model.\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        google_api_key: str,\n        model: str,\n        input_value: Text,\n        max_output_tokens: Optional[int] = None,\n        temperature: float = 0.1,\n        top_k: Optional[int] = None,\n        top_p: Optional[float] = None,\n        n: Optional[int] = 1,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        output = ChatGoogleGenerativeAI(\n            model=model,\n            max_output_tokens=max_output_tokens or None,  # type: ignore\n            temperature=temperature,\n            top_k=top_k or None,\n            top_p=top_p or None,  # type: ignore\n            n=n or 1,\n            google_api_key=SecretStr(google_api_key),\n        )\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "google_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "google_api_key",
                "display_name": "Google API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The Google API Key to use for the Google Generative AI.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "max_output_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_output_tokens",
                "display_name": "Max Output Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate.",
                "load_from_db": false,
                "title_case": false,
                "value": "4096"
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gemini-1.5-pro",
                  "gemini-1.5-flash"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "The name of the model to use. Supported examples: gemini-pro",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "gemini-1.5-pro"
              },
              "n": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n",
                "display_name": "N",
                "advanced": true,
                "dynamic": false,
                "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                "load_from_db": false,
                "title_case": false
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "top_k": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.",
                "load_from_db": false,
                "title_case": false
              },
              "top_p": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum cumulative probability of tokens to consider when sampling.",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate text using Google Generative AI.",
            "icon": "GoogleGenerativeAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Google Generative AI 3",
            "documentation": "",
            "custom_fields": {
              "google_api_key": null,
              "model": null,
              "input_value": null,
              "max_output_tokens": null,
              "temperature": null,
              "top_k": null,
              "top_p": null,
              "n": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "google_api_key",
              "model",
              "max_output_tokens",
              "temperature",
              "top_k",
              "top_p",
              "n",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "GoogleGenerativeAIModel-afWQS",
          "description": "Generate text using Google Generative AI.",
          "display_name": "Google Generative AI 3"
        },
        "selected": false,
        "width": 384,
        "height": 563,
        "positionAbsolute": {
          "x": 2913.2582162190906,
          "y": 1589.01115831421
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-mfXv9",
        "type": "genericNode",
        "position": {
          "x": 2910.514365647761,
          "y": 2194.594188247905
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str = \"gpt-4o\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4096",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-turbo",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI 6",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "OpenAIModel-mfXv9"
        },
        "selected": false,
        "width": 384,
        "height": 649,
        "positionAbsolute": {
          "x": 2910.514365647761,
          "y": 2194.594188247905
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-JYfgR",
        "type": "genericNode",
        "position": {
          "x": 3366.0076204774286,
          "y": 1587.3549467060654
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Claude Sonnet",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-JYfgR"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 3366.0076204774286,
          "y": 1587.3549467060654
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-Ymr71",
        "type": "genericNode",
        "position": {
          "x": 3357.030487721442,
          "y": 1972.7848893719238
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "GPT-4 Turbo",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-Ymr71"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 3357.030487721442,
          "y": 1972.7848893719238
        },
        "dragging": false
      },
      {
        "id": "IDGenerator-fDNvU",
        "type": "genericNode",
        "position": {
          "x": 492.74254646726877,
          "y": 630.1916412859548
        },
        "data": {
          "type": "IDGenerator",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import uuid\nfrom typing import Any, Optional\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass UUIDGeneratorComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"ID Generator\"\n    description = \"Generates a unique ID.\"\n\n    def update_build_config(\n        self,\n        build_config: dict,\n        field_value: Any,\n        field_name: Optional[str] = None,\n    ):\n        if field_name == \"unique_id\":\n            build_config[field_name][\"value\"] = str(uuid.uuid4())\n        return build_config\n\n    def build_config(self):\n        return {\n            \"unique_id\": {\n                \"display_name\": \"Value\",\n                \"refresh_button\": True,\n            }\n        }\n\n    def build(self, unique_id: str) -> str:\n        return unique_id\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "unique_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "unique_id",
                "display_name": "Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "refresh_button": true,
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "06edbfe4-4a0c-4ba6-b06b-e6b792c8b47b"
              },
              "_type": "CustomComponent"
            },
            "description": "Generates a unique ID.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "ID Generator",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "unique_id": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "IDGenerator-fDNvU"
        },
        "selected": false,
        "width": 384,
        "height": 295,
        "positionAbsolute": {
          "x": 492.74254646726877,
          "y": 630.1916412859548
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-Pl6fi",
        "type": "genericNode",
        "position": {
          "x": 2659.8867615760046,
          "y": 426.10687036430596
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse a specific key from a JSON object.\"\r\n    output_types: list[str] = [\"Text\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_key\": {\r\n                \"display_name\": \"Key\",\r\n                \"info\": \"The key to parse from the JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_key: str) -> Optional[Text]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            if json_key in json_obj:\r\n                parsed_value = json_obj[json_key]\r\n                self.status = f\"Parsed value: {parsed_value}\"\r\n                return str(parsed_value)\r\n            else:\r\n                self.status = f\"Key '{json_key}' not found in the JSON object.\"\r\n                return None\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "JSON String",
                "advanced": false,
                "dynamic": false,
                "info": "Your JSON object.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "json_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_key",
                "display_name": "Key",
                "advanced": false,
                "dynamic": false,
                "info": "The key to parse from the JSON object.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "answer"
              },
              "_type": "CustomComponent"
            },
            "description": "Extract a specific key from a JSON object.",
            "base_classes": [
              "NoneType",
              "object",
              "str",
              "Text"
            ],
            "display_name": "JSON Key to Text",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "json_key": null
            },
            "output_types": [
              "Text",
              "NoneType"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-Pl6fi"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 2659.8867615760046,
          "y": 426.10687036430596
        },
        "dragging": true
      },
      {
        "id": "RecordsToText-CC08y",
        "type": "genericNode",
        "position": {
          "x": 1229.602331851882,
          "y": 1992.2301843120326
        },
        "data": {
          "type": "RecordsToText",
          "node": {
            "template": {
              "records": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "records",
                "display_name": "Records",
                "advanced": false,
                "dynamic": false,
                "info": "The records to convert to text.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{user_context}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Convert Records into plain text following a specified template.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Records To Text",
            "documentation": "",
            "custom_fields": {
              "records": null,
              "template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecordsToText-CC08y"
        },
        "selected": false,
        "width": 384,
        "height": 357,
        "positionAbsolute": {
          "x": 1229.602331851882,
          "y": 1992.2301843120326
        },
        "dragging": false
      },
      {
        "id": "RecordsToText-RGZYd",
        "type": "genericNode",
        "position": {
          "x": 1225.2779405344208,
          "y": 1604.0924098082992
        },
        "data": {
          "type": "RecordsToText",
          "node": {
            "template": {
              "records": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "records",
                "display_name": "Records",
                "advanced": false,
                "dynamic": false,
                "info": "The records to convert to text.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{task}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Convert Records into plain text following a specified template.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Records To Text",
            "documentation": "",
            "custom_fields": {
              "records": null,
              "template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecordsToText-RGZYd"
        },
        "selected": false,
        "width": 384,
        "height": 357,
        "positionAbsolute": {
          "x": 1225.2779405344208,
          "y": 1604.0924098082992
        },
        "dragging": false
      },
      {
        "id": "AnthropicModel-UiAVe",
        "type": "genericNode",
        "position": {
          "x": 2092.1899400968537,
          "y": 1543.1305470602329
        },
        "data": {
          "type": "AnthropicModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "anthropic_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "anthropic_api_key",
                "display_name": "Anthropic API Key",
                "advanced": false,
                "dynamic": false,
                "info": "Your Anthropic API key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "anthropic_api_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "anthropic_api_url",
                "display_name": "Anthropic API URL",
                "advanced": true,
                "dynamic": false,
                "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false,
                "value": "4096"
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "claude-3-sonnet-20240229",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307",
                  "claude-2.1",
                  "claude-2.0",
                  "claude-instant-1.2",
                  "claude-instant-1"
                ],
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate text using Anthropic Chat&Completion LLMs.",
            "icon": "Anthropic",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Anthropic 1",
            "documentation": "",
            "custom_fields": {
              "model": null,
              "input_value": null,
              "system_message": null,
              "anthropic_api_key": null,
              "max_tokens": null,
              "temperature": null,
              "anthropic_api_url": null,
              "stream": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "model",
              "anthropic_api_key",
              "max_tokens",
              "temperature",
              "anthropic_api_url",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "AnthropicModel-UiAVe"
        },
        "selected": false,
        "width": 384,
        "height": 649,
        "positionAbsolute": {
          "x": 2092.1899400968537,
          "y": 1543.1305470602329
        },
        "dragging": false
      },
      {
        "id": "MemoryComponent-nBkkb",
        "type": "genericNode",
        "position": {
          "x": 2045.1466030860397,
          "y": -42.962088224938356
        },
        "data": {
          "type": "MemoryComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "20",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "load_from_db": false,
                "title_case": false
              },
              "order": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Descending",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{sender_name}: {text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "icon": "history",
            "base_classes": [
              "str",
              "Text",
              "object"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "session_id": null,
              "n_messages": null,
              "order": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": true
          },
          "id": "MemoryComponent-nBkkb",
          "description": "Retrieves stored chat messages given a specific Session ID.",
          "display_name": "Chat Memory"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 2045.1466030860397,
          "y": -42.962088224938356
        },
        "dragging": false
      },
      {
        "id": "CreateRecord-X1pnc",
        "type": "genericNode",
        "position": {
          "x": 2653.64222388771,
          "y": 820.9062186930845
        },
        "data": {
          "type": "CreateRecord",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Any\r\n\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.field_typing.range_spec import RangeSpec\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.schema.dotdict import dotdict\r\nfrom axiestudio.template.field.base import TemplateField\r\n\r\n\r\nclass CreateRecordComponent(CustomComponent):\r\n    display_name = \"Create Record\"\r\n    description = \"Dynamically create a Record with a specified number of fields and/or from a JSON string.\"\r\n    field_order = [\"number_of_fields\", \"text_key\", \"json_string\"]\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.field_values = {}\r\n\r\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\r\n        if field_name == \"number_of_fields\":\r\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"json_string\"]\r\n            try:\r\n                field_value_int = int(field_value)\r\n            except TypeError:\r\n                return build_config\r\n            existing_fields = {}\r\n            if field_value_int > 15:\r\n                build_config[\"number_of_fields\"][\"value\"] = 15\r\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Records.\")\r\n            if len(build_config) > len(default_keys) + field_value_int:\r\n                # back up the existing template fields\r\n                for key in build_config.copy():\r\n                    if key not in default_keys:\r\n                        existing_fields[key] = build_config.pop(key)\r\n\r\n            for i in range(1, field_value_int + 1):\r\n                key = f\"field_{i}_key\"\r\n                if key in existing_fields:\r\n                    field = existing_fields[key]\r\n                    build_config[key] = field\r\n                else:\r\n                    field = TemplateField(\r\n                        display_name=f\"Field {i}\",\r\n                        name=key,\r\n                        info=f\"Key for field {i}.\",\r\n                        field_type=\"dict\",\r\n                        input_types=[\"Text\", \"Record\"],\r\n                    )\r\n                    build_config[field.name] = field.to_dict()\r\n\r\n                # Restore the field value from the component's state\r\n                if key in self.field_values:\r\n                    build_config[key][\"value\"] = self.field_values[key]\r\n\r\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\r\n        elif field_name and field_name.startswith(\"field_\") and field_name.endswith(\"_key\"):\r\n            # Store the field value in the component's state\r\n            self.field_values[field_name] = field_value\r\n\r\n        return build_config\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"number_of_fields\": {\r\n                \"display_name\": \"Number of Fields\",\r\n                \"info\": \"Number of fields to be added to the record.\",\r\n                \"real_time_refresh\": True,\r\n                \"rangeSpec\": RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\r\n            },\r\n            \"text_key\": {\r\n                \"display_name\": \"Text Key\",\r\n                \"info\": \"Key to be used as text.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"json_string\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"JSON string to be added to the record.\",\r\n                \"field_type\": \"str\",\r\n                \"multiline\": True,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        number_of_fields: int = 0,\r\n        text_key: str = \"text\",\r\n        json_string: str = \"\",\r\n        **kwargs,\r\n    ) -> Record:\r\n        data = {}\r\n        for value_dict in kwargs.values():\r\n            if isinstance(value_dict, dict):\r\n                # Check if the value of the value_dict is a Record\r\n                value_dict = {\r\n                    key: value.get_text() if isinstance(value, Record) else value for key, value in value_dict.items()\r\n                }\r\n                data.update(value_dict)\r\n\r\n        if json_string:\r\n            try:\r\n                json_data = json.loads(json_string)\r\n                if isinstance(json_data, dict):\r\n                    data.update(json_data)\r\n                else:\r\n                    raise ValueError(\"JSON string must represent an object (dictionary).\")\r\n            except json.JSONDecodeError:\r\n                raise ValueError(\"Invalid JSON string.\")\r\n\r\n        return_record = Record(data=data, text_key=text_key)\r\n        self.status = return_record\r\n        return return_record",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "json_string": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_string",
                "display_name": "JSON String",
                "advanced": false,
                "dynamic": false,
                "info": "JSON string to be added to the record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "number_of_fields": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "number_of_fields",
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "load_from_db": false,
                "title_case": false
              },
              "text_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "text_key",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "Key to be used as text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent",
              "field_1_key": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {
                  "extra_context": ""
                },
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_1_key",
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Dynamically create a Record with a specified number of fields and/or from a JSON string.",
            "base_classes": [
              "Record"
            ],
            "display_name": "Create Record from JSON",
            "documentation": "",
            "custom_fields": {
              "number_of_fields": null,
              "text_key": null,
              "json_string": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "number_of_fields",
              "text_key",
              "json_string"
            ],
            "beta": false
          },
          "id": "CreateRecord-X1pnc",
          "description": "Dynamically create a Record with a specified number of fields and/or from a JSON string.",
          "display_name": "Create Record from JSON"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "dragging": false,
        "positionAbsolute": {
          "x": 2653.64222388771,
          "y": 820.9062186930845
        }
      },
      {
        "id": "SubFlow-8OO1k",
        "type": "genericNode",
        "position": {
          "x": 3208.135432309996,
          "y": 956.1572662095798
        },
        "data": {
          "type": "SubFlow",
          "node": {
            "template": {
              "record": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass RecordToJSONFileComponent(CustomComponent):\r\n    display_name = \"Record to JSON File\"\r\n    description = \"Saves a single record into a JSON file named 'tmp_json_record.json'.\"\r\n    icon = \"save\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"tmp_json_record.json\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, record: Record, file_path: Optional[str] = \"tmp_json_record.json\") -> str:\r\n        try:\r\n            data = record.dict()\r\n            with open(file_path, \"w\") as file:\r\n                json.dump(data, file, indent=2)\r\n            self.status = f\"Successfully saved record to {file_path}\"\r\n            return file_path\r\n        except IOError as e:\r\n            raise ValueError(f\"Error saving record to file: {str(e)}\")",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "tmp_json_records.json",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Saves a single record into a JSON file named 'tmp_json_record.json'.",
            "icon": "save",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Record to JSON File",
            "documentation": "",
            "custom_fields": {
              "record": null,
              "file_path": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "SubFlow-8OO1k"
        },
        "selected": false,
        "width": 384,
        "height": 263,
        "positionAbsolute": {
          "x": 3208.135432309996,
          "y": 956.1572662095798
        },
        "dragging": false
      },
      {
        "id": "SubFlow-v11ty",
        "type": "genericNode",
        "position": {
          "x": 743.4762068979851,
          "y": 1990.9632172300348
        },
        "data": {
          "type": "SubFlow",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass JSONFileToRecordComponent(CustomComponent):\r\n    display_name = \"Load JSON as Record\"\r\n    description = \"Loads a JSON file named 'tmp_json_record.json' and returns a single record.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"tmp_json_record.json\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"tmp_json_record.json\") -> Record:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                data = json.load(file)\r\n            record = Record(**data)\r\n            self.status = f\"Successfully loaded record from {file_path}\"\r\n            return record\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return Record()\r\n        except json.JSONDecodeError as e:\r\n            raise ValueError(f\"Invalid JSON file: {str(e)}\")",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "tmp_json_records.json",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Loads a JSON file named 'tmp_json_record.json' and returns a single record.",
            "icon": "file-text",
            "base_classes": [
              "Record"
            ],
            "display_name": "Load JSON as Records",
            "documentation": "",
            "custom_fields": {
              "file_path": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "SubFlow-v11ty"
        },
        "selected": false,
        "width": 384,
        "height": 219,
        "positionAbsolute": {
          "x": 743.4762068979851,
          "y": 1990.9632172300348
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-fPTPx",
        "type": "genericNode",
        "position": {
          "x": 3780.434196703228,
          "y": 1590.8309228271996
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Claude Opus",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-fPTPx"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 3780.434196703228,
          "y": 1590.8309228271996
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-fhYjS",
        "type": "genericNode",
        "position": {
          "x": 3359.3210099186017,
          "y": 2365.3508472429703
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Llama3 70b",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-fhYjS"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 3359.3210099186017,
          "y": 2365.3508472429703
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-sYkqo",
        "type": "genericNode",
        "position": {
          "x": 3779.993969526544,
          "y": 2363.087194426783
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Gemini",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-sYkqo"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 3779.993969526544,
          "y": 2363.087194426783
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-hnHl2",
        "type": "genericNode",
        "position": {
          "x": 3771.822973760386,
          "y": 1970.783501062046
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "GPT4-o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-hnHl2"
        },
        "selected": false,
        "width": 384,
        "height": 383,
        "positionAbsolute": {
          "x": 3771.822973760386,
          "y": 1970.783501062046
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-H8mmV",
        "type": "genericNode",
        "position": {
          "x": 2507.808826871281,
          "y": 1520.011412698655
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str = \"gpt-4o\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4096",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI 2",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "OpenAIModel-H8mmV"
        },
        "selected": false,
        "width": 384,
        "height": 649,
        "dragging": false,
        "positionAbsolute": {
          "x": 2507.808826871281,
          "y": 1520.011412698655
        }
      },
      {
        "id": "OpenAIModel-XiKgK",
        "type": "genericNode",
        "position": {
          "x": 2078.8329168562004,
          "y": 2975.7129835387855
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str = \"gpt-4o\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4096",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": false,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "Generate a concise, descriptive title for the given task. Output the title only, without any additional text or labels."
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "OpenAI 2",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false
          },
          "id": "OpenAIModel-XiKgK"
        },
        "selected": false,
        "width": 384,
        "height": 743,
        "positionAbsolute": {
          "x": 2078.8329168562004,
          "y": 2975.7129835387855
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-HNEff",
        "type": "genericNode",
        "position": {
          "x": 2624.808684532978,
          "y": 3087.2340716682634
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Dict, Any\r\n\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionTitleGen(CustomComponent):\r\n    display_name = \"Generate Title Page Properties [Notion]\"\r\n    description = \"Generate the  properties for Creating a Notion page.\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"title\": {\r\n                \"display_name\": \"Article Title\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The meeting summary to add to the page.\",\r\n                \"multiline\": True,\r\n            },\r\n        }\r\n\r\n    def sanitize_input(self, input_str: str) -> str:\r\n        # Remove leading/trailing whitespace\r\n        return input_str.strip()\r\n\r\n    def build(\r\n        self,\r\n        title: str,\r\n    ) -> str:\r\n        sanitized_title  = self.sanitize_input(title)\r\n\r\n\r\n        properties = {\r\n            \"title\":{\r\n                \"id\":\"title\",\r\n                \"type\":\"title\",\r\n            \t\"title\":[\r\n                    {\r\n                        \"type\":\"text\",\r\n            \t\t\t\"text\":{\r\n                            \"content\": sanitized_title\r\n            \t\t\t}\r\n            \t\t}\r\n            \t]\r\n            }   \r\n        }\r\n        properties_json = json.dumps(properties, ensure_ascii=False)\r\n\r\n        self.status = f\"Generated properties:\\n{properties_json}\"\r\n        return properties_json",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "title": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "title",
                "display_name": "Article Title",
                "advanced": false,
                "dynamic": false,
                "info": "The meeting summary to add to the page.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Generate the  properties for Creating a Notion page.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Article Name",
            "documentation": "",
            "custom_fields": {
              "title": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-HNEff"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": 2624.808684532978,
          "y": 3087.2340716682634
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-mys14",
        "type": "genericNode",
        "position": {
          "x": 3130.559362261181,
          "y": 3040.812836393335
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import Optional\r\n\r\nimport requests\r\nfrom axiestudio.custom import CustomComponent\r\n\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionPageCreator(CustomComponent):\r\n    display_name = \"Create Page [Notion]\"\r\n    description = \"A component for creating Notion pages.\"\r\n    documentation: str = \"https://docs.axiestudio.org/integrations/notion/page-create\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"database_id\": {\r\n                \"display_name\": \"Database ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the Notion database.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n            \"properties\": {\r\n                \"display_name\": \"Properties\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}\",\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        database_id: str,\r\n        notion_secret: str,\r\n        properties: str = '{\"Task name\": {\"id\": \"title\", \"type\": \"title\", \"title\": [{\"type\": \"text\", \"text\": {\"content\": \"Send Notion Components to LF\", \"link\": null}}]}}',\r\n    ) -> Record:\r\n        if not database_id or not properties:\r\n            raise ValueError(\"Invalid input. Please provide 'database_id' and 'properties'.\")\r\n\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"parent\": {\"database_id\": database_id},\r\n            \"properties\": json.loads(properties),\r\n        }\r\n\r\n        response = requests.post(\"https://api.notion.com/v1/pages\", headers=headers, json=data)\r\n\r\n        if response.status_code == 200:\r\n            page_id = response.json()[\"id\"]\r\n            self.status = f\"Successfully created Notion page with ID: {page_id}\\n {str(response.json())}\"\r\n            return Record(text=str(response.json()), **response.json())\r\n        else:\r\n            error_message = f\"Failed to create Notion page. Status code: {response.status_code}, Error: {response.text}\"\r\n            self.status = error_message\r\n            raise Exception(error_message)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "database_id",
                "display_name": "Database ID",
                "advanced": false,
                "dynamic": false,
                "info": "The ID of the Notion database.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "notion_secret": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "notion_secret",
                "display_name": "Notion Secret",
                "advanced": false,
                "dynamic": false,
                "info": "The Notion integration token.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "properties": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "properties",
                "display_name": "Properties",
                "advanced": false,
                "dynamic": false,
                "info": "The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "A component for creating Notion pages.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "Record"
            ],
            "display_name": "Create Page [Notion] ",
            "documentation": "https://docs.axiestudio.org/integrations/notion/page-create",
            "custom_fields": {
              "database_id": null,
              "notion_secret": null,
              "properties": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-mys14"
        },
        "selected": false,
        "width": 384,
        "height": 477,
        "dragging": false,
        "positionAbsolute": {
          "x": 3130.559362261181,
          "y": 3040.812836393335
        }
      },
      {
        "id": "RecordsToText-ZZIh7",
        "type": "genericNode",
        "position": {
          "x": 3662.128285183201,
          "y": 3087.9778658444534
        },
        "data": {
          "type": "RecordsToText",
          "node": {
            "template": {
              "records": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "records",
                "display_name": "Records",
                "advanced": false,
                "dynamic": false,
                "info": "The records to convert to text.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{id}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Convert Records into plain text following a specified template.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Records To Text",
            "documentation": "",
            "custom_fields": {
              "records": null,
              "template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "RecordsToText-ZZIh7"
        },
        "selected": false,
        "width": 384,
        "height": 357,
        "positionAbsolute": {
          "x": 3662.128285183201,
          "y": 3087.9778658444534
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-ezhFs",
        "type": "genericNode",
        "position": {
          "x": 4169.613628203309,
          "y": 3035.1701179602924
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "block_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "block_id",
                "display_name": "Page/Block ID",
                "advanced": false,
                "dynamic": false,
                "info": "The ID of the page/block to add the content.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import List, Dict, Any\r\nfrom markdown import markdown\r\nfrom bs4 import BeautifulSoup\r\nimport requests\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass AddContentToPage(CustomComponent):\r\n    display_name = \"Add Content to Page [Notion]\"\r\n    description = \"Convert markdown text to Notion blocks and append them to a Notion page.\"\r\n    documentation: str = \"https://developers.notion.com/reference/patch-block-children\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"markdown_text\": {\r\n                \"display_name\": \"Markdown Text\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The markdown text to convert to Notion blocks.\",\r\n                \"multiline\": True,\r\n            },\r\n             \"block_id\": {\r\n                \"display_name\": \"Page/Block ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the page/block to add the content.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, markdown_text: str, block_id: str, notion_secret: str) -> Record:\r\n        html_text = markdown(markdown_text)\r\n        soup = BeautifulSoup(html_text, 'html.parser')\r\n        blocks = self.process_node(soup)\r\n\r\n        url = f\"https://api.notion.com/v1/blocks/{block_id}/children\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"children\": blocks,\r\n        }\r\n\r\n        response = requests.patch(url, headers=headers, json=data)\r\n        self.status = str(response.json())\r\n        response.raise_for_status()\r\n\r\n        result = response.json()\r\n        self.status = f\"Appended {len(blocks)} blocks to page with ID: {block_id}\"\r\n        return Record(data=result, text=json.dumps(result))\r\n\r\n    def process_node(self, node):\r\n        blocks = []\r\n        if isinstance(node, str):\r\n            text = node.strip()\r\n            if text:\r\n                if text.startswith('#'):\r\n                    heading_level = text.count('#', 0, 6)\r\n                    heading_text = text[heading_level:].strip()\r\n                    if heading_level == 1:\r\n                        blocks.append(self.create_block('heading_1', heading_text))\r\n                    elif heading_level == 2:\r\n                        blocks.append(self.create_block('heading_2', heading_text))\r\n                    elif heading_level == 3:\r\n                        blocks.append(self.create_block('heading_3', heading_text))\r\n                else:\r\n                    blocks.append(self.create_block('paragraph', text))\r\n        elif node.name == 'h1':\r\n            blocks.append(self.create_block('heading_1', node.get_text(strip=True)))\r\n        elif node.name == 'h2':\r\n            blocks.append(self.create_block('heading_2', node.get_text(strip=True)))\r\n        elif node.name == 'h3':\r\n            blocks.append(self.create_block('heading_3', node.get_text(strip=True)))\r\n        elif node.name == 'p':\r\n            code_node = node.find('code')\r\n            if code_node:\r\n                code_text = code_node.get_text()\r\n                language, code = self.extract_language_and_code(code_text)\r\n                blocks.append(self.create_block('code', code, language=language))\r\n            elif self.is_table(str(node)):\r\n                blocks.extend(self.process_table(node))\r\n            else:\r\n                blocks.append(self.create_block('paragraph', node.get_text(strip=True)))\r\n        elif node.name == 'ul':\r\n            blocks.extend(self.process_list(node, 'bulleted_list_item'))\r\n        elif node.name == 'ol':\r\n            blocks.extend(self.process_list(node, 'numbered_list_item'))\r\n        elif node.name == 'blockquote':\r\n            blocks.append(self.create_block('quote', node.get_text(strip=True)))\r\n        elif node.name == 'hr':\r\n            blocks.append(self.create_block('divider', ''))\r\n        elif node.name == 'img':\r\n            blocks.append(self.create_block('image', '', image_url=node.get('src')))\r\n        elif node.name == 'a':\r\n            blocks.append(self.create_block('bookmark', node.get_text(strip=True), link_url=node.get('href')))\r\n        elif node.name == 'table':\r\n            blocks.extend(self.process_table(node))\r\n\r\n        for child in node.children:\r\n            if isinstance(child, str):\r\n                continue\r\n            blocks.extend(self.process_node(child))\r\n\r\n        return blocks\r\n\r\n    def extract_language_and_code(self, code_text):\r\n        lines = code_text.split('\\n')\r\n        language = lines[0].strip()\r\n        code = '\\n'.join(lines[1:]).strip()\r\n        return language, code\r\n\r\n    def is_code_block(self, text):\r\n        return text.startswith('```')\r\n\r\n    def extract_code_block(self, text):\r\n        lines = text.split('\\n')\r\n        language = lines[0].strip('`').strip()\r\n        code = '\\n'.join(lines[1:]).strip('`').strip()\r\n        return language, code\r\n    \r\n    def is_table(self, text):\r\n        rows = text.split('\\n')\r\n        if len(rows) < 2:\r\n            return False\r\n\r\n        has_separator = False\r\n        for i, row in enumerate(rows):\r\n            if '|' in row:\r\n                cells = [cell.strip() for cell in row.split('|')]\r\n                cells = [cell for cell in cells if cell]  # Remove empty cells\r\n                if i == 1 and all(set(cell) <= set('-|') for cell in cells):\r\n                    has_separator = True\r\n                elif not cells:\r\n                    return False\r\n\r\n        return has_separator and len(rows) >= 3\r\n\r\n    def process_list(self, node, list_type):\r\n        blocks = []\r\n        for item in node.find_all('li'):\r\n            item_text = item.get_text(strip=True)\r\n            checked = item_text.startswith('[x]')\r\n            is_checklist = item_text.startswith('[ ]') or checked\r\n\r\n            if is_checklist:\r\n                item_text = item_text.replace('[x]', '').replace('[ ]', '').strip()\r\n                blocks.append(self.create_block('to_do', item_text, checked=checked))\r\n            else:\r\n                blocks.append(self.create_block(list_type, item_text))\r\n        return blocks\r\n\r\n    def process_table(self, node):\r\n        blocks = []\r\n        header_row = node.find('thead').find('tr') if node.find('thead') else None\r\n        body_rows = node.find('tbody').find_all('tr') if node.find('tbody') else []\r\n\r\n        if header_row or body_rows:\r\n            table_width = max(len(header_row.find_all(['th', 'td'])) if header_row else 0,\r\n                            max(len(row.find_all(['th', 'td'])) for row in body_rows))\r\n\r\n            table_block = self.create_block('table', '', table_width=table_width, has_column_header=bool(header_row))\r\n            blocks.append(table_block)\r\n\r\n            if header_row:\r\n                header_cells = [cell.get_text(strip=True) for cell in header_row.find_all(['th', 'td'])]\r\n                header_row_block = self.create_block('table_row', header_cells)\r\n                blocks.append(header_row_block)\r\n\r\n            for row in body_rows:\r\n                cells = [cell.get_text(strip=True) for cell in row.find_all(['th', 'td'])]\r\n                row_block = self.create_block('table_row', cells)\r\n                blocks.append(row_block)\r\n\r\n        return blocks\r\n    \r\n    def create_block(self, block_type: str, content: str, **kwargs) -> Dict[str, Any]:\r\n        block = {\r\n            \"object\": \"block\",\r\n            \"type\": block_type,\r\n            block_type: {},\r\n        }\r\n\r\n        if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"bulleted_list_item\", \"numbered_list_item\", \"quote\"]:\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n        elif block_type == 'to_do':\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['checked'] = kwargs.get('checked', False)\r\n        elif block_type == 'code':\r\n            block[block_type]['rich_text'] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['language'] = kwargs.get('language', 'plain text')\r\n        elif block_type == 'image':\r\n            block[block_type] = {\r\n                \"type\": \"external\",\r\n                \"external\": {\r\n                    \"url\": kwargs.get('image_url', '')\r\n                }\r\n            }\r\n        elif block_type == 'divider':\r\n            pass\r\n        elif block_type == 'bookmark':\r\n            block[block_type]['url'] = kwargs.get('link_url', '')\r\n        elif block_type == 'table':\r\n            block[block_type]['table_width'] = kwargs.get('table_width', 0)\r\n            block[block_type]['has_column_header'] = kwargs.get('has_column_header', False)\r\n            block[block_type]['has_row_header'] = kwargs.get('has_row_header', False)\r\n        elif block_type == 'table_row':\r\n            block[block_type]['cells'] = [[{'type': 'text', 'text': {'content': cell}} for cell in content]]\r\n\r\n        return block",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "markdown_text": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "markdown_text",
                "display_name": "Markdown Text",
                "advanced": false,
                "dynamic": false,
                "info": "The markdown text to convert to Notion blocks.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "notion_secret": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "notion_secret",
                "display_name": "Notion Secret",
                "advanced": false,
                "dynamic": false,
                "info": "The Notion integration token.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Convert markdown text to Notion blocks and append them to a Notion page.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "Record"
            ],
            "display_name": "Add Content to Page [Notion] ",
            "documentation": "https://developers.notion.com/reference/patch-block-children",
            "custom_fields": {
              "markdown_text": null,
              "block_id": null,
              "notion_secret": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-ezhFs"
        },
        "selected": true,
        "width": 384,
        "height": 497,
        "positionAbsolute": {
          "x": 4169.613628203309,
          "y": 3035.1701179602924
        },
        "dragging": false
      },
      {
        "id": "Prompt-OC63E",
        "type": "genericNode",
        "position": {
          "x": 4192.192566689434,
          "y": 1817.0792820118797
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Here are the generated Drafts: \\n\\n\n---\n**Draft 1:**\\n\\n\n{draft1}\n---\n**Draft 2:**\\n\\n\n{draft2}\n---\n**Draft 3:**\\n\\n\n{draft3}\n---\n**Draft 4:**\\n\\n\n{draft4}\n---\n**Draft 5:**\\n\\n\n{draft5}\n---\n**Draft 6:**\\n\\n\n{draft6}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "draft1": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "draft1",
                "display_name": "draft1",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "draft2": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "draft2",
                "display_name": "draft2",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "draft3": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "draft3",
                "display_name": "draft3",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "draft4": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "draft4",
                "display_name": "draft4",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "draft6": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "draft6",
                "display_name": "draft6",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "draft5": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "draft5",
                "display_name": "draft5",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "draft1",
                "draft2",
                "draft3",
                "draft4",
                "draft5",
                "draft6"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-OC63E",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 853,
        "positionAbsolute": {
          "x": 4192.192566689434,
          "y": 1817.0792820118797
        },
        "dragging": false
      },
      {
        "id": "TextOutput-uEhDK",
        "type": "genericNode",
        "position": {
          "x": 4613.158284089491,
          "y": 2302.713415998401
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass SaveToFileComponent(CustomComponent):\r\n    display_name = \"Save to File\"\r\n    description = \"Save the input to a file named 'temporary_file_debug.txt'.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\", \"multiline\": True},\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, file_path: Optional[str] = \"temporary_file_debug.txt\") -> None:\r\n        with open(file_path, \"w\") as file:\r\n            file.write(input_value)\r\n        self.status = f\"Input saved to {file_path}\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "drafts.txt",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Save the input to a file named 'temporary_file_debug.txt'.",
            "icon": "file-text",
            "base_classes": [],
            "display_name": "Save to File",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "file_path": null
            },
            "output_types": [],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "TextOutput-uEhDK"
        },
        "selected": false,
        "width": 384,
        "height": 355,
        "dragging": false,
        "positionAbsolute": {
          "x": 4613.158284089491,
          "y": 2302.713415998401
        }
      },
      {
        "id": "TextOutput-yoXhj",
        "type": "genericNode",
        "position": {
          "x": 1509.5207701755469,
          "y": 3021.1899536032247
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass ReadFromFileComponent(CustomComponent):\r\n    display_name = \"Read from File\"\r\n    description = \"Read the contents of a file named 'temporary_file_debug.txt' and return as a string.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"temporary_file_debug.txt\") -> Text:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                content = file.read()\r\n            self.status = f\"File {file_path} read successfully: \\n{content}\"\r\n            return content\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return \"\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_path": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "drafts.txt",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
            "icon": "file-text",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Read from File",
            "documentation": "",
            "custom_fields": {
              "file_path": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "TextOutput-yoXhj"
        },
        "selected": false,
        "width": 384,
        "height": 309,
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "MemoryComponent-ak26x",
        "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}",
        "target": "TextOutput-1sU0O",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-1sU0Oœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-1sU0O",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str",
              "Text",
              "object"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-ak26x"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-MemoryComponent-ak26x{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}-TextOutput-1sU0O{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-1sU0Oœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-TuTEh",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-TuTEhœ}",
        "target": "OpenAIModel-GYs6i",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-GYs6iœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-GYs6i",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-TuTEh"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-TuTEh{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-TuTEhœ}-OpenAIModel-GYs6i{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-GYs6iœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-1QzTI",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
        "target": "AnthropicModel-tRkAy",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-tRkAyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "AnthropicModel-tRkAy",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-1QzTI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-AnthropicModel-tRkAy{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-tRkAyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-1QzTI",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
        "target": "GroqModel-VMd5p",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-VMd5pœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "GroqModel-VMd5p",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-1QzTI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-GroqModel-VMd5p{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-VMd5pœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-1QzTI",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
        "target": "GoogleGenerativeAIModel-afWQS",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-afWQSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "GoogleGenerativeAIModel-afWQS",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-1QzTI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-GoogleGenerativeAIModel-afWQS{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-afWQSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-1QzTI",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
        "target": "OpenAIModel-mfXv9",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-mfXv9œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-mfXv9",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-1QzTI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-OpenAIModel-mfXv9{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-mfXv9œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "IDGenerator-fDNvU",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
        "target": "MemoryComponent-ak26x",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-ak26xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "MemoryComponent-ak26x",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-fDNvU"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-MemoryComponent-ak26x{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-ak26xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "IDGenerator-fDNvU",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
        "target": "ChatInput-eG2tS",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatInput-eG2tSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "ChatInput-eG2tS",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-fDNvU"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-ChatInput-eG2tS{œfieldNameœ:œsession_idœ,œidœ:œChatInput-eG2tSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "IDGenerator-fDNvU",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
        "target": "ChatOutput-6izIg",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "ChatOutput-6izIg",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-fDNvU"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-ChatOutput-6izIg{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OpenAIModel-GYs6i",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}",
        "target": "CustomComponent-Pl6fi",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-Pl6fiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CustomComponent-Pl6fi",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-GYs6i"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-GYs6i{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}-CustomComponent-Pl6fi{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-Pl6fiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-Pl6fi",
        "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Pl6fiœ}",
        "target": "ChatOutput-6izIg",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-6izIg",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "NoneType",
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-Pl6fi"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-Pl6fi{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Pl6fiœ}-ChatOutput-6izIg{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "RecordsToText-RGZYd",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-RGZYdœ}",
        "target": "Prompt-1QzTI",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "Prompt-1QzTI",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-RGZYd"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-RecordsToText-RGZYd{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-RGZYdœ}-Prompt-1QzTI{œfieldNameœ:œtaskœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "RecordsToText-CC08y",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-CC08yœ}",
        "target": "Prompt-1QzTI",
        "targetHandle": "{œfieldNameœ:œuser_contextœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "user_context",
            "id": "Prompt-1QzTI",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-CC08y"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-RecordsToText-CC08y{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-CC08yœ}-Prompt-1QzTI{œfieldNameœ:œuser_contextœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-1QzTI",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
        "target": "AnthropicModel-UiAVe",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-UiAVeœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "AnthropicModel-UiAVe",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-1QzTI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-AnthropicModel-UiAVe{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-UiAVeœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "IDGenerator-fDNvU",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
        "target": "MemoryComponent-nBkkb",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-nBkkbœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "MemoryComponent-nBkkb",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-fDNvU"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-MemoryComponent-nBkkb{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-nBkkbœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OpenAIModel-GYs6i",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}",
        "target": "CreateRecord-X1pnc",
        "targetHandle": "{œfieldNameœ:œjson_stringœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "json_string",
            "id": "CreateRecord-X1pnc",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-GYs6i"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-GYs6i{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}-CreateRecord-X1pnc{œfieldNameœ:œjson_stringœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CreateRecord-X1pnc",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCreateRecordœ,œidœ:œCreateRecord-X1pncœ}",
        "target": "SubFlow-8OO1k",
        "targetHandle": "{œfieldNameœ:œrecordœ,œidœ:œSubFlow-8OO1kœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "record",
            "id": "SubFlow-8OO1k",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "CreateRecord",
            "id": "CreateRecord-X1pnc"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CreateRecord-X1pnc{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCreateRecordœ,œidœ:œCreateRecord-X1pncœ}-SubFlow-8OO1k{œfieldNameœ:œrecordœ,œidœ:œSubFlow-8OO1kœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "source": "SubFlow-v11ty",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}",
        "target": "RecordsToText-RGZYd",
        "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-RGZYdœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "records",
            "id": "RecordsToText-RGZYd",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "SubFlow",
            "id": "SubFlow-v11ty"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-SubFlow-v11ty{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}-RecordsToText-RGZYd{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-RGZYdœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "source": "SubFlow-v11ty",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}",
        "target": "RecordsToText-CC08y",
        "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-CC08yœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "records",
            "id": "RecordsToText-CC08y",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "SubFlow",
            "id": "SubFlow-v11ty"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-SubFlow-v11ty{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}-RecordsToText-CC08y{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-CC08yœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "source": "AnthropicModel-UiAVe",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}",
        "target": "ChatOutput-JYfgR",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JYfgRœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-JYfgR",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-UiAVe"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-AnthropicModel-UiAVe{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}-ChatOutput-JYfgR{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JYfgRœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "AnthropicModel-tRkAy",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}",
        "target": "ChatOutput-fPTPx",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fPTPxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-fPTPx",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-tRkAy"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-AnthropicModel-tRkAy{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}-ChatOutput-fPTPx{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fPTPxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OpenAIModel-mfXv9",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}",
        "target": "ChatOutput-Ymr71",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Ymr71œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Ymr71",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-mfXv9"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-mfXv9{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}-ChatOutput-Ymr71{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Ymr71œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "GroqModel-VMd5p",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}",
        "target": "ChatOutput-fhYjS",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fhYjSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-fhYjS",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "GroqModel",
            "id": "GroqModel-VMd5p"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-GroqModel-VMd5p{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}-ChatOutput-fhYjS{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fhYjSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "GoogleGenerativeAIModel-afWQS",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}",
        "target": "ChatOutput-sYkqo",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-sYkqoœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-sYkqo",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "GoogleGenerativeAIModel",
            "id": "GoogleGenerativeAIModel-afWQS"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-GoogleGenerativeAIModel-afWQS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}-ChatOutput-sYkqo{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-sYkqoœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-1QzTI",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
        "target": "OpenAIModel-H8mmV",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-H8mmVœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-H8mmV",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-1QzTI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-OpenAIModel-H8mmV{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-H8mmVœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OpenAIModel-H8mmV",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}",
        "target": "ChatOutput-hnHl2",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hnHl2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-hnHl2",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-H8mmV"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-H8mmV{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}-ChatOutput-hnHl2{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hnHl2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OpenAIModel-XiKgK",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-XiKgKœ}",
        "target": "CustomComponent-HNEff",
        "targetHandle": "{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-HNEffœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "title",
            "id": "CustomComponent-HNEff",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-XiKgK"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-XiKgK{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-XiKgKœ}-CustomComponent-HNEff{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-HNEffœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-HNEff",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-HNEffœ}",
        "target": "CustomComponent-mys14",
        "targetHandle": "{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-mys14œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "properties",
            "id": "CustomComponent-mys14",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-HNEff"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-HNEff{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-HNEffœ}-CustomComponent-mys14{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-mys14œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "RecordsToText-ZZIh7",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-ZZIh7œ}",
        "target": "CustomComponent-ezhFs",
        "targetHandle": "{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "block_id",
            "id": "CustomComponent-ezhFs",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "RecordsToText",
            "id": "RecordsToText-ZZIh7"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-RecordsToText-ZZIh7{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-ZZIh7œ}-CustomComponent-ezhFs{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "GoogleGenerativeAIModel-afWQS",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}",
        "target": "Prompt-OC63E",
        "targetHandle": "{œfieldNameœ:œdraft2œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "draft2",
            "id": "Prompt-OC63E",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "GoogleGenerativeAIModel",
            "id": "GoogleGenerativeAIModel-afWQS"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-GoogleGenerativeAIModel-afWQS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}-Prompt-OC63E{œfieldNameœ:œdraft2œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OpenAIModel-mfXv9",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}",
        "target": "Prompt-OC63E",
        "targetHandle": "{œfieldNameœ:œdraft1œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "draft1",
            "id": "Prompt-OC63E",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-mfXv9"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-mfXv9{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}-Prompt-OC63E{œfieldNameœ:œdraft1œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "AnthropicModel-tRkAy",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}",
        "target": "Prompt-OC63E",
        "targetHandle": "{œfieldNameœ:œdraft3œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "draft3",
            "id": "Prompt-OC63E",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-tRkAy"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-AnthropicModel-tRkAy{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}-Prompt-OC63E{œfieldNameœ:œdraft3œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OpenAIModel-H8mmV",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}",
        "target": "Prompt-OC63E",
        "targetHandle": "{œfieldNameœ:œdraft4œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "draft4",
            "id": "Prompt-OC63E",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-H8mmV"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-OpenAIModel-H8mmV{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}-Prompt-OC63E{œfieldNameœ:œdraft4œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "GroqModel-VMd5p",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}",
        "target": "Prompt-OC63E",
        "targetHandle": "{œfieldNameœ:œdraft6œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "draft6",
            "id": "Prompt-OC63E",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "GroqModel",
            "id": "GroqModel-VMd5p"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-GroqModel-VMd5p{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}-Prompt-OC63E{œfieldNameœ:œdraft6œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "AnthropicModel-UiAVe",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}",
        "target": "Prompt-OC63E",
        "targetHandle": "{œfieldNameœ:œdraft5œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "draft5",
            "id": "Prompt-OC63E",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-UiAVe"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-AnthropicModel-UiAVe{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}-Prompt-OC63E{œfieldNameœ:œdraft5œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-OC63E",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-OC63Eœ}",
        "target": "TextOutput-uEhDK",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-uEhDKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-uEhDK",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-OC63E"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-Prompt-OC63E{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-OC63Eœ}-TextOutput-uEhDK{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-uEhDKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "TextOutput-yoXhj",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}",
        "target": "OpenAIModel-XiKgK",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-XiKgKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-XiKgK",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextOutput",
            "id": "TextOutput-yoXhj"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-TextOutput-yoXhj{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}-OpenAIModel-XiKgK{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-XiKgKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-mys14",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mys14œ}",
        "target": "RecordsToText-ZZIh7",
        "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-ZZIh7œ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "records",
            "id": "RecordsToText-ZZIh7",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-mys14"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-mys14{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mys14œ}-RecordsToText-ZZIh7{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-ZZIh7œ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "source": "TextOutput-yoXhj",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}",
        "target": "CustomComponent-ezhFs",
        "targetHandle": "{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "markdown_text",
            "id": "CustomComponent-ezhFs",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextOutput",
            "id": "TextOutput-yoXhj"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-TextOutput-yoXhj{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}-CustomComponent-ezhFs{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "MemoryComponent-nBkkb",
        "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-nBkkbœ}",
        "target": "CreateRecord-X1pnc",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ,œRecordœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateRecord-X1pnc",
            "inputTypes": [
              "Text",
              "Record"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "baseClasses": [
              "str",
              "Text",
              "object"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-nBkkb"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-MemoryComponent-nBkkb{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-nBkkbœ}-CreateRecord-X1pnc{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ,œRecordœ],œtypeœ:œdictœ}"
      },
      {
        "source": "MemoryComponent-ak26x",
        "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}",
        "target": "Prompt-TuTEh",
        "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "history",
            "id": "Prompt-TuTEh",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str",
              "Text",
              "object"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-ak26x"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-MemoryComponent-ak26x{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}-Prompt-TuTEh{œfieldNameœ:œhistoryœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "ChatInput-eG2tS",
        "sourceHandle": "{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-eG2tSœ}",
        "target": "Prompt-TuTEh",
        "targetHandle": "{œfieldNameœ:œinputœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input",
            "id": "Prompt-TuTEh",
            "inputTypes": [
              "Document",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-eG2tS"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-ChatInput-eG2tS{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-eG2tSœ}-Prompt-TuTEh{œfieldNameœ:œinputœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": -215.83338952921667,
      "y": -260.84788500881086,
      "zoom": 0.4370955296757091
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 7
    },
    "MemoryComponent": {
      "count": 2
    },
    "Prompt": {
      "count": 3
    },
    "TextOutput": {
      "count": 3
    },
    "OpenAIModel": {
      "count": 4
    },
    "AnthropicModel": {
      "count": 2
    },
    "GroqModel": {
      "count": 1
    },
    "GoogleGenerativeAIModel": {
      "count": 1
    },
    "IDGenerator": {
      "count": 1
    },
    "CustomComponent": {
      "count": 4
    },
    "RecordsToText": {
      "count": 3
    },
    "CreateRecord": {
      "count": 1
    },
    "SubFlow": {
      "count": 2
    },
    "total": 35
  },
  "original": {
    "id": "08d6d675-eae2-4928-9532-8ea8ca38153b",
    "name": "LinkedIn Content Creator",
    "description": "Created any type of linkedin content.",
    "is_component": false,
    "liked_by_count": "24",
    "downloads_count": "200",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 7
      },
      "MemoryComponent": {
        "count": 2
      },
      "Prompt": {
        "count": 3
      },
      "TextOutput": {
        "count": 3
      },
      "OpenAIModel": {
        "count": 4
      },
      "AnthropicModel": {
        "count": 2
      },
      "GroqModel": {
        "count": 1
      },
      "GoogleGenerativeAIModel": {
        "count": 1
      },
      "IDGenerator": {
        "count": 1
      },
      "CustomComponent": {
        "count": 4
      },
      "RecordsToText": {
        "count": 3
      },
      "CreateRecord": {
        "count": 1
      },
      "SubFlow": {
        "count": 2
      },
      "total": 35
    },
    "last_tested_version": "1.0.0a49",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatInput-eG2tS",
          "type": "genericNode",
          "position": {
            "x": 1056.0233047156012,
            "y": 907.6727771311195
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "proceed"
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Felipe",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Text",
                "object",
                "Record",
                "str"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-eG2tS"
          },
          "selected": false,
          "width": 384,
          "height": 469,
          "positionAbsolute": {
            "x": 1056.0233047156012,
            "y": 907.6727771311195
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-6izIg",
          "type": "genericNode",
          "position": {
            "x": 3189.523894175428,
            "y": 400.79088447483787
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "LinkedIn Briefing Agent",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Text",
                "object",
                "Record",
                "str"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-6izIg"
          },
          "selected": false,
          "width": 384,
          "height": 477,
          "dragging": false,
          "positionAbsolute": {
            "x": 3189.523894175428,
            "y": 400.79088447483787
          }
        },
        {
          "id": "MemoryComponent-ak26x",
          "type": "genericNode",
          "position": {
            "x": 1071.151251705466,
            "y": 402.96016201135274
          },
          "data": {
            "type": "MemoryComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "n_messages": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "20",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "load_from_db": false,
                  "title_case": false
                },
                "order": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Descending",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{sender_name}: {text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine and User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Retrieves stored chat messages given a specific Session ID.",
              "icon": "history",
              "base_classes": [
                "str",
                "Text",
                "object"
              ],
              "display_name": "Chat Memory",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "session_id": null,
                "n_messages": null,
                "order": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": true
            },
            "id": "MemoryComponent-ak26x",
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "display_name": "Chat Memory"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "dragging": false,
          "positionAbsolute": {
            "x": 1071.151251705466,
            "y": 402.96016201135274
          }
        },
        {
          "id": "Prompt-TuTEh",
          "type": "genericNode",
          "position": {
            "x": 1608.1190576457827,
            "y": 843.4591584571979
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "\n# Instructions\nYour role is a LinkedIn agent specializing in collecting necessary information from users to dispatch a writing task to the content writer agent.\n\nEngage in a conversation with the user, captured in the \"answer\" field of a JSON object. Analyze the user's input to extract relevant information for the following categories:\n\nUser Context:\n- user_name\n- user_title\n- user_company\n- user_industry\n- user_skills\n- user_achievements\n- user_unique_value_proposition\n- user_goals\n\nTask Details:\n- document_type\n- target_audience\n- key_points\n- call_to_action\n- keywords\n- tone\n- length\n\nIf the user provides a detailed request, analyze the information and suggest answers for any missing fields. Only ask questions if the given information is too vague or insufficient to proceed with the task.\n\nGuide the user through the process of constructing a comprehensive brief by asking relevant questions and offering suggestions based on their role, company, and industry. Tailor your suggestions to align with the user's goals and the information they provide about their skills, achievements, and unique value proposition.\n\nOnce you have gathered sufficient information, provide a summary of the brief for the user to review and confirm. Before dispatching the task to the content writer, ask for the user's confirmation to proceed. Only dispatch the task when the user authorizes you to do so.\n\nOutput Format:\n- If still gathering information, output only the \"answer\" field in the JSON object, containing your response to the user.\n- Once all essential information is collected, output the \"answer\" field with a summary of the collected information and a request for the user's confirmation to proceed.\n- If the user confirms, output the complete JSON object with \"answer\", \"user_context\", \"extra_context\", and \"task\" fields, filling in any missing information with \"unknown\".\n\n# Example\nUser: I want to create a LinkedIn post that highlights my experience in project management and how it has contributed to the success of my company. Can you help me craft this post?\n\n<answer>\nAbsolutely! I'd be happy to assist you in creating a compelling LinkedIn post that showcases your project management experience and its impact on your company's success. To ensure the post aligns with your professional goals and highlights your unique value proposition, could you please provide some more information about your role, company, and industry? It would also be helpful to know the specific projects or achievements you'd like to emphasize, your target audience, and the desired tone and length of the post. Feel free to include any other details you think are relevant to demonstrating your expertise in project management.\n</answer>\n\nUser: I am a Senior Project Manager at a leading software development company in the tech industry. I have over 10 years of experience in managing complex projects and have successfully delivered several high-profile projects that have contributed to my company's growth and profitability. I want to focus on a recent project where I led a cross-functional team to develop and launch a new product ahead of schedule and under budget. The target audience would be other professionals in the tech industry, potential employers, and colleagues.\n\nLet's keep the tone professional and engaging, highlighting the importance of effective project management in driving business success. Around 300 words should work well.\n\n<answer>\nThanks for providing those details! Here's a summary of your LinkedIn post brief:\n\nUser Context:\n- Name: [Your Name]\n- Title: Senior Project Manager\n- Company: [Your Company]\n- Industry: Tech\n- Skills: Project management, cross-functional team leadership\n- Achievements: Successfully delivered high-profile projects contributing to company growth and profitability\n- Unique Value Proposition: 10+ years of experience managing complex projects in the tech industry\n- Goals: Showcase project management expertise and its impact on company success, engage other tech professionals and potential employers\n\nTask Details:\n- Document Type: LinkedIn post\n- Target Audience: Professionals in the tech industry, potential employers, colleagues\n- Key Points: Recent project success – led cross-functional team, developed and launched new product ahead of schedule and under budget\n- Tone: Professional, engaging, highlighting the importance of effective project management in driving business success\n- Length: Around 300 words\n\nPlease review this information and let me know if you'd like me to proceed with creating your LinkedIn post or if there are any changes you'd like to make.\n</answer>\n\nUser: This looks great! Please go ahead and create the post.\n\n(\n\"answer\": \"Excellent! I'll get started on crafting your LinkedIn post right away. You can expect to receive the completed post shortly.\",\n\"user_context\": (\n\"user_name\": \"[Your Name]\",\n\"user_title\": \"Senior Project Manager\",\n\"user_company\": \"[Your Company]\",\n\"user_industry\": \"Tech\",\n\"user_skills\": \"Project management, cross-functional team leadership\",\n\"user_achievements\": \"Successfully delivered high-profile projects contributing to company growth and profitability\",\n\"user_unique_value_proposition\": \"10+ years of experience managing complex projects in the tech industry\",\n\"user_goals\": \"Showcase project management expertise and its impact on company success, engage other tech professionals and potential employers\"\n),\n\"task\": (\n\"document_type\": \"LinkedIn post\",\n\"target_audience\": \"Professionals in the tech industry, potential employers, colleagues\",\n\"key_points\": \"Recent project success – led cross-functional team, developed and launched new product ahead of schedule and under budget\",\n\"tone\": \"Professional, engaging, highlighting the importance of effective project management in driving business success\",\n\"length\": \"Around 300 words\"\n)\n)\n\nRemember to structure your output using JSON, with the \"answer\" field containing your response to the user. Analyze the user's input to suggest answers for missing fields, and only ask questions if the given information is too vague. Include a summary of the collected information and request the user's confirmation before dispatching the task. Only include the \"user_context\", \"extra_context\", and \"task\" fields when the user has confirmed and authorized you to proceed with the task.\n\n# Inputs\n## Message History\n{history}\n\n## User Message\n{input}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "history": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "history",
                  "display_name": "history",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "input": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input",
                  "display_name": "input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "history",
                  "input"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-TuTEh",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 477,
          "dragging": false,
          "positionAbsolute": {
            "x": 1608.1190576457827,
            "y": 843.4591584571979
          }
        },
        {
          "id": "TextOutput-1sU0O",
          "type": "genericNode",
          "position": {
            "x": 1592.994243073491,
            "y": 444.2946541669819
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: str = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "str",
                "object",
                "Text"
              ],
              "display_name": "Inspect Memory",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextOutput-1sU0O"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 1592.994243073491,
            "y": 444.2946541669819
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-GYs6i",
          "type": "genericNode",
          "position": {
            "x": 2054.0961003750285,
            "y": 458.9912385941035
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\r\nfrom axiestudio.field_typing import NestedDict, Text\r\n\r\n\r\nclass OpenAIModelComponent(LCModelComponent):\r\n    display_name = \"OpenAI\"\r\n    description = \"Generates text using OpenAI LLMs.\"\r\n    icon = \"OpenAI\"\r\n\r\n    field_order = [\r\n        \"max_tokens\",\r\n        \"model_kwargs\",\r\n        \"model_name\",\r\n        \"openai_api_base\",\r\n        \"openai_api_key\",\r\n        \"temperature\",\r\n        \"input_value\",\r\n        \"system_message\",\r\n        \"stream\",\r\n        \"json_mode\",\r\n        \"seed\",\r\n    ]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\"},\r\n            \"max_tokens\": {\r\n                \"display_name\": \"Max Tokens\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_kwargs\": {\r\n                \"display_name\": \"Model Kwargs\",\r\n                \"advanced\": True,\r\n            },\r\n            \"model_name\": {\r\n                \"display_name\": \"Model Name\",\r\n                \"advanced\": False,\r\n                \"options\": MODEL_NAMES,\r\n            },\r\n            \"openai_api_base\": {\r\n                \"display_name\": \"OpenAI API Base\",\r\n                \"advanced\": True,\r\n                \"info\": (\r\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\r\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\r\n                ),\r\n            },\r\n            \"openai_api_key\": {\r\n                \"display_name\": \"OpenAI API Key\",\r\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\r\n                \"advanced\": False,\r\n                \"password\": True,\r\n            },\r\n            \"temperature\": {\r\n                \"display_name\": \"Temperature\",\r\n                \"advanced\": False,\r\n                \"value\": 0.1,\r\n            },\r\n            \"stream\": {\r\n                \"display_name\": \"Stream\",\r\n                \"info\": STREAM_INFO_TEXT,\r\n                \"advanced\": True,\r\n            },\r\n            \"system_message\": {\r\n                \"display_name\": \"System Message\",\r\n                \"info\": \"System message to pass to the model.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"json_mode\": {\r\n                \"display_name\": \"JSON Mode\",\r\n                \"info\": \"Enable JSON mode for the model output.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"seed\": {\r\n                \"display_name\": \"Seed\",\r\n                \"info\": \"The seed controls the reproducibility of the job.\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        input_value: Text,\r\n        openai_api_key: str,\r\n        temperature: float,\r\n        model_name: str = \"gpt-4o\",\r\n        max_tokens: Optional[int] = 256,\r\n        model_kwargs: NestedDict = {},\r\n        openai_api_base: Optional[str] = None,\r\n        stream: bool = False,\r\n        system_message: Optional[str] = None,\r\n        json_mode: bool = False,\r\n        seed: Optional[int] = None,\r\n    ) -> Text:\r\n        if not openai_api_base:\r\n            openai_api_base = \"https://api.openai.com/v1\"\r\n        if openai_api_key:\r\n            api_key = SecretStr(openai_api_key)\r\n        else:\r\n            api_key = None\r\n\r\n        response_format = None\r\n        if json_mode:\r\n            response_format = {\"type\": \"json_object\"}\r\n\r\n        output = ChatOpenAI(\r\n            max_tokens=max_tokens,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=api_key,\r\n            temperature=temperature,\r\n            response_format=response_format,\r\n            seed=seed,\r\n        )\r\n\r\n        return self.get_chat_result(output, stream, input_value, system_message)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "json_mode": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_mode",
                  "display_name": "JSON Mode",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Enable JSON mode for the model output.",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4096",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-turbo",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "seed": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "seed",
                  "display_name": "Seed",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "88"
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs, with optional JSON Mode and Seed parameters.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI - Json Mode + Seed",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null,
                "json_mode": null,
                "seed": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream",
                "json_mode",
                "seed"
              ],
              "beta": false,
              "official": false
            },
            "id": "OpenAIModel-GYs6i"
          },
          "selected": false,
          "width": 384,
          "height": 831,
          "positionAbsolute": {
            "x": 2054.0961003750285,
            "y": 458.9912385941035
          },
          "dragging": false
        },
        {
          "id": "Prompt-1QzTI",
          "type": "genericNode",
          "position": {
            "x": 1658.2339159873336,
            "y": 1898.7505902765563
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "# LinkedIn Content Writing Task\n\nYou are an AI assistant performing a zero-shot LinkedIn content writing task for a user. The necessary information about the user and task will be provided in the `{{user_context}}` and `{{task}}` variables.\n\n## Instructions\n\n1. Review the user's context in `{{user_context}}`, which may include:\n   - `\"user_name\"`: The user's full name\n   - `\"user_title\"`: The user's current job title\n   - `\"user_company\"`: The user's current company\n   - `\"user_industry\"`: The user's industry\n   - `\"user_skills\"`: The user's relevant skills and expertise\n   - `\"user_achievements\"`: The user's notable achievements and accomplishments\n   - `\"user_unique_value_proposition\"`: The user's unique value proposition or competitive advantage\n   - `\"user_goals\"`: The user's objectives for the content\n\n2. Examine the additional context provided in `{{extra_context}}`, which contains the message history sent by the user to the briefing agent. This may include:\n   - Specific examples or anecdotes that the user wants to incorporate into their LinkedIn profile content\n   - Additional background information or context that the user provided during the briefing process\n   - Any other relevant details or preferences that the user mentioned in their conversation with the briefing agent\n   - Use this extra context to enhance the personalization and relevance of the generated content, while ensuring it aligns with the user's goals and target audience\n\n3. Examine the task details in `{{task}}`, which may include:\n   - `\"document_type\"`: The type of LinkedIn content to be written\n   - `\"target_audience\"`: The intended audience for the content\n   - `\"key_points\"`: The main points to be highlighted in the content\n   - `\"call_to_action\"`: The desired action for the target audience to take after reading the content\n   - `\"keywords\"`: Specific words or phrases to be included in the content\n   - `\"tone\"`: The desired tone of the content\n   - `\"length\"`: The approximate word count for the content\n\n4. Using the provided user context, extra context, and task information, create a piece of content that:\n   - Is tailored to the user's background, skills, achievements, and goals\n   - Effectively reaches and engages the specified target audience\n   - Emphasizes the key points and unique value proposition mentioned in the task\n   - Incorporates the specified keywords naturally throughout the content\n   - Includes a clear call-to-action for the target audience\n   - Maintains the desired tone and length\n   - Uses storytelling techniques to make the content more engaging and memorable\n   - Is structured with a strong headline, opening hook, body paragraphs highlighting achievements and skills, and a closing call-to-action\n\n5. Output the generated content using Markdown formatting, without any additional commentary or explanations.\n\n## Inputs\n\n### {{user_context}}\n{user_context}\n\n### {{extra_context}}\n{extra_context}\n\n### {{task}}\n{task}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "user_context": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "user_context",
                  "display_name": "user_context",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "task": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "task",
                  "display_name": "task",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "extra_context": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "extra_context",
                  "display_name": "extra_context",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "user_context",
                  "extra_context",
                  "task"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-1QzTI",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 571,
          "dragging": false,
          "positionAbsolute": {
            "x": 1658.2339159873336,
            "y": 1898.7505902765563
          }
        },
        {
          "id": "AnthropicModel-tRkAy",
          "type": "genericNode",
          "position": {
            "x": 2501.9987164447593,
            "y": 2191.627816049223
          },
          "data": {
            "type": "AnthropicModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "anthropic_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "anthropic_api_key",
                  "display_name": "Anthropic API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Anthropic API key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "anthropic_api_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "anthropic_api_url",
                  "display_name": "Anthropic API URL",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "4096"
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "claude-3-opus-20240229",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307",
                    "claude-2.1",
                    "claude-2.0",
                    "claude-instant-1.2",
                    "claude-instant-1"
                  ],
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate text using Anthropic Chat&Completion LLMs.",
              "icon": "Anthropic",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Anthropic 5",
              "documentation": "",
              "custom_fields": {
                "model": null,
                "input_value": null,
                "system_message": null,
                "anthropic_api_key": null,
                "max_tokens": null,
                "temperature": null,
                "anthropic_api_url": null,
                "stream": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "model",
                "anthropic_api_key",
                "max_tokens",
                "temperature",
                "anthropic_api_url",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "AnthropicModel-tRkAy"
          },
          "selected": false,
          "width": 384,
          "height": 649,
          "positionAbsolute": {
            "x": 2501.9987164447593,
            "y": 2191.627816049223
          },
          "dragging": false
        },
        {
          "id": "GroqModel-VMd5p",
          "type": "genericNode",
          "position": {
            "x": 2093.2079306342357,
            "y": 2227.564324511186
          },
          "data": {
            "type": "GroqModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The input to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_groq import ChatGroq\nfrom axiestudio.base.models.groq_constants import MODEL_NAMES\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n\n    field_order = [\n        \"groq_api_key\",\n        \"model\",\n        \"max_output_tokens\",\n        \"temperature\",\n        \"top_k\",\n        \"top_p\",\n        \"n\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"groq_api_key\": {\n                \"display_name\": \"Groq API Key\",\n                \"info\": \"API key for the Groq API.\",\n                \"password\": True,\n            },\n            \"groq_api_base\": {\n                \"display_name\": \"Groq API Base\",\n                \"info\": \"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n                \"advanced\": True,\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Output Tokens\",\n                \"info\": \"The maximum number of tokens to generate.\",\n                \"advanced\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"info\": \"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            },\n            \"n\": {\n                \"display_name\": \"N\",\n                \"info\": \"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model\",\n                \"info\": \"The name of the model to use. Supported examples: gemini-pro\",\n                \"options\": MODEL_NAMES,\n            },\n            \"input_value\": {\"display_name\": \"Input\", \"info\": \"The input to the model.\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        groq_api_key: str,\n        model_name: str,\n        input_value: Text,\n        groq_api_base: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: float = 0.1,\n        n: Optional[int] = 1,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        output = ChatGroq(\n            model_name=model_name,\n            max_tokens=max_tokens or None,  # type: ignore\n            temperature=temperature,\n            groq_api_base=groq_api_base,\n            n=n or 1,\n            groq_api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "groq_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "groq_api_base",
                  "display_name": "Groq API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Base URL path for API requests, leave blank if not using a proxy or service emulator.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "groq_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "groq_api_key",
                  "display_name": "Groq API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "API key for the Groq API.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Output Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "llama3-8b-8192",
                    "llama3-70b-8192",
                    "mixtral-8x7b-32768",
                    "gemma-7b-it"
                  ],
                  "name": "model_name",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The name of the model to use. Supported examples: gemini-pro",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "llama3-70b-8192"
                },
                "n": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n",
                  "display_name": "N",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                  "load_from_db": false,
                  "title_case": false
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate text using Groq.",
              "icon": "Groq",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Groq - 4",
              "documentation": "",
              "custom_fields": {
                "groq_api_key": null,
                "model_name": null,
                "input_value": null,
                "groq_api_base": null,
                "max_tokens": null,
                "temperature": null,
                "n": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "groq_api_key",
                "model",
                "max_output_tokens",
                "temperature",
                "top_k",
                "top_p",
                "n",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "GroqModel-VMd5p"
          },
          "selected": false,
          "width": 384,
          "height": 571,
          "positionAbsolute": {
            "x": 2093.2079306342357,
            "y": 2227.564324511186
          },
          "dragging": false
        },
        {
          "id": "GoogleGenerativeAIModel-afWQS",
          "type": "genericNode",
          "position": {
            "x": 2913.2582162190906,
            "y": 1589.01115831421
          },
          "data": {
            "type": "GoogleGenerativeAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The input to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom pydantic.v1 import SecretStr\nfrom axiestudio.field_typing import Text, RangeSpec\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\n\n\nclass GoogleGenerativeAIComponent(LCModelComponent):\n    display_name: str = \"Google Generative AI\"\n    description: str = \"Generate text using Google Generative AI.\"\n    icon = \"GoogleGenerativeAI\"\n\n    field_order = [\n        \"google_api_key\",\n        \"model\",\n        \"max_output_tokens\",\n        \"temperature\",\n        \"top_k\",\n        \"top_p\",\n        \"n\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"google_api_key\": {\n                \"display_name\": \"Google API Key\",\n                \"info\": \"The Google API Key to use for the Google Generative AI.\",\n            },\n            \"max_output_tokens\": {\n                \"display_name\": \"Max Output Tokens\",\n                \"info\": \"The maximum number of tokens to generate.\",\n                \"advanced\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"info\": \"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"info\": \"Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.\",\n                \"rangeSpec\": RangeSpec(min=0, max=2, step=0.1),\n                \"advanced\": True,\n            },\n            \"top_p\": {\n                \"display_name\": \"Top P\",\n                \"info\": \"The maximum cumulative probability of tokens to consider when sampling.\",\n                \"advanced\": True,\n            },\n            \"n\": {\n                \"display_name\": \"N\",\n                \"info\": \"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n                \"advanced\": True,\n            },\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"info\": \"The name of the model to use. Supported examples: gemini-pro\",\n                \"options\": [\"gemini-1.5-pro\", \"gemini-1.5-flash\"],\n            },\n            \"code\": {\n                \"advanced\": True,\n            },\n            \"input_value\": {\"display_name\": \"Input\", \"info\": \"The input to the model.\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        google_api_key: str,\n        model: str,\n        input_value: Text,\n        max_output_tokens: Optional[int] = None,\n        temperature: float = 0.1,\n        top_k: Optional[int] = None,\n        top_p: Optional[float] = None,\n        n: Optional[int] = 1,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        output = ChatGoogleGenerativeAI(\n            model=model,\n            max_output_tokens=max_output_tokens or None,  # type: ignore\n            temperature=temperature,\n            top_k=top_k or None,\n            top_p=top_p or None,  # type: ignore\n            n=n or 1,\n            google_api_key=SecretStr(google_api_key),\n        )\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "google_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "google_api_key",
                  "display_name": "Google API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The Google API Key to use for the Google Generative AI.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "max_output_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_output_tokens",
                  "display_name": "Max Output Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "4096"
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gemini-1.5-pro",
                    "gemini-1.5-flash"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The name of the model to use. Supported examples: gemini-pro",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "gemini-1.5-pro"
                },
                "n": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n",
                  "display_name": "N",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                  "load_from_db": false,
                  "title_case": false
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "top_k": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "top_k",
                  "display_name": "Top K",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.",
                  "load_from_db": false,
                  "title_case": false
                },
                "top_p": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "top_p",
                  "display_name": "Top P",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum cumulative probability of tokens to consider when sampling.",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate text using Google Generative AI.",
              "icon": "GoogleGenerativeAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Google Generative AI 3",
              "documentation": "",
              "custom_fields": {
                "google_api_key": null,
                "model": null,
                "input_value": null,
                "max_output_tokens": null,
                "temperature": null,
                "top_k": null,
                "top_p": null,
                "n": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "google_api_key",
                "model",
                "max_output_tokens",
                "temperature",
                "top_k",
                "top_p",
                "n",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "GoogleGenerativeAIModel-afWQS",
            "description": "Generate text using Google Generative AI.",
            "display_name": "Google Generative AI 3"
          },
          "selected": false,
          "width": 384,
          "height": 563,
          "positionAbsolute": {
            "x": 2913.2582162190906,
            "y": 1589.01115831421
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-mfXv9",
          "type": "genericNode",
          "position": {
            "x": 2910.514365647761,
            "y": 2194.594188247905
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str = \"gpt-4o\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4096",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-turbo",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI 6",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "OpenAIModel-mfXv9"
          },
          "selected": false,
          "width": 384,
          "height": 649,
          "positionAbsolute": {
            "x": 2910.514365647761,
            "y": 2194.594188247905
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-JYfgR",
          "type": "genericNode",
          "position": {
            "x": 3366.0076204774286,
            "y": 1587.3549467060654
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Claude Sonnet",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-JYfgR"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 3366.0076204774286,
            "y": 1587.3549467060654
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-Ymr71",
          "type": "genericNode",
          "position": {
            "x": 3357.030487721442,
            "y": 1972.7848893719238
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "GPT-4 Turbo",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-Ymr71"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 3357.030487721442,
            "y": 1972.7848893719238
          },
          "dragging": false
        },
        {
          "id": "IDGenerator-fDNvU",
          "type": "genericNode",
          "position": {
            "x": 492.74254646726877,
            "y": 630.1916412859548
          },
          "data": {
            "type": "IDGenerator",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import uuid\nfrom typing import Any, Optional\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass UUIDGeneratorComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"ID Generator\"\n    description = \"Generates a unique ID.\"\n\n    def update_build_config(\n        self,\n        build_config: dict,\n        field_value: Any,\n        field_name: Optional[str] = None,\n    ):\n        if field_name == \"unique_id\":\n            build_config[field_name][\"value\"] = str(uuid.uuid4())\n        return build_config\n\n    def build_config(self):\n        return {\n            \"unique_id\": {\n                \"display_name\": \"Value\",\n                \"refresh_button\": True,\n            }\n        }\n\n    def build(self, unique_id: str) -> str:\n        return unique_id\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "unique_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "unique_id",
                  "display_name": "Value",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "refresh_button": true,
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "06edbfe4-4a0c-4ba6-b06b-e6b792c8b47b"
                },
                "_type": "CustomComponent"
              },
              "description": "Generates a unique ID.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "ID Generator",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "unique_id": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "IDGenerator-fDNvU"
          },
          "selected": false,
          "width": 384,
          "height": 295,
          "positionAbsolute": {
            "x": 492.74254646726877,
            "y": 630.1916412859548
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-Pl6fi",
          "type": "genericNode",
          "position": {
            "x": 2659.8867615760046,
            "y": 426.10687036430596
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass JSONKeyParser(CustomComponent):\r\n    display_name: str = \"JSON Key Parser\"\r\n    description: str = \"Parse a specific key from a JSON object.\"\r\n    output_types: list[str] = [\"Text\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"json_key\": {\r\n                \"display_name\": \"Key\",\r\n                \"info\": \"The key to parse from the JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n            \"input_value\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"Your JSON object.\",\r\n                \"field_type\": \"str\",\r\n                \"required\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, json_key: str) -> Optional[Text]:\r\n        try:\r\n            json_obj = json.loads(input_value)\r\n            if json_key in json_obj:\r\n                parsed_value = json_obj[json_key]\r\n                self.status = f\"Parsed value: {parsed_value}\"\r\n                return str(parsed_value)\r\n            else:\r\n                self.status = f\"Key '{json_key}' not found in the JSON object.\"\r\n                return None\r\n        except json.JSONDecodeError:\r\n            self.status = \"Invalid JSON input.\"\r\n            return None",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "JSON String",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your JSON object.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "json_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_key",
                  "display_name": "Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The key to parse from the JSON object.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "answer"
                },
                "_type": "CustomComponent"
              },
              "description": "Extract a specific key from a JSON object.",
              "base_classes": [
                "NoneType",
                "object",
                "str",
                "Text"
              ],
              "display_name": "JSON Key to Text",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "json_key": null
              },
              "output_types": [
                "Text",
                "NoneType"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-Pl6fi"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 2659.8867615760046,
            "y": 426.10687036430596
          },
          "dragging": true
        },
        {
          "id": "RecordsToText-CC08y",
          "type": "genericNode",
          "position": {
            "x": 1229.602331851882,
            "y": 1992.2301843120326
          },
          "data": {
            "type": "RecordsToText",
            "node": {
              "template": {
                "records": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "records",
                  "display_name": "Records",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The records to convert to text.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{user_context}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Convert Records into plain text following a specified template.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Records To Text",
              "documentation": "",
              "custom_fields": {
                "records": null,
                "template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecordsToText-CC08y"
          },
          "selected": false,
          "width": 384,
          "height": 357,
          "positionAbsolute": {
            "x": 1229.602331851882,
            "y": 1992.2301843120326
          },
          "dragging": false
        },
        {
          "id": "RecordsToText-RGZYd",
          "type": "genericNode",
          "position": {
            "x": 1225.2779405344208,
            "y": 1604.0924098082992
          },
          "data": {
            "type": "RecordsToText",
            "node": {
              "template": {
                "records": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "records",
                  "display_name": "Records",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The records to convert to text.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{task}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Convert Records into plain text following a specified template.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Records To Text",
              "documentation": "",
              "custom_fields": {
                "records": null,
                "template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecordsToText-RGZYd"
          },
          "selected": false,
          "width": 384,
          "height": 357,
          "positionAbsolute": {
            "x": 1225.2779405344208,
            "y": 1604.0924098082992
          },
          "dragging": false
        },
        {
          "id": "AnthropicModel-UiAVe",
          "type": "genericNode",
          "position": {
            "x": 2092.1899400968537,
            "y": 1543.1305470602329
          },
          "data": {
            "type": "AnthropicModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "anthropic_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "anthropic_api_key",
                  "display_name": "Anthropic API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Anthropic API key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "anthropic_api_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "anthropic_api_url",
                  "display_name": "Anthropic API URL",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_anthropic.chat_models import ChatAnthropic\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Text\n\n\nclass AnthropicLLM(LCModelComponent):\n    display_name: str = \"Anthropic\"\n    description: str = \"Generate text using Anthropic Chat&Completion LLMs.\"\n    icon = \"Anthropic\"\n\n    field_order = [\n        \"model\",\n        \"anthropic_api_key\",\n        \"max_tokens\",\n        \"temperature\",\n        \"anthropic_api_url\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"options\": [\n                    \"claude-3-opus-20240229\",\n                    \"claude-3-sonnet-20240229\",\n                    \"claude-3-haiku-20240307\",\n                    \"claude-2.1\",\n                    \"claude-2.0\",\n                    \"claude-instant-1.2\",\n                    \"claude-instant-1\",\n                ],\n                \"info\": \"https://python.langchain.com/docs/integrations/chat/anthropic\",\n                \"required\": True,\n                \"value\": \"claude-3-opus-20240229\",\n            },\n            \"anthropic_api_key\": {\n                \"display_name\": \"Anthropic API Key\",\n                \"required\": True,\n                \"password\": True,\n                \"info\": \"Your Anthropic API key.\",\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.1,\n            },\n            \"anthropic_api_url\": {\n                \"display_name\": \"Anthropic API URL\",\n                \"advanced\": True,\n                \"info\": \"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            },\n            \"code\": {\"show\": False},\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"advanced\": True,\n                \"info\": STREAM_INFO_TEXT,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"advanced\": True,\n                \"info\": \"System message to pass to the model.\",\n            },\n        }\n\n    def build(\n        self,\n        model: str,\n        input_value: Text,\n        system_message: Optional[str] = None,\n        anthropic_api_key: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        anthropic_api_url: Optional[str] = None,\n        stream: bool = False,\n    ) -> Text:\n        # Set default API endpoint if not provided\n        if not anthropic_api_url:\n            anthropic_api_url = \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model_name=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "4096"
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "claude-3-sonnet-20240229",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307",
                    "claude-2.1",
                    "claude-2.0",
                    "claude-instant-1.2",
                    "claude-instant-1"
                  ],
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate text using Anthropic Chat&Completion LLMs.",
              "icon": "Anthropic",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Anthropic 1",
              "documentation": "",
              "custom_fields": {
                "model": null,
                "input_value": null,
                "system_message": null,
                "anthropic_api_key": null,
                "max_tokens": null,
                "temperature": null,
                "anthropic_api_url": null,
                "stream": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "model",
                "anthropic_api_key",
                "max_tokens",
                "temperature",
                "anthropic_api_url",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "AnthropicModel-UiAVe"
          },
          "selected": false,
          "width": 384,
          "height": 649,
          "positionAbsolute": {
            "x": 2092.1899400968537,
            "y": 1543.1305470602329
          },
          "dragging": false
        },
        {
          "id": "MemoryComponent-nBkkb",
          "type": "genericNode",
          "position": {
            "x": 2045.1466030860397,
            "y": -42.962088224938356
          },
          "data": {
            "type": "MemoryComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "n_messages": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "20",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "load_from_db": false,
                  "title_case": false
                },
                "order": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Descending",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{sender_name}: {text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Retrieves stored chat messages given a specific Session ID.",
              "icon": "history",
              "base_classes": [
                "str",
                "Text",
                "object"
              ],
              "display_name": "Chat Memory",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "session_id": null,
                "n_messages": null,
                "order": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": true
            },
            "id": "MemoryComponent-nBkkb",
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "display_name": "Chat Memory"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 2045.1466030860397,
            "y": -42.962088224938356
          },
          "dragging": false
        },
        {
          "id": "CreateRecord-X1pnc",
          "type": "genericNode",
          "position": {
            "x": 2653.64222388771,
            "y": 820.9062186930845
          },
          "data": {
            "type": "CreateRecord",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Any\r\n\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.field_typing.range_spec import RangeSpec\r\nfrom axiestudio.schema import Record\r\nfrom axiestudio.schema.dotdict import dotdict\r\nfrom axiestudio.template.field.base import TemplateField\r\n\r\n\r\nclass CreateRecordComponent(CustomComponent):\r\n    display_name = \"Create Record\"\r\n    description = \"Dynamically create a Record with a specified number of fields and/or from a JSON string.\"\r\n    field_order = [\"number_of_fields\", \"text_key\", \"json_string\"]\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.field_values = {}\r\n\r\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\r\n        if field_name == \"number_of_fields\":\r\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"json_string\"]\r\n            try:\r\n                field_value_int = int(field_value)\r\n            except TypeError:\r\n                return build_config\r\n            existing_fields = {}\r\n            if field_value_int > 15:\r\n                build_config[\"number_of_fields\"][\"value\"] = 15\r\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Records.\")\r\n            if len(build_config) > len(default_keys) + field_value_int:\r\n                # back up the existing template fields\r\n                for key in build_config.copy():\r\n                    if key not in default_keys:\r\n                        existing_fields[key] = build_config.pop(key)\r\n\r\n            for i in range(1, field_value_int + 1):\r\n                key = f\"field_{i}_key\"\r\n                if key in existing_fields:\r\n                    field = existing_fields[key]\r\n                    build_config[key] = field\r\n                else:\r\n                    field = TemplateField(\r\n                        display_name=f\"Field {i}\",\r\n                        name=key,\r\n                        info=f\"Key for field {i}.\",\r\n                        field_type=\"dict\",\r\n                        input_types=[\"Text\", \"Record\"],\r\n                    )\r\n                    build_config[field.name] = field.to_dict()\r\n\r\n                # Restore the field value from the component's state\r\n                if key in self.field_values:\r\n                    build_config[key][\"value\"] = self.field_values[key]\r\n\r\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\r\n        elif field_name and field_name.startswith(\"field_\") and field_name.endswith(\"_key\"):\r\n            # Store the field value in the component's state\r\n            self.field_values[field_name] = field_value\r\n\r\n        return build_config\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"number_of_fields\": {\r\n                \"display_name\": \"Number of Fields\",\r\n                \"info\": \"Number of fields to be added to the record.\",\r\n                \"real_time_refresh\": True,\r\n                \"rangeSpec\": RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\r\n            },\r\n            \"text_key\": {\r\n                \"display_name\": \"Text Key\",\r\n                \"info\": \"Key to be used as text.\",\r\n                \"advanced\": True,\r\n            },\r\n            \"json_string\": {\r\n                \"display_name\": \"JSON String\",\r\n                \"info\": \"JSON string to be added to the record.\",\r\n                \"field_type\": \"str\",\r\n                \"multiline\": True,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        number_of_fields: int = 0,\r\n        text_key: str = \"text\",\r\n        json_string: str = \"\",\r\n        **kwargs,\r\n    ) -> Record:\r\n        data = {}\r\n        for value_dict in kwargs.values():\r\n            if isinstance(value_dict, dict):\r\n                # Check if the value of the value_dict is a Record\r\n                value_dict = {\r\n                    key: value.get_text() if isinstance(value, Record) else value for key, value in value_dict.items()\r\n                }\r\n                data.update(value_dict)\r\n\r\n        if json_string:\r\n            try:\r\n                json_data = json.loads(json_string)\r\n                if isinstance(json_data, dict):\r\n                    data.update(json_data)\r\n                else:\r\n                    raise ValueError(\"JSON string must represent an object (dictionary).\")\r\n            except json.JSONDecodeError:\r\n                raise ValueError(\"Invalid JSON string.\")\r\n\r\n        return_record = Record(data=data, text_key=text_key)\r\n        self.status = return_record\r\n        return return_record",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "json_string": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_string",
                  "display_name": "JSON String",
                  "advanced": false,
                  "dynamic": false,
                  "info": "JSON string to be added to the record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "number_of_fields": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "number_of_fields",
                  "display_name": "Number of Fields",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of fields to be added to the record.",
                  "real_time_refresh": true,
                  "load_from_db": false,
                  "title_case": false
                },
                "text_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "text_key",
                  "display_name": "Text Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Key to be used as text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent",
                "field_1_key": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {
                    "extra_context": ""
                  },
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_1_key",
                  "display_name": "Field 1",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "Key for field 1.",
                  "load_from_db": false,
                  "title_case": false
                }
              },
              "description": "Dynamically create a Record with a specified number of fields and/or from a JSON string.",
              "base_classes": [
                "Record"
              ],
              "display_name": "Create Record from JSON",
              "documentation": "",
              "custom_fields": {
                "number_of_fields": null,
                "text_key": null,
                "json_string": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "number_of_fields",
                "text_key",
                "json_string"
              ],
              "beta": false
            },
            "id": "CreateRecord-X1pnc",
            "description": "Dynamically create a Record with a specified number of fields and/or from a JSON string.",
            "display_name": "Create Record from JSON"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "dragging": false,
          "positionAbsolute": {
            "x": 2653.64222388771,
            "y": 820.9062186930845
          }
        },
        {
          "id": "SubFlow-8OO1k",
          "type": "genericNode",
          "position": {
            "x": 3208.135432309996,
            "y": 956.1572662095798
          },
          "data": {
            "type": "SubFlow",
            "node": {
              "template": {
                "record": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass RecordToJSONFileComponent(CustomComponent):\r\n    display_name = \"Record to JSON File\"\r\n    description = \"Saves a single record into a JSON file named 'tmp_json_record.json'.\"\r\n    icon = \"save\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"tmp_json_record.json\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, record: Record, file_path: Optional[str] = \"tmp_json_record.json\") -> str:\r\n        try:\r\n            data = record.dict()\r\n            with open(file_path, \"w\") as file:\r\n                json.dump(data, file, indent=2)\r\n            self.status = f\"Successfully saved record to {file_path}\"\r\n            return file_path\r\n        except IOError as e:\r\n            raise ValueError(f\"Error saving record to file: {str(e)}\")",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "tmp_json_records.json",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Saves a single record into a JSON file named 'tmp_json_record.json'.",
              "icon": "save",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Record to JSON File",
              "documentation": "",
              "custom_fields": {
                "record": null,
                "file_path": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "SubFlow-8OO1k"
          },
          "selected": false,
          "width": 384,
          "height": 263,
          "positionAbsolute": {
            "x": 3208.135432309996,
            "y": 956.1572662095798
          },
          "dragging": false
        },
        {
          "id": "SubFlow-v11ty",
          "type": "genericNode",
          "position": {
            "x": 743.4762068979851,
            "y": 1990.9632172300348
          },
          "data": {
            "type": "SubFlow",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\n\r\nclass JSONFileToRecordComponent(CustomComponent):\r\n    display_name = \"Load JSON as Record\"\r\n    description = \"Loads a JSON file named 'tmp_json_record.json' and returns a single record.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"tmp_json_record.json\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"tmp_json_record.json\") -> Record:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                data = json.load(file)\r\n            record = Record(**data)\r\n            self.status = f\"Successfully loaded record from {file_path}\"\r\n            return record\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return Record()\r\n        except json.JSONDecodeError as e:\r\n            raise ValueError(f\"Invalid JSON file: {str(e)}\")",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "tmp_json_records.json",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Loads a JSON file named 'tmp_json_record.json' and returns a single record.",
              "icon": "file-text",
              "base_classes": [
                "Record"
              ],
              "display_name": "Load JSON as Records",
              "documentation": "",
              "custom_fields": {
                "file_path": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "SubFlow-v11ty"
          },
          "selected": false,
          "width": 384,
          "height": 219,
          "positionAbsolute": {
            "x": 743.4762068979851,
            "y": 1990.9632172300348
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-fPTPx",
          "type": "genericNode",
          "position": {
            "x": 3780.434196703228,
            "y": 1590.8309228271996
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Claude Opus",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-fPTPx"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 3780.434196703228,
            "y": 1590.8309228271996
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-fhYjS",
          "type": "genericNode",
          "position": {
            "x": 3359.3210099186017,
            "y": 2365.3508472429703
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Llama3 70b",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-fhYjS"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 3359.3210099186017,
            "y": 2365.3508472429703
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-sYkqo",
          "type": "genericNode",
          "position": {
            "x": 3779.993969526544,
            "y": 2363.087194426783
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Gemini",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-sYkqo"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 3779.993969526544,
            "y": 2363.087194426783
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-hnHl2",
          "type": "genericNode",
          "position": {
            "x": 3771.822973760386,
            "y": 1970.783501062046
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "GPT4-o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-hnHl2"
          },
          "selected": false,
          "width": 384,
          "height": 383,
          "positionAbsolute": {
            "x": 3771.822973760386,
            "y": 1970.783501062046
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-H8mmV",
          "type": "genericNode",
          "position": {
            "x": 2507.808826871281,
            "y": 1520.011412698655
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str = \"gpt-4o\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4096",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI 2",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "OpenAIModel-H8mmV"
          },
          "selected": false,
          "width": 384,
          "height": 649,
          "dragging": false,
          "positionAbsolute": {
            "x": 2507.808826871281,
            "y": 1520.011412698655
          }
        },
        {
          "id": "OpenAIModel-XiKgK",
          "type": "genericNode",
          "position": {
            "x": 2078.8329168562004,
            "y": 2975.7129835387855
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str = \"gpt-4o\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4096",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "Generate a concise, descriptive title for the given task. Output the title only, without any additional text or labels."
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "OpenAI 2",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false
            },
            "id": "OpenAIModel-XiKgK"
          },
          "selected": false,
          "width": 384,
          "height": 743,
          "positionAbsolute": {
            "x": 2078.8329168562004,
            "y": 2975.7129835387855
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-HNEff",
          "type": "genericNode",
          "position": {
            "x": 2624.808684532978,
            "y": 3087.2340716682634
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Dict, Any\r\n\r\nfrom axiestudio.custom import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionTitleGen(CustomComponent):\r\n    display_name = \"Generate Title Page Properties [Notion]\"\r\n    description = \"Generate the  properties for Creating a Notion page.\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"title\": {\r\n                \"display_name\": \"Article Title\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The meeting summary to add to the page.\",\r\n                \"multiline\": True,\r\n            },\r\n        }\r\n\r\n    def sanitize_input(self, input_str: str) -> str:\r\n        # Remove leading/trailing whitespace\r\n        return input_str.strip()\r\n\r\n    def build(\r\n        self,\r\n        title: str,\r\n    ) -> str:\r\n        sanitized_title  = self.sanitize_input(title)\r\n\r\n\r\n        properties = {\r\n            \"title\":{\r\n                \"id\":\"title\",\r\n                \"type\":\"title\",\r\n            \t\"title\":[\r\n                    {\r\n                        \"type\":\"text\",\r\n            \t\t\t\"text\":{\r\n                            \"content\": sanitized_title\r\n            \t\t\t}\r\n            \t\t}\r\n            \t]\r\n            }   \r\n        }\r\n        properties_json = json.dumps(properties, ensure_ascii=False)\r\n\r\n        self.status = f\"Generated properties:\\n{properties_json}\"\r\n        return properties_json",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "title": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "title",
                  "display_name": "Article Title",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The meeting summary to add to the page.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Generate the  properties for Creating a Notion page.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Article Name",
              "documentation": "",
              "custom_fields": {
                "title": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-HNEff"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": 2624.808684532978,
            "y": 3087.2340716682634
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-mys14",
          "type": "genericNode",
          "position": {
            "x": 3130.559362261181,
            "y": 3040.812836393335
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import Optional\r\n\r\nimport requests\r\nfrom axiestudio.custom import CustomComponent\r\n\r\nfrom axiestudio.schema import Record\r\n\r\nclass NotionPageCreator(CustomComponent):\r\n    display_name = \"Create Page [Notion]\"\r\n    description = \"A component for creating Notion pages.\"\r\n    documentation: str = \"https://docs.axiestudio.org/integrations/notion/page-create\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"database_id\": {\r\n                \"display_name\": \"Database ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the Notion database.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n            \"properties\": {\r\n                \"display_name\": \"Properties\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}\",\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        database_id: str,\r\n        notion_secret: str,\r\n        properties: str = '{\"Task name\": {\"id\": \"title\", \"type\": \"title\", \"title\": [{\"type\": \"text\", \"text\": {\"content\": \"Send Notion Components to LF\", \"link\": null}}]}}',\r\n    ) -> Record:\r\n        if not database_id or not properties:\r\n            raise ValueError(\"Invalid input. Please provide 'database_id' and 'properties'.\")\r\n\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"parent\": {\"database_id\": database_id},\r\n            \"properties\": json.loads(properties),\r\n        }\r\n\r\n        response = requests.post(\"https://api.notion.com/v1/pages\", headers=headers, json=data)\r\n\r\n        if response.status_code == 200:\r\n            page_id = response.json()[\"id\"]\r\n            self.status = f\"Successfully created Notion page with ID: {page_id}\\n {str(response.json())}\"\r\n            return Record(text=str(response.json()), **response.json())\r\n        else:\r\n            error_message = f\"Failed to create Notion page. Status code: {response.status_code}, Error: {response.text}\"\r\n            self.status = error_message\r\n            raise Exception(error_message)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "database_id",
                  "display_name": "Database ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The ID of the Notion database.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "notion_secret": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "notion_secret",
                  "display_name": "Notion Secret",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The Notion integration token.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "properties": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "properties",
                  "display_name": "Properties",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The properties of the new page. Depending on your database setup, this can change. E.G: {'Task name': {'id': 'title', 'type': 'title', 'title': [{'type': 'text', 'text': {'content': 'Send Notion Components to LF', 'link': null}}]}}",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "A component for creating Notion pages.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "Record"
              ],
              "display_name": "Create Page [Notion] ",
              "documentation": "https://docs.axiestudio.org/integrations/notion/page-create",
              "custom_fields": {
                "database_id": null,
                "notion_secret": null,
                "properties": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-mys14"
          },
          "selected": false,
          "width": 384,
          "height": 477,
          "dragging": false,
          "positionAbsolute": {
            "x": 3130.559362261181,
            "y": 3040.812836393335
          }
        },
        {
          "id": "RecordsToText-ZZIh7",
          "type": "genericNode",
          "position": {
            "x": 3662.128285183201,
            "y": 3087.9778658444534
          },
          "data": {
            "type": "RecordsToText",
            "node": {
              "template": {
                "records": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "records",
                  "display_name": "Records",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The records to convert to text.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.schema import Record\n\n\nclass RecordsToTextComponent(CustomComponent):\n    display_name = \"Records To Text\"\n    description = \"Convert Records into plain text following a specified template.\"\n\n    def build_config(self):\n        return {\n            \"records\": {\n                \"display_name\": \"Records\",\n                \"info\": \"The records to convert to text.\",\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"info\": \"The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.\",\n            },\n        }\n\n    def build(\n        self,\n        records: list[Record],\n        template: str = \"Text: {text}\\nData: {data}\",\n    ) -> Text:\n        if not records:\n            return \"\"\n        if isinstance(records, Record):\n            records = [records]\n\n        result_string = records_to_text(template, records)\n        self.status = result_string\n        return result_string\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{id}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The template to use for formatting the records. It can contain the keys {text}, {data} or any other key in the Record.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Convert Records into plain text following a specified template.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Records To Text",
              "documentation": "",
              "custom_fields": {
                "records": null,
                "template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "RecordsToText-ZZIh7"
          },
          "selected": false,
          "width": 384,
          "height": 357,
          "positionAbsolute": {
            "x": 3662.128285183201,
            "y": 3087.9778658444534
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-ezhFs",
          "type": "genericNode",
          "position": {
            "x": 4169.613628203309,
            "y": 3035.1701179602924
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "block_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "block_id",
                  "display_name": "Page/Block ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The ID of the page/block to add the content.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import List, Dict, Any\r\nfrom markdown import markdown\r\nfrom bs4 import BeautifulSoup\r\nimport requests\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.schema import Record\r\n\r\nclass AddContentToPage(CustomComponent):\r\n    display_name = \"Add Content to Page [Notion]\"\r\n    description = \"Convert markdown text to Notion blocks and append them to a Notion page.\"\r\n    documentation: str = \"https://developers.notion.com/reference/patch-block-children\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"markdown_text\": {\r\n                \"display_name\": \"Markdown Text\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The markdown text to convert to Notion blocks.\",\r\n                \"multiline\": True,\r\n            },\r\n             \"block_id\": {\r\n                \"display_name\": \"Page/Block ID\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The ID of the page/block to add the content.\",\r\n            },\r\n            \"notion_secret\": {\r\n                \"display_name\": \"Notion Secret\",\r\n                \"field_type\": \"str\",\r\n                \"info\": \"The Notion integration token.\",\r\n                \"password\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, markdown_text: str, block_id: str, notion_secret: str) -> Record:\r\n        html_text = markdown(markdown_text)\r\n        soup = BeautifulSoup(html_text, 'html.parser')\r\n        blocks = self.process_node(soup)\r\n\r\n        url = f\"https://api.notion.com/v1/blocks/{block_id}/children\"\r\n        headers = {\r\n            \"Authorization\": f\"Bearer {notion_secret}\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Notion-Version\": \"2022-06-28\",\r\n        }\r\n\r\n        data = {\r\n            \"children\": blocks,\r\n        }\r\n\r\n        response = requests.patch(url, headers=headers, json=data)\r\n        self.status = str(response.json())\r\n        response.raise_for_status()\r\n\r\n        result = response.json()\r\n        self.status = f\"Appended {len(blocks)} blocks to page with ID: {block_id}\"\r\n        return Record(data=result, text=json.dumps(result))\r\n\r\n    def process_node(self, node):\r\n        blocks = []\r\n        if isinstance(node, str):\r\n            text = node.strip()\r\n            if text:\r\n                if text.startswith('#'):\r\n                    heading_level = text.count('#', 0, 6)\r\n                    heading_text = text[heading_level:].strip()\r\n                    if heading_level == 1:\r\n                        blocks.append(self.create_block('heading_1', heading_text))\r\n                    elif heading_level == 2:\r\n                        blocks.append(self.create_block('heading_2', heading_text))\r\n                    elif heading_level == 3:\r\n                        blocks.append(self.create_block('heading_3', heading_text))\r\n                else:\r\n                    blocks.append(self.create_block('paragraph', text))\r\n        elif node.name == 'h1':\r\n            blocks.append(self.create_block('heading_1', node.get_text(strip=True)))\r\n        elif node.name == 'h2':\r\n            blocks.append(self.create_block('heading_2', node.get_text(strip=True)))\r\n        elif node.name == 'h3':\r\n            blocks.append(self.create_block('heading_3', node.get_text(strip=True)))\r\n        elif node.name == 'p':\r\n            code_node = node.find('code')\r\n            if code_node:\r\n                code_text = code_node.get_text()\r\n                language, code = self.extract_language_and_code(code_text)\r\n                blocks.append(self.create_block('code', code, language=language))\r\n            elif self.is_table(str(node)):\r\n                blocks.extend(self.process_table(node))\r\n            else:\r\n                blocks.append(self.create_block('paragraph', node.get_text(strip=True)))\r\n        elif node.name == 'ul':\r\n            blocks.extend(self.process_list(node, 'bulleted_list_item'))\r\n        elif node.name == 'ol':\r\n            blocks.extend(self.process_list(node, 'numbered_list_item'))\r\n        elif node.name == 'blockquote':\r\n            blocks.append(self.create_block('quote', node.get_text(strip=True)))\r\n        elif node.name == 'hr':\r\n            blocks.append(self.create_block('divider', ''))\r\n        elif node.name == 'img':\r\n            blocks.append(self.create_block('image', '', image_url=node.get('src')))\r\n        elif node.name == 'a':\r\n            blocks.append(self.create_block('bookmark', node.get_text(strip=True), link_url=node.get('href')))\r\n        elif node.name == 'table':\r\n            blocks.extend(self.process_table(node))\r\n\r\n        for child in node.children:\r\n            if isinstance(child, str):\r\n                continue\r\n            blocks.extend(self.process_node(child))\r\n\r\n        return blocks\r\n\r\n    def extract_language_and_code(self, code_text):\r\n        lines = code_text.split('\\n')\r\n        language = lines[0].strip()\r\n        code = '\\n'.join(lines[1:]).strip()\r\n        return language, code\r\n\r\n    def is_code_block(self, text):\r\n        return text.startswith('```')\r\n\r\n    def extract_code_block(self, text):\r\n        lines = text.split('\\n')\r\n        language = lines[0].strip('`').strip()\r\n        code = '\\n'.join(lines[1:]).strip('`').strip()\r\n        return language, code\r\n    \r\n    def is_table(self, text):\r\n        rows = text.split('\\n')\r\n        if len(rows) < 2:\r\n            return False\r\n\r\n        has_separator = False\r\n        for i, row in enumerate(rows):\r\n            if '|' in row:\r\n                cells = [cell.strip() for cell in row.split('|')]\r\n                cells = [cell for cell in cells if cell]  # Remove empty cells\r\n                if i == 1 and all(set(cell) <= set('-|') for cell in cells):\r\n                    has_separator = True\r\n                elif not cells:\r\n                    return False\r\n\r\n        return has_separator and len(rows) >= 3\r\n\r\n    def process_list(self, node, list_type):\r\n        blocks = []\r\n        for item in node.find_all('li'):\r\n            item_text = item.get_text(strip=True)\r\n            checked = item_text.startswith('[x]')\r\n            is_checklist = item_text.startswith('[ ]') or checked\r\n\r\n            if is_checklist:\r\n                item_text = item_text.replace('[x]', '').replace('[ ]', '').strip()\r\n                blocks.append(self.create_block('to_do', item_text, checked=checked))\r\n            else:\r\n                blocks.append(self.create_block(list_type, item_text))\r\n        return blocks\r\n\r\n    def process_table(self, node):\r\n        blocks = []\r\n        header_row = node.find('thead').find('tr') if node.find('thead') else None\r\n        body_rows = node.find('tbody').find_all('tr') if node.find('tbody') else []\r\n\r\n        if header_row or body_rows:\r\n            table_width = max(len(header_row.find_all(['th', 'td'])) if header_row else 0,\r\n                            max(len(row.find_all(['th', 'td'])) for row in body_rows))\r\n\r\n            table_block = self.create_block('table', '', table_width=table_width, has_column_header=bool(header_row))\r\n            blocks.append(table_block)\r\n\r\n            if header_row:\r\n                header_cells = [cell.get_text(strip=True) for cell in header_row.find_all(['th', 'td'])]\r\n                header_row_block = self.create_block('table_row', header_cells)\r\n                blocks.append(header_row_block)\r\n\r\n            for row in body_rows:\r\n                cells = [cell.get_text(strip=True) for cell in row.find_all(['th', 'td'])]\r\n                row_block = self.create_block('table_row', cells)\r\n                blocks.append(row_block)\r\n\r\n        return blocks\r\n    \r\n    def create_block(self, block_type: str, content: str, **kwargs) -> Dict[str, Any]:\r\n        block = {\r\n            \"object\": \"block\",\r\n            \"type\": block_type,\r\n            block_type: {},\r\n        }\r\n\r\n        if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"bulleted_list_item\", \"numbered_list_item\", \"quote\"]:\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n        elif block_type == 'to_do':\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['checked'] = kwargs.get('checked', False)\r\n        elif block_type == 'code':\r\n            block[block_type]['rich_text'] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['language'] = kwargs.get('language', 'plain text')\r\n        elif block_type == 'image':\r\n            block[block_type] = {\r\n                \"type\": \"external\",\r\n                \"external\": {\r\n                    \"url\": kwargs.get('image_url', '')\r\n                }\r\n            }\r\n        elif block_type == 'divider':\r\n            pass\r\n        elif block_type == 'bookmark':\r\n            block[block_type]['url'] = kwargs.get('link_url', '')\r\n        elif block_type == 'table':\r\n            block[block_type]['table_width'] = kwargs.get('table_width', 0)\r\n            block[block_type]['has_column_header'] = kwargs.get('has_column_header', False)\r\n            block[block_type]['has_row_header'] = kwargs.get('has_row_header', False)\r\n        elif block_type == 'table_row':\r\n            block[block_type]['cells'] = [[{'type': 'text', 'text': {'content': cell}} for cell in content]]\r\n\r\n        return block",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "markdown_text": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "markdown_text",
                  "display_name": "Markdown Text",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The markdown text to convert to Notion blocks.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "notion_secret": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "notion_secret",
                  "display_name": "Notion Secret",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The Notion integration token.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Convert markdown text to Notion blocks and append them to a Notion page.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "Record"
              ],
              "display_name": "Add Content to Page [Notion] ",
              "documentation": "https://developers.notion.com/reference/patch-block-children",
              "custom_fields": {
                "markdown_text": null,
                "block_id": null,
                "notion_secret": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-ezhFs"
          },
          "selected": true,
          "width": 384,
          "height": 497,
          "positionAbsolute": {
            "x": 4169.613628203309,
            "y": 3035.1701179602924
          },
          "dragging": false
        },
        {
          "id": "Prompt-OC63E",
          "type": "genericNode",
          "position": {
            "x": 4192.192566689434,
            "y": 1817.0792820118797
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Here are the generated Drafts: \\n\\n\n---\n**Draft 1:**\\n\\n\n{draft1}\n---\n**Draft 2:**\\n\\n\n{draft2}\n---\n**Draft 3:**\\n\\n\n{draft3}\n---\n**Draft 4:**\\n\\n\n{draft4}\n---\n**Draft 5:**\\n\\n\n{draft5}\n---\n**Draft 6:**\\n\\n\n{draft6}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "draft1": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "draft1",
                  "display_name": "draft1",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "draft2": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "draft2",
                  "display_name": "draft2",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "draft3": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "draft3",
                  "display_name": "draft3",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "draft4": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "draft4",
                  "display_name": "draft4",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "draft6": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "draft6",
                  "display_name": "draft6",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "draft5": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "draft5",
                  "display_name": "draft5",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "draft1",
                  "draft2",
                  "draft3",
                  "draft4",
                  "draft5",
                  "draft6"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-OC63E",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 853,
          "positionAbsolute": {
            "x": 4192.192566689434,
            "y": 1817.0792820118797
          },
          "dragging": false
        },
        {
          "id": "TextOutput-uEhDK",
          "type": "genericNode",
          "position": {
            "x": 4613.158284089491,
            "y": 2302.713415998401
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass SaveToFileComponent(CustomComponent):\r\n    display_name = \"Save to File\"\r\n    description = \"Save the input to a file named 'temporary_file_debug.txt'.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"input_value\": {\"display_name\": \"Input\", \"multiline\": True},\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, input_value: Text, file_path: Optional[str] = \"temporary_file_debug.txt\") -> None:\r\n        with open(file_path, \"w\") as file:\r\n            file.write(input_value)\r\n        self.status = f\"Input saved to {file_path}\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "drafts.txt",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Save the input to a file named 'temporary_file_debug.txt'.",
              "icon": "file-text",
              "base_classes": [],
              "display_name": "Save to File",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "file_path": null
              },
              "output_types": [],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "TextOutput-uEhDK"
          },
          "selected": false,
          "width": 384,
          "height": 355,
          "dragging": false,
          "positionAbsolute": {
            "x": 4613.158284089491,
            "y": 2302.713415998401
          }
        },
        {
          "id": "TextOutput-yoXhj",
          "type": "genericNode",
          "position": {
            "x": 1509.5207701755469,
            "y": 3021.1899536032247
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Text\r\n\r\n\r\nclass ReadFromFileComponent(CustomComponent):\r\n    display_name = \"Read from File\"\r\n    description = \"Read the contents of a file named 'temporary_file_debug.txt' and return as a string.\"\r\n    icon = \"file-text\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"file_path\": {\r\n                \"display_name\": \"File Path\",\r\n                \"value\": \"temporary_file_debug.txt\",\r\n                \"advanced\": True,\r\n            },\r\n        }\r\n\r\n    def build(self, file_path: Optional[str] = \"temporary_file_debug.txt\") -> Text:\r\n        try:\r\n            with open(file_path, \"r\") as file:\r\n                content = file.read()\r\n            self.status = f\"File {file_path} read successfully: \\n{content}\"\r\n            return content\r\n        except FileNotFoundError:\r\n            self.status = f\"File {file_path} not found\"\r\n            return \"\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_path": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "drafts.txt",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Read the contents of a file named 'temporary_file_debug.txt' and return as a string.",
              "icon": "file-text",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Read from File",
              "documentation": "",
              "custom_fields": {
                "file_path": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "TextOutput-yoXhj"
          },
          "selected": false,
          "width": 384,
          "height": 309,
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "MemoryComponent-ak26x",
          "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}",
          "target": "TextOutput-1sU0O",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-1sU0Oœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-1sU0O",
              "inputTypes": [
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str",
                "Text",
                "object"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-ak26x"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-MemoryComponent-ak26x{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}-TextOutput-1sU0O{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-1sU0Oœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-TuTEh",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-TuTEhœ}",
          "target": "OpenAIModel-GYs6i",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-GYs6iœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-GYs6i",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-TuTEh"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-TuTEh{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-TuTEhœ}-OpenAIModel-GYs6i{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-GYs6iœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-1QzTI",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
          "target": "AnthropicModel-tRkAy",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-tRkAyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "AnthropicModel-tRkAy",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-1QzTI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-AnthropicModel-tRkAy{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-tRkAyœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-1QzTI",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
          "target": "GroqModel-VMd5p",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-VMd5pœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "GroqModel-VMd5p",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-1QzTI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-GroqModel-VMd5p{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-VMd5pœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-1QzTI",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
          "target": "GoogleGenerativeAIModel-afWQS",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-afWQSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "GoogleGenerativeAIModel-afWQS",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-1QzTI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-GoogleGenerativeAIModel-afWQS{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-afWQSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-1QzTI",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
          "target": "OpenAIModel-mfXv9",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-mfXv9œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-mfXv9",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-1QzTI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-OpenAIModel-mfXv9{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-mfXv9œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "IDGenerator-fDNvU",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
          "target": "MemoryComponent-ak26x",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-ak26xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "MemoryComponent-ak26x",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-fDNvU"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-MemoryComponent-ak26x{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-ak26xœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "IDGenerator-fDNvU",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
          "target": "ChatInput-eG2tS",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatInput-eG2tSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "ChatInput-eG2tS",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-fDNvU"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-ChatInput-eG2tS{œfieldNameœ:œsession_idœ,œidœ:œChatInput-eG2tSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "IDGenerator-fDNvU",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
          "target": "ChatOutput-6izIg",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "ChatOutput-6izIg",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-fDNvU"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-ChatOutput-6izIg{œfieldNameœ:œsession_idœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OpenAIModel-GYs6i",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}",
          "target": "CustomComponent-Pl6fi",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-Pl6fiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "CustomComponent-Pl6fi",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-GYs6i"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-GYs6i{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}-CustomComponent-Pl6fi{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-Pl6fiœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-Pl6fi",
          "sourceHandle": "{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Pl6fiœ}",
          "target": "ChatOutput-6izIg",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-6izIg",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "NoneType",
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-Pl6fi"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-Pl6fi{œbaseClassesœ:[œNoneTypeœ,œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Pl6fiœ}-ChatOutput-6izIg{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-6izIgœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "RecordsToText-RGZYd",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-RGZYdœ}",
          "target": "Prompt-1QzTI",
          "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "task",
              "id": "Prompt-1QzTI",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-RGZYd"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-RecordsToText-RGZYd{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-RGZYdœ}-Prompt-1QzTI{œfieldNameœ:œtaskœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "RecordsToText-CC08y",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-CC08yœ}",
          "target": "Prompt-1QzTI",
          "targetHandle": "{œfieldNameœ:œuser_contextœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "user_context",
              "id": "Prompt-1QzTI",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-CC08y"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-RecordsToText-CC08y{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-CC08yœ}-Prompt-1QzTI{œfieldNameœ:œuser_contextœ,œidœ:œPrompt-1QzTIœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-1QzTI",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
          "target": "AnthropicModel-UiAVe",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-UiAVeœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "AnthropicModel-UiAVe",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-1QzTI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-AnthropicModel-UiAVe{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-UiAVeœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "IDGenerator-fDNvU",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}",
          "target": "MemoryComponent-nBkkb",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-nBkkbœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "MemoryComponent-nBkkb",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-fDNvU"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-IDGenerator-fDNvU{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-fDNvUœ}-MemoryComponent-nBkkb{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-nBkkbœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OpenAIModel-GYs6i",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}",
          "target": "CreateRecord-X1pnc",
          "targetHandle": "{œfieldNameœ:œjson_stringœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "json_string",
              "id": "CreateRecord-X1pnc",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-GYs6i"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-GYs6i{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-GYs6iœ}-CreateRecord-X1pnc{œfieldNameœ:œjson_stringœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CreateRecord-X1pnc",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCreateRecordœ,œidœ:œCreateRecord-X1pncœ}",
          "target": "SubFlow-8OO1k",
          "targetHandle": "{œfieldNameœ:œrecordœ,œidœ:œSubFlow-8OO1kœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "record",
              "id": "SubFlow-8OO1k",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "CreateRecord",
              "id": "CreateRecord-X1pnc"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CreateRecord-X1pnc{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCreateRecordœ,œidœ:œCreateRecord-X1pncœ}-SubFlow-8OO1k{œfieldNameœ:œrecordœ,œidœ:œSubFlow-8OO1kœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "source": "SubFlow-v11ty",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}",
          "target": "RecordsToText-RGZYd",
          "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-RGZYdœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "records",
              "id": "RecordsToText-RGZYd",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "SubFlow",
              "id": "SubFlow-v11ty"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-SubFlow-v11ty{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}-RecordsToText-RGZYd{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-RGZYdœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "source": "SubFlow-v11ty",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}",
          "target": "RecordsToText-CC08y",
          "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-CC08yœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "records",
              "id": "RecordsToText-CC08y",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "SubFlow",
              "id": "SubFlow-v11ty"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-SubFlow-v11ty{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSubFlowœ,œidœ:œSubFlow-v11tyœ}-RecordsToText-CC08y{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-CC08yœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "source": "AnthropicModel-UiAVe",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}",
          "target": "ChatOutput-JYfgR",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JYfgRœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-JYfgR",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-UiAVe"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-AnthropicModel-UiAVe{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}-ChatOutput-JYfgR{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JYfgRœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "AnthropicModel-tRkAy",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}",
          "target": "ChatOutput-fPTPx",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fPTPxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-fPTPx",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-tRkAy"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-AnthropicModel-tRkAy{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}-ChatOutput-fPTPx{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fPTPxœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OpenAIModel-mfXv9",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}",
          "target": "ChatOutput-Ymr71",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Ymr71œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-Ymr71",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-mfXv9"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-mfXv9{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}-ChatOutput-Ymr71{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Ymr71œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "GroqModel-VMd5p",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}",
          "target": "ChatOutput-fhYjS",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fhYjSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-fhYjS",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "GroqModel",
              "id": "GroqModel-VMd5p"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-GroqModel-VMd5p{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}-ChatOutput-fhYjS{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fhYjSœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "GoogleGenerativeAIModel-afWQS",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}",
          "target": "ChatOutput-sYkqo",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-sYkqoœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-sYkqo",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "GoogleGenerativeAIModel",
              "id": "GoogleGenerativeAIModel-afWQS"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-GoogleGenerativeAIModel-afWQS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}-ChatOutput-sYkqo{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-sYkqoœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-1QzTI",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}",
          "target": "OpenAIModel-H8mmV",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-H8mmVœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-H8mmV",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-1QzTI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-1QzTI{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-1QzTIœ}-OpenAIModel-H8mmV{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-H8mmVœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OpenAIModel-H8mmV",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}",
          "target": "ChatOutput-hnHl2",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hnHl2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-hnHl2",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-H8mmV"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-H8mmV{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}-ChatOutput-hnHl2{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hnHl2œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OpenAIModel-XiKgK",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-XiKgKœ}",
          "target": "CustomComponent-HNEff",
          "targetHandle": "{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-HNEffœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "title",
              "id": "CustomComponent-HNEff",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-XiKgK"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-XiKgK{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-XiKgKœ}-CustomComponent-HNEff{œfieldNameœ:œtitleœ,œidœ:œCustomComponent-HNEffœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-HNEff",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-HNEffœ}",
          "target": "CustomComponent-mys14",
          "targetHandle": "{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-mys14œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "properties",
              "id": "CustomComponent-mys14",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-HNEff"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-HNEff{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-HNEffœ}-CustomComponent-mys14{œfieldNameœ:œpropertiesœ,œidœ:œCustomComponent-mys14œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "RecordsToText-ZZIh7",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-ZZIh7œ}",
          "target": "CustomComponent-ezhFs",
          "targetHandle": "{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "block_id",
              "id": "CustomComponent-ezhFs",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "RecordsToText",
              "id": "RecordsToText-ZZIh7"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-RecordsToText-ZZIh7{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œRecordsToTextœ,œidœ:œRecordsToText-ZZIh7œ}-CustomComponent-ezhFs{œfieldNameœ:œblock_idœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "GoogleGenerativeAIModel-afWQS",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}",
          "target": "Prompt-OC63E",
          "targetHandle": "{œfieldNameœ:œdraft2œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "draft2",
              "id": "Prompt-OC63E",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "GoogleGenerativeAIModel",
              "id": "GoogleGenerativeAIModel-afWQS"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-GoogleGenerativeAIModel-afWQS{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-afWQSœ}-Prompt-OC63E{œfieldNameœ:œdraft2œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OpenAIModel-mfXv9",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}",
          "target": "Prompt-OC63E",
          "targetHandle": "{œfieldNameœ:œdraft1œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "draft1",
              "id": "Prompt-OC63E",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-mfXv9"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-mfXv9{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-mfXv9œ}-Prompt-OC63E{œfieldNameœ:œdraft1œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "AnthropicModel-tRkAy",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}",
          "target": "Prompt-OC63E",
          "targetHandle": "{œfieldNameœ:œdraft3œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "draft3",
              "id": "Prompt-OC63E",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-tRkAy"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-AnthropicModel-tRkAy{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-tRkAyœ}-Prompt-OC63E{œfieldNameœ:œdraft3œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OpenAIModel-H8mmV",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}",
          "target": "Prompt-OC63E",
          "targetHandle": "{œfieldNameœ:œdraft4œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "draft4",
              "id": "Prompt-OC63E",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-H8mmV"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-OpenAIModel-H8mmV{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-H8mmVœ}-Prompt-OC63E{œfieldNameœ:œdraft4œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "GroqModel-VMd5p",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}",
          "target": "Prompt-OC63E",
          "targetHandle": "{œfieldNameœ:œdraft6œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "draft6",
              "id": "Prompt-OC63E",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "GroqModel",
              "id": "GroqModel-VMd5p"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-GroqModel-VMd5p{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-VMd5pœ}-Prompt-OC63E{œfieldNameœ:œdraft6œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "AnthropicModel-UiAVe",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}",
          "target": "Prompt-OC63E",
          "targetHandle": "{œfieldNameœ:œdraft5œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "draft5",
              "id": "Prompt-OC63E",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-UiAVe"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-AnthropicModel-UiAVe{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-UiAVeœ}-Prompt-OC63E{œfieldNameœ:œdraft5œ,œidœ:œPrompt-OC63Eœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-OC63E",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-OC63Eœ}",
          "target": "TextOutput-uEhDK",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-uEhDKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-uEhDK",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-OC63E"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-Prompt-OC63E{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-OC63Eœ}-TextOutput-uEhDK{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-uEhDKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "TextOutput-yoXhj",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}",
          "target": "OpenAIModel-XiKgK",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-XiKgKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-XiKgK",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextOutput",
              "id": "TextOutput-yoXhj"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-TextOutput-yoXhj{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}-OpenAIModel-XiKgK{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-XiKgKœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-mys14",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mys14œ}",
          "target": "RecordsToText-ZZIh7",
          "targetHandle": "{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-ZZIh7œ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "records",
              "id": "RecordsToText-ZZIh7",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-mys14"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-mys14{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-mys14œ}-RecordsToText-ZZIh7{œfieldNameœ:œrecordsœ,œidœ:œRecordsToText-ZZIh7œ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "source": "TextOutput-yoXhj",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}",
          "target": "CustomComponent-ezhFs",
          "targetHandle": "{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "markdown_text",
              "id": "CustomComponent-ezhFs",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextOutput",
              "id": "TextOutput-yoXhj"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-TextOutput-yoXhj{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yoXhjœ}-CustomComponent-ezhFs{œfieldNameœ:œmarkdown_textœ,œidœ:œCustomComponent-ezhFsœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "MemoryComponent-nBkkb",
          "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-nBkkbœ}",
          "target": "CreateRecord-X1pnc",
          "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ,œRecordœ],œtypeœ:œdictœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_1_key",
              "id": "CreateRecord-X1pnc",
              "inputTypes": [
                "Text",
                "Record"
              ],
              "type": "dict"
            },
            "sourceHandle": {
              "baseClasses": [
                "str",
                "Text",
                "object"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-nBkkb"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-MemoryComponent-nBkkb{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-nBkkbœ}-CreateRecord-X1pnc{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateRecord-X1pncœ,œinputTypesœ:[œTextœ,œRecordœ],œtypeœ:œdictœ}"
        },
        {
          "source": "MemoryComponent-ak26x",
          "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}",
          "target": "Prompt-TuTEh",
          "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "history",
              "id": "Prompt-TuTEh",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str",
                "Text",
                "object"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-ak26x"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-MemoryComponent-ak26x{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-ak26xœ}-Prompt-TuTEh{œfieldNameœ:œhistoryœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "ChatInput-eG2tS",
          "sourceHandle": "{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-eG2tSœ}",
          "target": "Prompt-TuTEh",
          "targetHandle": "{œfieldNameœ:œinputœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input",
              "id": "Prompt-TuTEh",
              "inputTypes": [
                "Document",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Text",
                "object",
                "Record",
                "str"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-eG2tS"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-ChatInput-eG2tS{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-eG2tSœ}-Prompt-TuTEh{œfieldNameœ:œinputœ,œidœ:œPrompt-TuTEhœ,œinputTypesœ:[œDocumentœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": -215.83338952921667,
        "y": -260.84788500881086,
        "zoom": 0.4370955296757091
      }
    },
    "date_created": "2024-06-08T06:07:31.946Z",
    "date_updated": "2024-06-08T06:07:32.034Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:53.588Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 224,
    "converter_version": "1.0.0"
  }
}