{
  "id": "964d09e7-801b-4be4-8fb6-5f7de3539411",
  "name": "PROFITIZE Latest working chatbot",
  "description": "Language Chainlink Master. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "pallavbh23",
    "first_name": "Pallav",
    "last_name": "Bhardwaj",
    "id": "c89c8686-e982-4f22-970f-9765eca6df63",
    "full_name": "Pallav Bhardwaj"
  },
  "store_url": "https://www.langflow.store/store/component/964d09e7-801b-4be4-8fb6-5f7de3539411",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-05T18:54:43.719Z",
    "updated": "2024-09-05T18:54:43.896Z",
    "downloaded": "2025-08-19T17:50:06.017Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "File-6vRpl",
        "type": "genericNode",
        "position": {
          "x": 218,
          "y": 160.6484375
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "_type": "Component",
              "path": {
                "trace_as_metadata": true,
                "file_path": "21b203cc-c4dc-4108-bf70-ee77ab261d44/combined_final_transactions.json",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "path",
                "value": "",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_file",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "silent_errors"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "File-6vRpl"
        },
        "selected": false,
        "width": 384,
        "height": 294,
        "dragging": false,
        "positionAbsolute": {
          "x": 218,
          "y": 160.6484375
        }
      },
      {
        "id": "File-2jEo8",
        "type": "genericNode",
        "position": {
          "x": 245,
          "y": 538.6484375
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "_type": "Component",
              "path": {
                "trace_as_metadata": true,
                "file_path": "21b203cc-c4dc-4108-bf70-ee77ab261d44/PROFITIZE Knowledgebase - Biryaniwala  v2 - Variables.csv",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "path",
                "value": "",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_file",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "silent_errors"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "File-2jEo8"
        },
        "selected": false,
        "width": 384,
        "height": 294,
        "positionAbsolute": {
          "x": 245,
          "y": 538.6484375
        },
        "dragging": false
      },
      {
        "id": "FilterData-s9gWT",
        "type": "genericNode",
        "position": {
          "x": 788,
          "y": 154.6484375
        },
        "data": {
          "type": "FilterData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Data object to filter.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FilterDataComponent(Component):\n    display_name = \"Filter Data\"\n    description = \"Filters a Data object based on a list of keys.\"\n    icon = \"filter\"\n    beta = True\n    name = \"FilterData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"Data object to filter.\",\n        ),\n        MessageTextInput(\n            name=\"filter_criteria\",\n            display_name=\"Filter Criteria\",\n            info=\"List of keys to filter by.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def filter_data(self) -> Data:\n        filter_criteria: List[str] = self.filter_criteria\n        data = self.data.data if isinstance(self.data, Data) else {}\n\n        # Filter the data\n        filtered = {key: value for key, value in data.items() if key in filter_criteria}\n\n        # Create a new Data object with the filtered data\n        filtered_data = Data(data=filtered)\n        self.status = filtered_data\n        return filtered_data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "filter_criteria": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "filter_criteria",
                "value": [
                  "file_path"
                ],
                "display_name": "Filter Criteria",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "List of keys to filter by.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Filters a Data object based on a list of keys.",
            "icon": "filter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Filter Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "filtered_data",
                "display_name": "Filtered Data",
                "method": "filter_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "filter_criteria"
            ],
            "beta": true,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "FilterData-s9gWT"
        },
        "selected": false,
        "width": 384,
        "height": 342,
        "positionAbsolute": {
          "x": 788,
          "y": 154.6484375
        },
        "dragging": false
      },
      {
        "id": "FilterData-AJrIR",
        "type": "genericNode",
        "position": {
          "x": 793,
          "y": 531.6484375
        },
        "data": {
          "type": "FilterData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Data object to filter.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FilterDataComponent(Component):\n    display_name = \"Filter Data\"\n    description = \"Filters a Data object based on a list of keys.\"\n    icon = \"filter\"\n    beta = True\n    name = \"FilterData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"Data object to filter.\",\n        ),\n        MessageTextInput(\n            name=\"filter_criteria\",\n            display_name=\"Filter Criteria\",\n            info=\"List of keys to filter by.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def filter_data(self) -> Data:\n        filter_criteria: List[str] = self.filter_criteria\n        data = self.data.data if isinstance(self.data, Data) else {}\n\n        # Filter the data\n        filtered = {key: value for key, value in data.items() if key in filter_criteria}\n\n        # Create a new Data object with the filtered data\n        filtered_data = Data(data=filtered)\n        self.status = filtered_data\n        return filtered_data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "filter_criteria": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "filter_criteria",
                "value": [
                  "file_path"
                ],
                "display_name": "Filter Criteria",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "List of keys to filter by.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Filters a Data object based on a list of keys.",
            "icon": "filter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Filter Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "filtered_data",
                "display_name": "Filtered Data",
                "method": "filter_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "filter_criteria"
            ],
            "beta": true,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "FilterData-AJrIR"
        },
        "selected": false,
        "width": 384,
        "height": 342,
        "positionAbsolute": {
          "x": 793,
          "y": 531.6484375
        },
        "dragging": false
      },
      {
        "id": "CreateList-yBLdC",
        "type": "genericNode",
        "position": {
          "x": 1366,
          "y": 344.6484375
        },
        "data": {
          "type": "CreateList",
          "node": {
            "template": {
              "_type": "Component",
              "texts": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "texts",
                "value": "",
                "display_name": "Texts",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Enter one or more texts.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.inputs import StrInput\nfrom axiestudio.schema import Data\nfrom axiestudio.template import Output\n\n\nclass CreateListComponent(Component):\n    display_name = \"Create List\"\n    description = \"Creates a list of texts.\"\n    icon = \"list\"\n    name = \"CreateList\"\n\n    inputs = [\n        DataInput(\n            name=\"texts\",\n            display_name=\"Texts\",\n            info=\"Enter one or more texts.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data List\", name=\"list\", method=\"create_list\"),\n    ]\n\n    def create_list(self) -> list[Data]:\n      data = []\n      for i, text in enumerate(self.texts, start=1):\n          # Dynamically create attribute names text1, text2, ...\n          data_dict = {f\"text{i}\": text}\n          # Assuming Data can be initialized with keyword arguments using **data_dict\n          data.append(Data(**data_dict))\n      self.status = data\n      return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Creates a list of texts.",
            "icon": "list",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create List",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "list",
                "display_name": "Data List",
                "method": "create_list",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "texts"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.15"
          },
          "id": "CreateList-yBLdC"
        },
        "selected": false,
        "width": 384,
        "height": 256,
        "positionAbsolute": {
          "x": 1366,
          "y": 344.6484375
        },
        "dragging": false
      },
      {
        "id": "OpenAIToolsAgent-7Bz4M",
        "type": "genericNode",
        "position": {
          "x": 2486.8659059282377,
          "y": 123.32332736186459
        },
        "data": {
          "type": "OpenAIToolsAgent",
          "node": {
            "template": {
              "_type": "Component",
              "chat_history": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_history",
                "value": "",
                "display_name": "Chat History",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel",
                  "ToolEnabledLanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool",
                  "BaseTool"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, List\n\nfrom langchain.agents import create_openai_tools_agent\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate\n\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import MultilineInput\nfrom axiestudio.inputs.inputs import HandleInput, DataInput\nfrom axiestudio.schema import Data\n\n\nclass OpenAIToolsAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"OpenAI Tools Agent\"\n    description: str = \"Agent that uses tools via openai-tools.\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"OpenAIToolsAgent\"\n\n    inputs = LCToolsAgentComponent._base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            input_types=[\"LanguageModel\", \"ToolEnabledLanguageModel\"],\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> Optional[List[Data]]:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_openai_tools_agent(self.llm, self.tools, prompt)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": "15",
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "system_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "You are a helpful assistant. Your job is to understand user queries and then pass them to the financial_analyst tool.  Your prime objective is to assist users in getting these responses. You must ask more questions if the user intent is not clear. As soon as the intent becomes clear, execute the financial_analyst tool and give the desired response value. These are the 3 values that you need to pass:\n\ncalculation_type: An enum that decides what value to calculate from this tool.\n\nstart_date: start_date of the transactions. You must pass the start_date as a unix time stamp. Can be empty or None\nend_date: end_date of the transactions. You must pass the start_date as a unix time stamp. Can be empty or None.\n\n\nYou must display every output that you get from the tool. Even if it's an error or unexpected data. If it's a file path, you must display it as is.\n\nIf no start date or end date is given, don't ask the user to provide them, always assume the start date to be the lowest in the unix timestamp and always assume the end date to be the current timestamp.\n\nYou might face errors while calling the financial_analyst tool. You must retry 3 times and show the output of each retry. Once you have exhausted the retries, you can show the error message to the user. Each time you retry, ensure that if the error is readable and understandable by you, you make the appropriate changes. \n\nYou might be asked multiple questions in a single prompt too. The questions could include different calculation types in the same date range or the same calculation type in multiple date ranges. You are supposed to use the financial_analyst tool as many times as required to answer them. \n\n\nThere might be questions that do not pertain to the enums provided to you. For those questions, try to use the Python REPL tool.",
                "display_name": "System Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System prompt for the agent.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "user_prompt": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "user_prompt",
                "value": "Decode the user's intention from this prompt. Try to get start_date, end_date and the calculation_type to be passed ot the financial_analyst tool: {input}",
                "display_name": "Prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "This prompt must contain 'input' key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Agent that uses tools via openai-tools.",
            "icon": "LangChain",
            "base_classes": [
              "AgentExecutor",
              "Message"
            ],
            "display_name": "OpenAI Tools Agent",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "AgentExecutor"
                ],
                "selected": "AgentExecutor",
                "name": "agent",
                "display_name": "Agent",
                "method": "build_agent",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "tools",
              "llm",
              "system_prompt",
              "user_prompt",
              "chat_history"
            ],
            "beta": true,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "OpenAIToolsAgent-7Bz4M"
        },
        "selected": false,
        "width": 384,
        "height": 643,
        "positionAbsolute": {
          "x": 2486.8659059282377,
          "y": 123.32332736186459
        },
        "dragging": false
      },
      {
        "id": "PythonCodeStructuredTool-Yp7FJ",
        "type": "genericNode",
        "position": {
          "x": 1845.7426561657521,
          "y": 114.78096569265256
        },
        "data": {
          "type": "PythonCodeStructuredTool",
          "node": {
            "template": {
              "_type": "Component",
              "_functions": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{\"execute_code\": {\"name\": \"execute_code\", \"args\": [{\"name\": \"calculation_type\", \"annotations\": [\"str\"]}, {\"name\": \"start_date\", \"annotations\": [\"int\"]}, {\"name\": \"end_date\", \"annotations\": [\"int\"]}]}}",
                "name": "_functions",
                "display_name": "Functions",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import ast\nimport json\nfrom typing import Any\n\nfrom langchain.agents import Tool\nfrom axiestudio.inputs.inputs import (\n    MultilineInput,\n    MessageTextInput,\n    BoolInput,\n    DropdownInput,\n    IntInput,\n    FloatInput,\n    HandleInput,\n    FieldTypes,\n)\nfrom langchain_core.tools import StructuredTool\nfrom axiestudio.io import Output\n\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.schema import Data\n\nfrom pydantic.v1 import Field, create_model\nfrom pydantic.v1.fields import Undefined\n\n\nclass PythonCodeStructuredTool(Component):\n    DEFAULT_KEYS = [\n        \"code\",\n        \"_type\",\n        \"text_key\",\n        \"tool_code\",\n        \"tool_name\",\n        \"tool_description\",\n        \"return_direct\",\n        \"tool_function\",\n        \"global_variables\",\n        \"_functions\",\n    ]\n    AVAILABLE_TYPES = {\n        \"str\": {\"annotation\": str, \"field\": MessageTextInput},\n        \"int\": {\"annotation\": int, \"field\": IntInput},\n        \"float\": {\"annotation\": float, \"field\": FloatInput},\n        \"bool\": {\"annotation\": bool, \"field\": BoolInput},\n        \"NoneType\": {\"annotation\": None},\n    }\n    display_name = \"Python Method Tool\"\n    description = \"Python method to tool\"\n    documentation = \"https://python.langchain.com/docs/modules/tools/custom_tools/#structuredtool-dataclass\"\n    name = \"PythonCodeStructuredTool\"\n    icon = \"🐍\"\n\n    inputs = [\n        MultilineInput(\n            name=\"tool_code\",\n            display_name=\"Tool Code\",\n            info=\"Enter the dataclass code.\",\n            placeholder=\"def my_function(args):\\n    pass\",\n            required=True,\n            real_time_refresh=True,\n            refresh_button=True,\n        ),\n        MessageTextInput(name=\"tool_name\", display_name=\"Tool Name\", info=\"Enter the name of the tool.\", required=True),\n        MessageTextInput(\n            name=\"tool_description\",\n            display_name=\"Description\",\n            info=\"Enter the description of the tool.\",\n            required=True,\n        ),\n        BoolInput(\n            name=\"return_direct\",\n            display_name=\"Return Directly\",\n            info=\"Should the tool return the function output directly?\",\n        ),\n        DropdownInput(\n            name=\"tool_function\",\n            display_name=\"Tool Function\",\n            info=\"Select the function for additional expressions.\",\n            options=[],\n            required=True,\n            real_time_refresh=True,\n            refresh_button=True,\n        ),\n        HandleInput(\n            name=\"global_variables\",\n            display_name=\"Global Variables\",\n            info=\"Enter the global variables or Create Data Component.\",\n            input_types=[\"Data\"],\n            field_type=FieldTypes.DICT,\n            is_list=True,\n        ),\n        MessageTextInput(name=\"_functions\", display_name=\"Functions\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Tool\", name=\"result_tool\", method=\"build_tool\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name is None:\n            return build_config\n\n        if field_name != \"tool_code\" and field_name != \"tool_function\":\n            return build_config\n\n        try:\n            named_functions = {}\n            functions = self._parse_functions(build_config[\"tool_code\"][\"value\"])\n            existing_fields = {}\n            if len(build_config) > len(self.DEFAULT_KEYS):\n                for key in build_config.copy():\n                    if key not in self.DEFAULT_KEYS:\n                        existing_fields[key] = build_config.pop(key)\n\n            names = []\n            for func in functions:\n                named_functions[func[\"name\"]] = func\n                names.append(func[\"name\"])\n\n                for arg in func[\"args\"]:\n                    field_name = f\"{func['name']}|{arg['name']}\"\n                    if field_name in existing_fields:\n                        build_config[field_name] = existing_fields[field_name]\n                        continue\n\n                    for annotation in arg[\"annotations\"]:\n                        if annotation not in self.AVAILABLE_TYPES:\n                            raise Exception(f\"Unsupported type: {func['name']}_{arg['name']} - {annotation}\")\n\n                    field = MessageTextInput(\n                        display_name=f\"{arg['name']}: Description\",\n                        name=field_name,\n                        info=f\"Enter the description for {arg['name']}\",\n                        required=True,\n                    )\n                    build_config[field_name] = field.to_dict()\n\n            build_config[\"_functions\"][\"value\"] = json.dumps(named_functions)\n            build_config[\"tool_function\"][\"options\"] = names\n        except Exception as e:\n            self.status = f\"Failed to extract names: {str(e)}\"\n            build_config[\"tool_function\"][\"options\"] = [\"Failed to parse\", str(e)]\n        return build_config\n\n    async def build_tool(self) -> Tool:\n        local_namespace = {}  # type: ignore\n        tool_code = f\"from langchain_core.pydantic_v1 import BaseModel, Field\\n{self.tool_code}\"\n        modules = self._find_imports(tool_code)\n        import_code = \"\"\n        for module in modules[\"imports\"]:\n            import_code += f\"global {module}\\nimport {module}\\n\"\n        for from_module in modules[\"from_imports\"]:\n            for alias in from_module.names:\n                import_code += f\"global {alias.name}\\n\"\n            import_code += (\n                f\"from {from_module.module} import {', '.join([alias.name for alias in from_module.names])}\\n\"\n            )\n        exec(import_code, globals())\n        exec(tool_code, globals(), local_namespace)\n\n        class PythonCodeToolFunc:\n            params: dict = {}\n\n            def run(**kwargs):\n                for key in kwargs:\n                    if key not in PythonCodeToolFunc.params:\n                        PythonCodeToolFunc.params[key] = kwargs[key]\n                return local_namespace[self.tool_function](**PythonCodeToolFunc.params)\n\n        _globals = globals()\n        _local = {}\n        _local[self.tool_function] = PythonCodeToolFunc\n        _globals.update(_local)\n\n        if isinstance(self.global_variables, list):\n            for data in self.global_variables:\n                if isinstance(data, Data):\n                    _globals.update(data.data)\n        elif isinstance(self.global_variables, dict):\n            _globals.update(self.global_variables)\n\n        named_functions = json.loads(self._attributes[\"_functions\"])\n        schema_fields = {}\n\n        for attr in self._attributes:\n            if attr in self.DEFAULT_KEYS:\n                continue\n\n            func_name = attr.split(\"|\")[0]\n            field_name = attr.split(\"|\")[1]\n            func_arg = self._find_arg(named_functions, func_name, field_name)\n            if func_arg is None:\n                raise Exception(f\"Failed to find arg: {field_name}\")\n\n            field_annotations = func_arg[\"annotations\"]\n\n            field_value = self._get_value(self._attributes[attr], str)\n            schema_annotations = str\n            is_annotated = False\n            for field_annotation in field_annotations:\n                if field_annotation not in self.AVAILABLE_TYPES:\n                    raise Exception(f\"Unsupported type: {field_name} - {field_annotation}\")\n                if not is_annotated:\n                    schema_annotations = self.AVAILABLE_TYPES[field_annotation][\"annotation\"]\n                    is_annotated = True\n                else:\n                    schema_annotations |= self.AVAILABLE_TYPES[field_annotation][\"annotation\"]\n            schema_fields[field_name] = (\n                schema_annotations,\n                Field(default=func_arg[\"default\"] if \"default\" in func_arg else Undefined, description=field_value),\n            )\n\n        PythonCodeToolSchema = None\n        if schema_fields:\n            PythonCodeToolSchema = create_model(\"PythonCodeToolSchema\", **schema_fields)  # type: ignore\n\n        tool = StructuredTool.from_function(\n            func=_local[self.tool_function].run,\n            args_schema=PythonCodeToolSchema,\n            name=self.tool_name,\n            description=self.tool_description,\n            return_direct=self.return_direct,\n        )\n        return tool  # type: ignore\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"tool_code\"][\"value\"], \"tool_code\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        for key in frontend_node[\"template\"]:\n            if key in self.DEFAULT_KEYS:\n                continue\n            frontend_node[\"template\"] = self.update_build_config(\n                frontend_node[\"template\"], frontend_node[\"template\"][key][\"value\"], key\n            )\n            frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n\n    def _parse_functions(self, code: str) -> list:\n        parsed_code = ast.parse(code)\n        functions = []\n        for node in parsed_code.body:\n            if not isinstance(node, ast.FunctionDef):\n                continue\n            func = {\"name\": node.name, \"args\": []}\n            for arg in node.args.args:\n                func_arg = {\"name\": arg.arg, \"annotations\": None}\n\n                for default in node.args.defaults:\n                    if (\n                        arg.lineno > default.lineno\n                        or arg.col_offset > default.col_offset\n                        or arg.end_lineno < default.end_lineno\n                        or arg.end_col_offset < default.end_col_offset\n                    ):\n                        continue\n\n                    if isinstance(default, ast.Name):\n                        func_arg[\"default\"] = default.id\n                    elif isinstance(default, ast.Constant):\n                        func_arg[\"default\"] = default.value\n\n                if arg.annotation:\n                    func_arg[\"annotations\"] = self._traverse_annotation(arg.annotation)\n\n                func[\"args\"].append(func_arg)\n            functions.append(func)\n\n        return functions\n\n    def _traverse_annotation(self, annotation: Any) -> list:\n        annotation_list = []\n        if isinstance(annotation, ast.BinOp):\n            if not isinstance(annotation.op, ast.BitOr):\n                raise Exception(f\"Unsupported operator: {annotation.op}\")\n            annotation_list.extend(self._traverse_annotation(annotation.left))\n            annotation_list.extend(self._traverse_annotation(annotation.right))\n        elif isinstance(annotation, ast.Name):\n            annotation_list.append(annotation.id)\n        elif isinstance(annotation, ast.Constant):\n            if annotation.value is None:\n                annotation_list.append(\"NoneType\")\n            else:\n                annotation_list.append(annotation.kind)\n        return annotation_list\n\n    def _find_imports(self, code: str) -> dotdict:\n        imports = []\n        from_imports = []\n        parsed_code = ast.parse(code)\n        for node in parsed_code.body:\n            if isinstance(node, ast.Import):\n                for alias in node.names:\n                    imports.append(alias.name)\n            elif isinstance(node, ast.ImportFrom):\n                from_imports.append(node)\n        return {\"imports\": imports, \"from_imports\": from_imports}\n\n    def _get_value(self, value: Any, annotation: Any) -> Any:\n        return value if isinstance(value, annotation) else value[\"value\"]\n\n    def _find_arg(self, named_functions: dict, func_name: str, arg_name: str) -> dict | None:\n        for arg in named_functions[func_name][\"args\"]:\n            if arg[\"name\"] == arg_name:\n                return arg\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "global_variables": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "global_variables",
                "display_name": "Global Variables",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Enter the global variables or Create Data Component.",
                "title_case": false,
                "type": "dict",
                "_input_type": "HandleInput"
              },
              "return_direct": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "return_direct",
                "display_name": "Return Directly",
                "advanced": false,
                "dynamic": false,
                "info": "Should the tool return the function output directly?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tool_code": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "def my_function(args):\n    pass",
                "show": true,
                "value": "def execute_code(calculation_type: str, start_date: int, end_date: int) -> str:\n    import json\n    from enum import Enum\n    try:\n        print(\"Calculating:\", calculation_type)\n    # Define the CalculationType Enum within the function\n        class CalculationType(Enum):\n            VAT_AMOUNT = 'Vat Amount'\n            MATERIALS_DIRECT_WITH_VAT = 'Materials Direct with VAT'\n            MATERIALS_DIRECT = 'Materials Direct'\n            MATERIALS_INDIRECT_WITH_VAT = 'Materials Indirect with VAT'\n            MATERIALS_INDIRECT = 'Materials Indirect'\n            TYPE_OF_PRODUCTS = 'Type of Products'\n            TYPE_OF_DIRECT_MATERIALS = 'Type of Direct Materials'\n            TYPE_OF_INDIRECT_MATERIALS = 'Type of Indirect Materials'\n            TYPE_OF_MATERIALS = 'Type of Materials'\n            VAT = 'VAT'\n            VAT_RECEIVABLE = 'VAT Receivable'\n            VAT_PAYABLE = 'VAT Payable'\n            NET_VAT_PAYABLE = 'Net VAT Payable'\n            NET_VAT_RECEIVABLE = 'Net VAT Receivable'\n            AMOUNT_EXCLUDING_VAT = 'Amount Excluding VAT'\n            REVENUE_WITH_VAT = 'Revenue with VAT'\n            REVENUE = 'Revenue'\n            CREDIT_REVENUE_WITH_VAT = 'Credit Revenue with VAT'\n            CREDIT_REVENUE = 'Credit Revenue'\n            MATERIALS_DIRECT_AND_INDIRECT = 'Materials Direct & Indirect'\n            DIRECT_LABOR = 'Direct Labor'\n            FACTORY_RENT_WITH_VAT = 'Factory Rent with VAT'\n            FACTORY_RENT = 'Factory Rent'\n            UTILITIES_DIRECT_WITH_VAT = 'Utilities Direct with VAT'\n            UTILITIES_DIRECT = 'Utilities Direct'\n            DEPRECIATION_DIRECT = 'Depreciation Direct'\n            MANUFACTURING_OVERHEAD = 'Manufacturing Overhead'\n            COGS = 'COGS'\n            GROSS_PROFIT = 'Gross Profit'\n            GROSS_MARGIN_PERCENT = 'Gross Margin (%)'\n            NET_MARGIN = 'Net Margin'\n            SELLING_EXPENSES = 'Selling Expenses'\n            RENT_GENERAL = 'Rent General'\n            UTILITIES_GENERAL = 'Utilities General'\n            DEPRECIATION_GENERAL = 'Depreciation General'\n            GENERAL_EXPENSES = 'General Expenses'\n            SALARIES_AND_WAGES = 'Salaries and Wages'\n            ADMINISTRATIVE_EXPENSES = 'Administrative Expenses'\n            SG_A = 'SG&A'\n            APBP = 'APBP'\n            APEP = 'APEP'\n            AVERAGE_ACCOUNTS_PAYABLE = 'Average Accounts Payable'\n            DAYS_PAYABLE_OUTSTANDING = 'Days Payable Outstanding (DPO)'\n            PAYABLES_TURNOVER_RATIO = 'Payables Turnover Ratio'\n            ARBP = 'ARBP'\n            AREP = 'AREP'\n            AVERAGE_ACCOUNTS_RECEIVABLE = 'Average Accounts Receivable'\n            DAYS_SALES_OUTSTANDING = 'Days Sales Outstanding (DSO)'\n            CASH_CONVERSION_CYCLE = 'Cash Conversion Cycle (CCC)'\n\n        def get_unique_direct_materials_according_to_knowledgebase(filtered_transactions):\n            \"\"\"\n            Extracts unique 'Direct Materials' from 'Buy' transactions based on the knowledgebase logic.\n\n            Parameters:\n            - filtered_transactions: List of filtered transaction dictionaries.\n\n            Returns:\n            - A comma-separated string of unique 'Direct Materials'.\n            \"\"\"\n            direct_materials = set()\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a GL Entry for direct materials\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Inventory - Materials - Direct':\n                            # If the GL Entry matches, add the Type of Material to the set\n                            material_type = management_data.get('Type Of Material', '')\n                            if material_type:\n                                direct_materials.add(material_type)\n\n            # Join the set of unique direct materials into a comma-separated string\n            return direct_materials\n        def get_unique_indirect_materials_according_to_knowledgebase(filtered_transactions):\n            \"\"\"\n            Extracts unique 'Indirect Materials' from 'Buy' transactions based on the knowledgebase logic.\n\n            Parameters:\n            - filtered_transactions: List of filtered transaction dictionaries.\n\n            Returns:\n            - A comma-separated string of unique 'Indirect Materials'.\n            \"\"\"\n            indirect_materials = set()\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a GL Entry for indirect materials\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Inventory - Materials - Indirect':\n                            # If the GL Entry matches, add the Type of Material to the set\n                            material_type = management_data.get('Type Of Material', '')\n                            if material_type:\n                                indirect_materials.add(material_type)\n\n            # Join the set of unique indirect materials into a comma-separated string\n            return indirect_materials\n        # Load JSON data\n        json_path = str(globals().get('text1').file_path)\n        with open(json_path, 'r') as file:\n            data = json.load(file)\n        \n        # Filter transactions by UNIX timestamp date range\n        filtered_transactions = [\n            transaction for transaction in data\n            if 'Management Data' in transaction and any(\n                isinstance(transaction['Management Data'].get(date_key), int) and  # Check if the date is an integer\n                start_date <= transaction['Management Data'].get(date_key) <= end_date\n                for date_key in transaction['Management Data']\n                if 'Date' in date_key\n            )\n        ]\n\n        # Ensure case insensitive comparison for calculation type\n        calculation_type = calculation_type.lower()\n        \n        # Calculation logic for each type\n        if calculation_type == CalculationType.VAT_AMOUNT.value.lower():\n            return sum(\n                float(transaction['Management Data']['Vat Amount'])\n                for transaction in filtered_transactions\n                if 'Vat Amount' in transaction['Management Data']\n            )\n        elif calculation_type == CalculationType.MATERIALS_DIRECT_WITH_VAT.value.lower():\n            total_amount_with_vat = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Direct'\n                    direct_materials_list = get_unique_direct_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in direct_materials_list:\n                        # Calculate the amount including VAT\n                        total_amount_with_vat += float(amount_including_vat)\n\n            return total_amount_with_vat\n        elif calculation_type == CalculationType.MATERIALS_DIRECT.value.lower():\n            total_amount_excluding_vat = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Direct'\n                    direct_materials_list = get_unique_direct_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in direct_materials_list:\n                        # Calculate the amount excluding VAT\n                        amount_excluding_vat = float(amount_including_vat) - float(vat_amount)\n                        total_amount_excluding_vat += amount_excluding_vat\n\n            return total_amount_excluding_vat\n        elif calculation_type == CalculationType.MATERIALS_INDIRECT_WITH_VAT.value.lower():\n            total_amount_with_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Indirect'\n                    indirect_materials_list = get_unique_indirect_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in indirect_materials_list:\n                        # Calculate the amount including VAT\n                        total_amount_with_vat += float(amount_including_vat)\n\n            return total_amount_with_vat\n        elif calculation_type == CalculationType.MATERIALS_INDIRECT.value.lower():\n            total_amount_excluding_vat = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Indirect'\n                    indirect_materials_list = get_unique_indirect_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in indirect_materials_list:\n                        # Calculate the amount excluding VAT\n                        amount_excluding_vat = float(amount_including_vat) - float(vat_amount)\n                        total_amount_excluding_vat += amount_excluding_vat\n\n            return total_amount_excluding_vat\n\n        elif calculation_type == CalculationType.TYPE_OF_PRODUCTS.value.lower():\n            types_of_products = set()\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a Finished Good Type\n                    product_type = management_data.get('Finished Good Type', '')\n                    if product_type:\n                        types_of_products.add(product_type)\n\n            # Join the set of unique types of products into a comma-separated string\n            return ', '.join(types_of_products)\n        elif calculation_type == CalculationType.TYPE_OF_DIRECT_MATERIALS.value.lower():\n            return ','.join(get_unique_direct_materials_according_to_knowledgebase(filtered_transactions))\n        elif calculation_type == CalculationType.TYPE_OF_INDIRECT_MATERIALS.value.lower():\n            return set(\n                transaction['Management Data']['Type Of Material']\n                for transaction in filtered_transactions\n                if transaction['Management Data'].get('Type Of Material') == 'Coal'\n            )\n        elif calculation_type == CalculationType.TYPE_OF_MATERIALS.value.lower():\n            types_of_materials = set()\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a 'Type Of Material'\n                    material_type = management_data.get('Type Of Material', '')\n                    if material_type:\n                        types_of_materials.add(material_type)\n\n            # Join the set of unique types of materials into a comma-separated string\n            return ', '.join(types_of_materials)\n        elif calculation_type == CalculationType.VAT.value.lower():\n            total_vat_input = 0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Check if the GL Entry has the Credit Name 'A/P - VAT - Output Tax'\n                    if entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        # Sum the amount for entries with this credit name\n                        total_vat_input += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_vat_input\n        elif calculation_type == CalculationType.VAT_RECEIVABLE.value.lower():\n            total_vat_receivable = 0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Check if the GL Entry has the Debit Name 'A/R - VAT - Input Tax'\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        # Sum the amount for entries with this debit name\n                        total_vat_receivable += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_vat_receivable\n        elif calculation_type == CalculationType.VAT_PAYABLE.value.lower():\n            total_vat_payable = 0\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Check if the GL Entry has the Credit Name 'A/P - VAT - Output Tax'\n                    if entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        # Sum the amount for entries with this credit name\n                        total_vat_payable += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_vat_payable\n        elif calculation_type == CalculationType.NET_VAT_PAYABLE.value.lower():\n            vat_receivable = 0\n            vat_payable = 0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Calculate VAT Receivable from entries with Debit Name 'A/R - VAT - Input Tax'\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        vat_receivable += float(entry.get('Amount', '0').replace(',', ''))\n                    # Calculate VAT Payable from entries with Credit Name 'A/P - VAT - Output Tax'\n                    elif entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        vat_payable += float(entry.get('Amount', '0').replace(',', ''))\n\n            # Calculate net VAT payable\n            net_vat_payable = vat_payable - vat_receivable\n            return net_vat_payable\n        elif calculation_type == CalculationType.NET_VAT_RECEIVABLE.value.lower():\n            vat_receivable = 0\n            vat_payable = 0\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Calculate VAT Receivable from entries with Debit Name 'A/R - VAT - Input Tax'\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        vat_receivable += float(entry.get('Amount', '0').replace(',', ''))\n                    # Calculate VAT Payable from entries with Credit Name 'A/P - VAT - Output Tax'\n                    elif entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        vat_payable += float(entry.get('Amount', '0').replace(',', ''))\n\n            # Calculate net VAT receivable\n            net_vat_receivable = vat_receivable - vat_payable\n            return net_vat_receivable\n        elif calculation_type == CalculationType.AMOUNT_EXCLUDING_VAT.value.lower():\n            total_amount_excluding_vat = 0\n            for transaction in filtered_transactions:\n                management_data = transaction.get('Management Data', {})\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Check if the transaction has VAT and Amount Including VAT in Management Data\n                vat_amount = float(management_data.get('Vat Amount', '0').replace(',', ''))\n                amount_including_vat = float(management_data.get('Amount Including Vat', '0').replace(',', ''))\n                \n                if vat_amount > 0 and amount_including_vat > 0:\n                    # Calculate amount excluding VAT\n                    amount_excluding_vat = amount_including_vat - vat_amount\n                    total_amount_excluding_vat += amount_excluding_vat\n                else:\n                    # If not in Management Data, check GL Entries\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'A/R - VAT - Input Tax' or entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                            # Extract the amount including VAT from the relevant GL entry\n                            amount_including_vat_gl = float(entry.get('Amount', '0').replace(',', ''))\n                            if amount_including_vat_gl > 0:\n                                # Calculate amount excluding VAT from GL entry\n                                amount_excluding_vat_gl = amount_including_vat_gl - vat_amount\n                                total_amount_excluding_vat += amount_excluding_vat_gl\n\n            return total_amount_excluding_vat\n        elif calculation_type == CalculationType.REVENUE_WITH_VAT.value.lower():\n            total_revenue_with_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a GL Entry for 'Sales - Finished Goods'\n                    amount_including_vat = float(management_data.get('Amount Including Vat', '0').replace(',', ''))\n                    if amount_including_vat > 0:\n                        total_revenue_with_vat += amount_including_vat\n\n            return total_revenue_with_vat\n        elif calculation_type == CalculationType.REVENUE.value.lower():\n            total_revenue_excluding_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    management_data = transaction.get('Management Data', {})\n                    \n                    # Calculate amount excluding VAT\n                    vat_amount = float(management_data.get('Vat Amount', '0').replace(',', ''))\n                    amount_including_vat = float(management_data.get('Amount Including Vat', '0').replace(',', ''))\n                    \n                    if amount_including_vat > 0:\n                        amount_excluding_vat = amount_including_vat - vat_amount\n                        total_revenue_excluding_vat += amount_excluding_vat\n\n            return total_revenue_excluding_vat\n        elif calculation_type == CalculationType.CREDIT_REVENUE_WITH_VAT.value.lower():\n            total_credit_revenue_with_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    \n                    has_sales_finished_goods = any(entry.get('Credit Name') == 'Sales - Finished Goods' for entry in gl_entries)\n                    has_trade_receivable = any(entry.get('Debit Name') == 'A/R - Trade Receivable' for entry in gl_entries)\n                    \n                    if has_sales_finished_goods and has_trade_receivable:\n                        for entry in gl_entries:\n                            # Sum the amount for entries with the Credit Name 'Sales - Finished Goods'\n                            if entry.get('Credit Name') == 'Sales - Finished Goods':\n                                total_credit_revenue_with_vat += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_credit_revenue_with_vat\n        elif calculation_type == CalculationType.CREDIT_REVENUE.value.lower():\n            total_credit_revenue_without_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    \n                    has_sales_finished_goods = any(entry.get('Credit Name') == 'Sales - Finished Goods' for entry in gl_entries)\n                    has_trade_receivable = any(entry.get('Debit Name') == 'A/R - Trade Receivable' for entry in gl_entries)\n                    \n                    if has_sales_finished_goods and has_trade_receivable:\n                        for entry in gl_entries:\n                            # Sum the amount for entries with the Credit Name 'Sales - Finished Goods' excluding VAT\n                            if entry.get('Credit Name') == 'Sales - Finished Goods':\n                                management_data = transaction.get('Management Data', {})\n                                vat_amount = float(management_data.get('Vat Amount', '0').replace(',', ''))\n                                amount_including_vat = float(entry.get('Amount', '0').replace(',', ''))\n                                amount_excluding_vat = amount_including_vat - vat_amount\n                                total_credit_revenue_without_vat += amount_excluding_vat\n\n            return total_credit_revenue_without_vat\n        elif calculation_type == CalculationType.MATERIALS_DIRECT_AND_INDIRECT.value.lower():\n            total_materials_direct = 0\n            total_materials_indirect = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    for entry in gl_entries:\n                        # Sum the amounts for 'Materials Direct' transactions\n                        if entry.get('Debit Name') == 'Inventory - Materials - Direct':\n                            total_materials_direct += float(entry.get('Amount', '0').replace(',', ''))\n                        # Sum the amounts for 'Materials Indirect' transactions\n                        elif entry.get('Debit Name') == 'Inventory - Materials - Indirect':\n                            total_materials_indirect += float(entry.get('Amount', '0').replace(',', ''))\n\n            # Calculate total for both direct and indirect materials\n            total_materials_direct_and_indirect = total_materials_direct + total_materials_indirect\n\n            return total_materials_direct_and_indirect\n        elif calculation_type == CalculationType.UTILITIES_DIRECT_WITH_VAT.value.lower():\n            return sum(\n                float(transaction['Management Data']['Amount Including Vat'])\n                for transaction in filtered_transactions\n                if transaction['Management Data'].get('Type Of Utility') == 'Electricity - Direct' and 'Vat Amount' in transaction['Management Data']\n            )\n        elif calculation_type == CalculationType.DIRECT_LABOR.value.lower():\n            total_direct_labor = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                tax_entry_present = any(entry.get('Credit Name') == 'Tax Payable - TDS - Salaries, Wages & Fees - Direct' for entry in gl_entries)\n                \n                if tax_entry_present:\n                    amount_before_tax = float(transaction['Management Data'].get('Amount Before Tax Deducted At Source By You', 0).replace(',', ''))\n                    total_direct_labor += amount_before_tax\n                else:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Direct Labor':\n                            amount = float(entry.get('Amount', 0).replace(',', ''))\n                            total_direct_labor += amount\n\n            return total_direct_labor\n        elif calculation_type == CalculationType.FACTORY_RENT_WITH_VAT.value.lower():\n            total_factory_rent_with_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Check for Rent - Direct in GL Entries\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Rent - Direct':\n                        amount = float(entry.get('Amount', 0).replace(',', ''))\n                        total_factory_rent_with_vat += amount\n\n            return total_factory_rent_with_vat\n        elif calculation_type == CalculationType.FACTORY_RENT.value.lower():\n            total_factory_rent_with_vat = 0.0\n            total_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                rent_direct_present = any(entry.get('Debit Name') == 'Rent - Direct' for entry in gl_entries)\n\n                if rent_direct_present:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Rent - Direct':\n                            amount = float(entry.get('Amount', 0).replace(',', ''))\n                            total_factory_rent_with_vat += amount  # No VAT deduction here\n                        elif entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                            total_vat += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_factory_rent_with_vat - total_vat\n        elif calculation_type == CalculationType.UTILITIES_DIRECT_WITH_VAT.value.lower():\n            total_utilities_direct = 0.0\n            total_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                utilities_direct_present = any(entry.get('Debit Name') == 'Utilities - Direct - Goods' for entry in gl_entries)\n\n                if utilities_direct_present:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                            total_utilities_direct += float(entry.get('Amount', 0).replace(',', ''))\n                        elif entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                            total_vat += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_utilities_direct\n        elif calculation_type == CalculationType.UTILITIES_DIRECT.value.lower():\n            total_utilities_direct = 0.0\n            total_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                utilities_direct_present = any(entry.get('Debit Name') == 'Utilities - Direct - Goods' for entry in gl_entries)\n\n                if utilities_direct_present:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                            total_utilities_direct += float(entry.get('Amount', 0).replace(',', ''))\n                        elif entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                            total_vat += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_utilities_direct - total_vat\n        elif calculation_type == CalculationType.DEPRECIATION_DIRECT.value.lower():\n            total_depreciation_direct = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Depreciation Expense - Direct':\n                        total_depreciation_direct += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_depreciation_direct\n        elif calculation_type == CalculationType.MANUFACTURING_OVERHEAD.value.lower():\n            total_utilities_direct = 0.0\n            total_depreciation_direct = 0.0\n            total_factory_rent = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Initialize VAT amounts for this transaction\n                vat_amount_utilities = 0.0\n                vat_amount_factory_rent = 0.0\n                \n                # Check for VAT amounts related to Utilities Direct\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        vat_amount_utilities += float(entry.get('Amount', 0).replace(',', ''))\n\n                # Calculate totals for each category\n                for entry in gl_entries:\n                    # Calculate Utilities Direct\n                    if entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                        amount = float(entry.get('Amount', 0).replace(',', ''))\n                        total_utilities_direct += (amount - vat_amount_utilities)  # Subtract VAT here\n\n                    # Calculate Depreciation Direct\n                    if entry.get('Debit Name') == 'Depreciation Expense - Direct':\n                        total_depreciation_direct += float(entry.get('Amount', 0).replace(',', ''))\n\n                    # Calculate Factory Rent\n                    if entry.get('Debit Name') == 'Rent - Direct':\n                        amount = float(entry.get('Amount', 0).replace(',', ''))\n                        total_factory_rent += amount  # Add Factory Rent amount\n\n                # Calculate VAT for Factory Rent based on Management Data\n                vat_amount_factory_rent += float(transaction['Management Data'].get('VAT Amount', '0').replace(',', ''))\n\n            # Total Manufacturing Overhead without VAT\n            total_manufacturing_overhead = (total_utilities_direct + \n                                            total_depreciation_direct + \n                                            (total_factory_rent - vat_amount_factory_rent))  # Subtract VAT for Factory Rent\n\n            return total_manufacturing_overhead\n        elif calculation_type == CalculationType.COGS.value.lower():\n            total_materials_direct = 0.0\n            total_materials_indirect = 0.0\n            total_direct_labor = 0.0\n            total_manufacturing_overhead = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Calculate Materials Direct and Indirect\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Inventory - Materials - Direct':\n                        total_materials_direct += float(entry.get('Amount', 0).replace(',', ''))\n                    elif entry.get('Debit Name') == 'Inventory - Materials - Indirect':\n                        total_materials_indirect += float(entry.get('Amount', 0).replace(',', ''))\n                    elif entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                        vat_amount_utilities = 0.0\n                        for sub_entry in gl_entries:\n                            if sub_entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                                vat_amount_utilities += float(sub_entry.get('Amount', 0).replace(',', ''))\n                        total_direct_labor += (float(entry.get('Amount', 0).replace(',', '')) - vat_amount_utilities)\n                    elif entry.get('Debit Name') == 'Depreciation Expense - Direct':\n                        total_direct_labor += float(entry.get('Amount', 0).replace(',', ''))\n                    elif entry.get('Debit Name') == 'Rent - Direct':\n                        total_manufacturing_overhead += float(entry.get('Amount', 0).replace(',', ''))\n\n                # Calculate Manufacturing Overhead\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Manufacturing Overhead':\n                        total_manufacturing_overhead += float(entry.get('Amount', 0).replace(',', ''))\n\n            # Calculate COGS using only non-zero fields\n            cogs_total = 0.0\n            if total_materials_direct > 0:\n                cogs_total += total_materials_direct\n            if total_materials_indirect > 0:\n                cogs_total += total_materials_indirect\n            if total_direct_labor > 0:\n                cogs_total += total_direct_labor\n            if total_manufacturing_overhead > 0:\n                cogs_total += total_manufacturing_overhead\n            return cogs_total\n\n        else:\n            return \"Invalid calculation type or not implemented yet.\"\n    except Exception as e:\n        return str(e)",
                "name": "tool_code",
                "display_name": "Tool Code",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the dataclass code.",
                "real_time_refresh": true,
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "tool_description": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "A financial analyst that can be used to calculate user queries.",
                "name": "tool_description",
                "display_name": "Description",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the description of the tool.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tool_function": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "execute_code"
                ],
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "execute_code",
                "name": "tool_function",
                "display_name": "Tool Function",
                "advanced": false,
                "dynamic": false,
                "info": "Select the function for additional expressions.",
                "real_time_refresh": true,
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "tool_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "financial_analyst",
                "name": "tool_name",
                "display_name": "Tool Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the name of the tool.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "execute_code|calculation_type": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "execute_code|calculation_type",
                "value": "calculation_type_description",
                "display_name": "calculation_type: Description",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the description for calculation_type",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "execute_code|start_date": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "execute_code|start_date",
                "value": "start_date of the transactions. To be given as an enum timestamp.",
                "display_name": "start_date: Description",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the description for start_date",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "execute_code|end_date": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "execute_code|end_date",
                "value": "end_date of the transactions. To be given as an enum timestamp.",
                "display_name": "end_date: Description",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the description for end_date",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Python method to tool",
            "icon": "🐍",
            "base_classes": [
              "Tool"
            ],
            "display_name": "Python Method Tool",
            "documentation": "https://python.langchain.com/docs/modules/tools/custom_tools/#structuredtool-dataclass",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "result_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "tool_code",
              "tool_name",
              "tool_description",
              "return_direct",
              "tool_function",
              "global_variables",
              "_functions"
            ],
            "beta": false,
            "edited": true,
            "official": false,
            "lf_version": "1.0.15"
          },
          "id": "PythonCodeStructuredTool-Yp7FJ"
        },
        "selected": false,
        "width": 384,
        "height": 1004,
        "positionAbsolute": {
          "x": 1845.7426561657521,
          "y": 114.78096569265256
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-zIPks",
        "type": "genericNode",
        "position": {
          "x": 2035.0614373313633,
          "y": -738.3834281681072
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": {},
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "OpenAIModel-zIPks"
        },
        "selected": false,
        "width": 384,
        "height": 593,
        "positionAbsolute": {
          "x": 2035.0614373313633,
          "y": -738.3834281681072
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-70Msz",
        "type": "genericNode",
        "position": {
          "x": 3079.3551957335753,
          "y": 319.1603101421918
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "ChatOutput-70Msz"
        },
        "selected": false,
        "width": 384,
        "height": 294,
        "positionAbsolute": {
          "x": 3079.3551957335753,
          "y": 319.1603101421918
        },
        "dragging": false
      },
      {
        "id": "ChatInput-qA7Fg",
        "type": "genericNode",
        "position": {
          "x": 1397.95918916717,
          "y": -160.67596210444486
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "Calculate Revenue and COGS for the year 2023",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.15"
          },
          "id": "ChatInput-qA7Fg"
        },
        "selected": false,
        "width": 384,
        "height": 294,
        "positionAbsolute": {
          "x": 1397.95918916717,
          "y": -160.67596210444486
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "File-6vRpl",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-6vRplœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "FilterData-s9gWT",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œFilterData-s9gWTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "FilterData-s9gWT",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "File",
            "id": "File-6vRpl",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-File-6vRpl{œdataTypeœ:œFileœ,œidœ:œFile-6vRplœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FilterData-s9gWT{œfieldNameœ:œdataœ,œidœ:œFilterData-s9gWTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "File-2jEo8",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-2jEo8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "FilterData-AJrIR",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œFilterData-AJrIRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "FilterData-AJrIR",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "File",
            "id": "File-2jEo8",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-File-2jEo8{œdataTypeœ:œFileœ,œidœ:œFile-2jEo8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FilterData-AJrIR{œfieldNameœ:œdataœ,œidœ:œFilterData-AJrIRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "FilterData-s9gWT",
        "sourceHandle": "{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-s9gWTœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "CreateList-yBLdC",
        "targetHandle": "{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "texts",
            "id": "CreateList-yBLdC",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FilterData",
            "id": "FilterData-s9gWT",
            "name": "filtered_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-FilterData-s9gWT{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-s9gWTœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-CreateList-yBLdC{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "FilterData-AJrIR",
        "sourceHandle": "{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-AJrIRœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "CreateList-yBLdC",
        "targetHandle": "{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "texts",
            "id": "CreateList-yBLdC",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FilterData",
            "id": "FilterData-AJrIR",
            "name": "filtered_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-FilterData-AJrIR{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-AJrIRœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-CreateList-yBLdC{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "CreateList-yBLdC",
        "sourceHandle": "{œdataTypeœ:œCreateListœ,œidœ:œCreateList-yBLdCœ,œnameœ:œlistœ,œoutput_typesœ:[œDataœ]}",
        "target": "PythonCodeStructuredTool-Yp7FJ",
        "targetHandle": "{œfieldNameœ:œglobal_variablesœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œinputTypesœ:[œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "global_variables",
            "id": "PythonCodeStructuredTool-Yp7FJ",
            "inputTypes": [
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "CreateList",
            "id": "CreateList-yBLdC",
            "name": "list",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-CreateList-yBLdC{œdataTypeœ:œCreateListœ,œidœ:œCreateList-yBLdCœ,œnameœ:œlistœ,œoutput_typesœ:[œDataœ]}-PythonCodeStructuredTool-Yp7FJ{œfieldNameœ:œglobal_variablesœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œinputTypesœ:[œDataœ],œtypeœ:œdictœ}",
        "className": ""
      },
      {
        "source": "PythonCodeStructuredTool-Yp7FJ",
        "sourceHandle": "{œdataTypeœ:œPythonCodeStructuredToolœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œnameœ:œresult_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "OpenAIToolsAgent-7Bz4M",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "OpenAIToolsAgent-7Bz4M",
            "inputTypes": [
              "Tool",
              "BaseTool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PythonCodeStructuredTool",
            "id": "PythonCodeStructuredTool-Yp7FJ",
            "name": "result_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-PythonCodeStructuredTool-Yp7FJ{œdataTypeœ:œPythonCodeStructuredToolœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œnameœ:œresult_toolœ,œoutput_typesœ:[œToolœ]}-OpenAIToolsAgent-7Bz4M{œfieldNameœ:œtoolsœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-zIPks",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zIPksœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "OpenAIToolsAgent-7Bz4M",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œLanguageModelœ,œToolEnabledLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "OpenAIToolsAgent-7Bz4M",
            "inputTypes": [
              "LanguageModel",
              "ToolEnabledLanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-zIPks",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-zIPks{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zIPksœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-OpenAIToolsAgent-7Bz4M{œfieldNameœ:œllmœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œLanguageModelœ,œToolEnabledLanguageModelœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIToolsAgent-7Bz4M",
        "sourceHandle": "{œdataTypeœ:œOpenAIToolsAgentœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-70Msz",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-70Mszœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-70Msz",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIToolsAgent",
            "id": "OpenAIToolsAgent-7Bz4M",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIToolsAgent-7Bz4M{œdataTypeœ:œOpenAIToolsAgentœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-70Msz{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-70Mszœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-qA7Fg",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qA7Fgœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIToolsAgent-7Bz4M",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIToolsAgent-7Bz4M",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-qA7Fg",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-qA7Fg{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qA7Fgœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-OpenAIToolsAgent-7Bz4M{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": -539.3494447789021,
      "y": 177.6633266613784,
      "zoom": 0.45720277206336457
    }
  },
  "metadata": {
    "File": {
      "count": 2
    },
    "FilterData": {
      "count": 2
    },
    "CreateList": {
      "count": 1
    },
    "OpenAIToolsAgent": {
      "count": 1
    },
    "PythonCodeStructuredTool": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "total": 10
  },
  "original": {
    "id": "964d09e7-801b-4be4-8fb6-5f7de3539411",
    "name": "PROFITIZE Latest working chatbot",
    "description": "Language Chainlink Master.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "4",
    "metadata": {
      "File": {
        "count": 2
      },
      "FilterData": {
        "count": 2
      },
      "CreateList": {
        "count": 1
      },
      "OpenAIToolsAgent": {
        "count": 1
      },
      "PythonCodeStructuredTool": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "total": 10
    },
    "last_tested_version": "1.0.15",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "File-6vRpl",
          "type": "genericNode",
          "position": {
            "x": 218,
            "y": 160.6484375
          },
          "data": {
            "type": "File",
            "node": {
              "template": {
                "_type": "Component",
                "path": {
                  "trace_as_metadata": true,
                  "file_path": "21b203cc-c4dc-4108-bf70-ee77ab261d44/combined_final_transactions.json",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "path",
                  "value": "",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "silent_errors",
                  "value": false,
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "A generic file loader.",
              "icon": "file-text",
              "base_classes": [
                "Data"
              ],
              "display_name": "File",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "load_file",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "path",
                "silent_errors"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "File-6vRpl"
          },
          "selected": false,
          "width": 384,
          "height": 294,
          "dragging": false,
          "positionAbsolute": {
            "x": 218,
            "y": 160.6484375
          }
        },
        {
          "id": "File-2jEo8",
          "type": "genericNode",
          "position": {
            "x": 245,
            "y": 538.6484375
          },
          "data": {
            "type": "File",
            "node": {
              "template": {
                "_type": "Component",
                "path": {
                  "trace_as_metadata": true,
                  "file_path": "21b203cc-c4dc-4108-bf70-ee77ab261d44/PROFITIZE Knowledgebase - Biryaniwala  v2 - Variables.csv",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "path",
                  "value": "",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "silent_errors",
                  "value": false,
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "A generic file loader.",
              "icon": "file-text",
              "base_classes": [
                "Data"
              ],
              "display_name": "File",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "load_file",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "path",
                "silent_errors"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "File-2jEo8"
          },
          "selected": false,
          "width": 384,
          "height": 294,
          "positionAbsolute": {
            "x": 245,
            "y": 538.6484375
          },
          "dragging": false
        },
        {
          "id": "FilterData-s9gWT",
          "type": "genericNode",
          "position": {
            "x": 788,
            "y": 154.6484375
          },
          "data": {
            "type": "FilterData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "value": "",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Data object to filter.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FilterDataComponent(Component):\n    display_name = \"Filter Data\"\n    description = \"Filters a Data object based on a list of keys.\"\n    icon = \"filter\"\n    beta = True\n    name = \"FilterData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"Data object to filter.\",\n        ),\n        MessageTextInput(\n            name=\"filter_criteria\",\n            display_name=\"Filter Criteria\",\n            info=\"List of keys to filter by.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def filter_data(self) -> Data:\n        filter_criteria: List[str] = self.filter_criteria\n        data = self.data.data if isinstance(self.data, Data) else {}\n\n        # Filter the data\n        filtered = {key: value for key, value in data.items() if key in filter_criteria}\n\n        # Create a new Data object with the filtered data\n        filtered_data = Data(data=filtered)\n        self.status = filtered_data\n        return filtered_data\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "filter_criteria": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "filter_criteria",
                  "value": [
                    "file_path"
                  ],
                  "display_name": "Filter Criteria",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "List of keys to filter by.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Filters a Data object based on a list of keys.",
              "icon": "filter",
              "base_classes": [
                "Data"
              ],
              "display_name": "Filter Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "filtered_data",
                  "display_name": "Filtered Data",
                  "method": "filter_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "filter_criteria"
              ],
              "beta": true,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "FilterData-s9gWT"
          },
          "selected": false,
          "width": 384,
          "height": 342,
          "positionAbsolute": {
            "x": 788,
            "y": 154.6484375
          },
          "dragging": false
        },
        {
          "id": "FilterData-AJrIR",
          "type": "genericNode",
          "position": {
            "x": 793,
            "y": 531.6484375
          },
          "data": {
            "type": "FilterData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "value": "",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Data object to filter.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FilterDataComponent(Component):\n    display_name = \"Filter Data\"\n    description = \"Filters a Data object based on a list of keys.\"\n    icon = \"filter\"\n    beta = True\n    name = \"FilterData\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"Data object to filter.\",\n        ),\n        MessageTextInput(\n            name=\"filter_criteria\",\n            display_name=\"Filter Criteria\",\n            info=\"List of keys to filter by.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\n    ]\n\n    def filter_data(self) -> Data:\n        filter_criteria: List[str] = self.filter_criteria\n        data = self.data.data if isinstance(self.data, Data) else {}\n\n        # Filter the data\n        filtered = {key: value for key, value in data.items() if key in filter_criteria}\n\n        # Create a new Data object with the filtered data\n        filtered_data = Data(data=filtered)\n        self.status = filtered_data\n        return filtered_data\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "filter_criteria": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "filter_criteria",
                  "value": [
                    "file_path"
                  ],
                  "display_name": "Filter Criteria",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "List of keys to filter by.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Filters a Data object based on a list of keys.",
              "icon": "filter",
              "base_classes": [
                "Data"
              ],
              "display_name": "Filter Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "filtered_data",
                  "display_name": "Filtered Data",
                  "method": "filter_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "filter_criteria"
              ],
              "beta": true,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "FilterData-AJrIR"
          },
          "selected": false,
          "width": 384,
          "height": 342,
          "positionAbsolute": {
            "x": 793,
            "y": 531.6484375
          },
          "dragging": false
        },
        {
          "id": "CreateList-yBLdC",
          "type": "genericNode",
          "position": {
            "x": 1366,
            "y": 344.6484375
          },
          "data": {
            "type": "CreateList",
            "node": {
              "template": {
                "_type": "Component",
                "texts": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "texts",
                  "value": "",
                  "display_name": "Texts",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Enter one or more texts.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.inputs import StrInput\nfrom axiestudio.schema import Data\nfrom axiestudio.template import Output\n\n\nclass CreateListComponent(Component):\n    display_name = \"Create List\"\n    description = \"Creates a list of texts.\"\n    icon = \"list\"\n    name = \"CreateList\"\n\n    inputs = [\n        DataInput(\n            name=\"texts\",\n            display_name=\"Texts\",\n            info=\"Enter one or more texts.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data List\", name=\"list\", method=\"create_list\"),\n    ]\n\n    def create_list(self) -> list[Data]:\n      data = []\n      for i, text in enumerate(self.texts, start=1):\n          # Dynamically create attribute names text1, text2, ...\n          data_dict = {f\"text{i}\": text}\n          # Assuming Data can be initialized with keyword arguments using **data_dict\n          data.append(Data(**data_dict))\n      self.status = data\n      return data\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                }
              },
              "description": "Creates a list of texts.",
              "icon": "list",
              "base_classes": [
                "Data"
              ],
              "display_name": "Create List",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "list",
                  "display_name": "Data List",
                  "method": "create_list",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "texts"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.15"
            },
            "id": "CreateList-yBLdC"
          },
          "selected": false,
          "width": 384,
          "height": 256,
          "positionAbsolute": {
            "x": 1366,
            "y": 344.6484375
          },
          "dragging": false
        },
        {
          "id": "OpenAIToolsAgent-7Bz4M",
          "type": "genericNode",
          "position": {
            "x": 2486.8659059282377,
            "y": 123.32332736186459
          },
          "data": {
            "type": "OpenAIToolsAgent",
            "node": {
              "template": {
                "_type": "Component",
                "chat_history": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chat_history",
                  "value": "",
                  "display_name": "Chat History",
                  "advanced": true,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel",
                    "ToolEnabledLanguageModel"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "tools": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tools",
                  "value": "",
                  "display_name": "Tools",
                  "advanced": false,
                  "input_types": [
                    "Tool",
                    "BaseTool"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, List\n\nfrom langchain.agents import create_openai_tools_agent\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate\n\nfrom axiestudio.base.agents.agent import LCToolsAgentComponent\nfrom axiestudio.inputs import MultilineInput\nfrom axiestudio.inputs.inputs import HandleInput, DataInput\nfrom axiestudio.schema import Data\n\n\nclass OpenAIToolsAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"OpenAI Tools Agent\"\n    description: str = \"Agent that uses tools via openai-tools.\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"OpenAIToolsAgent\"\n\n    inputs = LCToolsAgentComponent._base_inputs + [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            input_types=[\"LanguageModel\", \"ToolEnabledLanguageModel\"],\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> Optional[List[Data]]:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_openai_tools_agent(self.llm, self.tools, prompt)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "handle_parsing_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "handle_parsing_errors",
                  "value": true,
                  "display_name": "Handle Parse Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "max_iterations": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_iterations",
                  "value": "15",
                  "display_name": "Max Iterations",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "system_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_prompt",
                  "value": "You are a helpful assistant. Your job is to understand user queries and then pass them to the financial_analyst tool.  Your prime objective is to assist users in getting these responses. You must ask more questions if the user intent is not clear. As soon as the intent becomes clear, execute the financial_analyst tool and give the desired response value. These are the 3 values that you need to pass:\n\ncalculation_type: An enum that decides what value to calculate from this tool.\n\nstart_date: start_date of the transactions. You must pass the start_date as a unix time stamp. Can be empty or None\nend_date: end_date of the transactions. You must pass the start_date as a unix time stamp. Can be empty or None.\n\n\nYou must display every output that you get from the tool. Even if it's an error or unexpected data. If it's a file path, you must display it as is.\n\nIf no start date or end date is given, don't ask the user to provide them, always assume the start date to be the lowest in the unix timestamp and always assume the end date to be the current timestamp.\n\nYou might face errors while calling the financial_analyst tool. You must retry 3 times and show the output of each retry. Once you have exhausted the retries, you can show the error message to the user. Each time you retry, ensure that if the error is readable and understandable by you, you make the appropriate changes. \n\nYou might be asked multiple questions in a single prompt too. The questions could include different calculation types in the same date range or the same calculation type in multiple date ranges. You are supposed to use the financial_analyst tool as many times as required to answer them. \n\n\nThere might be questions that do not pertain to the enums provided to you. For those questions, try to use the Python REPL tool.",
                  "display_name": "System Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System prompt for the agent.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "user_prompt": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "user_prompt",
                  "value": "Decode the user's intention from this prompt. Try to get start_date, end_date and the calculation_type to be passed ot the financial_analyst tool: {input}",
                  "display_name": "Prompt",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "This prompt must contain 'input' key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "verbose",
                  "value": true,
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Agent that uses tools via openai-tools.",
              "icon": "LangChain",
              "base_classes": [
                "AgentExecutor",
                "Message"
              ],
              "display_name": "OpenAI Tools Agent",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "AgentExecutor"
                  ],
                  "selected": "AgentExecutor",
                  "name": "agent",
                  "display_name": "Agent",
                  "method": "build_agent",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "response",
                  "display_name": "Response",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "handle_parsing_errors",
                "verbose",
                "max_iterations",
                "tools",
                "llm",
                "system_prompt",
                "user_prompt",
                "chat_history"
              ],
              "beta": true,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "OpenAIToolsAgent-7Bz4M"
          },
          "selected": false,
          "width": 384,
          "height": 643,
          "positionAbsolute": {
            "x": 2486.8659059282377,
            "y": 123.32332736186459
          },
          "dragging": false
        },
        {
          "id": "PythonCodeStructuredTool-Yp7FJ",
          "type": "genericNode",
          "position": {
            "x": 1845.7426561657521,
            "y": 114.78096569265256
          },
          "data": {
            "type": "PythonCodeStructuredTool",
            "node": {
              "template": {
                "_type": "Component",
                "_functions": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{\"execute_code\": {\"name\": \"execute_code\", \"args\": [{\"name\": \"calculation_type\", \"annotations\": [\"str\"]}, {\"name\": \"start_date\", \"annotations\": [\"int\"]}, {\"name\": \"end_date\", \"annotations\": [\"int\"]}]}}",
                  "name": "_functions",
                  "display_name": "Functions",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import ast\nimport json\nfrom typing import Any\n\nfrom langchain.agents import Tool\nfrom axiestudio.inputs.inputs import (\n    MultilineInput,\n    MessageTextInput,\n    BoolInput,\n    DropdownInput,\n    IntInput,\n    FloatInput,\n    HandleInput,\n    FieldTypes,\n)\nfrom langchain_core.tools import StructuredTool\nfrom axiestudio.io import Output\n\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.schema import Data\n\nfrom pydantic.v1 import Field, create_model\nfrom pydantic.v1.fields import Undefined\n\n\nclass PythonCodeStructuredTool(Component):\n    DEFAULT_KEYS = [\n        \"code\",\n        \"_type\",\n        \"text_key\",\n        \"tool_code\",\n        \"tool_name\",\n        \"tool_description\",\n        \"return_direct\",\n        \"tool_function\",\n        \"global_variables\",\n        \"_functions\",\n    ]\n    AVAILABLE_TYPES = {\n        \"str\": {\"annotation\": str, \"field\": MessageTextInput},\n        \"int\": {\"annotation\": int, \"field\": IntInput},\n        \"float\": {\"annotation\": float, \"field\": FloatInput},\n        \"bool\": {\"annotation\": bool, \"field\": BoolInput},\n        \"NoneType\": {\"annotation\": None},\n    }\n    display_name = \"Python Method Tool\"\n    description = \"Python method to tool\"\n    documentation = \"https://python.langchain.com/docs/modules/tools/custom_tools/#structuredtool-dataclass\"\n    name = \"PythonCodeStructuredTool\"\n    icon = \"🐍\"\n\n    inputs = [\n        MultilineInput(\n            name=\"tool_code\",\n            display_name=\"Tool Code\",\n            info=\"Enter the dataclass code.\",\n            placeholder=\"def my_function(args):\\n    pass\",\n            required=True,\n            real_time_refresh=True,\n            refresh_button=True,\n        ),\n        MessageTextInput(name=\"tool_name\", display_name=\"Tool Name\", info=\"Enter the name of the tool.\", required=True),\n        MessageTextInput(\n            name=\"tool_description\",\n            display_name=\"Description\",\n            info=\"Enter the description of the tool.\",\n            required=True,\n        ),\n        BoolInput(\n            name=\"return_direct\",\n            display_name=\"Return Directly\",\n            info=\"Should the tool return the function output directly?\",\n        ),\n        DropdownInput(\n            name=\"tool_function\",\n            display_name=\"Tool Function\",\n            info=\"Select the function for additional expressions.\",\n            options=[],\n            required=True,\n            real_time_refresh=True,\n            refresh_button=True,\n        ),\n        HandleInput(\n            name=\"global_variables\",\n            display_name=\"Global Variables\",\n            info=\"Enter the global variables or Create Data Component.\",\n            input_types=[\"Data\"],\n            field_type=FieldTypes.DICT,\n            is_list=True,\n        ),\n        MessageTextInput(name=\"_functions\", display_name=\"Functions\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Tool\", name=\"result_tool\", method=\"build_tool\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name is None:\n            return build_config\n\n        if field_name != \"tool_code\" and field_name != \"tool_function\":\n            return build_config\n\n        try:\n            named_functions = {}\n            functions = self._parse_functions(build_config[\"tool_code\"][\"value\"])\n            existing_fields = {}\n            if len(build_config) > len(self.DEFAULT_KEYS):\n                for key in build_config.copy():\n                    if key not in self.DEFAULT_KEYS:\n                        existing_fields[key] = build_config.pop(key)\n\n            names = []\n            for func in functions:\n                named_functions[func[\"name\"]] = func\n                names.append(func[\"name\"])\n\n                for arg in func[\"args\"]:\n                    field_name = f\"{func['name']}|{arg['name']}\"\n                    if field_name in existing_fields:\n                        build_config[field_name] = existing_fields[field_name]\n                        continue\n\n                    for annotation in arg[\"annotations\"]:\n                        if annotation not in self.AVAILABLE_TYPES:\n                            raise Exception(f\"Unsupported type: {func['name']}_{arg['name']} - {annotation}\")\n\n                    field = MessageTextInput(\n                        display_name=f\"{arg['name']}: Description\",\n                        name=field_name,\n                        info=f\"Enter the description for {arg['name']}\",\n                        required=True,\n                    )\n                    build_config[field_name] = field.to_dict()\n\n            build_config[\"_functions\"][\"value\"] = json.dumps(named_functions)\n            build_config[\"tool_function\"][\"options\"] = names\n        except Exception as e:\n            self.status = f\"Failed to extract names: {str(e)}\"\n            build_config[\"tool_function\"][\"options\"] = [\"Failed to parse\", str(e)]\n        return build_config\n\n    async def build_tool(self) -> Tool:\n        local_namespace = {}  # type: ignore\n        tool_code = f\"from langchain_core.pydantic_v1 import BaseModel, Field\\n{self.tool_code}\"\n        modules = self._find_imports(tool_code)\n        import_code = \"\"\n        for module in modules[\"imports\"]:\n            import_code += f\"global {module}\\nimport {module}\\n\"\n        for from_module in modules[\"from_imports\"]:\n            for alias in from_module.names:\n                import_code += f\"global {alias.name}\\n\"\n            import_code += (\n                f\"from {from_module.module} import {', '.join([alias.name for alias in from_module.names])}\\n\"\n            )\n        exec(import_code, globals())\n        exec(tool_code, globals(), local_namespace)\n\n        class PythonCodeToolFunc:\n            params: dict = {}\n\n            def run(**kwargs):\n                for key in kwargs:\n                    if key not in PythonCodeToolFunc.params:\n                        PythonCodeToolFunc.params[key] = kwargs[key]\n                return local_namespace[self.tool_function](**PythonCodeToolFunc.params)\n\n        _globals = globals()\n        _local = {}\n        _local[self.tool_function] = PythonCodeToolFunc\n        _globals.update(_local)\n\n        if isinstance(self.global_variables, list):\n            for data in self.global_variables:\n                if isinstance(data, Data):\n                    _globals.update(data.data)\n        elif isinstance(self.global_variables, dict):\n            _globals.update(self.global_variables)\n\n        named_functions = json.loads(self._attributes[\"_functions\"])\n        schema_fields = {}\n\n        for attr in self._attributes:\n            if attr in self.DEFAULT_KEYS:\n                continue\n\n            func_name = attr.split(\"|\")[0]\n            field_name = attr.split(\"|\")[1]\n            func_arg = self._find_arg(named_functions, func_name, field_name)\n            if func_arg is None:\n                raise Exception(f\"Failed to find arg: {field_name}\")\n\n            field_annotations = func_arg[\"annotations\"]\n\n            field_value = self._get_value(self._attributes[attr], str)\n            schema_annotations = str\n            is_annotated = False\n            for field_annotation in field_annotations:\n                if field_annotation not in self.AVAILABLE_TYPES:\n                    raise Exception(f\"Unsupported type: {field_name} - {field_annotation}\")\n                if not is_annotated:\n                    schema_annotations = self.AVAILABLE_TYPES[field_annotation][\"annotation\"]\n                    is_annotated = True\n                else:\n                    schema_annotations |= self.AVAILABLE_TYPES[field_annotation][\"annotation\"]\n            schema_fields[field_name] = (\n                schema_annotations,\n                Field(default=func_arg[\"default\"] if \"default\" in func_arg else Undefined, description=field_value),\n            )\n\n        PythonCodeToolSchema = None\n        if schema_fields:\n            PythonCodeToolSchema = create_model(\"PythonCodeToolSchema\", **schema_fields)  # type: ignore\n\n        tool = StructuredTool.from_function(\n            func=_local[self.tool_function].run,\n            args_schema=PythonCodeToolSchema,\n            name=self.tool_name,\n            description=self.tool_description,\n            return_direct=self.return_direct,\n        )\n        return tool  # type: ignore\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"tool_code\"][\"value\"], \"tool_code\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        for key in frontend_node[\"template\"]:\n            if key in self.DEFAULT_KEYS:\n                continue\n            frontend_node[\"template\"] = self.update_build_config(\n                frontend_node[\"template\"], frontend_node[\"template\"][key][\"value\"], key\n            )\n            frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n\n    def _parse_functions(self, code: str) -> list:\n        parsed_code = ast.parse(code)\n        functions = []\n        for node in parsed_code.body:\n            if not isinstance(node, ast.FunctionDef):\n                continue\n            func = {\"name\": node.name, \"args\": []}\n            for arg in node.args.args:\n                func_arg = {\"name\": arg.arg, \"annotations\": None}\n\n                for default in node.args.defaults:\n                    if (\n                        arg.lineno > default.lineno\n                        or arg.col_offset > default.col_offset\n                        or arg.end_lineno < default.end_lineno\n                        or arg.end_col_offset < default.end_col_offset\n                    ):\n                        continue\n\n                    if isinstance(default, ast.Name):\n                        func_arg[\"default\"] = default.id\n                    elif isinstance(default, ast.Constant):\n                        func_arg[\"default\"] = default.value\n\n                if arg.annotation:\n                    func_arg[\"annotations\"] = self._traverse_annotation(arg.annotation)\n\n                func[\"args\"].append(func_arg)\n            functions.append(func)\n\n        return functions\n\n    def _traverse_annotation(self, annotation: Any) -> list:\n        annotation_list = []\n        if isinstance(annotation, ast.BinOp):\n            if not isinstance(annotation.op, ast.BitOr):\n                raise Exception(f\"Unsupported operator: {annotation.op}\")\n            annotation_list.extend(self._traverse_annotation(annotation.left))\n            annotation_list.extend(self._traverse_annotation(annotation.right))\n        elif isinstance(annotation, ast.Name):\n            annotation_list.append(annotation.id)\n        elif isinstance(annotation, ast.Constant):\n            if annotation.value is None:\n                annotation_list.append(\"NoneType\")\n            else:\n                annotation_list.append(annotation.kind)\n        return annotation_list\n\n    def _find_imports(self, code: str) -> dotdict:\n        imports = []\n        from_imports = []\n        parsed_code = ast.parse(code)\n        for node in parsed_code.body:\n            if isinstance(node, ast.Import):\n                for alias in node.names:\n                    imports.append(alias.name)\n            elif isinstance(node, ast.ImportFrom):\n                from_imports.append(node)\n        return {\"imports\": imports, \"from_imports\": from_imports}\n\n    def _get_value(self, value: Any, annotation: Any) -> Any:\n        return value if isinstance(value, annotation) else value[\"value\"]\n\n    def _find_arg(self, named_functions: dict, func_name: str, arg_name: str) -> dict | None:\n        for arg in named_functions[func_name][\"args\"]:\n            if arg[\"name\"] == arg_name:\n                return arg\n        return None\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "global_variables": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "global_variables",
                  "display_name": "Global Variables",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Enter the global variables or Create Data Component.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "HandleInput"
                },
                "return_direct": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "return_direct",
                  "display_name": "Return Directly",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Should the tool return the function output directly?",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tool_code": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "def my_function(args):\n    pass",
                  "show": true,
                  "value": "def execute_code(calculation_type: str, start_date: int, end_date: int) -> str:\n    import json\n    from enum import Enum\n    try:\n        print(\"Calculating:\", calculation_type)\n    # Define the CalculationType Enum within the function\n        class CalculationType(Enum):\n            VAT_AMOUNT = 'Vat Amount'\n            MATERIALS_DIRECT_WITH_VAT = 'Materials Direct with VAT'\n            MATERIALS_DIRECT = 'Materials Direct'\n            MATERIALS_INDIRECT_WITH_VAT = 'Materials Indirect with VAT'\n            MATERIALS_INDIRECT = 'Materials Indirect'\n            TYPE_OF_PRODUCTS = 'Type of Products'\n            TYPE_OF_DIRECT_MATERIALS = 'Type of Direct Materials'\n            TYPE_OF_INDIRECT_MATERIALS = 'Type of Indirect Materials'\n            TYPE_OF_MATERIALS = 'Type of Materials'\n            VAT = 'VAT'\n            VAT_RECEIVABLE = 'VAT Receivable'\n            VAT_PAYABLE = 'VAT Payable'\n            NET_VAT_PAYABLE = 'Net VAT Payable'\n            NET_VAT_RECEIVABLE = 'Net VAT Receivable'\n            AMOUNT_EXCLUDING_VAT = 'Amount Excluding VAT'\n            REVENUE_WITH_VAT = 'Revenue with VAT'\n            REVENUE = 'Revenue'\n            CREDIT_REVENUE_WITH_VAT = 'Credit Revenue with VAT'\n            CREDIT_REVENUE = 'Credit Revenue'\n            MATERIALS_DIRECT_AND_INDIRECT = 'Materials Direct & Indirect'\n            DIRECT_LABOR = 'Direct Labor'\n            FACTORY_RENT_WITH_VAT = 'Factory Rent with VAT'\n            FACTORY_RENT = 'Factory Rent'\n            UTILITIES_DIRECT_WITH_VAT = 'Utilities Direct with VAT'\n            UTILITIES_DIRECT = 'Utilities Direct'\n            DEPRECIATION_DIRECT = 'Depreciation Direct'\n            MANUFACTURING_OVERHEAD = 'Manufacturing Overhead'\n            COGS = 'COGS'\n            GROSS_PROFIT = 'Gross Profit'\n            GROSS_MARGIN_PERCENT = 'Gross Margin (%)'\n            NET_MARGIN = 'Net Margin'\n            SELLING_EXPENSES = 'Selling Expenses'\n            RENT_GENERAL = 'Rent General'\n            UTILITIES_GENERAL = 'Utilities General'\n            DEPRECIATION_GENERAL = 'Depreciation General'\n            GENERAL_EXPENSES = 'General Expenses'\n            SALARIES_AND_WAGES = 'Salaries and Wages'\n            ADMINISTRATIVE_EXPENSES = 'Administrative Expenses'\n            SG_A = 'SG&A'\n            APBP = 'APBP'\n            APEP = 'APEP'\n            AVERAGE_ACCOUNTS_PAYABLE = 'Average Accounts Payable'\n            DAYS_PAYABLE_OUTSTANDING = 'Days Payable Outstanding (DPO)'\n            PAYABLES_TURNOVER_RATIO = 'Payables Turnover Ratio'\n            ARBP = 'ARBP'\n            AREP = 'AREP'\n            AVERAGE_ACCOUNTS_RECEIVABLE = 'Average Accounts Receivable'\n            DAYS_SALES_OUTSTANDING = 'Days Sales Outstanding (DSO)'\n            CASH_CONVERSION_CYCLE = 'Cash Conversion Cycle (CCC)'\n\n        def get_unique_direct_materials_according_to_knowledgebase(filtered_transactions):\n            \"\"\"\n            Extracts unique 'Direct Materials' from 'Buy' transactions based on the knowledgebase logic.\n\n            Parameters:\n            - filtered_transactions: List of filtered transaction dictionaries.\n\n            Returns:\n            - A comma-separated string of unique 'Direct Materials'.\n            \"\"\"\n            direct_materials = set()\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a GL Entry for direct materials\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Inventory - Materials - Direct':\n                            # If the GL Entry matches, add the Type of Material to the set\n                            material_type = management_data.get('Type Of Material', '')\n                            if material_type:\n                                direct_materials.add(material_type)\n\n            # Join the set of unique direct materials into a comma-separated string\n            return direct_materials\n        def get_unique_indirect_materials_according_to_knowledgebase(filtered_transactions):\n            \"\"\"\n            Extracts unique 'Indirect Materials' from 'Buy' transactions based on the knowledgebase logic.\n\n            Parameters:\n            - filtered_transactions: List of filtered transaction dictionaries.\n\n            Returns:\n            - A comma-separated string of unique 'Indirect Materials'.\n            \"\"\"\n            indirect_materials = set()\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a GL Entry for indirect materials\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Inventory - Materials - Indirect':\n                            # If the GL Entry matches, add the Type of Material to the set\n                            material_type = management_data.get('Type Of Material', '')\n                            if material_type:\n                                indirect_materials.add(material_type)\n\n            # Join the set of unique indirect materials into a comma-separated string\n            return indirect_materials\n        # Load JSON data\n        json_path = str(globals().get('text1').file_path)\n        with open(json_path, 'r') as file:\n            data = json.load(file)\n        \n        # Filter transactions by UNIX timestamp date range\n        filtered_transactions = [\n            transaction for transaction in data\n            if 'Management Data' in transaction and any(\n                isinstance(transaction['Management Data'].get(date_key), int) and  # Check if the date is an integer\n                start_date <= transaction['Management Data'].get(date_key) <= end_date\n                for date_key in transaction['Management Data']\n                if 'Date' in date_key\n            )\n        ]\n\n        # Ensure case insensitive comparison for calculation type\n        calculation_type = calculation_type.lower()\n        \n        # Calculation logic for each type\n        if calculation_type == CalculationType.VAT_AMOUNT.value.lower():\n            return sum(\n                float(transaction['Management Data']['Vat Amount'])\n                for transaction in filtered_transactions\n                if 'Vat Amount' in transaction['Management Data']\n            )\n        elif calculation_type == CalculationType.MATERIALS_DIRECT_WITH_VAT.value.lower():\n            total_amount_with_vat = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Direct'\n                    direct_materials_list = get_unique_direct_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in direct_materials_list:\n                        # Calculate the amount including VAT\n                        total_amount_with_vat += float(amount_including_vat)\n\n            return total_amount_with_vat\n        elif calculation_type == CalculationType.MATERIALS_DIRECT.value.lower():\n            total_amount_excluding_vat = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Direct'\n                    direct_materials_list = get_unique_direct_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in direct_materials_list:\n                        # Calculate the amount excluding VAT\n                        amount_excluding_vat = float(amount_including_vat) - float(vat_amount)\n                        total_amount_excluding_vat += amount_excluding_vat\n\n            return total_amount_excluding_vat\n        elif calculation_type == CalculationType.MATERIALS_INDIRECT_WITH_VAT.value.lower():\n            total_amount_with_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Indirect'\n                    indirect_materials_list = get_unique_indirect_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in indirect_materials_list:\n                        # Calculate the amount including VAT\n                        total_amount_with_vat += float(amount_including_vat)\n\n            return total_amount_with_vat\n        elif calculation_type == CalculationType.MATERIALS_INDIRECT.value.lower():\n            total_amount_excluding_vat = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    vat_amount = management_data.get('Vat Amount', '0').replace(',', '')\n                    amount_including_vat = management_data.get('Amount Including Vat', '0').replace(',', '')\n                    # Check if the transaction is related to 'Materials Indirect'\n                    indirect_materials_list = get_unique_indirect_materials_according_to_knowledgebase(filtered_transactions)\n                    if 'Type Of Material' in management_data and management_data['Type Of Material'] in indirect_materials_list:\n                        # Calculate the amount excluding VAT\n                        amount_excluding_vat = float(amount_including_vat) - float(vat_amount)\n                        total_amount_excluding_vat += amount_excluding_vat\n\n            return total_amount_excluding_vat\n\n        elif calculation_type == CalculationType.TYPE_OF_PRODUCTS.value.lower():\n            types_of_products = set()\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a Finished Good Type\n                    product_type = management_data.get('Finished Good Type', '')\n                    if product_type:\n                        types_of_products.add(product_type)\n\n            # Join the set of unique types of products into a comma-separated string\n            return ', '.join(types_of_products)\n        elif calculation_type == CalculationType.TYPE_OF_DIRECT_MATERIALS.value.lower():\n            return ','.join(get_unique_direct_materials_according_to_knowledgebase(filtered_transactions))\n        elif calculation_type == CalculationType.TYPE_OF_INDIRECT_MATERIALS.value.lower():\n            return set(\n                transaction['Management Data']['Type Of Material']\n                for transaction in filtered_transactions\n                if transaction['Management Data'].get('Type Of Material') == 'Coal'\n            )\n        elif calculation_type == CalculationType.TYPE_OF_MATERIALS.value.lower():\n            types_of_materials = set()\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a 'Type Of Material'\n                    material_type = management_data.get('Type Of Material', '')\n                    if material_type:\n                        types_of_materials.add(material_type)\n\n            # Join the set of unique types of materials into a comma-separated string\n            return ', '.join(types_of_materials)\n        elif calculation_type == CalculationType.VAT.value.lower():\n            total_vat_input = 0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Check if the GL Entry has the Credit Name 'A/P - VAT - Output Tax'\n                    if entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        # Sum the amount for entries with this credit name\n                        total_vat_input += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_vat_input\n        elif calculation_type == CalculationType.VAT_RECEIVABLE.value.lower():\n            total_vat_receivable = 0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Check if the GL Entry has the Debit Name 'A/R - VAT - Input Tax'\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        # Sum the amount for entries with this debit name\n                        total_vat_receivable += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_vat_receivable\n        elif calculation_type == CalculationType.VAT_PAYABLE.value.lower():\n            total_vat_payable = 0\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Check if the GL Entry has the Credit Name 'A/P - VAT - Output Tax'\n                    if entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        # Sum the amount for entries with this credit name\n                        total_vat_payable += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_vat_payable\n        elif calculation_type == CalculationType.NET_VAT_PAYABLE.value.lower():\n            vat_receivable = 0\n            vat_payable = 0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Calculate VAT Receivable from entries with Debit Name 'A/R - VAT - Input Tax'\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        vat_receivable += float(entry.get('Amount', '0').replace(',', ''))\n                    # Calculate VAT Payable from entries with Credit Name 'A/P - VAT - Output Tax'\n                    elif entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        vat_payable += float(entry.get('Amount', '0').replace(',', ''))\n\n            # Calculate net VAT payable\n            net_vat_payable = vat_payable - vat_receivable\n            return net_vat_payable\n        elif calculation_type == CalculationType.NET_VAT_RECEIVABLE.value.lower():\n            vat_receivable = 0\n            vat_payable = 0\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                for entry in gl_entries:\n                    # Calculate VAT Receivable from entries with Debit Name 'A/R - VAT - Input Tax'\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        vat_receivable += float(entry.get('Amount', '0').replace(',', ''))\n                    # Calculate VAT Payable from entries with Credit Name 'A/P - VAT - Output Tax'\n                    elif entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                        vat_payable += float(entry.get('Amount', '0').replace(',', ''))\n\n            # Calculate net VAT receivable\n            net_vat_receivable = vat_receivable - vat_payable\n            return net_vat_receivable\n        elif calculation_type == CalculationType.AMOUNT_EXCLUDING_VAT.value.lower():\n            total_amount_excluding_vat = 0\n            for transaction in filtered_transactions:\n                management_data = transaction.get('Management Data', {})\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Check if the transaction has VAT and Amount Including VAT in Management Data\n                vat_amount = float(management_data.get('Vat Amount', '0').replace(',', ''))\n                amount_including_vat = float(management_data.get('Amount Including Vat', '0').replace(',', ''))\n                \n                if vat_amount > 0 and amount_including_vat > 0:\n                    # Calculate amount excluding VAT\n                    amount_excluding_vat = amount_including_vat - vat_amount\n                    total_amount_excluding_vat += amount_excluding_vat\n                else:\n                    # If not in Management Data, check GL Entries\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'A/R - VAT - Input Tax' or entry.get('Credit Name') == 'A/P - VAT - Output Tax':\n                            # Extract the amount including VAT from the relevant GL entry\n                            amount_including_vat_gl = float(entry.get('Amount', '0').replace(',', ''))\n                            if amount_including_vat_gl > 0:\n                                # Calculate amount excluding VAT from GL entry\n                                amount_excluding_vat_gl = amount_including_vat_gl - vat_amount\n                                total_amount_excluding_vat += amount_excluding_vat_gl\n\n            return total_amount_excluding_vat\n        elif calculation_type == CalculationType.REVENUE_WITH_VAT.value.lower():\n            total_revenue_with_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    management_data = transaction.get('Management Data', {})\n                    # Check if there is a GL Entry for 'Sales - Finished Goods'\n                    amount_including_vat = float(management_data.get('Amount Including Vat', '0').replace(',', ''))\n                    if amount_including_vat > 0:\n                        total_revenue_with_vat += amount_including_vat\n\n            return total_revenue_with_vat\n        elif calculation_type == CalculationType.REVENUE.value.lower():\n            total_revenue_excluding_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    management_data = transaction.get('Management Data', {})\n                    \n                    # Calculate amount excluding VAT\n                    vat_amount = float(management_data.get('Vat Amount', '0').replace(',', ''))\n                    amount_including_vat = float(management_data.get('Amount Including Vat', '0').replace(',', ''))\n                    \n                    if amount_including_vat > 0:\n                        amount_excluding_vat = amount_including_vat - vat_amount\n                        total_revenue_excluding_vat += amount_excluding_vat\n\n            return total_revenue_excluding_vat\n        elif calculation_type == CalculationType.CREDIT_REVENUE_WITH_VAT.value.lower():\n            total_credit_revenue_with_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    \n                    has_sales_finished_goods = any(entry.get('Credit Name') == 'Sales - Finished Goods' for entry in gl_entries)\n                    has_trade_receivable = any(entry.get('Debit Name') == 'A/R - Trade Receivable' for entry in gl_entries)\n                    \n                    if has_sales_finished_goods and has_trade_receivable:\n                        for entry in gl_entries:\n                            # Sum the amount for entries with the Credit Name 'Sales - Finished Goods'\n                            if entry.get('Credit Name') == 'Sales - Finished Goods':\n                                total_credit_revenue_with_vat += float(entry.get('Amount', '0').replace(',', ''))\n\n            return total_credit_revenue_with_vat\n        elif calculation_type == CalculationType.CREDIT_REVENUE.value.lower():\n            total_credit_revenue_without_vat = 0\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Sell\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    \n                    has_sales_finished_goods = any(entry.get('Credit Name') == 'Sales - Finished Goods' for entry in gl_entries)\n                    has_trade_receivable = any(entry.get('Debit Name') == 'A/R - Trade Receivable' for entry in gl_entries)\n                    \n                    if has_sales_finished_goods and has_trade_receivable:\n                        for entry in gl_entries:\n                            # Sum the amount for entries with the Credit Name 'Sales - Finished Goods' excluding VAT\n                            if entry.get('Credit Name') == 'Sales - Finished Goods':\n                                management_data = transaction.get('Management Data', {})\n                                vat_amount = float(management_data.get('Vat Amount', '0').replace(',', ''))\n                                amount_including_vat = float(entry.get('Amount', '0').replace(',', ''))\n                                amount_excluding_vat = amount_including_vat - vat_amount\n                                total_credit_revenue_without_vat += amount_excluding_vat\n\n            return total_credit_revenue_without_vat\n        elif calculation_type == CalculationType.MATERIALS_DIRECT_AND_INDIRECT.value.lower():\n            total_materials_direct = 0\n            total_materials_indirect = 0\n\n            for transaction in filtered_transactions:\n                if transaction['type'] == \"Buy\":\n                    gl_entries = transaction.get('GL Entries', [])\n                    for entry in gl_entries:\n                        # Sum the amounts for 'Materials Direct' transactions\n                        if entry.get('Debit Name') == 'Inventory - Materials - Direct':\n                            total_materials_direct += float(entry.get('Amount', '0').replace(',', ''))\n                        # Sum the amounts for 'Materials Indirect' transactions\n                        elif entry.get('Debit Name') == 'Inventory - Materials - Indirect':\n                            total_materials_indirect += float(entry.get('Amount', '0').replace(',', ''))\n\n            # Calculate total for both direct and indirect materials\n            total_materials_direct_and_indirect = total_materials_direct + total_materials_indirect\n\n            return total_materials_direct_and_indirect\n        elif calculation_type == CalculationType.UTILITIES_DIRECT_WITH_VAT.value.lower():\n            return sum(\n                float(transaction['Management Data']['Amount Including Vat'])\n                for transaction in filtered_transactions\n                if transaction['Management Data'].get('Type Of Utility') == 'Electricity - Direct' and 'Vat Amount' in transaction['Management Data']\n            )\n        elif calculation_type == CalculationType.DIRECT_LABOR.value.lower():\n            total_direct_labor = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                tax_entry_present = any(entry.get('Credit Name') == 'Tax Payable - TDS - Salaries, Wages & Fees - Direct' for entry in gl_entries)\n                \n                if tax_entry_present:\n                    amount_before_tax = float(transaction['Management Data'].get('Amount Before Tax Deducted At Source By You', 0).replace(',', ''))\n                    total_direct_labor += amount_before_tax\n                else:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Direct Labor':\n                            amount = float(entry.get('Amount', 0).replace(',', ''))\n                            total_direct_labor += amount\n\n            return total_direct_labor\n        elif calculation_type == CalculationType.FACTORY_RENT_WITH_VAT.value.lower():\n            total_factory_rent_with_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Check for Rent - Direct in GL Entries\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Rent - Direct':\n                        amount = float(entry.get('Amount', 0).replace(',', ''))\n                        total_factory_rent_with_vat += amount\n\n            return total_factory_rent_with_vat\n        elif calculation_type == CalculationType.FACTORY_RENT.value.lower():\n            total_factory_rent_with_vat = 0.0\n            total_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                rent_direct_present = any(entry.get('Debit Name') == 'Rent - Direct' for entry in gl_entries)\n\n                if rent_direct_present:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Rent - Direct':\n                            amount = float(entry.get('Amount', 0).replace(',', ''))\n                            total_factory_rent_with_vat += amount  # No VAT deduction here\n                        elif entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                            total_vat += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_factory_rent_with_vat - total_vat\n        elif calculation_type == CalculationType.UTILITIES_DIRECT_WITH_VAT.value.lower():\n            total_utilities_direct = 0.0\n            total_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                utilities_direct_present = any(entry.get('Debit Name') == 'Utilities - Direct - Goods' for entry in gl_entries)\n\n                if utilities_direct_present:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                            total_utilities_direct += float(entry.get('Amount', 0).replace(',', ''))\n                        elif entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                            total_vat += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_utilities_direct\n        elif calculation_type == CalculationType.UTILITIES_DIRECT.value.lower():\n            total_utilities_direct = 0.0\n            total_vat = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                utilities_direct_present = any(entry.get('Debit Name') == 'Utilities - Direct - Goods' for entry in gl_entries)\n\n                if utilities_direct_present:\n                    for entry in gl_entries:\n                        if entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                            total_utilities_direct += float(entry.get('Amount', 0).replace(',', ''))\n                        elif entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                            total_vat += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_utilities_direct - total_vat\n        elif calculation_type == CalculationType.DEPRECIATION_DIRECT.value.lower():\n            total_depreciation_direct = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Depreciation Expense - Direct':\n                        total_depreciation_direct += float(entry.get('Amount', 0).replace(',', ''))\n\n            return total_depreciation_direct\n        elif calculation_type == CalculationType.MANUFACTURING_OVERHEAD.value.lower():\n            total_utilities_direct = 0.0\n            total_depreciation_direct = 0.0\n            total_factory_rent = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Initialize VAT amounts for this transaction\n                vat_amount_utilities = 0.0\n                vat_amount_factory_rent = 0.0\n                \n                # Check for VAT amounts related to Utilities Direct\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                        vat_amount_utilities += float(entry.get('Amount', 0).replace(',', ''))\n\n                # Calculate totals for each category\n                for entry in gl_entries:\n                    # Calculate Utilities Direct\n                    if entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                        amount = float(entry.get('Amount', 0).replace(',', ''))\n                        total_utilities_direct += (amount - vat_amount_utilities)  # Subtract VAT here\n\n                    # Calculate Depreciation Direct\n                    if entry.get('Debit Name') == 'Depreciation Expense - Direct':\n                        total_depreciation_direct += float(entry.get('Amount', 0).replace(',', ''))\n\n                    # Calculate Factory Rent\n                    if entry.get('Debit Name') == 'Rent - Direct':\n                        amount = float(entry.get('Amount', 0).replace(',', ''))\n                        total_factory_rent += amount  # Add Factory Rent amount\n\n                # Calculate VAT for Factory Rent based on Management Data\n                vat_amount_factory_rent += float(transaction['Management Data'].get('VAT Amount', '0').replace(',', ''))\n\n            # Total Manufacturing Overhead without VAT\n            total_manufacturing_overhead = (total_utilities_direct + \n                                            total_depreciation_direct + \n                                            (total_factory_rent - vat_amount_factory_rent))  # Subtract VAT for Factory Rent\n\n            return total_manufacturing_overhead\n        elif calculation_type == CalculationType.COGS.value.lower():\n            total_materials_direct = 0.0\n            total_materials_indirect = 0.0\n            total_direct_labor = 0.0\n            total_manufacturing_overhead = 0.0\n\n            for transaction in filtered_transactions:\n                gl_entries = transaction.get('GL Entries', [])\n                \n                # Calculate Materials Direct and Indirect\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Inventory - Materials - Direct':\n                        total_materials_direct += float(entry.get('Amount', 0).replace(',', ''))\n                    elif entry.get('Debit Name') == 'Inventory - Materials - Indirect':\n                        total_materials_indirect += float(entry.get('Amount', 0).replace(',', ''))\n                    elif entry.get('Debit Name') == 'Utilities - Direct - Goods':\n                        vat_amount_utilities = 0.0\n                        for sub_entry in gl_entries:\n                            if sub_entry.get('Debit Name') == 'A/R - VAT - Input Tax':\n                                vat_amount_utilities += float(sub_entry.get('Amount', 0).replace(',', ''))\n                        total_direct_labor += (float(entry.get('Amount', 0).replace(',', '')) - vat_amount_utilities)\n                    elif entry.get('Debit Name') == 'Depreciation Expense - Direct':\n                        total_direct_labor += float(entry.get('Amount', 0).replace(',', ''))\n                    elif entry.get('Debit Name') == 'Rent - Direct':\n                        total_manufacturing_overhead += float(entry.get('Amount', 0).replace(',', ''))\n\n                # Calculate Manufacturing Overhead\n                for entry in gl_entries:\n                    if entry.get('Debit Name') == 'Manufacturing Overhead':\n                        total_manufacturing_overhead += float(entry.get('Amount', 0).replace(',', ''))\n\n            # Calculate COGS using only non-zero fields\n            cogs_total = 0.0\n            if total_materials_direct > 0:\n                cogs_total += total_materials_direct\n            if total_materials_indirect > 0:\n                cogs_total += total_materials_indirect\n            if total_direct_labor > 0:\n                cogs_total += total_direct_labor\n            if total_manufacturing_overhead > 0:\n                cogs_total += total_manufacturing_overhead\n            return cogs_total\n\n        else:\n            return \"Invalid calculation type or not implemented yet.\"\n    except Exception as e:\n        return str(e)",
                  "name": "tool_code",
                  "display_name": "Tool Code",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the dataclass code.",
                  "real_time_refresh": true,
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "tool_description": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "A financial analyst that can be used to calculate user queries.",
                  "name": "tool_description",
                  "display_name": "Description",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the description of the tool.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "tool_function": {
                  "combobox": false,
                  "trace_as_metadata": true,
                  "options": [
                    "execute_code"
                  ],
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "execute_code",
                  "name": "tool_function",
                  "display_name": "Tool Function",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Select the function for additional expressions.",
                  "real_time_refresh": true,
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "tool_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "financial_analyst",
                  "name": "tool_name",
                  "display_name": "Tool Name",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the name of the tool.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "execute_code|calculation_type": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "execute_code|calculation_type",
                  "value": "calculation_type_description",
                  "display_name": "calculation_type: Description",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the description for calculation_type",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "execute_code|start_date": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "execute_code|start_date",
                  "value": "start_date of the transactions. To be given as an enum timestamp.",
                  "display_name": "start_date: Description",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the description for start_date",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "execute_code|end_date": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "execute_code|end_date",
                  "value": "end_date of the transactions. To be given as an enum timestamp.",
                  "display_name": "end_date: Description",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the description for end_date",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Python method to tool",
              "icon": "🐍",
              "base_classes": [
                "Tool"
              ],
              "display_name": "Python Method Tool",
              "documentation": "https://python.langchain.com/docs/modules/tools/custom_tools/#structuredtool-dataclass",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "result_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "tool_code",
                "tool_name",
                "tool_description",
                "return_direct",
                "tool_function",
                "global_variables",
                "_functions"
              ],
              "beta": false,
              "edited": true,
              "official": false,
              "lf_version": "1.0.15"
            },
            "id": "PythonCodeStructuredTool-Yp7FJ"
          },
          "selected": false,
          "width": 384,
          "height": 1004,
          "positionAbsolute": {
            "x": 1845.7426561657521,
            "y": 114.78096569265256
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-zIPks",
          "type": "genericNode",
          "position": {
            "x": 2035.0614373313633,
            "y": -738.3834281681072
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\nfrom functools import reduce\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "json_mode",
                  "value": false,
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o-mini",
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-4",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gpt-4o-mini",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "output_schema",
                  "value": {},
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "seed",
                  "value": 1,
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "openai_api_base",
                "api_key",
                "temperature",
                "seed"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "OpenAIModel-zIPks"
          },
          "selected": false,
          "width": 384,
          "height": 593,
          "positionAbsolute": {
            "x": 2035.0614373313633,
            "y": -738.3834281681072
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-70Msz",
          "type": "genericNode",
          "position": {
            "x": 3079.3551957335753,
            "y": 319.1603101421918
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_template",
                  "value": "{text}",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "AI",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "ChatOutput-70Msz"
          },
          "selected": false,
          "width": 384,
          "height": 294,
          "positionAbsolute": {
            "x": 3079.3551957335753,
            "y": 319.1603101421918
          },
          "dragging": false
        },
        {
          "id": "ChatInput-qA7Fg",
          "type": "genericNode",
          "position": {
            "x": 1397.95918916717,
            "y": -160.67596210444486
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "files",
                  "value": "",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "Calculate Revenue and COGS for the year 2023",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "User",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "User",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.15"
            },
            "id": "ChatInput-qA7Fg"
          },
          "selected": false,
          "width": 384,
          "height": 294,
          "positionAbsolute": {
            "x": 1397.95918916717,
            "y": -160.67596210444486
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "File-6vRpl",
          "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-6vRplœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "FilterData-s9gWT",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œFilterData-s9gWTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "FilterData-s9gWT",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "File",
              "id": "File-6vRpl",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-File-6vRpl{œdataTypeœ:œFileœ,œidœ:œFile-6vRplœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FilterData-s9gWT{œfieldNameœ:œdataœ,œidœ:œFilterData-s9gWTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "File-2jEo8",
          "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-2jEo8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "FilterData-AJrIR",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œFilterData-AJrIRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "FilterData-AJrIR",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "File",
              "id": "File-2jEo8",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-File-2jEo8{œdataTypeœ:œFileœ,œidœ:œFile-2jEo8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FilterData-AJrIR{œfieldNameœ:œdataœ,œidœ:œFilterData-AJrIRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "FilterData-s9gWT",
          "sourceHandle": "{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-s9gWTœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
          "target": "CreateList-yBLdC",
          "targetHandle": "{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "texts",
              "id": "CreateList-yBLdC",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "FilterData",
              "id": "FilterData-s9gWT",
              "name": "filtered_data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-FilterData-s9gWT{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-s9gWTœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-CreateList-yBLdC{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "FilterData-AJrIR",
          "sourceHandle": "{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-AJrIRœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
          "target": "CreateList-yBLdC",
          "targetHandle": "{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "texts",
              "id": "CreateList-yBLdC",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "FilterData",
              "id": "FilterData-AJrIR",
              "name": "filtered_data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-FilterData-AJrIR{œdataTypeœ:œFilterDataœ,œidœ:œFilterData-AJrIRœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-CreateList-yBLdC{œfieldNameœ:œtextsœ,œidœ:œCreateList-yBLdCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "CreateList-yBLdC",
          "sourceHandle": "{œdataTypeœ:œCreateListœ,œidœ:œCreateList-yBLdCœ,œnameœ:œlistœ,œoutput_typesœ:[œDataœ]}",
          "target": "PythonCodeStructuredTool-Yp7FJ",
          "targetHandle": "{œfieldNameœ:œglobal_variablesœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œinputTypesœ:[œDataœ],œtypeœ:œdictœ}",
          "data": {
            "targetHandle": {
              "fieldName": "global_variables",
              "id": "PythonCodeStructuredTool-Yp7FJ",
              "inputTypes": [
                "Data"
              ],
              "type": "dict"
            },
            "sourceHandle": {
              "dataType": "CreateList",
              "id": "CreateList-yBLdC",
              "name": "list",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-CreateList-yBLdC{œdataTypeœ:œCreateListœ,œidœ:œCreateList-yBLdCœ,œnameœ:œlistœ,œoutput_typesœ:[œDataœ]}-PythonCodeStructuredTool-Yp7FJ{œfieldNameœ:œglobal_variablesœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œinputTypesœ:[œDataœ],œtypeœ:œdictœ}",
          "className": ""
        },
        {
          "source": "PythonCodeStructuredTool-Yp7FJ",
          "sourceHandle": "{œdataTypeœ:œPythonCodeStructuredToolœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œnameœ:œresult_toolœ,œoutput_typesœ:[œToolœ]}",
          "target": "OpenAIToolsAgent-7Bz4M",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "OpenAIToolsAgent-7Bz4M",
              "inputTypes": [
                "Tool",
                "BaseTool"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "PythonCodeStructuredTool",
              "id": "PythonCodeStructuredTool-Yp7FJ",
              "name": "result_tool",
              "output_types": [
                "Tool"
              ]
            }
          },
          "id": "reactflow__edge-PythonCodeStructuredTool-Yp7FJ{œdataTypeœ:œPythonCodeStructuredToolœ,œidœ:œPythonCodeStructuredTool-Yp7FJœ,œnameœ:œresult_toolœ,œoutput_typesœ:[œToolœ]}-OpenAIToolsAgent-7Bz4M{œfieldNameœ:œtoolsœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-zIPks",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zIPksœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "OpenAIToolsAgent-7Bz4M",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œLanguageModelœ,œToolEnabledLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "OpenAIToolsAgent-7Bz4M",
              "inputTypes": [
                "LanguageModel",
                "ToolEnabledLanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-zIPks",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-zIPks{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zIPksœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-OpenAIToolsAgent-7Bz4M{œfieldNameœ:œllmœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œLanguageModelœ,œToolEnabledLanguageModelœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIToolsAgent-7Bz4M",
          "sourceHandle": "{œdataTypeœ:œOpenAIToolsAgentœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-70Msz",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-70Mszœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-70Msz",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "OpenAIToolsAgent",
              "id": "OpenAIToolsAgent-7Bz4M",
              "name": "response",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIToolsAgent-7Bz4M{œdataTypeœ:œOpenAIToolsAgentœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-70Msz{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-70Mszœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-qA7Fg",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qA7Fgœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "OpenAIToolsAgent-7Bz4M",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIToolsAgent-7Bz4M",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-qA7Fg",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-qA7Fg{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qA7Fgœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-OpenAIToolsAgent-7Bz4M{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIToolsAgent-7Bz4Mœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": -539.3494447789021,
        "y": 177.6633266613784,
        "zoom": 0.45720277206336457
      }
    },
    "date_created": "2024-09-05T18:54:43.719Z",
    "date_updated": "2024-09-05T18:54:43.896Z",
    "status": "Public",
    "sort": null,
    "user_updated": "c89c8686-e982-4f22-970f-9765eca6df63",
    "user_created": {
      "username": "pallavbh23",
      "first_name": "Pallav",
      "last_name": "Bhardwaj",
      "id": "c89c8686-e982-4f22-970f-9765eca6df63"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:02.174Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 90,
    "converter_version": "1.0.0"
  }
}