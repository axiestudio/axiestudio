{
  "id": "8f0ddd3e-730f-41ca-ae53-1a742ecb30e6",
  "name": "Blog bolsa de valores",
  "description": "o fluxo é alimentado com bases de noticias, só precisa você por o nome da empresa que ele irá buscar nos sites específicos listados  (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "0rakul0",
    "first_name": "jefferson",
    "last_name": "anjos",
    "id": "fb12ab4b-334f-4833-ad8a-0e37be1a5a5a",
    "full_name": "jefferson anjos"
  },
  "store_url": "https://www.langflow.store/store/component/8f0ddd3e-730f-41ca-ae53-1a742ecb30e6",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-29T16:26:27.489Z",
    "updated": "2024-07-29T16:27:37.989Z",
    "downloaded": "2025-08-19T17:50:06.147Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Chain",
        "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
      }
    },
    {
      "tags_id": {
        "name": "Prompt",
        "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.9",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Fetch content from one or more URLs.",
          "display_name": "URL",
          "id": "URL-RDDk8",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Fetch content from one or more URLs.",
            "display_name": "URL",
            "documentation": "",
            "edited": false,
            "field_order": [
              "urls"
            ],
            "frozen": false,
            "icon": "layout-template",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Data",
                "method": "fetch_content",
                "name": "data",
                "selected": "Data",
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs, separated by commas.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            raise ValueError(f\"Invalid URL: {string}\")\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n"
              },
              "urls": {
                "advanced": false,
                "display_name": "URLs",
                "dynamic": false,
                "info": "Enter one or more URLs, separated by commas.",
                "input_types": [
                  "Message"
                ],
                "list": true,
                "load_from_db": false,
                "name": "urls",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": [
                  "valorinveste.globo.com/mercados/renda-variavel/empresas/",
                  "www.brasil247.com/economia",
                  "www.suno.com.br/noticias/",
                  "https://einvestidor.estadao.com.br/ultimas/"
                ]
              }
            }
          },
          "type": "URL"
        },
        "dragging": false,
        "height": 457,
        "id": "URL-RDDk8",
        "position": {
          "x": 243.20246121447985,
          "y": 536.9824190374811
        },
        "positionAbsolute": {
          "x": 243.20246121447985,
          "y": 536.9824190374811
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Convert Data into plain text following a specified template.",
          "display_name": "Parse Data",
          "id": "ParseData-vkaA9",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "parse_data",
                "name": "text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"
              },
              "data": {
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "The data to convert to text.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              }
            }
          },
          "type": "ParseData"
        },
        "dragging": false,
        "height": 384,
        "id": "ParseData-vkaA9",
        "position": {
          "x": 755.6265223857876,
          "y": 557.3491786588943
        },
        "positionAbsolute": {
          "x": 755.6265223857876,
          "y": 557.3491786588943
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-fOYQO",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_build_config[\"template\"])\n        return frontend_node\n"
              },
              "instructions": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "instructions",
                "display_name": "instructions",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "references": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "references",
                "display_name": "references",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "Reference 1:\n\n{references}\n\nempresa a ser gerada a noticia \n\n{ticker}\n---\n\n{instructions}\n\nBlog: \n\ndata da noticia:\n"
              },
              "ticker": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "ticker",
                "display_name": "ticker",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "references",
                "ticker",
                "instructions"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 609,
        "id": "Prompt-fOYQO",
        "position": {
          "x": 1368.0633591447076,
          "y": 467.19448061224284
        },
        "positionAbsolute": {
          "x": 1368.0633591447076,
          "y": 467.19448061224284
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Get text inputs from the Playground.",
          "display_name": "Instructions",
          "id": "TextInput-WawaI",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get text inputs from the Playground.",
            "display_name": "Instructions",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Use as referências acima para escrever um novo blog estilo noticias / Noticias de ações"
              }
            }
          },
          "type": "TextInput"
        },
        "dragging": false,
        "height": 308,
        "id": "TextInput-WawaI",
        "position": {
          "x": 741.778191064498,
          "y": 180.33719012730944
        },
        "positionAbsolute": {
          "x": 741.778191064498,
          "y": 180.33719012730944
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "id": "OllamaModel-rJ4fH",
        "type": "genericNode",
        "position": {
          "x": 1906.0741618087632,
          "y": 309.9321653254984
        },
        "data": {
          "type": "OllamaModel",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://bsb_gpu2.ipea.gov.br:11434",
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": false,
                "type": "str"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\r\n\r\nimport httpx\r\nfrom langchain_community.chat_models import ChatOllama\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.field_typing import LanguageModel\r\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageInput, StrInput\r\n\r\n\r\nclass ChatOllamaComponent(LCModelComponent):\r\n    display_name = \"Ollama\"\r\n    description = \"Generate text using Ollama Local LLMs.\"\r\n    icon = \"Ollama\"\r\n    name = \"OllamaModel\"\r\n\r\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\r\n        if field_name == \"mirostat\":\r\n            if field_value == \"Disabled\":\r\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\r\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\r\n                build_config[\"mirostat_eta\"][\"value\"] = None\r\n                build_config[\"mirostat_tau\"][\"value\"] = None\r\n\r\n            else:\r\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\r\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\r\n\r\n                if field_value == \"Mirostat 2.0\":\r\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\r\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\r\n                else:\r\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\r\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\r\n\r\n        if field_name == \"model\":\r\n            base_url_dict = build_config.get(\"base_url\", {})\r\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\r\n            base_url_value = base_url_dict.get(\"value\")\r\n            if base_url_load_from_db:\r\n                base_url_value = self.variables(base_url_value)\r\n            elif not base_url_value:\r\n                base_url_value = \"http://localhost:11434\"\r\n            build_config[\"model\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\r\n\r\n        if field_name == \"keep_alive_flag\":\r\n            if field_value == \"Keep\":\r\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\r\n                build_config[\"keep_alive\"][\"advanced\"] = True\r\n            elif field_value == \"Immediately\":\r\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\r\n                build_config[\"keep_alive\"][\"advanced\"] = True\r\n            else:\r\n                build_config[\"keep_alive\"][\"advanced\"] = False\r\n\r\n        return build_config\r\n\r\n    def get_model(self, url: str) -> list[str]:\r\n        try:\r\n            with httpx.Client() as client:\r\n                response = client.get(url)\r\n                response.raise_for_status()\r\n                data = response.json()\r\n\r\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\r\n                return model_names\r\n        except Exception as e:\r\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"base_url\",\r\n            display_name=\"Base URL\",\r\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\r\n            value=\"http://localhost:11434\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"model\",\r\n            display_name=\"Model Name\",\r\n            value=\"llama2\",\r\n            info=\"Refer to https://ollama.ai/library for more models.\",\r\n            refresh_button=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"temperature\",\r\n            display_name=\"Temperature\",\r\n            value=0.2,\r\n            info=\"Controls the creativity of model responses.\",\r\n        ),\r\n        StrInput(\r\n            name=\"format\",\r\n            display_name=\"Format\",\r\n            info=\"Specify the format of the output (e.g., json).\",\r\n            advanced=True,\r\n        ),\r\n        DictInput(\r\n            name=\"metadata\",\r\n            display_name=\"Metadata\",\r\n            info=\"Metadata to add to the run trace.\",\r\n            advanced=True,\r\n        ),\r\n        DropdownInput(\r\n            name=\"mirostat\",\r\n            display_name=\"Mirostat\",\r\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\r\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\r\n            value=\"Disabled\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"mirostat_eta\",\r\n            display_name=\"Mirostat Eta\",\r\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"mirostat_tau\",\r\n            display_name=\"Mirostat Tau\",\r\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"num_ctx\",\r\n            display_name=\"Context Window Size\",\r\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"num_gpu\",\r\n            display_name=\"Number of GPUs\",\r\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"num_thread\",\r\n            display_name=\"Number of Threads\",\r\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"repeat_last_n\",\r\n            display_name=\"Repeat Last N\",\r\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"repeat_penalty\",\r\n            display_name=\"Repeat Penalty\",\r\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"tfs_z\",\r\n            display_name=\"TFS Z\",\r\n            info=\"Tail free sampling value. (Default: 1)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"timeout\",\r\n            display_name=\"Timeout\",\r\n            info=\"Timeout for the request stream.\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"top_k\",\r\n            display_name=\"Top K\",\r\n            info=\"Limits token selection to top K. (Default: 40)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"top_p\",\r\n            display_name=\"Top P\",\r\n            info=\"Works together with top-k. (Default: 0.9)\",\r\n            advanced=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"verbose\",\r\n            display_name=\"Verbose\",\r\n            info=\"Whether to print out response text.\",\r\n        ),\r\n        StrInput(\r\n            name=\"tags\",\r\n            display_name=\"Tags\",\r\n            info=\"Comma-separated list of tags to add to the run trace.\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"stop_tokens\",\r\n            display_name=\"Stop Tokens\",\r\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"system\",\r\n            display_name=\"System\",\r\n            info=\"System to use for generating text.\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"template\",\r\n            display_name=\"Template\",\r\n            info=\"Template to use for generating text.\",\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n        ),\r\n        BoolInput(\r\n            name=\"stream\",\r\n            display_name=\"Stream\",\r\n            info=STREAM_INFO_TEXT,\r\n        ),\r\n        StrInput(\r\n            name=\"system_message\",\r\n            display_name=\"System Message\",\r\n            info=\"System message to pass to the model.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\r\n        # Mapping mirostat settings to their corresponding values\r\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\r\n\r\n        # Default to 0 for 'Disabled'\r\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\r\n\r\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\r\n        if mirostat_value == 0:\r\n            mirostat_eta = None\r\n            mirostat_tau = None\r\n        else:\r\n            mirostat_eta = self.mirostat_eta\r\n            mirostat_tau = self.mirostat_tau\r\n\r\n        # Mapping system settings to their corresponding values\r\n        llm_params = {\r\n            \"base_url\": self.base_url,\r\n            \"model\": self.model,\r\n            \"mirostat\": mirostat_value,\r\n            \"format\": self.format,\r\n            \"metadata\": self.metadata,\r\n            \"tags\": self.tags.split(\",\") if self.tags else None,\r\n            \"mirostat_eta\": mirostat_eta,\r\n            \"mirostat_tau\": mirostat_tau,\r\n            \"num_ctx\": self.num_ctx or None,\r\n            \"num_gpu\": self.num_gpu or None,\r\n            \"num_thread\": self.num_thread or None,\r\n            \"repeat_last_n\": self.repeat_last_n or None,\r\n            \"repeat_penalty\": self.repeat_penalty or None,\r\n            \"temperature\": self.temperature or None,\r\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\r\n            \"system\": self.system,\r\n            \"template\": self.template,\r\n            \"tfs_z\": self.tfs_z or None,\r\n            \"timeout\": self.timeout or None,\r\n            \"top_k\": self.top_k or None,\r\n            \"top_p\": self.top_p or None,\r\n            \"verbose\": self.verbose,\r\n        }\r\n\r\n        # Remove parameters with None values\r\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\r\n\r\n        try:\r\n            output = ChatOllama(**llm_params)  # type: ignore\r\n        except Exception as e:\r\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\r\n\r\n        return output  # type: ignore\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": false,
                "type": "str"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "metadata": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": false,
                "type": "dict"
              },
              "mirostat": {
                "trace_as_metadata": true,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Disabled",
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "title_case": false,
                "type": "str"
              },
              "mirostat_eta": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "title_case": false,
                "type": "float"
              },
              "mirostat_tau": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "title_case": false,
                "type": "float"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "phi3:medium-128k",
                  "gemma2:latest",
                  "mixtral:latest",
                  "mistral:latest",
                  "deepseek-coder-v2:latest",
                  "qwen2:7b",
                  "llama3:latest"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "llama3:latest",
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "refresh_button": true,
                "title_case": false,
                "type": "str"
              },
              "num_ctx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": false,
                "type": "int"
              },
              "num_gpu": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": false,
                "type": "int"
              },
              "num_thread": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": false,
                "type": "int"
              },
              "repeat_last_n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": false,
                "type": "int"
              },
              "repeat_penalty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "title_case": false,
                "type": "float"
              },
              "stop_tokens": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "stop_tokens",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                "title_case": false,
                "type": "str"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool"
              },
              "system": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": false,
                "type": "str"
              },
              "system_message": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str"
              },
              "tags": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tags to add to the run trace.",
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.2,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "title_case": false,
                "type": "float"
              },
              "template": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": false,
                "type": "str"
              },
              "tfs_z": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "title_case": false,
                "type": "float"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": false,
                "type": "int"
              },
              "top_k": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": false,
                "type": "int"
              },
              "top_p": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "title_case": false,
                "type": "float"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": false,
                "type": "bool"
              }
            },
            "description": "Generate text using Ollama Local LLMs.",
            "icon": "Ollama",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "base_url",
              "model",
              "temperature",
              "format",
              "metadata",
              "mirostat",
              "mirostat_eta",
              "mirostat_tau",
              "num_ctx",
              "num_gpu",
              "num_thread",
              "repeat_last_n",
              "repeat_penalty",
              "tfs_z",
              "timeout",
              "top_k",
              "top_p",
              "verbose",
              "tags",
              "stop_tokens",
              "system",
              "template",
              "input_value",
              "stream",
              "system_message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "OllamaModel-rJ4fH",
          "description": "Generate text using Ollama Local LLMs.",
          "display_name": "Ollama"
        },
        "selected": false,
        "width": 384,
        "height": 774,
        "positionAbsolute": {
          "x": 1906.0741618087632,
          "y": 309.9321653254984
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-5uvZG",
        "type": "genericNode",
        "position": {
          "x": 2388.226289422598,
          "y": 677.7045665867718
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID for the message.",
                "title_case": false,
                "type": "str"
              },
              "store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatOutput-5uvZG"
        },
        "selected": false,
        "width": 384,
        "height": 308,
        "positionAbsolute": {
          "x": 2388.226289422598,
          "y": 677.7045665867718
        },
        "dragging": false
      },
      {
        "id": "ChatInput-f766s",
        "type": "genericNode",
        "position": {
          "x": 789.8597459910709,
          "y": 1040.5524079877996
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "essa noticia é de qual dia?",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID for the message.",
                "title_case": false,
                "type": "str"
              },
              "store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatInput-f766s"
        },
        "selected": false,
        "width": 384,
        "height": 308,
        "positionAbsolute": {
          "x": 789.8597459910709,
          "y": 1040.5524079877996
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "URL",
            "id": "URL-RDDk8",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-vkaA9",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-URL-RDDk8{œdataTypeœ:œURLœ,œidœ:œURL-RDDk8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-vkaA9{œfieldNameœ:œdataœ,œidœ:œParseData-vkaA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "source": "URL-RDDk8",
        "sourceHandle": "{œdataTypeœ:œURLœ,œidœ:œURL-RDDk8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-vkaA9",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-vkaA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-vkaA9",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "references",
            "id": "Prompt-fOYQO",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParseData-vkaA9{œdataTypeœ:œParseDataœ,œidœ:œParseData-vkaA9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-fOYQO{œfieldNameœ:œreferencesœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "source": "ParseData-vkaA9",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-vkaA9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-fOYQO",
        "targetHandle": "{œfieldNameœ:œreferencesœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-WawaI",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "instructions",
            "id": "Prompt-fOYQO",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextInput-WawaI{œdataTypeœ:œTextInputœ,œidœ:œTextInput-WawaIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-fOYQO{œfieldNameœ:œinstructionsœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "source": "TextInput-WawaI",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-WawaIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-fOYQO",
        "targetHandle": "{œfieldNameœ:œinstructionsœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-fOYQO",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-fOYQOœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OllamaModel-rJ4fH",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-rJ4fHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OllamaModel-rJ4fH",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-fOYQO",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-fOYQO{œdataTypeœ:œPromptœ,œidœ:œPrompt-fOYQOœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-rJ4fH{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-rJ4fHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "OllamaModel-rJ4fH",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-rJ4fHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-5uvZG",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-5uvZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-5uvZG",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-rJ4fH",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OllamaModel-rJ4fH{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-rJ4fHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-5uvZG{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-5uvZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "ChatInput-f766s",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-f766sœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-fOYQO",
        "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticker",
            "id": "Prompt-fOYQO",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-f766s",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-f766s{œdataTypeœ:œChatInputœ,œidœ:œChatInput-f766sœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-fOYQO{œfieldNameœ:œtickerœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": -81.88516527577599,
      "y": -70.19880602860871,
      "zoom": 0.5113378258933856
    }
  },
  "metadata": {
    "URL": {
      "count": 1
    },
    "ParseData": {
      "count": 1
    },
    "Prompt": {
      "count": 1
    },
    "TextInput": {
      "count": 1
    },
    "OllamaModel": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "8f0ddd3e-730f-41ca-ae53-1a742ecb30e6",
    "name": "Blog bolsa de valores",
    "description": "o fluxo é alimentado com bases de noticias, só precisa você por o nome da empresa que ele irá buscar nos sites específicos listados ",
    "is_component": false,
    "liked_by_count": "1",
    "downloads_count": "24",
    "metadata": {
      "URL": {
        "count": 1
      },
      "ParseData": {
        "count": 1
      },
      "Prompt": {
        "count": 1
      },
      "TextInput": {
        "count": 1
      },
      "OllamaModel": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "1.0.9",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "description": "Fetch content from one or more URLs.",
            "display_name": "URL",
            "id": "URL-RDDk8",
            "node": {
              "base_classes": [
                "Data"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Fetch content from one or more URLs.",
              "display_name": "URL",
              "documentation": "",
              "edited": false,
              "field_order": [
                "urls"
              ],
              "frozen": false,
              "icon": "layout-template",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Data",
                  "method": "fetch_content",
                  "name": "data",
                  "selected": "Data",
                  "types": [
                    "Data"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "import re\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs, separated by commas.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            raise ValueError(f\"Invalid URL: {string}\")\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n"
                },
                "urls": {
                  "advanced": false,
                  "display_name": "URLs",
                  "dynamic": false,
                  "info": "Enter one or more URLs, separated by commas.",
                  "input_types": [
                    "Message"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "name": "urls",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": [
                    "valorinveste.globo.com/mercados/renda-variavel/empresas/",
                    "www.brasil247.com/economia",
                    "www.suno.com.br/noticias/",
                    "https://einvestidor.estadao.com.br/ultimas/"
                  ]
                }
              }
            },
            "type": "URL"
          },
          "dragging": false,
          "height": 457,
          "id": "URL-RDDk8",
          "position": {
            "x": 243.20246121447985,
            "y": 536.9824190374811
          },
          "positionAbsolute": {
            "x": 243.20246121447985,
            "y": 536.9824190374811
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Convert Data into plain text following a specified template.",
            "display_name": "Parse Data",
            "id": "ParseData-vkaA9",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Convert Data into plain text following a specified template.",
              "display_name": "Parse Data",
              "documentation": "",
              "edited": false,
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "frozen": false,
              "icon": "braces",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "parse_data",
                  "name": "text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"
                },
                "data": {
                  "advanced": false,
                  "display_name": "Data",
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "input_types": [
                    "Data"
                  ],
                  "list": false,
                  "name": "data",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "other",
                  "value": ""
                },
                "sep": {
                  "advanced": true,
                  "display_name": "Separator",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "sep",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "\n"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{text}"
                }
              }
            },
            "type": "ParseData"
          },
          "dragging": false,
          "height": 384,
          "id": "ParseData-vkaA9",
          "position": {
            "x": 755.6265223857876,
            "y": 557.3491786588943
          },
          "positionAbsolute": {
            "x": 755.6265223857876,
            "y": 557.3491786588943
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "id": "Prompt-fOYQO",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_build_config[\"template\"])\n        return frontend_node\n"
                },
                "instructions": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "instructions",
                  "display_name": "instructions",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "references": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "references",
                  "display_name": "references",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "name": "template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "type": "prompt",
                  "value": "Reference 1:\n\n{references}\n\nempresa a ser gerada a noticia \n\n{ticker}\n---\n\n{instructions}\n\nBlog: \n\ndata da noticia:\n"
                },
                "ticker": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "ticker",
                  "display_name": "ticker",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "references",
                  "ticker",
                  "instructions"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false
            },
            "type": "Prompt"
          },
          "dragging": false,
          "height": 609,
          "id": "Prompt-fOYQO",
          "position": {
            "x": 1368.0633591447076,
            "y": 467.19448061224284
          },
          "positionAbsolute": {
            "x": 1368.0633591447076,
            "y": 467.19448061224284
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Get text inputs from the Playground.",
            "display_name": "Instructions",
            "id": "TextInput-WawaI",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Get text inputs from the Playground.",
              "display_name": "Instructions",
              "documentation": "",
              "edited": false,
              "field_order": [
                "input_value"
              ],
              "frozen": false,
              "icon": "type",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Text",
                  "method": "text_response",
                  "name": "text",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "input_value",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Use as referências acima para escrever um novo blog estilo noticias / Noticias de ações"
                }
              }
            },
            "type": "TextInput"
          },
          "dragging": false,
          "height": 308,
          "id": "TextInput-WawaI",
          "position": {
            "x": 741.778191064498,
            "y": 180.33719012730944
          },
          "positionAbsolute": {
            "x": 741.778191064498,
            "y": 180.33719012730944
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "id": "OllamaModel-rJ4fH",
          "type": "genericNode",
          "position": {
            "x": 1906.0741618087632,
            "y": 309.9321653254984
          },
          "data": {
            "type": "OllamaModel",
            "node": {
              "template": {
                "_type": "Component",
                "base_url": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "http://bsb_gpu2.ipea.gov.br:11434",
                  "name": "base_url",
                  "display_name": "Base URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                  "title_case": false,
                  "type": "str"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any\r\n\r\nimport httpx\r\nfrom langchain_community.chat_models import ChatOllama\r\n\r\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.field_typing import LanguageModel\r\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageInput, StrInput\r\n\r\n\r\nclass ChatOllamaComponent(LCModelComponent):\r\n    display_name = \"Ollama\"\r\n    description = \"Generate text using Ollama Local LLMs.\"\r\n    icon = \"Ollama\"\r\n    name = \"OllamaModel\"\r\n\r\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\r\n        if field_name == \"mirostat\":\r\n            if field_value == \"Disabled\":\r\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\r\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\r\n                build_config[\"mirostat_eta\"][\"value\"] = None\r\n                build_config[\"mirostat_tau\"][\"value\"] = None\r\n\r\n            else:\r\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\r\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\r\n\r\n                if field_value == \"Mirostat 2.0\":\r\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\r\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\r\n                else:\r\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\r\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\r\n\r\n        if field_name == \"model\":\r\n            base_url_dict = build_config.get(\"base_url\", {})\r\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\r\n            base_url_value = base_url_dict.get(\"value\")\r\n            if base_url_load_from_db:\r\n                base_url_value = self.variables(base_url_value)\r\n            elif not base_url_value:\r\n                base_url_value = \"http://localhost:11434\"\r\n            build_config[\"model\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\r\n\r\n        if field_name == \"keep_alive_flag\":\r\n            if field_value == \"Keep\":\r\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\r\n                build_config[\"keep_alive\"][\"advanced\"] = True\r\n            elif field_value == \"Immediately\":\r\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\r\n                build_config[\"keep_alive\"][\"advanced\"] = True\r\n            else:\r\n                build_config[\"keep_alive\"][\"advanced\"] = False\r\n\r\n        return build_config\r\n\r\n    def get_model(self, url: str) -> list[str]:\r\n        try:\r\n            with httpx.Client() as client:\r\n                response = client.get(url)\r\n                response.raise_for_status()\r\n                data = response.json()\r\n\r\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\r\n                return model_names\r\n        except Exception as e:\r\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"base_url\",\r\n            display_name=\"Base URL\",\r\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\r\n            value=\"http://localhost:11434\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"model\",\r\n            display_name=\"Model Name\",\r\n            value=\"llama2\",\r\n            info=\"Refer to https://ollama.ai/library for more models.\",\r\n            refresh_button=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"temperature\",\r\n            display_name=\"Temperature\",\r\n            value=0.2,\r\n            info=\"Controls the creativity of model responses.\",\r\n        ),\r\n        StrInput(\r\n            name=\"format\",\r\n            display_name=\"Format\",\r\n            info=\"Specify the format of the output (e.g., json).\",\r\n            advanced=True,\r\n        ),\r\n        DictInput(\r\n            name=\"metadata\",\r\n            display_name=\"Metadata\",\r\n            info=\"Metadata to add to the run trace.\",\r\n            advanced=True,\r\n        ),\r\n        DropdownInput(\r\n            name=\"mirostat\",\r\n            display_name=\"Mirostat\",\r\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\r\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\r\n            value=\"Disabled\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"mirostat_eta\",\r\n            display_name=\"Mirostat Eta\",\r\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"mirostat_tau\",\r\n            display_name=\"Mirostat Tau\",\r\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"num_ctx\",\r\n            display_name=\"Context Window Size\",\r\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"num_gpu\",\r\n            display_name=\"Number of GPUs\",\r\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"num_thread\",\r\n            display_name=\"Number of Threads\",\r\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"repeat_last_n\",\r\n            display_name=\"Repeat Last N\",\r\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"repeat_penalty\",\r\n            display_name=\"Repeat Penalty\",\r\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"tfs_z\",\r\n            display_name=\"TFS Z\",\r\n            info=\"Tail free sampling value. (Default: 1)\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"timeout\",\r\n            display_name=\"Timeout\",\r\n            info=\"Timeout for the request stream.\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"top_k\",\r\n            display_name=\"Top K\",\r\n            info=\"Limits token selection to top K. (Default: 40)\",\r\n            advanced=True,\r\n        ),\r\n        FloatInput(\r\n            name=\"top_p\",\r\n            display_name=\"Top P\",\r\n            info=\"Works together with top-k. (Default: 0.9)\",\r\n            advanced=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"verbose\",\r\n            display_name=\"Verbose\",\r\n            info=\"Whether to print out response text.\",\r\n        ),\r\n        StrInput(\r\n            name=\"tags\",\r\n            display_name=\"Tags\",\r\n            info=\"Comma-separated list of tags to add to the run trace.\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"stop_tokens\",\r\n            display_name=\"Stop Tokens\",\r\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"system\",\r\n            display_name=\"System\",\r\n            info=\"System to use for generating text.\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"template\",\r\n            display_name=\"Template\",\r\n            info=\"Template to use for generating text.\",\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n        ),\r\n        BoolInput(\r\n            name=\"stream\",\r\n            display_name=\"Stream\",\r\n            info=STREAM_INFO_TEXT,\r\n        ),\r\n        StrInput(\r\n            name=\"system_message\",\r\n            display_name=\"System Message\",\r\n            info=\"System message to pass to the model.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\r\n        # Mapping mirostat settings to their corresponding values\r\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\r\n\r\n        # Default to 0 for 'Disabled'\r\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\r\n\r\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\r\n        if mirostat_value == 0:\r\n            mirostat_eta = None\r\n            mirostat_tau = None\r\n        else:\r\n            mirostat_eta = self.mirostat_eta\r\n            mirostat_tau = self.mirostat_tau\r\n\r\n        # Mapping system settings to their corresponding values\r\n        llm_params = {\r\n            \"base_url\": self.base_url,\r\n            \"model\": self.model,\r\n            \"mirostat\": mirostat_value,\r\n            \"format\": self.format,\r\n            \"metadata\": self.metadata,\r\n            \"tags\": self.tags.split(\",\") if self.tags else None,\r\n            \"mirostat_eta\": mirostat_eta,\r\n            \"mirostat_tau\": mirostat_tau,\r\n            \"num_ctx\": self.num_ctx or None,\r\n            \"num_gpu\": self.num_gpu or None,\r\n            \"num_thread\": self.num_thread or None,\r\n            \"repeat_last_n\": self.repeat_last_n or None,\r\n            \"repeat_penalty\": self.repeat_penalty or None,\r\n            \"temperature\": self.temperature or None,\r\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\r\n            \"system\": self.system,\r\n            \"template\": self.template,\r\n            \"tfs_z\": self.tfs_z or None,\r\n            \"timeout\": self.timeout or None,\r\n            \"top_k\": self.top_k or None,\r\n            \"top_p\": self.top_p or None,\r\n            \"verbose\": self.verbose,\r\n        }\r\n\r\n        # Remove parameters with None values\r\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\r\n\r\n        try:\r\n            output = ChatOllama(**llm_params)  # type: ignore\r\n        except Exception as e:\r\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\r\n\r\n        return output  # type: ignore\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "format": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "format",
                  "display_name": "Format",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Specify the format of the output (e.g., json).",
                  "title_case": false,
                  "type": "str"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "metadata": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Metadata to add to the run trace.",
                  "title_case": false,
                  "type": "dict"
                },
                "mirostat": {
                  "trace_as_metadata": true,
                  "options": [
                    "Disabled",
                    "Mirostat",
                    "Mirostat 2.0"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Disabled",
                  "name": "mirostat",
                  "display_name": "Mirostat",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                  "title_case": false,
                  "type": "str"
                },
                "mirostat_eta": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "mirostat_eta",
                  "display_name": "Mirostat Eta",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                  "title_case": false,
                  "type": "float"
                },
                "mirostat_tau": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "mirostat_tau",
                  "display_name": "Mirostat Tau",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                  "title_case": false,
                  "type": "float"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "phi3:medium-128k",
                    "gemma2:latest",
                    "mixtral:latest",
                    "mistral:latest",
                    "deepseek-coder-v2:latest",
                    "qwen2:7b",
                    "llama3:latest"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "llama3:latest",
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Refer to https://ollama.ai/library for more models.",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str"
                },
                "num_ctx": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "num_ctx",
                  "display_name": "Context Window Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Size of the context window for generating tokens. (Default: 2048)",
                  "title_case": false,
                  "type": "int"
                },
                "num_gpu": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "num_gpu",
                  "display_name": "Number of GPUs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                  "title_case": false,
                  "type": "int"
                },
                "num_thread": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "num_thread",
                  "display_name": "Number of Threads",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                  "title_case": false,
                  "type": "int"
                },
                "repeat_last_n": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "repeat_last_n",
                  "display_name": "Repeat Last N",
                  "advanced": true,
                  "dynamic": false,
                  "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                  "title_case": false,
                  "type": "int"
                },
                "repeat_penalty": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "repeat_penalty",
                  "display_name": "Repeat Penalty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                  "title_case": false,
                  "type": "float"
                },
                "stop_tokens": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "stop_tokens",
                  "display_name": "Stop Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                  "title_case": false,
                  "type": "str"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool"
                },
                "system": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system",
                  "display_name": "System",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System to use for generating text.",
                  "title_case": false,
                  "type": "str"
                },
                "system_message": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str"
                },
                "tags": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "tags",
                  "display_name": "Tags",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Comma-separated list of tags to add to the run trace.",
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0.2,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Controls the creativity of model responses.",
                  "title_case": false,
                  "type": "float"
                },
                "template": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to use for generating text.",
                  "title_case": false,
                  "type": "str"
                },
                "tfs_z": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "tfs_z",
                  "display_name": "TFS Z",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Tail free sampling value. (Default: 1)",
                  "title_case": false,
                  "type": "float"
                },
                "timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Timeout for the request stream.",
                  "title_case": false,
                  "type": "int"
                },
                "top_k": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "top_k",
                  "display_name": "Top K",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limits token selection to top K. (Default: 40)",
                  "title_case": false,
                  "type": "int"
                },
                "top_p": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "top_p",
                  "display_name": "Top P",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Works together with top-k. (Default: 0.9)",
                  "title_case": false,
                  "type": "float"
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "verbose",
                  "display_name": "Verbose",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Whether to print out response text.",
                  "title_case": false,
                  "type": "bool"
                }
              },
              "description": "Generate text using Ollama Local LLMs.",
              "icon": "Ollama",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Ollama",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "base_url",
                "model",
                "temperature",
                "format",
                "metadata",
                "mirostat",
                "mirostat_eta",
                "mirostat_tau",
                "num_ctx",
                "num_gpu",
                "num_thread",
                "repeat_last_n",
                "repeat_penalty",
                "tfs_z",
                "timeout",
                "top_k",
                "top_p",
                "verbose",
                "tags",
                "stop_tokens",
                "system",
                "template",
                "input_value",
                "stream",
                "system_message"
              ],
              "beta": false,
              "edited": true
            },
            "id": "OllamaModel-rJ4fH",
            "description": "Generate text using Ollama Local LLMs.",
            "display_name": "Ollama"
          },
          "selected": false,
          "width": 384,
          "height": 774,
          "positionAbsolute": {
            "x": 1906.0741618087632,
            "y": 309.9321653254984
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-5uvZG",
          "type": "genericNode",
          "position": {
            "x": 2388.226289422598,
            "y": 677.7045665867718
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "data_template",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "AI",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID for the message.",
                  "title_case": false,
                  "type": "str"
                },
                "store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatOutput-5uvZG"
          },
          "selected": false,
          "width": 384,
          "height": 308,
          "positionAbsolute": {
            "x": 2388.226289422598,
            "y": 677.7045665867718
          },
          "dragging": false
        },
        {
          "id": "ChatInput-f766s",
          "type": "genericNode",
          "position": {
            "x": 789.8597459910709,
            "y": 1040.5524079877996
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "essa noticia é de qual dia?",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID for the message.",
                  "title_case": false,
                  "type": "str"
                },
                "store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatInput-f766s"
          },
          "selected": false,
          "width": 384,
          "height": 308,
          "positionAbsolute": {
            "x": 789.8597459910709,
            "y": 1040.5524079877996
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "URL",
              "id": "URL-RDDk8",
              "name": "data",
              "output_types": [
                "Data"
              ]
            },
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-vkaA9",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            }
          },
          "id": "reactflow__edge-URL-RDDk8{œdataTypeœ:œURLœ,œidœ:œURL-RDDk8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-vkaA9{œfieldNameœ:œdataœ,œidœ:œParseData-vkaA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "source": "URL-RDDk8",
          "sourceHandle": "{œdataTypeœ:œURLœ,œidœ:œURL-RDDk8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-vkaA9",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-vkaA9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-vkaA9",
              "name": "text",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "references",
              "id": "Prompt-fOYQO",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-ParseData-vkaA9{œdataTypeœ:œParseDataœ,œidœ:œParseData-vkaA9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-fOYQO{œfieldNameœ:œreferencesœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "source": "ParseData-vkaA9",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-vkaA9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-fOYQO",
          "targetHandle": "{œfieldNameœ:œreferencesœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-WawaI",
              "name": "text",
              "output_types": [
                "Message"
              ]
            },
            "targetHandle": {
              "fieldName": "instructions",
              "id": "Prompt-fOYQO",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-TextInput-WawaI{œdataTypeœ:œTextInputœ,œidœ:œTextInput-WawaIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-fOYQO{œfieldNameœ:œinstructionsœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "source": "TextInput-WawaI",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-WawaIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-fOYQO",
          "targetHandle": "{œfieldNameœ:œinstructionsœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-fOYQO",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-fOYQOœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "OllamaModel-rJ4fH",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-rJ4fHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OllamaModel-rJ4fH",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-fOYQO",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-fOYQO{œdataTypeœ:œPromptœ,œidœ:œPrompt-fOYQOœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-rJ4fH{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-rJ4fHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "OllamaModel-rJ4fH",
          "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-rJ4fHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-5uvZG",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-5uvZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-5uvZG",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "OllamaModel",
              "id": "OllamaModel-rJ4fH",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-OllamaModel-rJ4fH{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-rJ4fHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-5uvZG{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-5uvZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "ChatInput-f766s",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-f766sœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-fOYQO",
          "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ticker",
              "id": "Prompt-fOYQO",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-f766s",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-f766s{œdataTypeœ:œChatInputœ,œidœ:œChatInput-f766sœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-fOYQO{œfieldNameœ:œtickerœ,œidœ:œPrompt-fOYQOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": -81.88516527577599,
        "y": -70.19880602860871,
        "zoom": 0.5113378258933856
      }
    },
    "date_created": "2024-07-29T16:26:27.489Z",
    "date_updated": "2024-07-29T16:27:37.989Z",
    "status": "Public",
    "sort": null,
    "user_updated": "fb12ab4b-334f-4833-ad8a-0e37be1a5a5a",
    "user_created": {
      "username": "0rakul0",
      "first_name": "jefferson",
      "last_name": "anjos",
      "id": "fb12ab4b-334f-4833-ad8a-0e37be1a5a5a"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Chain",
          "id": "d442c88b-f8d0-4010-8752-16a644c7ac8e"
        }
      },
      {
        "tags_id": {
          "name": "Prompt",
          "id": "57f5c681-a1f5-4053-be33-e9525e7eb00a"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:01.693Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 60,
    "converter_version": "1.0.0"
  }
}