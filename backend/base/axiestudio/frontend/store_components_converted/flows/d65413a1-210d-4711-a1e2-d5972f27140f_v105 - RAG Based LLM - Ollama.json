{
  "id": "d65413a1-210d-4711-a1e2-d5972f27140f",
  "name": "v1.0.5 - RAG Based LLM - Ollama",
  "description": "Read a File and Create Chunks for the CromaDB and you can ask question based on the input data and you will get a result\n\nEmbedding and Chat: Ollama\nVector Store: ChromaDB (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "daniel156161",
    "first_name": "Daniel",
    "last_name": "D",
    "id": "faceac4f-b872-43da-b2cf-9b78d0e65456",
    "full_name": "Daniel D"
  },
  "store_url": "https://www.langflow.store/store/component/d65413a1-210d-4711-a1e2-d5972f27140f",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-27T14:59:21.683Z",
    "updated": "2024-06-27T15:02:33.226Z",
    "downloaded": "2025-08-19T17:50:05.615Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Vector Store",
        "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
      }
    },
    {
      "tags_id": {
        "name": "Memory",
        "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.5",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Chroma-U9y6l",
        "type": "genericNode",
        "position": {
          "x": 1158.785032038765,
          "y": 1047.1766922246597
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other"
              },
              "ingest_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ingest_data",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other"
              },
              "allow_duplicates": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "allow_duplicates",
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool"
              },
              "chroma_server_cors_allow_origins": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "chroma_server_grpc_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "chroma_server_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "chroma_server_http_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "chroma_server_http_port",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "chroma_server_ssl_enabled": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "collection_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "axiestudio",
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "limit": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "limit",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "5",
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": false,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int"
              },
              "persist_directory": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "search_type": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Similarity",
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Chroma Vector Store with search capabilities",
            "icon": "Chroma",
            "base_classes": [
              "Data",
              "Retriever"
            ],
            "display_name": "Chroma DB",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "collection_name",
              "persist_directory",
              "search_query",
              "ingest_data",
              "embedding",
              "chroma_server_cors_allow_origins",
              "chroma_server_host",
              "chroma_server_http_port",
              "chroma_server_grpc_port",
              "chroma_server_ssl_enabled",
              "allow_duplicates",
              "search_type",
              "number_of_results",
              "limit"
            ],
            "beta": false,
            "edited": false
          },
          "id": "Chroma-U9y6l"
        },
        "selected": false,
        "width": 384,
        "height": 749,
        "positionAbsolute": {
          "x": 1158.785032038765,
          "y": 1047.1766922246597
        },
        "dragging": false
      },
      {
        "id": "ChatInput-K1BwK",
        "type": "genericNode",
        "position": {
          "x": 289.8355593453872,
          "y": 599.580954849465
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "hihi",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID for the message.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "input_value",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatInput-K1BwK"
        },
        "selected": false,
        "width": 384,
        "height": 309,
        "positionAbsolute": {
          "x": 289.8355593453872,
          "y": 599.580954849465
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-QvsKo",
        "type": "genericNode",
        "position": {
          "x": 2988.2637374801343,
          "y": 894.0137656531364
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID for the message.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              }
            ],
            "field_order": [
              "input_value",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatOutput-QvsKo"
        },
        "selected": true,
        "width": 384,
        "height": 261,
        "positionAbsolute": {
          "x": 2988.2637374801343,
          "y": 894.0137656531364
        },
        "dragging": true
      },
      {
        "id": "ParseData-c8aS1",
        "type": "genericNode",
        "position": {
          "x": 1592.1345302077807,
          "y": 1460.2307095063504
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-c8aS1"
        },
        "selected": false,
        "width": 384,
        "height": 385,
        "positionAbsolute": {
          "x": 1592.1345302077807,
          "y": 1460.2307095063504
        },
        "dragging": false
      },
      {
        "data": {
          "id": "groupComponent-PqmU7",
          "type": "GroupNode",
          "node": {
            "display_name": "Load File and Create Chunks",
            "documentation": "",
            "description": "",
            "template": {
              "path_File-K3ohz": {
                "trace_as_metadata": true,
                "file_path": "7c0b6414-2cff-431c-9c87-5ee1ceb99236/Faust_Goethe_engl.txt",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "path",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "proxy": {
                  "id": "File-K3ohz",
                  "field": "path"
                }
              },
              "code_File-K3ohz": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "File-K3ohz",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "silent_errors_File-K3ohz": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "silent_errors",
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "proxy": {
                  "id": "File-K3ohz",
                  "field": "silent_errors"
                }
              },
              "chunk_overlap_CharacterTextSplitter-Zr2KP": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "CharacterTextSplitter-Zr2KP",
                  "field": "chunk_overlap"
                }
              },
              "chunk_size_CharacterTextSplitter-Zr2KP": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "CharacterTextSplitter-Zr2KP",
                  "field": "chunk_size"
                }
              },
              "code_CharacterTextSplitter-Zr2KP": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "CharacterTextSplitter-Zr2KP",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "separator_CharacterTextSplitter-Zr2KP": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": " ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "proxy": {
                  "id": "CharacterTextSplitter-Zr2KP",
                  "field": "separator"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "File-K3ohz",
                    "type": "genericNode",
                    "position": {
                      "x": -272.1551030828084,
                      "y": 1007.5272782240486
                    },
                    "data": {
                      "type": "File",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "path": {
                            "trace_as_metadata": true,
                            "file_path": "7c0b6414-2cff-431c-9c87-5ee1ceb99236/Faust_Goethe_engl.txt",
                            "fileTypes": [
                              "txt",
                              "md",
                              "mdx",
                              "csv",
                              "json",
                              "yaml",
                              "yml",
                              "xml",
                              "html",
                              "htm",
                              "pdf",
                              "docx",
                              "py",
                              "sh",
                              "sql",
                              "js",
                              "ts",
                              "tsx"
                            ],
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "path",
                            "display_name": "Path",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                            "title_case": false,
                            "type": "file"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "silent_errors": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": false,
                            "name": "silent_errors",
                            "display_name": "Silent Errors",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If true, errors will not raise an exception.",
                            "title_case": false,
                            "type": "bool"
                          }
                        },
                        "description": "A generic file loader.",
                        "icon": "file-text",
                        "base_classes": [
                          "Data"
                        ],
                        "display_name": "File",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "data",
                            "display_name": "Data",
                            "method": "load_file",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "path",
                          "silent_errors"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "File-K3ohz"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 301,
                    "positionAbsolute": {
                      "x": -272.1551030828084,
                      "y": 1007.5272782240486
                    },
                    "dragging": false
                  },
                  {
                    "id": "CharacterTextSplitter-Zr2KP",
                    "type": "genericNode",
                    "position": {
                      "x": 296.4739525406844,
                      "y": 921.0144803062999
                    },
                    "data": {
                      "type": "CharacterTextSplitter",
                      "node": {
                        "template": {
                          "_type": "CustomComponent",
                          "inputs": {
                            "type": "Data",
                            "required": true,
                            "placeholder": "",
                            "list": true,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "inputs",
                            "display_name": "Input",
                            "advanced": false,
                            "input_types": [
                              "Document",
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "chunk_overlap": {
                            "type": "int",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": 200,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "chunk_overlap",
                            "display_name": "Chunk Overlap",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "chunk_size": {
                            "type": "int",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": 1000,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "chunk_size",
                            "display_name": "Chunk Size",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "separator": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": " ",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "separator",
                            "display_name": "Separator",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "input_types": [
                              "Text"
                            ]
                          }
                        },
                        "description": "Splitting text that looks at characters.",
                        "base_classes": [
                          "Data"
                        ],
                        "display_name": "CharacterTextSplitter",
                        "documentation": "",
                        "custom_fields": {
                          "inputs": null,
                          "chunk_overlap": null,
                          "chunk_size": null,
                          "separator": null
                        },
                        "output_types": [
                          "Data"
                        ],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "data",
                            "hidden": false,
                            "display_name": "Data",
                            "method": null,
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [],
                        "beta": false,
                        "edited": false
                      },
                      "id": "CharacterTextSplitter-Zr2KP"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 529,
                    "positionAbsolute": {
                      "x": 296.4739525406844,
                      "y": 921.0144803062999
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "File-K3ohz",
                    "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-K3ohzœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                    "target": "CharacterTextSplitter-Zr2KP",
                    "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-Zr2KPœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "inputs",
                        "id": "CharacterTextSplitter-Zr2KP",
                        "inputTypes": [
                          "Document",
                          "Data"
                        ],
                        "type": "Data"
                      },
                      "sourceHandle": {
                        "dataType": "File",
                        "id": "File-K3ohz",
                        "name": "data",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-File-K3ohz{œdataTypeœ:œFileœ,œidœ:œFile-K3ohzœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-CharacterTextSplitter-Zr2KP{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-Zr2KPœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                    "className": "",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Awesome Engelbart",
              "description": "",
              "id": "DWNRV"
            },
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "CharacterTextSplitter-Zr2KP_data",
                "hidden": false,
                "display_name": "Data",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "CharacterTextSplitter-Zr2KP",
                  "name": "data",
                  "nodeDisplayName": "CharacterTextSplitter"
                }
              }
            ]
          }
        },
        "id": "groupComponent-PqmU7",
        "position": {
          "x": 300.1211847457156,
          "y": 956.182065781557
        },
        "type": "genericNode",
        "width": 384,
        "height": 559,
        "selected": false,
        "positionAbsolute": {
          "x": 300.1211847457156,
          "y": 956.182065781557
        },
        "dragging": false
      },
      {
        "id": "OllamaModel-z5pRS",
        "type": "genericNode",
        "position": {
          "x": 2548.2322839713506,
          "y": 400.59614315247813
        },
        "data": {
          "type": "OllamaModel",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://localhost:11434",
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": false,
                "type": "str"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageInput, Output, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\n\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, url: str) -> list[str]:\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model Name\",\n            value=\"llama2\",\n            info=\"Refer to https://ollama.ai/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=STREAM_INFO_TEXT,\n        ),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text_output\", method=\"text_response\"),\n        Output(display_name=\"Language Model\", name=\"model_output\", method=\"build_model\"),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code"
              },
              "format": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": false,
                "type": "str"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "metadata": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": false,
                "type": "dict"
              },
              "mirostat": {
                "trace_as_metadata": true,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Disabled",
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "title_case": false,
                "type": "str"
              },
              "mirostat_eta": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "title_case": false,
                "type": "float"
              },
              "mirostat_tau": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "title_case": false,
                "type": "float"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "dolphin-llama3:latest",
                  "dolphin-mistral:latest",
                  "llama3:latest",
                  "mxbai-embed-large:latest",
                  "phi3:latest",
                  "marjo/llama-3-smaug:8B-Q4_K_M"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "llama3:latest",
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "refresh_button": true,
                "title_case": false,
                "type": "str"
              },
              "num_ctx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": false,
                "type": "int"
              },
              "num_gpu": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": false,
                "type": "int"
              },
              "num_thread": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": false,
                "type": "int"
              },
              "repeat_last_n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": false,
                "type": "int"
              },
              "repeat_penalty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "title_case": false,
                "type": "float"
              },
              "stop_tokens": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "stop_tokens",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                "title_case": false,
                "type": "str"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "stream",
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool"
              },
              "system": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": false,
                "type": "str"
              },
              "system_message": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str"
              },
              "tags": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tags to add to the run trace.",
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.2,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "title_case": false,
                "type": "float"
              },
              "template": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": false,
                "type": "str"
              },
              "tfs_z": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "title_case": false,
                "type": "float"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": false,
                "type": "int"
              },
              "top_k": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": false,
                "type": "int"
              },
              "top_p": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "title_case": false,
                "type": "float"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": false,
                "type": "bool"
              }
            },
            "description": "Generate text using Ollama Local LLMs.",
            "icon": "Ollama",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              }
            ],
            "field_order": [
              "base_url",
              "model",
              "temperature",
              "format",
              "metadata",
              "mirostat",
              "mirostat_eta",
              "mirostat_tau",
              "num_ctx",
              "num_gpu",
              "num_thread",
              "repeat_last_n",
              "repeat_penalty",
              "tfs_z",
              "timeout",
              "top_k",
              "top_p",
              "verbose",
              "tags",
              "stop_tokens",
              "system",
              "template",
              "input_value",
              "stream",
              "system_message"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaModel-z5pRS"
        },
        "selected": true,
        "width": 384,
        "height": 731,
        "positionAbsolute": {
          "x": 2548.2322839713506,
          "y": 400.59614315247813
        },
        "dragging": true
      },
      {
        "data": {
          "id": "GroupNode-dPkdX",
          "type": "GroupNode",
          "node": {
            "display_name": "Prompt with History",
            "documentation": "",
            "description": "",
            "template": {
              "code_PromptComponent-KYRBR": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "PromptComponent-KYRBR",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "template_PromptComponent-KYRBR": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "proxy": {
                  "id": "PromptComponent-KYRBR",
                  "field": "template"
                }
              },
              "context_PromptComponent-KYRBR": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context",
                "display_name": "context",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "PromptComponent-KYRBR",
                  "field": "context"
                }
              },
              "question_PromptComponent-KYRBR": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "question",
                "display_name": "question",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "PromptComponent-KYRBR",
                  "field": "question"
                }
              },
              "code_Memory-iGzuM": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "proxy": {
                  "id": "Memory-iGzuM",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "n_messages_Memory-iGzuM": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 100,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "proxy": {
                  "id": "Memory-iGzuM",
                  "field": "n_messages"
                }
              },
              "order_Memory-iGzuM": {
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ascending",
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-iGzuM",
                  "field": "order"
                }
              },
              "sender_Memory-iGzuM": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine and User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-iGzuM",
                  "field": "sender"
                }
              },
              "sender_name_Memory-iGzuM": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-iGzuM",
                  "field": "sender_name"
                }
              },
              "session_id_Memory-iGzuM": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-iGzuM",
                  "field": "session_id"
                }
              },
              "template_Memory-iGzuM": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{sender_name}: {text}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Memory-iGzuM",
                  "field": "template"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "PromptComponent-KYRBR",
                    "type": "genericNode",
                    "position": {
                      "x": 2142.4742006664223,
                      "y": 378.36552030200767
                    },
                    "data": {
                      "type": "PromptComponent",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "template": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                            "name": "template",
                            "display_name": "Template",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "prompt"
                          },
                          "context": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "context",
                            "display_name": "context",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "history": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "history",
                            "display_name": "history",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "question": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "question",
                            "display_name": "question",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                          "template": [
                            "context",
                            "history",
                            "question"
                          ]
                        },
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "prompt",
                            "display_name": "Prompt Message",
                            "method": "build_prompt",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "template"
                        ],
                        "beta": false,
                        "edited": true
                      },
                      "id": "PromptComponent-KYRBR",
                      "description": "Create a prompt template with dynamic variables.",
                      "display_name": "Prompt",
                      "edited": false
                    },
                    "selected": true,
                    "width": 384,
                    "height": 611,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": 2142.4742006664223,
                      "y": 378.36552030200767
                    }
                  },
                  {
                    "id": "Memory-iGzuM",
                    "type": "genericNode",
                    "position": {
                      "x": 1606.6943944782909,
                      "y": 546.1947858575902
                    },
                    "data": {
                      "type": "Memory",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false
                          },
                          "n_messages": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": 100,
                            "name": "n_messages",
                            "display_name": "Number of Messages",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of messages to retrieve.",
                            "title_case": false,
                            "type": "int"
                          },
                          "order": {
                            "trace_as_metadata": true,
                            "options": [
                              "Ascending",
                              "Descending"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Ascending",
                            "name": "order",
                            "display_name": "Order",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Order of the messages.",
                            "title_case": false,
                            "type": "str"
                          },
                          "sender": {
                            "trace_as_metadata": true,
                            "options": [
                              "Machine",
                              "User",
                              "Machine and User"
                            ],
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "Machine and User",
                            "name": "sender",
                            "display_name": "Sender Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Type of sender.",
                            "title_case": false,
                            "type": "str"
                          },
                          "sender_name": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "sender_name",
                            "display_name": "Sender Name",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "Name of the sender.",
                            "title_case": false,
                            "type": "str"
                          },
                          "session_id": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "",
                            "name": "session_id",
                            "display_name": "Session ID",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "Session ID of the chat history.",
                            "title_case": false,
                            "type": "str"
                          },
                          "template": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "value": "{sender_name}: {text}",
                            "name": "template",
                            "display_name": "Template",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Retrieves stored chat messages.",
                        "icon": "message-square-more",
                        "base_classes": [
                          "Data",
                          "Message"
                        ],
                        "display_name": "Chat Memory",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "messages",
                            "display_name": "Chat History",
                            "method": "retrieve_messages",
                            "value": "__UNDEFINED__",
                            "cache": true
                          },
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "messages_text",
                            "display_name": "Messages (Text)",
                            "method": "retrieve_messages_as_text",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "hidden": false
                          }
                        ],
                        "field_order": [
                          "sender",
                          "sender_name",
                          "n_messages",
                          "session_id",
                          "order",
                          "template"
                        ],
                        "beta": false,
                        "edited": false
                      },
                      "id": "Memory-iGzuM"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 267,
                    "positionAbsolute": {
                      "x": 1606.6943944782909,
                      "y": 546.1947858575902
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "Memory-iGzuM",
                    "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-iGzuMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "PromptComponent-KYRBR",
                    "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-KYRBRœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "history",
                        "id": "PromptComponent-KYRBR",
                        "inputTypes": [
                          "Message",
                          "Text"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-iGzuM",
                        "name": "messages_text",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Memory-iGzuM{œdataTypeœ:œMemoryœ,œidœ:œMemory-iGzuMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-PromptComponent-KYRBR{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-KYRBRœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                    "className": "",
                    "selected": true
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Jubilant Stonebraker",
              "description": "",
              "id": "1lfTQ"
            },
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "PromptComponent-KYRBR_prompt",
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false,
                "proxy": {
                  "id": "PromptComponent-KYRBR",
                  "name": "prompt",
                  "nodeDisplayName": "Prompt"
                }
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "Memory-iGzuM_messages",
                "display_name": "Chat History",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "Memory-iGzuM",
                  "name": "messages",
                  "nodeDisplayName": "Chat Memory"
                },
                "hidden": true
              }
            ]
          }
        },
        "id": "GroupNode-dPkdX",
        "position": {
          "x": 2039.5960926381504,
          "y": 502.72422049788577
        },
        "type": "genericNode",
        "width": 384,
        "height": 481,
        "selected": true,
        "positionAbsolute": {
          "x": 2039.5960926381504,
          "y": 502.72422049788577
        },
        "dragging": true
      },
      {
        "id": "OllamaEmbeddings-LTBSM",
        "type": "genericNode",
        "position": {
          "x": 294.68884743555793,
          "y": 1534.6477935556306
        },
        "data": {
          "type": "OllamaEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://localhost:11434",
                "name": "base_url",
                "display_name": "Ollama Base URL",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings import OllamaEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import FloatInput, MessageTextInput, Output\n\n\nclass OllamaEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    icon = \"Ollama\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"model\",\n            display_name=\"Ollama Model\",\n            value=\"llama2\",\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Ollama Base URL\",\n            value=\"http://localhost:11434\",\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Model Temperature\",\n            value=0.1,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(\n                model=self.model,\n                base_url=self.base_url,\n                temperature=self.temperature,\n            )  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama API.\") from e\n        return output\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "llama3:latest",
                "name": "model",
                "display_name": "Ollama Model",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.1,
                "name": "temperature",
                "display_name": "Model Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float"
              }
            },
            "description": "Generate embeddings using Ollama models.",
            "icon": "Ollama",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Ollama Embeddings",
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "model",
              "base_url",
              "temperature"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaEmbeddings-LTBSM"
        },
        "selected": false,
        "width": 384,
        "height": 497,
        "dragging": false,
        "positionAbsolute": {
          "x": 294.68884743555793,
          "y": 1534.6477935556306
        }
      }
    ],
    "edges": [
      {
        "source": "ChatInput-K1BwK",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Chroma-U9y6l",
        "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query",
            "id": "Chroma-U9y6l",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-K1BwK",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-K1BwK{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Chroma-U9y6l{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Chroma-U9y6l",
        "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-U9y6lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-c8aS1",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-c8aS1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-c8aS1",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Chroma",
            "id": "Chroma-U9y6l",
            "name": "search_results",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-Chroma-U9y6l{œdataTypeœ:œChromaœ,œidœ:œChroma-U9y6lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-c8aS1{œfieldNameœ:œdataœ,œidœ:œParseData-c8aS1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "source": "groupComponent-PqmU7",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-PqmU7œ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "Chroma-U9y6l",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "Chroma-U9y6l",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "groupComponent-PqmU7",
            "name": "CharacterTextSplitter-Zr2KP_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-groupComponent-PqmU7{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-PqmU7œ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}-Chroma-U9y6l{œfieldNameœ:œingest_dataœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "source": "GroupNode-dPkdX",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-dPkdXœ,œnameœ:œPromptComponent-KYRBR_promptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OllamaModel-z5pRS",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-z5pRSœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OllamaModel-z5pRS",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "GroupNode-dPkdX",
            "name": "PromptComponent-KYRBR_prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-GroupNode-dPkdX{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-dPkdXœ,œnameœ:œPromptComponent-KYRBR_promptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-z5pRS{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-z5pRSœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": true
      },
      {
        "source": "OllamaModel-z5pRS",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-z5pRSœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-QvsKo",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-QvsKoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-QvsKo",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-z5pRS",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OllamaModel-z5pRS{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-z5pRSœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-QvsKo{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-QvsKoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": true
      },
      {
        "source": "ParseData-c8aS1",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-c8aS1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "GroupNode-dPkdX",
        "targetHandle": "{œfieldNameœ:œcontext_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œcontextœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "context_PromptComponent-KYRBR",
            "id": "GroupNode-dPkdX",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "context",
              "id": "PromptComponent-KYRBR"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-c8aS1",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-c8aS1{œdataTypeœ:œParseDataœ,œidœ:œParseData-c8aS1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GroupNode-dPkdX{œfieldNameœ:œcontext_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œcontextœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
        "selected": true
      },
      {
        "source": "ChatInput-K1BwK",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "GroupNode-dPkdX",
        "targetHandle": "{œfieldNameœ:œquestion_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œquestionœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "question_PromptComponent-KYRBR",
            "id": "GroupNode-dPkdX",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "question",
              "id": "PromptComponent-KYRBR"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-K1BwK",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-K1BwK{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-GroupNode-dPkdX{œfieldNameœ:œquestion_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œquestionœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
        "selected": true
      },
      {
        "source": "OllamaEmbeddings-LTBSM",
        "sourceHandle": "{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-LTBSMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Chroma-U9y6l",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-U9y6l",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OllamaEmbeddings",
            "id": "OllamaEmbeddings-LTBSM",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-OllamaEmbeddings-LTBSM{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-LTBSMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-U9y6l{œfieldNameœ:œembeddingœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      }
    ],
    "viewport": {
      "x": -122.15826587694573,
      "y": -143.04542569987996,
      "zoom": 0.6181376304604791
    }
  },
  "metadata": {
    "Chroma": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "ParseData": {
      "count": 1
    },
    "groupComponent": {
      "count": 1
    },
    "OllamaModel": {
      "count": 1
    },
    "GroupNode": {
      "count": 1
    },
    "OllamaEmbeddings": {
      "count": 1
    },
    "total": 8
  },
  "original": {
    "id": "d65413a1-210d-4711-a1e2-d5972f27140f",
    "name": "v1.0.5 - RAG Based LLM - Ollama",
    "description": "Read a File and Create Chunks for the CromaDB and you can ask question based on the input data and you will get a result\n\nEmbedding and Chat: Ollama\nVector Store: ChromaDB",
    "is_component": false,
    "liked_by_count": "75",
    "downloads_count": "1252",
    "metadata": {
      "Chroma": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "ParseData": {
        "count": 1
      },
      "groupComponent": {
        "count": 1
      },
      "OllamaModel": {
        "count": 1
      },
      "GroupNode": {
        "count": 1
      },
      "OllamaEmbeddings": {
        "count": 1
      },
      "total": 8
    },
    "last_tested_version": "1.0.5",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "Chroma-U9y6l",
          "type": "genericNode",
          "position": {
            "x": 1158.785032038765,
            "y": 1047.1766922246597
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other"
                },
                "ingest_data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ingest_data",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other"
                },
                "allow_duplicates": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "allow_duplicates",
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool"
                },
                "chroma_server_cors_allow_origins": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "chroma_server_grpc_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "chroma_server_host": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "chroma_server_http_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "chroma_server_http_port",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "chroma_server_ssl_enabled": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "collection_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "axiestudio",
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "limit": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "limit",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "5",
                  "name": "number_of_results",
                  "display_name": "Number of Results",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int"
                },
                "persist_directory": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "search_query",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "search_type": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Similarity",
                  "name": "search_type",
                  "display_name": "Search Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Chroma Vector Store with search capabilities",
              "icon": "Chroma",
              "base_classes": [
                "Data",
                "Retriever"
              ],
              "display_name": "Chroma DB",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "collection_name",
                "persist_directory",
                "search_query",
                "ingest_data",
                "embedding",
                "chroma_server_cors_allow_origins",
                "chroma_server_host",
                "chroma_server_http_port",
                "chroma_server_grpc_port",
                "chroma_server_ssl_enabled",
                "allow_duplicates",
                "search_type",
                "number_of_results",
                "limit"
              ],
              "beta": false,
              "edited": false
            },
            "id": "Chroma-U9y6l"
          },
          "selected": false,
          "width": 384,
          "height": 749,
          "positionAbsolute": {
            "x": 1158.785032038765,
            "y": 1047.1766922246597
          },
          "dragging": false
        },
        {
          "id": "ChatInput-K1BwK",
          "type": "genericNode",
          "position": {
            "x": 289.8355593453872,
            "y": 599.580954849465
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "hihi",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID for the message.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "input_value",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatInput-K1BwK"
          },
          "selected": false,
          "width": 384,
          "height": 309,
          "positionAbsolute": {
            "x": 289.8355593453872,
            "y": 599.580954849465
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-QvsKo",
          "type": "genericNode",
          "position": {
            "x": 2988.2637374801343,
            "y": 894.0137656531364
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "data_template",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "AI",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID for the message.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                }
              ],
              "field_order": [
                "input_value",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatOutput-QvsKo"
          },
          "selected": true,
          "width": 384,
          "height": 261,
          "positionAbsolute": {
            "x": 2988.2637374801343,
            "y": 894.0137656531364
          },
          "dragging": true
        },
        {
          "id": "ParseData-c8aS1",
          "type": "genericNode",
          "position": {
            "x": 1592.1345302077807,
            "y": 1460.2307095063504
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "data",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "\n",
                  "name": "sep",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Convert Data into plain text following a specified template.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ParseData-c8aS1"
          },
          "selected": false,
          "width": 384,
          "height": 385,
          "positionAbsolute": {
            "x": 1592.1345302077807,
            "y": 1460.2307095063504
          },
          "dragging": false
        },
        {
          "data": {
            "id": "groupComponent-PqmU7",
            "type": "GroupNode",
            "node": {
              "display_name": "Load File and Create Chunks",
              "documentation": "",
              "description": "",
              "template": {
                "path_File-K3ohz": {
                  "trace_as_metadata": true,
                  "file_path": "7c0b6414-2cff-431c-9c87-5ee1ceb99236/Faust_Goethe_engl.txt",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "path",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "proxy": {
                    "id": "File-K3ohz",
                    "field": "path"
                  }
                },
                "code_File-K3ohz": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "File-K3ohz",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "silent_errors_File-K3ohz": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "silent_errors",
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "proxy": {
                    "id": "File-K3ohz",
                    "field": "silent_errors"
                  }
                },
                "chunk_overlap_CharacterTextSplitter-Zr2KP": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-Zr2KP",
                    "field": "chunk_overlap"
                  }
                },
                "chunk_size_CharacterTextSplitter-Zr2KP": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-Zr2KP",
                    "field": "chunk_size"
                  }
                },
                "code_CharacterTextSplitter-Zr2KP": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "CharacterTextSplitter-Zr2KP",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "separator_CharacterTextSplitter-Zr2KP": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": " ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "proxy": {
                    "id": "CharacterTextSplitter-Zr2KP",
                    "field": "separator"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "File-K3ohz",
                      "type": "genericNode",
                      "position": {
                        "x": -272.1551030828084,
                        "y": 1007.5272782240486
                      },
                      "data": {
                        "type": "File",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "path": {
                              "trace_as_metadata": true,
                              "file_path": "7c0b6414-2cff-431c-9c87-5ee1ceb99236/Faust_Goethe_engl.txt",
                              "fileTypes": [
                                "txt",
                                "md",
                                "mdx",
                                "csv",
                                "json",
                                "yaml",
                                "yml",
                                "xml",
                                "html",
                                "htm",
                                "pdf",
                                "docx",
                                "py",
                                "sh",
                                "sql",
                                "js",
                                "ts",
                                "tsx"
                              ],
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "path",
                              "display_name": "Path",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                              "title_case": false,
                              "type": "file"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "silent_errors": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": false,
                              "name": "silent_errors",
                              "display_name": "Silent Errors",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If true, errors will not raise an exception.",
                              "title_case": false,
                              "type": "bool"
                            }
                          },
                          "description": "A generic file loader.",
                          "icon": "file-text",
                          "base_classes": [
                            "Data"
                          ],
                          "display_name": "File",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "data",
                              "display_name": "Data",
                              "method": "load_file",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "path",
                            "silent_errors"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "File-K3ohz"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 301,
                      "positionAbsolute": {
                        "x": -272.1551030828084,
                        "y": 1007.5272782240486
                      },
                      "dragging": false
                    },
                    {
                      "id": "CharacterTextSplitter-Zr2KP",
                      "type": "genericNode",
                      "position": {
                        "x": 296.4739525406844,
                        "y": 921.0144803062999
                      },
                      "data": {
                        "type": "CharacterTextSplitter",
                        "node": {
                          "template": {
                            "_type": "CustomComponent",
                            "inputs": {
                              "type": "Data",
                              "required": true,
                              "placeholder": "",
                              "list": true,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "inputs",
                              "display_name": "Input",
                              "advanced": false,
                              "input_types": [
                                "Document",
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "chunk_overlap": {
                              "type": "int",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": 200,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "chunk_overlap",
                              "display_name": "Chunk Overlap",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "chunk_size": {
                              "type": "int",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": 1000,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "chunk_size",
                              "display_name": "Chunk Size",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass CharacterTextSplitterComponent(CustomComponent):\n    display_name = \"CharacterTextSplitter\"\n    description = \"Splitting text that looks at characters.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Data\"]},\n            \"chunk_overlap\": {\"display_name\": \"Chunk Overlap\", \"default\": 200},\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"default\": 1000},\n            \"separator\": {\"display_name\": \"Separator\", \"default\": \"\\n\"},\n        }\n\n    def build(\n        self,\n        inputs: List[Data],\n        chunk_overlap: int = 200,\n        chunk_size: int = 1000,\n        separator: str = \"\\n\",\n    ) -> List[Data]:\n        # separator may come escaped from the frontend\n        separator = unescape_string(separator)\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = CharacterTextSplitter(\n            chunk_overlap=chunk_overlap,\n            chunk_size=chunk_size,\n            separator=separator,\n        ).split_documents(documents)\n        data = self.to_data(docs)\n        self.status = data\n        return data\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "separator": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": " ",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "separator",
                              "display_name": "Separator",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "input_types": [
                                "Text"
                              ]
                            }
                          },
                          "description": "Splitting text that looks at characters.",
                          "base_classes": [
                            "Data"
                          ],
                          "display_name": "CharacterTextSplitter",
                          "documentation": "",
                          "custom_fields": {
                            "inputs": null,
                            "chunk_overlap": null,
                            "chunk_size": null,
                            "separator": null
                          },
                          "output_types": [
                            "Data"
                          ],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "data",
                              "hidden": false,
                              "display_name": "Data",
                              "method": null,
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [],
                          "beta": false,
                          "edited": false
                        },
                        "id": "CharacterTextSplitter-Zr2KP"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 529,
                      "positionAbsolute": {
                        "x": 296.4739525406844,
                        "y": 921.0144803062999
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "File-K3ohz",
                      "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-K3ohzœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                      "target": "CharacterTextSplitter-Zr2KP",
                      "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-Zr2KPœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "inputs",
                          "id": "CharacterTextSplitter-Zr2KP",
                          "inputTypes": [
                            "Document",
                            "Data"
                          ],
                          "type": "Data"
                        },
                        "sourceHandle": {
                          "dataType": "File",
                          "id": "File-K3ohz",
                          "name": "data",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-File-K3ohz{œdataTypeœ:œFileœ,œidœ:œFile-K3ohzœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-CharacterTextSplitter-Zr2KP{œfieldNameœ:œinputsœ,œidœ:œCharacterTextSplitter-Zr2KPœ,œinputTypesœ:[œDocumentœ,œDataœ],œtypeœ:œDataœ}",
                      "className": "",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Awesome Engelbart",
                "description": "",
                "id": "DWNRV"
              },
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "CharacterTextSplitter-Zr2KP_data",
                  "hidden": false,
                  "display_name": "Data",
                  "method": null,
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "CharacterTextSplitter-Zr2KP",
                    "name": "data",
                    "nodeDisplayName": "CharacterTextSplitter"
                  }
                }
              ]
            }
          },
          "id": "groupComponent-PqmU7",
          "position": {
            "x": 300.1211847457156,
            "y": 956.182065781557
          },
          "type": "genericNode",
          "width": 384,
          "height": 559,
          "selected": false,
          "positionAbsolute": {
            "x": 300.1211847457156,
            "y": 956.182065781557
          },
          "dragging": false
        },
        {
          "id": "OllamaModel-z5pRS",
          "type": "genericNode",
          "position": {
            "x": 2548.2322839713506,
            "y": 400.59614315247813
          },
          "data": {
            "type": "OllamaModel",
            "node": {
              "template": {
                "_type": "Component",
                "base_url": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "http://localhost:11434",
                  "name": "base_url",
                  "display_name": "Base URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                  "title_case": false,
                  "type": "str"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageInput, Output, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\n\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, url: str) -> list[str]:\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model Name\",\n            value=\"llama2\",\n            info=\"Refer to https://ollama.ai/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=STREAM_INFO_TEXT,\n        ),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text_output\", method=\"text_response\"),\n        Output(display_name=\"Language Model\", name=\"model_output\", method=\"build_model\"),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code"
                },
                "format": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "format",
                  "display_name": "Format",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Specify the format of the output (e.g., json).",
                  "title_case": false,
                  "type": "str"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "metadata": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Metadata to add to the run trace.",
                  "title_case": false,
                  "type": "dict"
                },
                "mirostat": {
                  "trace_as_metadata": true,
                  "options": [
                    "Disabled",
                    "Mirostat",
                    "Mirostat 2.0"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Disabled",
                  "name": "mirostat",
                  "display_name": "Mirostat",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                  "title_case": false,
                  "type": "str"
                },
                "mirostat_eta": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "mirostat_eta",
                  "display_name": "Mirostat Eta",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                  "title_case": false,
                  "type": "float"
                },
                "mirostat_tau": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "mirostat_tau",
                  "display_name": "Mirostat Tau",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                  "title_case": false,
                  "type": "float"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "dolphin-llama3:latest",
                    "dolphin-mistral:latest",
                    "llama3:latest",
                    "mxbai-embed-large:latest",
                    "phi3:latest",
                    "marjo/llama-3-smaug:8B-Q4_K_M"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "llama3:latest",
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Refer to https://ollama.ai/library for more models.",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str"
                },
                "num_ctx": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "num_ctx",
                  "display_name": "Context Window Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Size of the context window for generating tokens. (Default: 2048)",
                  "title_case": false,
                  "type": "int"
                },
                "num_gpu": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "num_gpu",
                  "display_name": "Number of GPUs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                  "title_case": false,
                  "type": "int"
                },
                "num_thread": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "num_thread",
                  "display_name": "Number of Threads",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                  "title_case": false,
                  "type": "int"
                },
                "repeat_last_n": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "repeat_last_n",
                  "display_name": "Repeat Last N",
                  "advanced": true,
                  "dynamic": false,
                  "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                  "title_case": false,
                  "type": "int"
                },
                "repeat_penalty": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "repeat_penalty",
                  "display_name": "Repeat Penalty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                  "title_case": false,
                  "type": "float"
                },
                "stop_tokens": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "stop_tokens",
                  "display_name": "Stop Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                  "title_case": false,
                  "type": "str"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool"
                },
                "system": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system",
                  "display_name": "System",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System to use for generating text.",
                  "title_case": false,
                  "type": "str"
                },
                "system_message": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str"
                },
                "tags": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "tags",
                  "display_name": "Tags",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Comma-separated list of tags to add to the run trace.",
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0.2,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Controls the creativity of model responses.",
                  "title_case": false,
                  "type": "float"
                },
                "template": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to use for generating text.",
                  "title_case": false,
                  "type": "str"
                },
                "tfs_z": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "tfs_z",
                  "display_name": "TFS Z",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Tail free sampling value. (Default: 1)",
                  "title_case": false,
                  "type": "float"
                },
                "timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "timeout",
                  "display_name": "Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Timeout for the request stream.",
                  "title_case": false,
                  "type": "int"
                },
                "top_k": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "top_k",
                  "display_name": "Top K",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limits token selection to top K. (Default: 40)",
                  "title_case": false,
                  "type": "int"
                },
                "top_p": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "top_p",
                  "display_name": "Top P",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Works together with top-k. (Default: 0.9)",
                  "title_case": false,
                  "type": "float"
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "verbose",
                  "display_name": "Verbose",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Whether to print out response text.",
                  "title_case": false,
                  "type": "bool"
                }
              },
              "description": "Generate text using Ollama Local LLMs.",
              "icon": "Ollama",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Ollama",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                }
              ],
              "field_order": [
                "base_url",
                "model",
                "temperature",
                "format",
                "metadata",
                "mirostat",
                "mirostat_eta",
                "mirostat_tau",
                "num_ctx",
                "num_gpu",
                "num_thread",
                "repeat_last_n",
                "repeat_penalty",
                "tfs_z",
                "timeout",
                "top_k",
                "top_p",
                "verbose",
                "tags",
                "stop_tokens",
                "system",
                "template",
                "input_value",
                "stream",
                "system_message"
              ],
              "beta": false,
              "edited": false
            },
            "id": "OllamaModel-z5pRS"
          },
          "selected": true,
          "width": 384,
          "height": 731,
          "positionAbsolute": {
            "x": 2548.2322839713506,
            "y": 400.59614315247813
          },
          "dragging": true
        },
        {
          "data": {
            "id": "GroupNode-dPkdX",
            "type": "GroupNode",
            "node": {
              "display_name": "Prompt with History",
              "documentation": "",
              "description": "",
              "template": {
                "code_PromptComponent-KYRBR": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "PromptComponent-KYRBR",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "template_PromptComponent-KYRBR": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "proxy": {
                    "id": "PromptComponent-KYRBR",
                    "field": "template"
                  }
                },
                "context_PromptComponent-KYRBR": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context",
                  "display_name": "context",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "PromptComponent-KYRBR",
                    "field": "context"
                  }
                },
                "question_PromptComponent-KYRBR": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "question",
                  "display_name": "question",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "PromptComponent-KYRBR",
                    "field": "question"
                  }
                },
                "code_Memory-iGzuM": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "n_messages_Memory-iGzuM": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 100,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "title_case": false,
                  "type": "int",
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "field": "n_messages"
                  }
                },
                "order_Memory-iGzuM": {
                  "trace_as_metadata": true,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Ascending",
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "field": "order"
                  }
                },
                "sender_Memory-iGzuM": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine and User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "field": "sender"
                  }
                },
                "sender_name_Memory-iGzuM": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "field": "sender_name"
                  }
                },
                "session_id_Memory-iGzuM": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "field": "session_id"
                  }
                },
                "template_Memory-iGzuM": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{sender_name}: {text}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "field": "template"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "PromptComponent-KYRBR",
                      "type": "genericNode",
                      "position": {
                        "x": 2142.4742006664223,
                        "y": 378.36552030200767
                      },
                      "data": {
                        "type": "PromptComponent",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "template": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                              "name": "template",
                              "display_name": "Template",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "prompt"
                            },
                            "context": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "context",
                              "display_name": "context",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "history": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "history",
                              "display_name": "history",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "question": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "question",
                              "display_name": "question",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Create a prompt template with dynamic variables.",
                          "icon": "prompts",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "Prompt",
                          "documentation": "",
                          "custom_fields": {
                            "template": [
                              "context",
                              "history",
                              "question"
                            ]
                          },
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "prompt",
                              "display_name": "Prompt Message",
                              "method": "build_prompt",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "template"
                          ],
                          "beta": false,
                          "edited": true
                        },
                        "id": "PromptComponent-KYRBR",
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "edited": false
                      },
                      "selected": true,
                      "width": 384,
                      "height": 611,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": 2142.4742006664223,
                        "y": 378.36552030200767
                      }
                    },
                    {
                      "id": "Memory-iGzuM",
                      "type": "genericNode",
                      "position": {
                        "x": 1606.6943944782909,
                        "y": 546.1947858575902
                      },
                      "data": {
                        "type": "Memory",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false
                            },
                            "n_messages": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": 100,
                              "name": "n_messages",
                              "display_name": "Number of Messages",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of messages to retrieve.",
                              "title_case": false,
                              "type": "int"
                            },
                            "order": {
                              "trace_as_metadata": true,
                              "options": [
                                "Ascending",
                                "Descending"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Ascending",
                              "name": "order",
                              "display_name": "Order",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Order of the messages.",
                              "title_case": false,
                              "type": "str"
                            },
                            "sender": {
                              "trace_as_metadata": true,
                              "options": [
                                "Machine",
                                "User",
                                "Machine and User"
                              ],
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "Machine and User",
                              "name": "sender",
                              "display_name": "Sender Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Type of sender.",
                              "title_case": false,
                              "type": "str"
                            },
                            "sender_name": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "sender_name",
                              "display_name": "Sender Name",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "Name of the sender.",
                              "title_case": false,
                              "type": "str"
                            },
                            "session_id": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "",
                              "name": "session_id",
                              "display_name": "Session ID",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "Session ID of the chat history.",
                              "title_case": false,
                              "type": "str"
                            },
                            "template": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "value": "{sender_name}: {text}",
                              "name": "template",
                              "display_name": "Template",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Retrieves stored chat messages.",
                          "icon": "message-square-more",
                          "base_classes": [
                            "Data",
                            "Message"
                          ],
                          "display_name": "Chat Memory",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "messages",
                              "display_name": "Chat History",
                              "method": "retrieve_messages",
                              "value": "__UNDEFINED__",
                              "cache": true
                            },
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "messages_text",
                              "display_name": "Messages (Text)",
                              "method": "retrieve_messages_as_text",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "hidden": false
                            }
                          ],
                          "field_order": [
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order",
                            "template"
                          ],
                          "beta": false,
                          "edited": false
                        },
                        "id": "Memory-iGzuM"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 267,
                      "positionAbsolute": {
                        "x": 1606.6943944782909,
                        "y": 546.1947858575902
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "Memory-iGzuM",
                      "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-iGzuMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "PromptComponent-KYRBR",
                      "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-KYRBRœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "history",
                          "id": "PromptComponent-KYRBR",
                          "inputTypes": [
                            "Message",
                            "Text"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "Memory",
                          "id": "Memory-iGzuM",
                          "name": "messages_text",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Memory-iGzuM{œdataTypeœ:œMemoryœ,œidœ:œMemory-iGzuMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-PromptComponent-KYRBR{œfieldNameœ:œhistoryœ,œidœ:œPromptComponent-KYRBRœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                      "className": "",
                      "selected": true
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Jubilant Stonebraker",
                "description": "",
                "id": "1lfTQ"
              },
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "PromptComponent-KYRBR_prompt",
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false,
                  "proxy": {
                    "id": "PromptComponent-KYRBR",
                    "name": "prompt",
                    "nodeDisplayName": "Prompt"
                  }
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "Memory-iGzuM_messages",
                  "display_name": "Chat History",
                  "method": "retrieve_messages",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "Memory-iGzuM",
                    "name": "messages",
                    "nodeDisplayName": "Chat Memory"
                  },
                  "hidden": true
                }
              ]
            }
          },
          "id": "GroupNode-dPkdX",
          "position": {
            "x": 2039.5960926381504,
            "y": 502.72422049788577
          },
          "type": "genericNode",
          "width": 384,
          "height": 481,
          "selected": true,
          "positionAbsolute": {
            "x": 2039.5960926381504,
            "y": 502.72422049788577
          },
          "dragging": true
        },
        {
          "id": "OllamaEmbeddings-LTBSM",
          "type": "genericNode",
          "position": {
            "x": 294.68884743555793,
            "y": 1534.6477935556306
          },
          "data": {
            "type": "OllamaEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "base_url": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "http://localhost:11434",
                  "name": "base_url",
                  "display_name": "Ollama Base URL",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.embeddings import OllamaEmbeddings\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import FloatInput, MessageTextInput, Output\n\n\nclass OllamaEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    icon = \"Ollama\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"model\",\n            display_name=\"Ollama Model\",\n            value=\"llama2\",\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Ollama Base URL\",\n            value=\"http://localhost:11434\",\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Model Temperature\",\n            value=0.1,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(\n                model=self.model,\n                base_url=self.base_url,\n                temperature=self.temperature,\n            )  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama API.\") from e\n        return output\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "llama3:latest",
                  "name": "model",
                  "display_name": "Ollama Model",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0.1,
                  "name": "temperature",
                  "display_name": "Model Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float"
                }
              },
              "description": "Generate embeddings using Ollama models.",
              "icon": "Ollama",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "Ollama Embeddings",
              "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "model",
                "base_url",
                "temperature"
              ],
              "beta": false,
              "edited": false
            },
            "id": "OllamaEmbeddings-LTBSM"
          },
          "selected": false,
          "width": 384,
          "height": 497,
          "dragging": false,
          "positionAbsolute": {
            "x": 294.68884743555793,
            "y": 1534.6477935556306
          }
        }
      ],
      "edges": [
        {
          "source": "ChatInput-K1BwK",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Chroma-U9y6l",
          "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "search_query",
              "id": "Chroma-U9y6l",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-K1BwK",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-K1BwK{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Chroma-U9y6l{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Chroma-U9y6l",
          "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-U9y6lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-c8aS1",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-c8aS1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-c8aS1",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "Chroma",
              "id": "Chroma-U9y6l",
              "name": "search_results",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-Chroma-U9y6l{œdataTypeœ:œChromaœ,œidœ:œChroma-U9y6lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-c8aS1{œfieldNameœ:œdataœ,œidœ:œParseData-c8aS1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
        },
        {
          "source": "groupComponent-PqmU7",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-PqmU7œ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}",
          "target": "Chroma-U9y6l",
          "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ingest_data",
              "id": "Chroma-U9y6l",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "groupComponent-PqmU7",
              "name": "CharacterTextSplitter-Zr2KP_data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-groupComponent-PqmU7{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-PqmU7œ,œnameœ:œCharacterTextSplitter-Zr2KP_dataœ,œoutput_typesœ:[œDataœ]}-Chroma-U9y6l{œfieldNameœ:œingest_dataœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
        },
        {
          "source": "GroupNode-dPkdX",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-dPkdXœ,œnameœ:œPromptComponent-KYRBR_promptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "OllamaModel-z5pRS",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-z5pRSœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OllamaModel-z5pRS",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "GroupNode-dPkdX",
              "name": "PromptComponent-KYRBR_prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-GroupNode-dPkdX{œdataTypeœ:œGroupNodeœ,œidœ:œGroupNode-dPkdXœ,œnameœ:œPromptComponent-KYRBR_promptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-z5pRS{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-z5pRSœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "selected": true
        },
        {
          "source": "OllamaModel-z5pRS",
          "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-z5pRSœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-QvsKo",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-QvsKoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-QvsKo",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "OllamaModel",
              "id": "OllamaModel-z5pRS",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-OllamaModel-z5pRS{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-z5pRSœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-QvsKo{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-QvsKoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "selected": true
        },
        {
          "source": "ParseData-c8aS1",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-c8aS1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "GroupNode-dPkdX",
          "targetHandle": "{œfieldNameœ:œcontext_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œcontextœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "context_PromptComponent-KYRBR",
              "id": "GroupNode-dPkdX",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "context",
                "id": "PromptComponent-KYRBR"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-c8aS1",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-c8aS1{œdataTypeœ:œParseDataœ,œidœ:œParseData-c8aS1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-GroupNode-dPkdX{œfieldNameœ:œcontext_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œcontextœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
          "selected": true
        },
        {
          "source": "ChatInput-K1BwK",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "GroupNode-dPkdX",
          "targetHandle": "{œfieldNameœ:œquestion_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œquestionœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "question_PromptComponent-KYRBR",
              "id": "GroupNode-dPkdX",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "question",
                "id": "PromptComponent-KYRBR"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-K1BwK",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-K1BwK{œdataTypeœ:œChatInputœ,œidœ:œChatInput-K1BwKœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-GroupNode-dPkdX{œfieldNameœ:œquestion_PromptComponent-KYRBRœ,œidœ:œGroupNode-dPkdXœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œquestionœ,œidœ:œPromptComponent-KYRBRœ},œtypeœ:œstrœ}",
          "selected": true
        },
        {
          "source": "OllamaEmbeddings-LTBSM",
          "sourceHandle": "{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-LTBSMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Chroma-U9y6l",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-U9y6l",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OllamaEmbeddings",
              "id": "OllamaEmbeddings-LTBSM",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-OllamaEmbeddings-LTBSM{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-LTBSMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-U9y6l{œfieldNameœ:œembeddingœ,œidœ:œChroma-U9y6lœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
        }
      ],
      "viewport": {
        "x": -122.15826587694573,
        "y": -143.04542569987996,
        "zoom": 0.6181376304604791
      }
    },
    "date_created": "2024-06-27T14:59:21.683Z",
    "date_updated": "2024-06-27T15:02:33.226Z",
    "status": "Public",
    "sort": null,
    "user_updated": "faceac4f-b872-43da-b2cf-9b78d0e65456",
    "user_created": {
      "username": "daniel156161",
      "first_name": "Daniel",
      "last_name": "D",
      "id": "faceac4f-b872-43da-b2cf-9b78d0e65456"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Vector Store",
          "id": "cd614b49-dd57-4c8b-a5eb-f8bb5f957b9a"
        }
      },
      {
        "tags_id": {
          "name": "Memory",
          "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:06.224Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 120,
    "converter_version": "1.0.0"
  }
}