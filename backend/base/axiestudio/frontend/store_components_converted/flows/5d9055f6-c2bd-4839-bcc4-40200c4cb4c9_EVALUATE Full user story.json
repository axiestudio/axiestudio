{
  "id": "5d9055f6-c2bd-4839-bcc4-40200c4cb4c9",
  "name": "[EVALUATE] Full user story",
  "description": "Evaluate user story (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "wiresky",
    "first_name": "Nguyen",
    "last_name": "Nam",
    "id": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "full_name": "Nguyen Nam"
  },
  "store_url": "https://www.langflow.store/store/component/5d9055f6-c2bd-4839-bcc4-40200c4cb4c9",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-24T05:03:39.189Z",
    "updated": "2024-06-17T02:55:34.770Z",
    "downloaded": "2025-08-19T17:50:05.446Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CustomComponent-3KFDD",
        "type": "genericNode",
        "position": {
          "x": 20.5825093749433,
          "y": 546.2985166783319
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Unknowns"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_unknowns_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-3KFDD"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 20.5825093749433,
          "y": 546.2985166783319
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-zcasf",
        "type": "genericNode",
        "position": {
          "x": 119.96296607479042,
          "y": 598.7135178843055
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Title"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_title_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-zcasf"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 119.96296607479042,
          "y": 598.7135178843055
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-tepcl",
        "type": "genericNode",
        "position": {
          "x": 220.10924734606738,
          "y": 649.6174922320399
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Description"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_description_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-tepcl"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 220.10924734606738,
          "y": 649.6174922320399
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-6J5bQ",
        "type": "genericNode",
        "position": {
          "x": 336.34958054248864,
          "y": 690.8973699877359
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Acceptance criteria"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_acceptanceCriteria_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-6J5bQ"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 336.34958054248864,
          "y": 690.8973699877359
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-n6oDp",
        "type": "genericNode",
        "position": {
          "x": 439.8610112483789,
          "y": 719.3962904699799
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "In-scope"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_inScope_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-n6oDp"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 439.8610112483789,
          "y": 719.3962904699799
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-KKPls",
        "type": "genericNode",
        "position": {
          "x": 539.9203622344053,
          "y": 775.5869130377091
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Out-of-scope"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_outOfScope_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-KKPls",
          "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
          "display_name": "FieldExistenceScorer"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 539.9203622344053,
          "y": 775.5869130377091
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-frdpU",
        "type": "genericNode",
        "position": {
          "x": 652.700867895213,
          "y": 816.8381677889607
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Summary"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_userGoal_fieldExistence"
              },
              "_type": "CustomComponent"
            },
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "base_classes": [
              "Any"
            ],
            "display_name": "FieldExistenceScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-frdpU",
          "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
          "display_name": "FieldExistenceScorer"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 652.700867895213,
          "y": 816.8381677889607
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-gLHg6",
        "type": "genericNode",
        "position": {
          "x": -80.8815640569386,
          "y": 1301.6502376962123
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Title"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_title_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-gLHg6",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": -80.8815640569386,
          "y": 1301.6502376962123
        },
        "dragging": false
      },
      {
        "id": "OpenAIEmbeddings-qB84e",
        "type": "genericNode",
        "position": {
          "x": -748.303522539201,
          "y": 1185.6378227263413
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "allowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "allowed_special",
                "display_name": "Allowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "client",
                "display_name": "Client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "default_headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_headers",
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "default_query": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_query",
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "deployment",
                "display_name": "Deployment",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "disallowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [
                  "all"
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "disallowed_special",
                "display_name": "Disallowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding_ctx_length": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 8191,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding_ctx_length",
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 6,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_version": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_organization": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_proxy": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "show_progress_bar": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "show_progress_bar",
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "skip_empty": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "skip_empty",
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_enable": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_enable",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_model_name",
                "display_name": "TikToken Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "OpenAI embedding models",
            "base_classes": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "display_name": "OpenAIEmbeddings",
            "documentation": "",
            "custom_fields": {
              "default_headers": null,
              "default_query": null,
              "allowed_special": null,
              "disallowed_special": null,
              "chunk_size": null,
              "client": null,
              "deployment": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "output_types": [
              "OpenAIEmbeddings",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIEmbeddings-qB84e"
        },
        "selected": false,
        "width": 384,
        "height": 635,
        "positionAbsolute": {
          "x": -748.303522539201,
          "y": 1185.6378227263413
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-J4IcE",
        "type": "genericNode",
        "position": {
          "x": 1151.2999686265784,
          "y": 1453.6682427703602
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Description"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_description_comprehesion"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-J4IcE"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 1151.2999686265784,
          "y": 1453.6682427703602
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-6nLRU",
        "type": "genericNode",
        "position": {
          "x": 1217.5200005577237,
          "y": 1521.529723800098
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Title"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_title_comprehesion"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-6nLRU"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 1217.5200005577237,
          "y": 1521.529723800098
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-NLVpM",
        "type": "genericNode",
        "position": {
          "x": 1276.0218396926139,
          "y": 1578.4219139300794
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Acceptance criteria"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_acceptanceCriteria_comprehesion"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-NLVpM"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 1276.0218396926139,
          "y": 1578.4219139300794
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-Ndkss",
        "type": "genericNode",
        "position": {
          "x": 1362.4419018575443,
          "y": 1631.8680089950692
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Summary"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_userGoal_comprehesion"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-Ndkss"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 1362.4419018575443,
          "y": 1631.8680089950692
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-okqpE",
        "type": "genericNode",
        "position": {
          "x": 1436.051550862452,
          "y": 1671.9088974800477
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "In-scope"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_inScope_comprehesion"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-okqpE"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 1436.051550862452,
          "y": 1671.9088974800477
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-XBt7c",
        "type": "genericNode",
        "position": {
          "x": 1498.051550862452,
          "y": 1707.9088974800468
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Out-of-scope"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_outOfScope_comprehesion"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-XBt7c"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "dragging": false,
        "positionAbsolute": {
          "x": 1498.051550862452,
          "y": 1707.9088974800468
        }
      },
      {
        "id": "CustomComponent-CwBmo",
        "type": "genericNode",
        "position": {
          "x": 1588.051550862451,
          "y": 1755.9088974800463
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Unknowns"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_unknowns_comprehesion"
              },
              "_type": "CustomComponent"
            },
            "description": "Return Flesch reading ease score (Comprehension score)",
            "base_classes": [
              "Any"
            ],
            "display_name": "ComprehensionScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-CwBmo"
        },
        "selected": false,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 1588.051550862451,
          "y": 1755.9088974800463
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-S16vI",
        "type": "genericNode",
        "position": {
          "x": -28.887712612992573,
          "y": 1332.3121203256574
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Description"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_description_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-S16vI",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": -28.887712612992573,
          "y": 1332.3121203256574
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-N8SAH",
        "type": "genericNode",
        "position": {
          "x": 70.17349227267175,
          "y": 1405.1519007853751
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Summary"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_userGoal_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-N8SAH",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": 70.17349227267175,
          "y": 1405.1519007853751
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-Y2KYw",
        "type": "genericNode",
        "position": {
          "x": 125.34930463261867,
          "y": 1430.560531514645
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Unknowns"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_unknowns_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-Y2KYw",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": 125.34930463261867,
          "y": 1430.560531514645
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-N1y2Z",
        "type": "genericNode",
        "position": {
          "x": 202.19213896751353,
          "y": 1479.591964647664
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Acceptance criteria"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_acceptanceCriteria_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-N1y2Z",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": 202.19213896751353,
          "y": 1479.591964647664
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-nDoEi",
        "type": "genericNode",
        "position": {
          "x": 279.2951082082227,
          "y": 1522.4789023419735
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "In-scope"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_inScope_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-nDoEi",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": 279.2951082082227,
          "y": 1522.4789023419735
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-if5jL",
        "type": "genericNode",
        "position": {
          "x": 350.8774164105139,
          "y": 1611.5477606325348
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "embed_model": {
                "type": "OpenAIEmbeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embed_model",
                "display_name": "Embedding model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "field_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_name",
                "display_name": "Field name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "Out-of-scope"
              },
              "score_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "score_name",
                "display_name": "Score name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "userStory_outOfScope_relevancy"
              },
              "_type": "CustomComponent"
            },
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "base_classes": [
              "Any"
            ],
            "display_name": "RelevancyScorer",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "embed_model": null,
              "score_name": null,
              "field_name": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-if5jL",
          "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
          "display_name": "RelevancyScorer"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": 350.8774164105139,
          "y": 1611.5477606325348
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-XaqOb",
        "type": "genericNode",
        "position": {
          "x": 1619.8881342856546,
          "y": -284.10877991641894
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "content": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": " Business Analyst: Good morning, thank you for joining me today to discuss the digital transformation project focusing on our risk management platforms. Could you please provide an overview of the current state of our risk management systems and what challenges we are facing?  Stakeholder: Of course. Currently, our risk management platforms are fragmented and lack integration, leading to inefficiencies in data management and analysis. This results in a lack of real-time insights and hinders our ability to make informed decisions promptly.  Business Analyst: I see. In terms of the digital transformation project, what are the key objectives we aim to achieve by upgrading our risk management platforms?  Stakeholder: The primary objectives of this project include streamlining data integration across platforms, enhancing real-time monitoring and reporting capabilities, and improving overall risk assessment accuracy. Additionally, we aim to implement advanced analytics tools to better predict and mitigate potential risks.  Business Analyst: That sounds like a comprehensive approach. Could you elaborate on the specific features or functionalities you envision for the upgraded risk management platforms?  Stakeholder: Certainly. We are looking to implement automated data collection processes, customizable risk assessment templates, interactive dashboards for monitoring key metrics, and integration with external data sources for a holistic view of risks. Moreover, incorporating machine learning algorithms for risk prediction is a key feature we aim to introduce.  Business Analyst: How do you foresee the digital transformation project impacting our day-to-day operations and decision-making processes within the organization?  Stakeholder: The successful implementation of this project will significantly improve operational efficiency by reducing manual data entry tasks and providing real-time insights for proactive decision-making. This will enable us to respond swiftly to emerging risks and capitalize on opportunities more effectively.  Business Analyst: Lastly, what are the anticipated challenges or roadblocks we may encounter during the implementation phase of the digital transformation project for our risk management platforms?  Stakeholder: One of the main challenges we anticipate is resistance to change from employees accustomed to existing processes. Additionally, ensuring data security and compliance with regulatory requirements poses a significant hurdle that we must address proactively. Moreover, the integration of disparate systems and the scalability of the new platforms are areas that require careful consideration.  Business Analyst: Thank you for sharing your insights. I will incorporate these key points into the project plan and ensure that we address the identified challenges effectively to drive the successful digital transformation of our risk management platforms."
              },
              "_type": "CustomComponent"
            },
            "description": "Plain text placeholder, return text in Any type for better connection with custom components",
            "base_classes": [
              "Any"
            ],
            "display_name": "(INPUT) TextPlaceholderGeneric",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "content": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-XaqOb",
          "description": "Plain text placeholder, return text in Any type for better connection with custom components",
          "display_name": "(INPUT) TextPlaceholderGeneric"
        },
        "selected": false,
        "width": 384,
        "height": 395,
        "dragging": false,
        "positionAbsolute": {
          "x": 1619.8881342856546,
          "y": -284.10877991641894
        }
      },
      {
        "id": "CustomComponent-026ur",
        "type": "genericNode",
        "position": {
          "x": 1388.5383275780566,
          "y": 123.81438434085536
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "content": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": " {\"User story\": {\"Title\": \"Create interactive dashboards for real-time monitoring\", \"Description\": \"Design interactive dashboards that display key metrics and risk insights in real-time, facilitating proactive decision-making and monitoring.\", \"Summary\": {\"As a\": \"user\", \"I want to\": \"have access to interactive dashboards for real-time monitoring\", \"So that\": \"I can make proactive decisions based on key metrics and risk insights\"}, \"Acceptance criteria\": {\"Scenarios\": [{\"Scenario\": \"Creating interactive dashboards for real-time monitoring\", \"Given\": [\"The user is accessing the risk management platform\"], \"When\": [\"The user navigates to the dashboard section\"], \"Then\": [\"Key metrics and risk insights should be displayed in real-time\", \"The dashboard should be interactive allowing the user to drill down into specific data points\", \"Proactive decision-making should be facilitated by the real-time monitoring capabilities\"]}]}, \"In-scope\": [\"Design interactive dashboards for real-time monitoring\", \"Display key metrics on the interactive dashboards\", \"Show risk insights on the interactive dashboards\", \"Facilitate proactive decision-making through real-time monitoring\", \"Enable monitoring of risks through the interactive dashboards\"], \"Out-of-scope\": [\"Implement automated data collection processes\", \"Customizable risk assessment templates\", \"Integration with external data sources\", \"Incorporating machine learning algorithms for risk prediction\", \"Reducing manual data entry tasks\"], \"Unknowns\": [\"What specific key metrics and risk insights should be displayed on the interactive dashboards?\", \"How will the real-time data for monitoring be sourced and updated on the interactive dashboards?\", \"Will the interactive dashboards allow for customization of displayed metrics and insights?\", \"How will the interactive dashboards facilitate proactive decision-making?\", \"What level of interactivity is expected from the interactive dashboards?\"]}}"
              },
              "_type": "CustomComponent"
            },
            "description": "Plain text placeholder, return text in Any type for better connection with custom components",
            "base_classes": [
              "Any"
            ],
            "display_name": "(OUTPUT) TextPlaceholderGeneric",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "content": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-026ur",
          "description": "Plain text placeholder, return text in Any type for better connection with custom components",
          "display_name": "(OUTPUT) TextPlaceholderGeneric"
        },
        "selected": false,
        "width": 384,
        "height": 395,
        "dragging": false,
        "positionAbsolute": {
          "x": 1388.5383275780566,
          "y": 123.81438434085536
        }
      },
      {
        "id": "CustomComponent-8u3Nj",
        "type": "genericNode",
        "position": {
          "x": 2420.097452525942,
          "y": 45.85652713539662
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "batch_inp": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "batch_inp",
                "display_name": "Inputs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "batch_out": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "batch_out",
                "display_name": "Outputs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom typing import Optional, List\nimport numpy as np\nimport json\nfrom langfuse import Langfuse\n\nclass Evaluator(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"Evaluator\"\n    description = \"Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.\"\n    \n    def build_config(self):\n        return {\n            \"batch_inp\": {\"display_name\": \"Inputs\"},\n            \"batch_out\": {\"display_name\": \"Outputs\"},\n            \"dataset\": {\"display_name\": \"Dataset name\", \"required\": False},\n            \"experiment_name\": {\"display_name\": \"Experiment name\", \"required\": False},\n            \"trace_name\": {\"display_name\": \"Trace name\", \"required\": False},\n            \"field_validators\": {\"display_name\": \"Field validators\"},\n            \"scorers\": {\"display_name\": \"Scorers\"},\n            \"model_name\": {\"display_name\": \"Model name\", \"required\": False},\n            \"master_key\": {\"display_name\": \"Master key\", \"required\": False},\n            \"tags\": {\"display_name\": \"Tags\", \"required\": False}\n        }\n\n    def build(self, batch_inp: Any, batch_out: Any, \n                    field_validators: List[Any], \n                    scorers: List[Any], \n                    dataset: Optional[str]=None, \n                    experiment_name: Optional[str]=None, \n                    trace_name: Optional[str]=None, \n                    model_name: Optional[str]=None, \n                    master_key: Optional[str]=None,\n                    tags: Optional[List[str]]=None) -> Any:\n        \n        if (isinstance(batch_inp,str)):\n            if (batch_inp in ('',' ')):\n                raise ValueError(\"Input string must not be empty\")\n            batch_inp = [batch_inp]\n        if (isinstance(batch_out,str)):\n            if (batch_out in ('',' ')):\n                raise ValueError(\"Output string must not be empty\")\n            batch_out = [batch_out]\n        if (len(batch_inp)!=len(batch_out)):\n            raise ValueError(\"Inconsistent number of input and output instances encountered\")\n        if (len(batch_out)==0):\n            raise ValueError(\"Output list must not be empty\")\n        if (len(batch_inp)==0):\n            raise ValueError(\"Input list must not be empty\")\n            \n        field_check = {}\n        score_list = []\n        langfuse = Langfuse(\n            secret_key=os.environ.get('LANGFLOW_LANGFUSE_SECRET_KEY', ''),\n            public_key=os.environ.get('LANGFLOW_LANGFUSE_PUBLIC_KEY', ''),\n            host=os.environ.get('LANGFLOW_LANGFUSE_HOST', ''),\n        )\n\n        if (dataset is not None):\n            langfuse.create_dataset(name=dataset)\n        \n            # Add inputs to Langfuse dataset        \n            for inp in batch_inp:\n                langfuse.create_dataset_item(\n                    dataset_name=dataset,\n                    input = inp,\n                    expected_output='')\n                \n            inputs = langfuse.get_dataset(dataset).items\n            for item, out in zip(inputs, batch_out):\n                langfuse_generation = langfuse.generation(\n                    input=item.input,\n                    output=out,\n                    model=model_name,\n                    name=trace_name\n                    ) \n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                if (experiment_name is not None):\n                    item.link(langfuse_generation, experiment_name)\n                \n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=item.input)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=item.input)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='userStory_fullStory_JSONFormatCompliance', value=0)\n            \n        else:\n            for inp, out in zip(batch_inp, batch_out):\n\n                langfuse_generation = langfuse.generation(\n                    input=inp,\n                    output=out,\n                    name=trace_name,\n                    model=model_name\n                    )\n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=inp)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=inp)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='userStory_fullStory_JSONFormatCompliance', value=0)\n        return score_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "dataset": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "dataset",
                "display_name": "Dataset name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "experiment_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "experiment_name",
                "display_name": "Experiment name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "field_validators": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_validators",
                "display_name": "Field validators",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "master_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "master_key",
                "display_name": "Master key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "User story"
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_name",
                "display_name": "Model name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "gpt-3.5-turbo"
              },
              "scorers": {
                "type": "Any",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "scorers",
                "display_name": "Scorers",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tags": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tags",
                "display_name": "Tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": [
                  "User Story Extraction",
                  "Evaluation"
                ]
              },
              "trace_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "trace_name",
                "display_name": "Trace name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "User story evaluation"
              },
              "_type": "CustomComponent"
            },
            "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
            "base_classes": [
              "Data"
            ],
            "display_name": "Evaluator",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "batch_inp": null,
              "batch_out": null,
              "field_validators": null,
              "scorers": null,
              "dataset": null,
              "experiment_name": null,
              "trace_name": null,
              "model_name": null,
              "master_key": null,
              "tags": null
            },
            "output_types": [
              "Data"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CustomComponent-8u3Nj",
          "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
          "display_name": "Evaluator"
        },
        "selected": false,
        "width": 384,
        "height": 1119,
        "dragging": false,
        "positionAbsolute": {
          "x": 2420.097452525942,
          "y": 45.85652713539662
        }
      }
    ],
    "edges": [
      {
        "source": "OpenAIEmbeddings-qB84e",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
        "target": "CustomComponent-gLHg6",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-gLHg6œ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-gLHg6",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-qB84e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-gLHg6{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-gLHg6œ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "selected": false
      },
      {
        "source": "OpenAIEmbeddings-qB84e",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
        "target": "CustomComponent-S16vI",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-S16vIœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-S16vI",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-qB84e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-S16vI{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-S16vIœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
      },
      {
        "source": "OpenAIEmbeddings-qB84e",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
        "target": "CustomComponent-N8SAH",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N8SAHœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-N8SAH",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-qB84e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-N8SAH{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N8SAHœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
      },
      {
        "source": "OpenAIEmbeddings-qB84e",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
        "target": "CustomComponent-Y2KYw",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-Y2KYwœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-Y2KYw",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-qB84e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-Y2KYw{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-Y2KYwœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
      },
      {
        "source": "OpenAIEmbeddings-qB84e",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
        "target": "CustomComponent-N1y2Z",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N1y2Zœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-N1y2Z",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-qB84e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-N1y2Z{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N1y2Zœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
      },
      {
        "source": "OpenAIEmbeddings-qB84e",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
        "target": "CustomComponent-if5jL",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-if5jLœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-if5jL",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-qB84e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-if5jL{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-if5jLœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
      },
      {
        "source": "OpenAIEmbeddings-qB84e",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
        "target": "CustomComponent-nDoEi",
        "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-nDoEiœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embed_model",
            "id": "CustomComponent-nDoEi",
            "inputTypes": null,
            "type": "OpenAIEmbeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-qB84e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-nDoEi{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-nDoEiœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
      },
      {
        "source": "CustomComponent-XaqOb",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XaqObœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "batch_inp",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-XaqOb"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-XaqOb{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XaqObœ}-CustomComponent-8u3Nj{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-026ur",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-026urœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "batch_out",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-026ur"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-026ur{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-026urœ}-CustomComponent-8u3Nj{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-3KFDD",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3KFDDœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-3KFDD"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-3KFDD{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3KFDDœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-zcasf",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-zcasfœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-zcasf"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-zcasf{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-zcasfœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-tepcl",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tepclœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-tepcl"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-tepcl{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tepclœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-6J5bQ",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6J5bQœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-6J5bQ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-6J5bQ{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6J5bQœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-n6oDp",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-n6oDpœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-n6oDp"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-n6oDp{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-n6oDpœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-KKPls",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KKPlsœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-KKPls"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-KKPls{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KKPlsœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-frdpU",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-frdpUœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_validators",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-frdpU"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-frdpU{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-frdpUœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-gLHg6",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-gLHg6œ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-gLHg6"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-gLHg6{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-gLHg6œ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-S16vI",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-S16vIœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-S16vI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-S16vI{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-S16vIœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-N8SAH",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N8SAHœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-N8SAH"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-N8SAH{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N8SAHœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-Y2KYw",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Y2KYwœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-Y2KYw"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-Y2KYw{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Y2KYwœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-N1y2Z",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N1y2Zœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-N1y2Z"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-N1y2Z{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N1y2Zœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-nDoEi",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-nDoEiœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-nDoEi"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-nDoEi{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-nDoEiœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-if5jL",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-if5jLœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-if5jL"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-if5jL{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-if5jLœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-J4IcE",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-J4IcEœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-J4IcE"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-J4IcE{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-J4IcEœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-6nLRU",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6nLRUœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-6nLRU"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-6nLRU{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6nLRUœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-NLVpM",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-NLVpMœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-NLVpM"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-NLVpM{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-NLVpMœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-Ndkss",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Ndkssœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-Ndkss"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-Ndkss{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Ndkssœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-okqpE",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-okqpEœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-okqpE"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-okqpE{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-okqpEœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-XBt7c",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XBt7cœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-XBt7c"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-XBt7c{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XBt7cœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      },
      {
        "source": "CustomComponent-CwBmo",
        "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-CwBmoœ}",
        "target": "CustomComponent-8u3Nj",
        "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
        "data": {
          "targetHandle": {
            "fieldName": "scorers",
            "id": "CustomComponent-8u3Nj",
            "inputTypes": null,
            "type": "Any"
          },
          "sourceHandle": {
            "baseClasses": [
              "Any"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-CwBmo"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CustomComponent-CwBmo{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-CwBmoœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
      }
    ],
    "viewport": {
      "x": 226.1721930792208,
      "y": 121.95740182484758,
      "zoom": 0.32987697769322694
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 24
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "total": 25
  },
  "original": {
    "id": "5d9055f6-c2bd-4839-bcc4-40200c4cb4c9",
    "name": "[EVALUATE] Full user story",
    "description": "Evaluate user story",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "2",
    "metadata": {
      "CustomComponent": {
        "count": 24
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "total": 25
    },
    "last_tested_version": "0.6.18",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "CustomComponent-3KFDD",
          "type": "genericNode",
          "position": {
            "x": 20.5825093749433,
            "y": 546.2985166783319
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Unknowns"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_unknowns_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-3KFDD"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 20.5825093749433,
            "y": 546.2985166783319
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-zcasf",
          "type": "genericNode",
          "position": {
            "x": 119.96296607479042,
            "y": 598.7135178843055
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Title"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_title_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-zcasf"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 119.96296607479042,
            "y": 598.7135178843055
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-tepcl",
          "type": "genericNode",
          "position": {
            "x": 220.10924734606738,
            "y": 649.6174922320399
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Description"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_description_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-tepcl"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 220.10924734606738,
            "y": 649.6174922320399
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-6J5bQ",
          "type": "genericNode",
          "position": {
            "x": 336.34958054248864,
            "y": 690.8973699877359
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Acceptance criteria"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_acceptanceCriteria_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-6J5bQ"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 336.34958054248864,
            "y": 690.8973699877359
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-n6oDp",
          "type": "genericNode",
          "position": {
            "x": 439.8610112483789,
            "y": 719.3962904699799
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "In-scope"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_inScope_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-n6oDp"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 439.8610112483789,
            "y": 719.3962904699799
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-KKPls",
          "type": "genericNode",
          "position": {
            "x": 539.9203622344053,
            "y": 775.5869130377091
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Out-of-scope"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_outOfScope_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-KKPls",
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "display_name": "FieldExistenceScorer"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 539.9203622344053,
            "y": 775.5869130377091
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-frdpU",
          "type": "genericNode",
          "position": {
            "x": 652.700867895213,
            "y": 816.8381677889607
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import List, Any, Optional, Union\nimport json\nimport subprocess\n    \nclass FieldExistenceScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = 'FieldExistenceScorerComponent'\n    description = \"Return 0 if a field in the input dict is missing or empty, else return 1\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class FieldExistenceScorer(Scorer):\n        def __init__(self, score_name, field_name):\n            super().__init__(score_name)\n            self.field_name = field_name\n        \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            try:\n                if (isinstance(out, str)):\n                    out = json.loads(out)\n                if self.field_name not in out: # field is missing\n                    return 0\n                else:\n                    if out[self.field_name] in ('',' '): # is empty\n                        return 0\n                return 1\n            except json.JSONDecodeError:\n                return 0\n                \n    def build_config(self):\n        return {\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"}\n        }\n\n    def build(self, score_name: str, field_name: str) -> Any:\n        scorer = self.FieldExistenceScorer(score_name, field_name)\n        return scorer\n        \n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Summary"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_userGoal_fieldExistence"
                },
                "_type": "CustomComponent"
              },
              "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
              "base_classes": [
                "Any"
              ],
              "display_name": "FieldExistenceScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-frdpU",
            "description": "Return 0 if a field in the input dict is missing or empty, else return 1",
            "display_name": "FieldExistenceScorer"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 652.700867895213,
            "y": 816.8381677889607
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-gLHg6",
          "type": "genericNode",
          "position": {
            "x": -80.8815640569386,
            "y": 1301.6502376962123
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Title"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_title_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-gLHg6",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": -80.8815640569386,
            "y": 1301.6502376962123
          },
          "dragging": false
        },
        {
          "id": "OpenAIEmbeddings-qB84e",
          "type": "genericNode",
          "position": {
            "x": -748.303522539201,
            "y": 1185.6378227263413
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "allowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "allowed_special",
                  "display_name": "Allowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "client",
                  "display_name": "Client",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "default_headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_headers",
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "default_query": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_query",
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "deployment",
                  "display_name": "Deployment",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "disallowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [
                    "all"
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "disallowed_special",
                  "display_name": "Disallowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding_ctx_length": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 8191,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding_ctx_length",
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 6,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_type",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_version": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_version",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_organization": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_organization",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_proxy": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_proxy",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "show_progress_bar": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "show_progress_bar",
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "skip_empty": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "skip_empty",
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_enable": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_enable",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_model_name",
                  "display_name": "TikToken Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "OpenAI embedding models",
              "base_classes": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "display_name": "OpenAIEmbeddings",
              "documentation": "",
              "custom_fields": {
                "default_headers": null,
                "default_query": null,
                "allowed_special": null,
                "disallowed_special": null,
                "chunk_size": null,
                "client": null,
                "deployment": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "output_types": [
                "OpenAIEmbeddings",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIEmbeddings-qB84e"
          },
          "selected": false,
          "width": 384,
          "height": 635,
          "positionAbsolute": {
            "x": -748.303522539201,
            "y": 1185.6378227263413
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-J4IcE",
          "type": "genericNode",
          "position": {
            "x": 1151.2999686265784,
            "y": 1453.6682427703602
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Description"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_description_comprehesion"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-J4IcE"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 1151.2999686265784,
            "y": 1453.6682427703602
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-6nLRU",
          "type": "genericNode",
          "position": {
            "x": 1217.5200005577237,
            "y": 1521.529723800098
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Title"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_title_comprehesion"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-6nLRU"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 1217.5200005577237,
            "y": 1521.529723800098
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-NLVpM",
          "type": "genericNode",
          "position": {
            "x": 1276.0218396926139,
            "y": 1578.4219139300794
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Acceptance criteria"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_acceptanceCriteria_comprehesion"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-NLVpM"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 1276.0218396926139,
            "y": 1578.4219139300794
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-Ndkss",
          "type": "genericNode",
          "position": {
            "x": 1362.4419018575443,
            "y": 1631.8680089950692
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Summary"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_userGoal_comprehesion"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-Ndkss"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 1362.4419018575443,
            "y": 1631.8680089950692
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-okqpE",
          "type": "genericNode",
          "position": {
            "x": 1436.051550862452,
            "y": 1671.9088974800477
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "In-scope"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_inScope_comprehesion"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-okqpE"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 1436.051550862452,
            "y": 1671.9088974800477
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-XBt7c",
          "type": "genericNode",
          "position": {
            "x": 1498.051550862452,
            "y": 1707.9088974800468
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Out-of-scope"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_outOfScope_comprehesion"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-XBt7c"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "dragging": false,
          "positionAbsolute": {
            "x": 1498.051550862452,
            "y": 1707.9088974800468
          }
        },
        {
          "id": "CustomComponent-CwBmo",
          "type": "genericNode",
          "position": {
            "x": 1588.051550862451,
            "y": 1755.9088974800463
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import Data\r\nfrom typing import List, Any, Optional, Union\r\nimport json\r\nimport numpy as np\r\nimport textstat\r\n    \r\nclass ComprehensionScorerComponent(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = 'ComprehensionScorer'\r\n    description = \"Return Flesch reading ease score (Comprehension score)\"\r\n    \r\n    class Scorer:\r\n        def __init__(self, score_name):\r\n            self.score_name = score_name\r\n            \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            pass\r\n        \r\n    class ComprehensionScorer(Scorer):\r\n        def __init__(self, score_name, field_name):\r\n            super().__init__(score_name)\r\n            self.field_name = field_name\r\n        \r\n            \r\n        # calculate comprehension score\r\n        def calculate(self, text):\r\n            return textstat.flesch_reading_ease(text)\r\n        \r\n        # get all string values in a user story dict\r\n        def extract_end_strings(self, data): \r\n            end_strings = []\r\n        \r\n            if isinstance(data, dict):\r\n                for key, value in data.items():\r\n                    end_strings.extend(self.extract_end_strings(value))\r\n        \r\n            elif isinstance(data, list):\r\n                for item in data:\r\n                    end_strings.extend(self.extract_end_strings(item))\r\n        \r\n            elif isinstance(data, str):\r\n                end_strings.append(data)\r\n        \r\n            return end_strings\r\n        \r\n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\r\n            try:\r\n                if (isinstance(out, str)):\r\n                    out = json.loads(out)\r\n                if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\r\n                    output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\r\n                else:\r\n                    # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\r\n                    output_content = self.extract_end_strings(out[self.field_name])\r\n                \r\n                # Get the average readability score for all string values.\r\n                scores = [] \r\n                for content in output_content:\r\n                    scores.append(self.calculate(content))\r\n                return np.mean(scores)\r\n                \r\n            except json.JSONDecodeError:\r\n                return -1\r\n                \r\n    def build_config(self):\r\n        return {\r\n            \"score_name\": {\"display_name\": \"Score name\"},\r\n            \"field_name\": {\"display_name\": \"Field name\"}\r\n        }\r\n\r\n    def build(self, score_name: str, field_name: str) -> Any:\r\n        scorer = self.ComprehensionScorer(score_name, field_name)\r\n        return scorer\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Unknowns"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_unknowns_comprehesion"
                },
                "_type": "CustomComponent"
              },
              "description": "Return Flesch reading ease score (Comprehension score)",
              "base_classes": [
                "Any"
              ],
              "display_name": "ComprehensionScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-CwBmo"
          },
          "selected": false,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 1588.051550862451,
            "y": 1755.9088974800463
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-S16vI",
          "type": "genericNode",
          "position": {
            "x": -28.887712612992573,
            "y": 1332.3121203256574
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Description"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_description_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-S16vI",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": -28.887712612992573,
            "y": 1332.3121203256574
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-N8SAH",
          "type": "genericNode",
          "position": {
            "x": 70.17349227267175,
            "y": 1405.1519007853751
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Summary"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_userGoal_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-N8SAH",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": 70.17349227267175,
            "y": 1405.1519007853751
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-Y2KYw",
          "type": "genericNode",
          "position": {
            "x": 125.34930463261867,
            "y": 1430.560531514645
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Unknowns"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_unknowns_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-Y2KYw",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": 125.34930463261867,
            "y": 1430.560531514645
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-N1y2Z",
          "type": "genericNode",
          "position": {
            "x": 202.19213896751353,
            "y": 1479.591964647664
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Acceptance criteria"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_acceptanceCriteria_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-N1y2Z",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": 202.19213896751353,
            "y": 1479.591964647664
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-nDoEi",
          "type": "genericNode",
          "position": {
            "x": 279.2951082082227,
            "y": 1522.4789023419735
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "In-scope"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_inScope_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-nDoEi",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": 279.2951082082227,
            "y": 1522.4789023419735
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-if5jL",
          "type": "genericNode",
          "position": {
            "x": 350.8774164105139,
            "y": 1611.5477606325348
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "embed_model": {
                  "type": "OpenAIEmbeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embed_model",
                  "display_name": "Embedding model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom typing import Any, Union\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nimport numpy as np\nimport json\n\nclass RelevancyScorerComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description = \"Get cosine similarity score (relevancy) between the embedding vectors of two text input\"\n    display_name = \"RelevancyScorer\"\n    \n    class Scorer:\n        def __init__(self, score_name):\n            self.score_name = score_name\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            pass\n        \n    class RelevancyScorer(Scorer):\n        def __init__(self, score_name, field_name, embed_model):\n            super().__init__(score_name)\n            self.field_name = field_name\n            self.embed_model = embed_model\n        \n        def cosine_similarity(self, vec1, vec2):\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            similarity = dot_product / (norm1 * norm2)\n            return similarity\n        \n        def get_embedding(self, text: str):\n            return self.embed_model.embed_query(text)\n            \n        def calculate_relevancy(self, term1: Union[str, list], term2: Union[str, list]):\n            if (isinstance(term1, str)):\n                term1 = self.get_embedding(term1)\n            if (isinstance(term2, str)):\n                term2 = self.get_embedding(term2)\n            return self.cosine_similarity(term1, term2)\n\n        # get all string values in a user story dict\n        def extract_end_strings(self, data): \n            end_strings = []\n        \n            if isinstance(data, dict):\n                for key, value in data.items():\n                    end_strings.extend(self.extract_end_strings(value))\n        \n            elif isinstance(data, list):\n                for item in data:\n                    end_strings.extend(self.extract_end_strings(item))\n        \n            elif isinstance(data, str):\n                end_strings.append(data)\n        \n            return end_strings\n            \n        def get_score(self, out: Union[str,dict], inp: Optional[str] = None):\n            if (isinstance(out, str)):\n                out = json.loads(out)\n\n            if self.field_name==\"Summary\": # Form the user story summary fields to a whole sentence\n                output_content = [\"As a \" + out[self.field_name]['As a'] + \", I want to \" + out[self.field_name]['I want to'] + \" so that \" + out[self.field_name]['So that']]\n            else:\n                # A field may have a multiple string values (eg. acceptance criteria, scope items, unknowns, etc.). We extract all of them as a list\n                output_content = self.extract_end_strings(out[self.field_name])\n            \n            # Get the average relevancy score for all string values.\n            scores = [] \n            inp_emb = self.get_embedding(inp)\n            for content in output_content:\n                scores.append(self.calculate_relevancy(inp_emb, content))\n            return np.mean(scores)\n\n\n    \n    def build_config(self):\n        return {\n            \"embed_model\": {\"display_name\": \"Embedding model\"},\n            \"score_name\": {\"display_name\": \"Score name\"},\n            \"field_name\": {\"display_name\": \"Field name\"},\n        }\n\n    def build(self, embed_model: OpenAIEmbeddings, score_name: str, field_name: str) -> Any:\n        scorer = self.RelevancyScorer(score_name, field_name, embed_model)\n        return scorer\n        \n ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "field_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_name",
                  "display_name": "Field name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "Out-of-scope"
                },
                "score_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "score_name",
                  "display_name": "Score name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "userStory_outOfScope_relevancy"
                },
                "_type": "CustomComponent"
              },
              "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
              "base_classes": [
                "Any"
              ],
              "display_name": "RelevancyScorer",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "embed_model": null,
                "score_name": null,
                "field_name": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-if5jL",
            "description": "Get cosine similarity score (relevancy) between the embedding vectors of two text input",
            "display_name": "RelevancyScorer"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": 350.8774164105139,
            "y": 1611.5477606325348
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-XaqOb",
          "type": "genericNode",
          "position": {
            "x": 1619.8881342856546,
            "y": -284.10877991641894
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "content": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": " Business Analyst: Good morning, thank you for joining me today to discuss the digital transformation project focusing on our risk management platforms. Could you please provide an overview of the current state of our risk management systems and what challenges we are facing?  Stakeholder: Of course. Currently, our risk management platforms are fragmented and lack integration, leading to inefficiencies in data management and analysis. This results in a lack of real-time insights and hinders our ability to make informed decisions promptly.  Business Analyst: I see. In terms of the digital transformation project, what are the key objectives we aim to achieve by upgrading our risk management platforms?  Stakeholder: The primary objectives of this project include streamlining data integration across platforms, enhancing real-time monitoring and reporting capabilities, and improving overall risk assessment accuracy. Additionally, we aim to implement advanced analytics tools to better predict and mitigate potential risks.  Business Analyst: That sounds like a comprehensive approach. Could you elaborate on the specific features or functionalities you envision for the upgraded risk management platforms?  Stakeholder: Certainly. We are looking to implement automated data collection processes, customizable risk assessment templates, interactive dashboards for monitoring key metrics, and integration with external data sources for a holistic view of risks. Moreover, incorporating machine learning algorithms for risk prediction is a key feature we aim to introduce.  Business Analyst: How do you foresee the digital transformation project impacting our day-to-day operations and decision-making processes within the organization?  Stakeholder: The successful implementation of this project will significantly improve operational efficiency by reducing manual data entry tasks and providing real-time insights for proactive decision-making. This will enable us to respond swiftly to emerging risks and capitalize on opportunities more effectively.  Business Analyst: Lastly, what are the anticipated challenges or roadblocks we may encounter during the implementation phase of the digital transformation project for our risk management platforms?  Stakeholder: One of the main challenges we anticipate is resistance to change from employees accustomed to existing processes. Additionally, ensuring data security and compliance with regulatory requirements poses a significant hurdle that we must address proactively. Moreover, the integration of disparate systems and the scalability of the new platforms are areas that require careful consideration.  Business Analyst: Thank you for sharing your insights. I will incorporate these key points into the project plan and ensure that we address the identified challenges effectively to drive the successful digital transformation of our risk management platforms."
                },
                "_type": "CustomComponent"
              },
              "description": "Plain text placeholder, return text in Any type for better connection with custom components",
              "base_classes": [
                "Any"
              ],
              "display_name": "(INPUT) TextPlaceholderGeneric",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "content": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-XaqOb",
            "description": "Plain text placeholder, return text in Any type for better connection with custom components",
            "display_name": "(INPUT) TextPlaceholderGeneric"
          },
          "selected": false,
          "width": 384,
          "height": 395,
          "dragging": false,
          "positionAbsolute": {
            "x": 1619.8881342856546,
            "y": -284.10877991641894
          }
        },
        {
          "id": "CustomComponent-026ur",
          "type": "genericNode",
          "position": {
            "x": 1388.5383275780566,
            "y": 123.81438434085536
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom typing import Any\n\nclass TextPlaceholderGeneric(CustomComponent):\n    display_name: str = \"TextPlaceholderGeneric\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder, return text in Any type for better connection with custom components\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, content: str) -> Any:\n        return content\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "content": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": " {\"User story\": {\"Title\": \"Create interactive dashboards for real-time monitoring\", \"Description\": \"Design interactive dashboards that display key metrics and risk insights in real-time, facilitating proactive decision-making and monitoring.\", \"Summary\": {\"As a\": \"user\", \"I want to\": \"have access to interactive dashboards for real-time monitoring\", \"So that\": \"I can make proactive decisions based on key metrics and risk insights\"}, \"Acceptance criteria\": {\"Scenarios\": [{\"Scenario\": \"Creating interactive dashboards for real-time monitoring\", \"Given\": [\"The user is accessing the risk management platform\"], \"When\": [\"The user navigates to the dashboard section\"], \"Then\": [\"Key metrics and risk insights should be displayed in real-time\", \"The dashboard should be interactive allowing the user to drill down into specific data points\", \"Proactive decision-making should be facilitated by the real-time monitoring capabilities\"]}]}, \"In-scope\": [\"Design interactive dashboards for real-time monitoring\", \"Display key metrics on the interactive dashboards\", \"Show risk insights on the interactive dashboards\", \"Facilitate proactive decision-making through real-time monitoring\", \"Enable monitoring of risks through the interactive dashboards\"], \"Out-of-scope\": [\"Implement automated data collection processes\", \"Customizable risk assessment templates\", \"Integration with external data sources\", \"Incorporating machine learning algorithms for risk prediction\", \"Reducing manual data entry tasks\"], \"Unknowns\": [\"What specific key metrics and risk insights should be displayed on the interactive dashboards?\", \"How will the real-time data for monitoring be sourced and updated on the interactive dashboards?\", \"Will the interactive dashboards allow for customization of displayed metrics and insights?\", \"How will the interactive dashboards facilitate proactive decision-making?\", \"What level of interactivity is expected from the interactive dashboards?\"]}}"
                },
                "_type": "CustomComponent"
              },
              "description": "Plain text placeholder, return text in Any type for better connection with custom components",
              "base_classes": [
                "Any"
              ],
              "display_name": "(OUTPUT) TextPlaceholderGeneric",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "content": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-026ur",
            "description": "Plain text placeholder, return text in Any type for better connection with custom components",
            "display_name": "(OUTPUT) TextPlaceholderGeneric"
          },
          "selected": false,
          "width": 384,
          "height": 395,
          "dragging": false,
          "positionAbsolute": {
            "x": 1388.5383275780566,
            "y": 123.81438434085536
          }
        },
        {
          "id": "CustomComponent-8u3Nj",
          "type": "genericNode",
          "position": {
            "x": 2420.097452525942,
            "y": 45.85652713539662
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "batch_inp": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "batch_inp",
                  "display_name": "Inputs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "batch_out": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "batch_out",
                  "display_name": "Outputs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom typing import Optional, List\nimport numpy as np\nimport json\nfrom langfuse import Langfuse\n\nclass Evaluator(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"Evaluator\"\n    description = \"Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.\"\n    \n    def build_config(self):\n        return {\n            \"batch_inp\": {\"display_name\": \"Inputs\"},\n            \"batch_out\": {\"display_name\": \"Outputs\"},\n            \"dataset\": {\"display_name\": \"Dataset name\", \"required\": False},\n            \"experiment_name\": {\"display_name\": \"Experiment name\", \"required\": False},\n            \"trace_name\": {\"display_name\": \"Trace name\", \"required\": False},\n            \"field_validators\": {\"display_name\": \"Field validators\"},\n            \"scorers\": {\"display_name\": \"Scorers\"},\n            \"model_name\": {\"display_name\": \"Model name\", \"required\": False},\n            \"master_key\": {\"display_name\": \"Master key\", \"required\": False},\n            \"tags\": {\"display_name\": \"Tags\", \"required\": False}\n        }\n\n    def build(self, batch_inp: Any, batch_out: Any, \n                    field_validators: List[Any], \n                    scorers: List[Any], \n                    dataset: Optional[str]=None, \n                    experiment_name: Optional[str]=None, \n                    trace_name: Optional[str]=None, \n                    model_name: Optional[str]=None, \n                    master_key: Optional[str]=None,\n                    tags: Optional[List[str]]=None) -> Any:\n        \n        if (isinstance(batch_inp,str)):\n            if (batch_inp in ('',' ')):\n                raise ValueError(\"Input string must not be empty\")\n            batch_inp = [batch_inp]\n        if (isinstance(batch_out,str)):\n            if (batch_out in ('',' ')):\n                raise ValueError(\"Output string must not be empty\")\n            batch_out = [batch_out]\n        if (len(batch_inp)!=len(batch_out)):\n            raise ValueError(\"Inconsistent number of input and output instances encountered\")\n        if (len(batch_out)==0):\n            raise ValueError(\"Output list must not be empty\")\n        if (len(batch_inp)==0):\n            raise ValueError(\"Input list must not be empty\")\n            \n        field_check = {}\n        score_list = []\n        langfuse = Langfuse(\n            secret_key=os.environ.get('LANGFLOW_LANGFUSE_SECRET_KEY', ''),\n            public_key=os.environ.get('LANGFLOW_LANGFUSE_PUBLIC_KEY', ''),\n            host=os.environ.get('LANGFLOW_LANGFUSE_HOST', ''),\n        )\n\n        if (dataset is not None):\n            langfuse.create_dataset(name=dataset)\n        \n            # Add inputs to Langfuse dataset        \n            for inp in batch_inp:\n                langfuse.create_dataset_item(\n                    dataset_name=dataset,\n                    input = inp,\n                    expected_output='')\n                \n            inputs = langfuse.get_dataset(dataset).items\n            for item, out in zip(inputs, batch_out):\n                langfuse_generation = langfuse.generation(\n                    input=item.input,\n                    output=out,\n                    model=model_name,\n                    name=trace_name\n                    ) \n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                if (experiment_name is not None):\n                    item.link(langfuse_generation, experiment_name)\n                \n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=item.input)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=item.input)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='userStory_fullStory_JSONFormatCompliance', value=0)\n            \n        else:\n            for inp, out in zip(batch_inp, batch_out):\n\n                langfuse_generation = langfuse.generation(\n                    input=inp,\n                    output=out,\n                    name=trace_name,\n                    model=model_name\n                    )\n                langfuse.trace(id=langfuse_generation.trace_id, tags=tags)\n                try:\n                    out = json.loads(out)\n                    if (master_key is not None):\n                        out = out[master_key]\n                    if (not isinstance(out, list)):\n                        out = [out]\n                    for out_item in out:\n                        # Check if the fields are ready for evaluation\n                        for validator in field_validators:\n                            value = validator.get_score(out=out_item, inp=inp)\n                            langfuse_generation.score(name=validator.score_name, value=value)\n                            score_list.append((validator.score_name, value))\n                            field_check[validator.field_name] = value\n                            \n                        # Calculate scores\n                        for scorer in scorers:\n                            if (field_check[scorer.field_name]==1):\n                                value = scorer.get_score(out=out_item, inp=inp)\n                                langfuse_generation.score(name=scorer.score_name, value=value)\n                                score_list.append((scorer.score_name, value))\n                except json.JSONDecodeError:\n                    langfuse_generation.score(name='userStory_fullStory_JSONFormatCompliance', value=0)\n        return score_list\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "dataset": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "dataset",
                  "display_name": "Dataset name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "experiment_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "experiment_name",
                  "display_name": "Experiment name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "field_validators": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_validators",
                  "display_name": "Field validators",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "master_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "master_key",
                  "display_name": "Master key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "User story"
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_name",
                  "display_name": "Model name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "gpt-3.5-turbo"
                },
                "scorers": {
                  "type": "Any",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "scorers",
                  "display_name": "Scorers",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tags": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tags",
                  "display_name": "Tags",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": [
                    "User Story Extraction",
                    "Evaluation"
                  ]
                },
                "trace_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "trace_name",
                  "display_name": "Trace name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "User story evaluation"
                },
                "_type": "CustomComponent"
              },
              "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
              "base_classes": [
                "Data"
              ],
              "display_name": "Evaluator",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "batch_inp": null,
                "batch_out": null,
                "field_validators": null,
                "scorers": null,
                "dataset": null,
                "experiment_name": null,
                "trace_name": null,
                "model_name": null,
                "master_key": null,
                "tags": null
              },
              "output_types": [
                "Data"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CustomComponent-8u3Nj",
            "description": "Run evaluation on batchs of inputs and outputs. Save the scores to Langfuse generation instances. Save the input/output records to Langfuse dataset and experiment if wanted.",
            "display_name": "Evaluator"
          },
          "selected": false,
          "width": 384,
          "height": 1119,
          "dragging": false,
          "positionAbsolute": {
            "x": 2420.097452525942,
            "y": 45.85652713539662
          }
        }
      ],
      "edges": [
        {
          "source": "OpenAIEmbeddings-qB84e",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
          "target": "CustomComponent-gLHg6",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-gLHg6œ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-gLHg6",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-qB84e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-gLHg6{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-gLHg6œ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "selected": false
        },
        {
          "source": "OpenAIEmbeddings-qB84e",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
          "target": "CustomComponent-S16vI",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-S16vIœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-S16vI",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-qB84e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-S16vI{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-S16vIœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
        },
        {
          "source": "OpenAIEmbeddings-qB84e",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
          "target": "CustomComponent-N8SAH",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N8SAHœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-N8SAH",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-qB84e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-N8SAH{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N8SAHœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
        },
        {
          "source": "OpenAIEmbeddings-qB84e",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
          "target": "CustomComponent-Y2KYw",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-Y2KYwœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-Y2KYw",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-qB84e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-Y2KYw{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-Y2KYwœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
        },
        {
          "source": "OpenAIEmbeddings-qB84e",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
          "target": "CustomComponent-N1y2Z",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N1y2Zœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-N1y2Z",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-qB84e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-N1y2Z{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-N1y2Zœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
        },
        {
          "source": "OpenAIEmbeddings-qB84e",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
          "target": "CustomComponent-if5jL",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-if5jLœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-if5jL",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-qB84e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-if5jL{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-if5jLœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
        },
        {
          "source": "OpenAIEmbeddings-qB84e",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}",
          "target": "CustomComponent-nDoEi",
          "targetHandle": "{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-nDoEiœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embed_model",
              "id": "CustomComponent-nDoEi",
              "inputTypes": null,
              "type": "OpenAIEmbeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-qB84e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-qB84e{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-qB84eœ}-CustomComponent-nDoEi{œfieldNameœ:œembed_modelœ,œidœ:œCustomComponent-nDoEiœ,œinputTypesœ:null,œtypeœ:œOpenAIEmbeddingsœ}"
        },
        {
          "source": "CustomComponent-XaqOb",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XaqObœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "batch_inp",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-XaqOb"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-XaqOb{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XaqObœ}-CustomComponent-8u3Nj{œfieldNameœ:œbatch_inpœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-026ur",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-026urœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "batch_out",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-026ur"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-026ur{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-026urœ}-CustomComponent-8u3Nj{œfieldNameœ:œbatch_outœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-3KFDD",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3KFDDœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-3KFDD"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-3KFDD{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3KFDDœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-zcasf",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-zcasfœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-zcasf"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-zcasf{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-zcasfœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-tepcl",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tepclœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-tepcl"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-tepcl{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-tepclœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-6J5bQ",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6J5bQœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-6J5bQ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-6J5bQ{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6J5bQœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-n6oDp",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-n6oDpœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-n6oDp"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-n6oDp{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-n6oDpœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-KKPls",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KKPlsœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-KKPls"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-KKPls{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-KKPlsœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-frdpU",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-frdpUœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "field_validators",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-frdpU"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-frdpU{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-frdpUœ}-CustomComponent-8u3Nj{œfieldNameœ:œfield_validatorsœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-gLHg6",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-gLHg6œ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-gLHg6"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-gLHg6{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-gLHg6œ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-S16vI",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-S16vIœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-S16vI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-S16vI{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-S16vIœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-N8SAH",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N8SAHœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-N8SAH"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-N8SAH{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N8SAHœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-Y2KYw",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Y2KYwœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-Y2KYw"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-Y2KYw{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Y2KYwœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-N1y2Z",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N1y2Zœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-N1y2Z"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-N1y2Z{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-N1y2Zœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-nDoEi",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-nDoEiœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-nDoEi"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-nDoEi{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-nDoEiœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-if5jL",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-if5jLœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-if5jL"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-if5jL{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-if5jLœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-J4IcE",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-J4IcEœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-J4IcE"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-J4IcE{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-J4IcEœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-6nLRU",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6nLRUœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-6nLRU"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-6nLRU{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6nLRUœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-NLVpM",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-NLVpMœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-NLVpM"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-NLVpM{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-NLVpMœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-Ndkss",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Ndkssœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-Ndkss"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-Ndkss{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Ndkssœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-okqpE",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-okqpEœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-okqpE"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-okqpE{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-okqpEœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-XBt7c",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XBt7cœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-XBt7c"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-XBt7c{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-XBt7cœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        },
        {
          "source": "CustomComponent-CwBmo",
          "sourceHandle": "{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-CwBmoœ}",
          "target": "CustomComponent-8u3Nj",
          "targetHandle": "{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}",
          "data": {
            "targetHandle": {
              "fieldName": "scorers",
              "id": "CustomComponent-8u3Nj",
              "inputTypes": null,
              "type": "Any"
            },
            "sourceHandle": {
              "baseClasses": [
                "Any"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-CwBmo"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CustomComponent-CwBmo{œbaseClassesœ:[œAnyœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-CwBmoœ}-CustomComponent-8u3Nj{œfieldNameœ:œscorersœ,œidœ:œCustomComponent-8u3Njœ,œinputTypesœ:null,œtypeœ:œAnyœ}"
        }
      ],
      "viewport": {
        "x": 226.1721930792208,
        "y": 121.95740182484758,
        "zoom": 0.32987697769322694
      }
    },
    "date_created": "2024-05-24T05:03:39.189Z",
    "date_updated": "2024-06-17T02:55:34.770Z",
    "status": "Public",
    "sort": null,
    "user_updated": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "user_created": {
      "username": "wiresky",
      "first_name": "Nguyen",
      "last_name": "Nam",
      "id": "dc599610-3065-4b5b-94ed-de108ec210dd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:58.782Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 192,
    "converter_version": "1.0.0"
  }
}