{
  "id": "795a15ae-4720-4e0f-9a36-11d6824d4a9b",
  "name": "[★] Summary with KeyLook (pre+multi)",
  "description": "",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "leejaehyeok0802",
    "first_name": "재혁",
    "last_name": "이",
    "id": "bf88549d-2afc-4b5a-81f8-31d0d357f467",
    "full_name": "재혁 이"
  },
  "store_url": "https://www.langflow.store/store/component/795a15ae-4720-4e0f-9a36-11d6824d4a9b",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-30T06:21:32.876Z",
    "updated": "2024-07-30T06:21:32.932Z",
    "downloaded": "2025-08-19T17:50:06.265Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.13",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatInput-32qip",
        "type": "genericNode",
        "position": {
          "x": 665.9264695363436,
          "y": -772.7496084064761
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{\"chat_id\":\"user1234\", \"user_query\":\"마라탕 레시피에 대해서도 알려줘\"}",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "User Query (Chat)",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatInput-32qip",
          "description": "Get chat inputs from the Playground.",
          "display_name": "User Query (Chat)"
        },
        "selected": false,
        "width": 384,
        "height": 318,
        "dragging": true,
        "positionAbsolute": {
          "x": 665.9264695363436,
          "y": -772.7496084064761
        }
      },
      {
        "id": "KeyLook-GkuX2",
        "type": "genericNode",
        "position": {
          "x": 1548.4648172404695,
          "y": 632.6930667890246
        },
        "data": {
          "type": "KeyLook",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nimport warnings\r\nwarnings.filterwarnings('ignore')\r\nfrom typing import Optional\r\nfrom pydantic import BaseModel, Field\r\nimport aiohttp\r\nimport ssl\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"KeyLook\"\r\n    description = \"By using keylook, output selected documents list.\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"file-search\"\r\n    name = \"KeyLook\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", \r\n                         display_name=\"User Query\", \r\n                         value=\"User Query\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"output\",\r\n               display_name=\"Documents Contexts\",  \r\n               method=\"build_output\"),\r\n    ]\r\n\r\n    async def build_output(self) -> Data:\r\n\r\n        class Search(BaseModel):\r\n            class SearchArgs(BaseModel):\r\n                weight: dict = {\"sparse\": 1.0, \"dense\": 200, \"bm25\": 3}\r\n                return_doc: bool = False\r\n                title_weight: float = 1.0\r\n                meta_search_weight: float = 1.0\r\n                min_context_length: float = 0.0\r\n                min_score: float = 0.0\r\n                batch_size: int = 8\r\n                top_k: int = 8\r\n                multiprocess_num: int = 1\r\n                max_seq_len: int = 512\r\n                n_gram: list[int] = [1]\r\n                rm_pos_question: str = \"JS\"\r\n            \r\n            project_name: str\r\n            question: str\r\n            meta: dict = {}\r\n            search_args: SearchArgs = SearchArgs()\r\n\r\n        class Search_Result(BaseModel):\r\n            class Search_Detail(BaseModel):\r\n                title: str\r\n                context: str\r\n                document_id: str\r\n                doc_offset: int\r\n                doc_page_index: int\r\n                meta: dict\r\n                context_order: int\r\n                passage_len: int\r\n                passage_id: str\r\n                score: Optional[float] = None\r\n                index: Optional[str] = None\r\n                selector: Optional[bool] = True\r\n\r\n            message: str\r\n            result: list[Search_Detail] = []\r\n            groups: dict = {}\r\n\r\n        user_query = self.input_value\r\n        search_kwargs = {\r\n            \"project_name\": 'intern-jh',\r\n            \"question\": user_query\r\n            }\r\n        \r\n        async def post(url, data: dict = None, seconds: int = 20):\r\n            default_context = ssl.create_default_context()\r\n            default_context.check_hostname = False\r\n            default_context.verify_mode = ssl.CERT_NONE\r\n\r\n            async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=default_context)) as session:\r\n                async with session.post(url, json=data, timeout=seconds) as response:\r\n                    if response.status == 200:\r\n                        try:\r\n                            return await response.json()\r\n                        except aiohttp.ContentTypeError as e:\r\n                            return await response.text()\r\n                    else:\r\n                        return 'error'\r\n\r\n        url = \"http://34.64.200.21:32002/search\"\r\n        temp_result = await post(url, Search(**search_kwargs).model_dump())\r\n        if temp_result ==  'error':\r\n            data = Data(value = 'error')\r\n            self.status = data\r\n            return data\r\n\r\n        temp = Search_Result.model_validate(temp_result)\r\n        result_string = '\\n\\n\\n\\n'.join([item.context for item in Search_Result.model_validate(temp).result])\r\n        # result_string = result_string[:20]\r\n\r\n        data = Data(value = result_string)        \r\n        self.status = data\r\n        return data\r\n        ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "User Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "By using keylook, output selected documents list.",
            "icon": "file-search",
            "base_classes": [
              "Data"
            ],
            "display_name": "KeyLook",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "output",
                "display_name": "Documents Contexts",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": true
          },
          "id": "KeyLook-GkuX2",
          "description": "By using keylook, output selected documents list.",
          "display_name": "KeyLook"
        },
        "selected": false,
        "width": 384,
        "height": 346,
        "positionAbsolute": {
          "x": 1548.4648172404695,
          "y": 632.6930667890246
        },
        "dragging": false
      },
      {
        "id": "ParseData-tDdT6",
        "type": "genericNode",
        "position": {
          "x": 1973.6664286437308,
          "y": 458.5117949918449
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{data}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-tDdT6"
        },
        "selected": false,
        "width": 384,
        "height": 402,
        "positionAbsolute": {
          "x": 1973.6664286437308,
          "y": 458.5117949918449
        },
        "dragging": false
      },
      {
        "id": "Prompt-02bV7",
        "type": "genericNode",
        "position": {
          "x": 2416.889630337475,
          "y": -62.394010377937605
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "#### Context (DB)\n{context}\n\n#### User Question\n{user_query}\n\n#### Task\nYou are an expert who manages the business documents of LG affiliates. \nBased on the provided context related to LG Group's work documents, answer the customer's question in Korean. \nIf there is nothing related to the User Question in the context, please respond with '관련 내용 없음'. \nEnsure to maintain the flow of the conversation by considering the previous conversation history.\n",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt"
              },
              "context": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context",
                "display_name": "context",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "user_query": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "user_query",
                "display_name": "user_query",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "context",
                "user_query"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": false,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-02bV7",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": true,
        "width": 384,
        "height": 527,
        "positionAbsolute": {
          "x": 2416.889630337475,
          "y": -62.394010377937605
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-tZR4X",
        "type": "genericNode",
        "position": {
          "x": 3525.4303356947235,
          "y": -402.03411622273927
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatOutput-tZR4X",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output"
        },
        "selected": false,
        "width": 384,
        "height": 318,
        "positionAbsolute": {
          "x": 3525.4303356947235,
          "y": -402.03411622273927
        },
        "dragging": false
      },
      {
        "id": "AzureOpenAIModel-JwmEz",
        "type": "genericNode",
        "position": {
          "x": 2935.6500135524016,
          "y": 155.03070113645254
        },
        "data": {
          "type": "AzureOpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "api_version": {
                "trace_as_metadata": true,
                "options": [
                  "2023-03-15-preview",
                  "2023-05-15",
                  "2023-06-01-preview",
                  "2023-07-01-preview",
                  "2023-08-01-preview",
                  "2023-09-01-preview",
                  "2023-12-01-preview",
                  "2024-04-09",
                  "2024-05-13"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "2023-07-01-preview",
                "name": "api_version",
                "display_name": "API Version",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "load_from_db": false
              },
              "azure_deployment": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "genai_test_gpt4",
                "name": "azure_deployment",
                "display_name": "Deployment Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "azure_endpoint": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "https://genai-aoai-test.openai.azure.com/",
                "name": "azure_endpoint",
                "display_name": "Azure Endpoint",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your Azure endpoint, including the resource. Example: `https://example-resource.azure.openai.com/`",
                "title_case": false,
                "type": "str"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import AzureChatOpenAI\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import MessageTextInput\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, SecretStrInput\n\n\nclass AzureChatOpenAIComponent(LCModelComponent):\n    display_name: str = \"Azure OpenAI\"\n    description: str = \"Generate text using Azure OpenAI LLMs.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/llms/azure_openai\"\n    beta = False\n    icon = \"Azure\"\n    name = \"AzureOpenAIModel\"\n\n    AZURE_OPENAI_API_VERSIONS = [\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n        \"2023-09-01-preview\",\n        \"2023-12-01-preview\",\n        \"2024-04-09\",\n        \"2024-05-13\",\n    ]\n\n    inputs = LCModelComponent._base_inputs + [\n        MessageTextInput(\n            name=\"azure_endpoint\",\n            display_name=\"Azure Endpoint\",\n            info=\"Your Azure endpoint, including the resource. Example: `https://example-resource.azure.openai.com/`\",\n            required=True,\n        ),\n        MessageTextInput(name=\"azure_deployment\", display_name=\"Deployment Name\", required=True),\n        SecretStrInput(name=\"api_key\", display_name=\"API Key\"),\n        DropdownInput(\n            name=\"api_version\",\n            display_name=\"API Version\",\n            options=AZURE_OPENAI_API_VERSIONS,\n            value=AZURE_OPENAI_API_VERSIONS[-1],\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.7),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        azure_endpoint = self.azure_endpoint\n        azure_deployment = self.azure_deployment\n        api_version = self.api_version\n        api_key = self.api_key\n        temperature = self.temperature\n        max_tokens = self.max_tokens\n        stream = self.stream\n\n        try:\n            output = AzureChatOpenAI(\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=api_key,\n                temperature=temperature,\n                max_tokens=max_tokens or None,\n                streaming=stream,\n            )\n        except Exception as e:\n            raise ValueError(f\"Could not connect to AzureOpenAI API: {str(e)}\") from e\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.7,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float"
              }
            },
            "description": "Generate text using Azure OpenAI LLMs.",
            "icon": "Azure",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Azure OpenAI",
            "documentation": "https://python.langchain.com/docs/integrations/llms/azure_openai",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "azure_endpoint",
              "azure_deployment",
              "api_key",
              "api_version",
              "temperature",
              "max_tokens"
            ],
            "beta": false,
            "edited": false
          },
          "id": "AzureOpenAIModel-JwmEz",
          "description": "Generate text using Azure OpenAI LLMs.",
          "display_name": "Azure OpenAI"
        },
        "selected": false,
        "width": 384,
        "height": 833,
        "positionAbsolute": {
          "x": 2935.6500135524016,
          "y": 155.03070113645254
        },
        "dragging": false
      },
      {
        "id": "PreProcessing-Ww1NG",
        "type": "genericNode",
        "position": {
          "x": 1304.8524927891228,
          "y": -169.62179904265912
        },
        "data": {
          "type": "PreProcessing",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom konlpy.tag import Okt\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"PreProcessing\"\r\n    description = \"For using keylook, extract keywords in user query.\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"air-vent\"\r\n    name = \"PreProcessing\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Data:\r\n        sentence = self.input_value\r\n        okt = Okt()\r\n        tokens = okt.morphs(sentence)\r\n\r\n        stopwords = ['그것', '이곳', '몇', '그런', '에서', '여기', '저것', '해서', '때문에', '가', '이런', '그렇게', '의', '이렇게', '으로', \r\n                    '하고', '에', '하지만', '수', '하다', '저곳', '즉', '되다', '어디', '이다', '을', '대해', '과', '를', '왜', '따라서', '있다', \r\n                    '는', '저때', '이때', '들', '저런', '할', '저렇게', '하여', '누구', '거기', '한', '어떻게', '무엇', '어느', '그때', '또한', \r\n                    '그', '저기', '저', '이것', '와', '그리고', '관련', '그러나', '것', '어떤', '은', '및', '없다', '이', '그곳', '등',\r\n                    '알려줘', '가르쳐줘', '말해줘', '될까', '어떨까', '말해', '줘']\r\n\r\n        filtered = [word for word in tokens if word not in stopwords]\r\n        important_words = ' '.join(filtered)\r\n        data = Data(value=important_words)\r\n        self.status = data\r\n        return data\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "For using keylook, extract keywords in user query.",
            "icon": "air-vent",
            "base_classes": [
              "Data"
            ],
            "display_name": "PreProcessing",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PreProcessing-Ww1NG"
        },
        "selected": false,
        "width": 384,
        "height": 346,
        "positionAbsolute": {
          "x": 1304.8524927891228,
          "y": -169.62179904265912
        },
        "dragging": false
      },
      {
        "id": "ParseData-yZLMb",
        "type": "genericNode",
        "position": {
          "x": 1411.674242741949,
          "y": 192.94390264153594
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{value}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": false
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-yZLMb"
        },
        "selected": false,
        "width": 384,
        "height": 402,
        "positionAbsolute": {
          "x": 1411.674242741949,
          "y": 192.94390264153594
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-QGNOD",
        "type": "genericNode",
        "position": {
          "x": 1530.5492960296024,
          "y": -948.4239742875126
        },
        "data": {
          "type": "ChatId",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"Chat Id\"\r\n    description = \"Chat id that allows to distinguish each chat\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"circle-slash-2\"\r\n    name = \"ChatId\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Message:\r\n        json_string = self.input_value\r\n        data = json.loads(json_string)\r\n        data = data['chat_id']\r\n\r\n        message = Message(text=data)\r\n        self.status = message\r\n        return message",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Chat id that allows to distinguish each chat",
            "icon": "circle-slash-2",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Id",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-QGNOD"
        },
        "selected": false,
        "width": 384,
        "height": 318,
        "dragging": false,
        "positionAbsolute": {
          "x": 1530.5492960296024,
          "y": -948.4239742875126
        }
      },
      {
        "id": "CustomComponent-n6mOQ",
        "type": "genericNode",
        "position": {
          "x": 1158.609734474838,
          "y": -501.2015474503666
        },
        "data": {
          "type": "UserQuery",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"User Query\"\r\n    description = \"Questions from the user\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"message-square\"\r\n    name = \"UserQuery\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Message:\r\n        json_string = self.input_value\r\n        data = json.loads(json_string)\r\n        data = data['user_query']\r\n        message = Message(text=data)\r\n        self.status = message\r\n        return message",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Questions from the user",
            "icon": "message-square",
            "base_classes": [
              "Message"
            ],
            "display_name": "User Query",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-n6mOQ"
        },
        "selected": false,
        "width": 384,
        "height": 318,
        "positionAbsolute": {
          "x": 1158.609734474838,
          "y": -501.2015474503666
        },
        "dragging": false
      },
      {
        "id": "ConversationChain-4RTN7",
        "type": "genericNode",
        "position": {
          "x": 2965.779691523382,
          "y": -703.5732689790229
        },
        "data": {
          "type": "ConversationChain",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "llm",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import redis\r\n\r\nfrom langchain.chains import ConversationChain\r\n\r\nfrom axiestudio.base.chains.model import LCChainComponent\r\nfrom axiestudio.field_typing import Message\r\nfrom axiestudio.inputs import MultilineInput, HandleInput\r\n\r\n\r\nclass ConversationChainComponent(LCChainComponent):\r\n    display_name = \"Redis Conversation Chain\"\r\n    description = \"Conversion chain using Redis as chat memory\"\r\n    name = \"ConversationChain\"\r\n\r\n    inputs = [\r\n        MultilineInput(name=\"input_value1\", display_name=\"Chat Id\", value=\"1234\", required=True),\r\n        MultilineInput(name=\"input_value2\", display_name=\"Input\", value=\"hello\", info=\"The input value to pass to the chain.\", required=True),\r\n        MultilineInput(name=\"input_value3\", display_name=\"User Query\", value=\"hello\", info=\"Only User Query\", required=True),\r\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"]),\r\n    ]\r\n\r\n    redis_client = redis.Redis(host='outgoing-beagle-32703.upstash.io',\r\n                               port=6379,\r\n                               password='AX-_AAIjcDEzZjU0YmNhYzhkN2M0NDdjYWNmZDU0ZWY2MjZkNzE1M3AxMA',\r\n                               ssl=True)\r\n    \r\n    def get_conversation_history(self, user_id):\r\n        history = self.redis_client.get(user_id)\r\n        if history is None:\r\n            return []\r\n        return history.decode('utf-8').split('\\n')\r\n\r\n    def update_conversation_history(self, user_id, user_query, bot_response):\r\n        history = self.get_conversation_history(user_id)\r\n        history.append(f\"User: {user_query}\")\r\n        history.append(f\"Bot: {bot_response}\")\r\n        self.redis_client.set(user_id, '\\n'.join(history))\r\n\r\n    def chat(self, chain, user_id, user_input, user_query):\r\n        history = self.get_conversation_history(user_id)\r\n        conversation_history = \"\\n\".join(history)\r\n        conversation_input = f\"{conversation_history}\\nUser: {user_input}\"\r\n        response = chain.invoke(input=conversation_input)\r\n\r\n        bot_response = response['response']\r\n        self.update_conversation_history(user_id, user_query, bot_response)\r\n        \r\n        return bot_response\r\n\r\n    def invoke_chain(self) -> Message:\r\n        conversation_chain = ConversationChain(llm=self.llm)    \r\n        result = self.chat(chain=conversation_chain, \r\n                           user_id=self.input_value1, \r\n                           user_input=self.input_value2,\r\n                           user_query=self.input_value3)\r\n\r\n        self.status = result\r\n        return Message(text=result)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value1": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value1",
                "display_name": "Chat Id",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "input_value2": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value2",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input value to pass to the chain.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "input_value3": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value3",
                "display_name": "User Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Only User Query",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Conversion chain using Redis as chat memory",
            "base_classes": [
              "Message"
            ],
            "display_name": "Redis Conversation Chain",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "invoke_chain",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value1",
              "input_value2",
              "input_value3",
              "llm"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ConversationChain-4RTN7"
        },
        "selected": false,
        "width": 384,
        "height": 563,
        "dragging": false,
        "positionAbsolute": {
          "x": 2965.779691523382,
          "y": -703.5732689790229
        }
      }
    ],
    "edges": [
      {
        "source": "KeyLook-GkuX2",
        "sourceHandle": "{œdataTypeœ:œKeyLookœ,œidœ:œKeyLook-GkuX2œ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-tDdT6",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-tDdT6œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-tDdT6",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "KeyLook",
            "id": "KeyLook-GkuX2",
            "name": "output",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-KeyLook-GkuX2{œdataTypeœ:œKeyLookœ,œidœ:œKeyLook-GkuX2œ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-ParseData-tDdT6{œfieldNameœ:œdataœ,œidœ:œParseData-tDdT6œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ParseData-tDdT6",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-tDdT6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-02bV7",
        "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "context",
            "id": "Prompt-02bV7",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-tDdT6",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "className": "",
        "selected": false,
        "id": "reactflow__edge-ParseData-tDdT6{œdataTypeœ:œParseDataœ,œidœ:œParseData-tDdT6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-02bV7{œfieldNameœ:œcontextœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "PreProcessing-Ww1NG",
        "sourceHandle": "{œdataTypeœ:œPreProcessingœ,œidœ:œPreProcessing-Ww1NGœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-yZLMb",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-yZLMbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-yZLMb",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PreProcessing",
            "id": "PreProcessing-Ww1NG",
            "name": "output",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-PreProcessing-Ww1NG{œdataTypeœ:œPreProcessingœ,œidœ:œPreProcessing-Ww1NGœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-ParseData-yZLMb{œfieldNameœ:œdataœ,œidœ:œParseData-yZLMbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ParseData-yZLMb",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-yZLMbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "KeyLook-GkuX2",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œKeyLook-GkuX2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "KeyLook-GkuX2",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-yZLMb",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-yZLMb{œdataTypeœ:œParseDataœ,œidœ:œParseData-yZLMbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-KeyLook-GkuX2{œfieldNameœ:œinput_valueœ,œidœ:œKeyLook-GkuX2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "CustomComponent-n6mOQ",
        "sourceHandle": "{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "PreProcessing-Ww1NG",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œPreProcessing-Ww1NGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "PreProcessing-Ww1NG",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "UserQuery",
            "id": "CustomComponent-n6mOQ",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "className": "",
        "id": "reactflow__edge-CustomComponent-n6mOQ{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-PreProcessing-Ww1NG{œfieldNameœ:œinput_valueœ,œidœ:œPreProcessing-Ww1NGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-n6mOQ",
        "sourceHandle": "{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-02bV7",
        "targetHandle": "{œfieldNameœ:œuser_queryœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "user_query",
            "id": "Prompt-02bV7",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "UserQuery",
            "id": "CustomComponent-n6mOQ",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "className": "",
        "selected": false,
        "id": "reactflow__edge-CustomComponent-n6mOQ{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-Prompt-02bV7{œfieldNameœ:œuser_queryœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "source": "ChatInput-32qip",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-QGNOD",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-QGNODœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CustomComponent-QGNOD",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-32qip",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-32qip{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-QGNOD{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-QGNODœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "ChatInput-32qip",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-n6mOQ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-n6mOQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "CustomComponent-n6mOQ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-32qip",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-32qip{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-n6mOQ{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-n6mOQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-QGNOD",
        "sourceHandle": "{œdataTypeœ:œChatIdœ,œidœ:œCustomComponent-QGNODœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConversationChain-4RTN7",
        "targetHandle": "{œfieldNameœ:œinput_value1œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value1",
            "id": "ConversationChain-4RTN7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatId",
            "id": "CustomComponent-QGNOD",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-QGNOD{œdataTypeœ:œChatIdœ,œidœ:œCustomComponent-QGNODœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ConversationChain-4RTN7{œfieldNameœ:œinput_value1œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "AzureOpenAIModel-JwmEz",
        "sourceHandle": "{œdataTypeœ:œAzureOpenAIModelœ,œidœ:œAzureOpenAIModel-JwmEzœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "ConversationChain-4RTN7",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ConversationChain-4RTN7",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AzureOpenAIModel",
            "id": "AzureOpenAIModel-JwmEz",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-AzureOpenAIModel-JwmEz{œdataTypeœ:œAzureOpenAIModelœ,œidœ:œAzureOpenAIModel-JwmEzœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ConversationChain-4RTN7{œfieldNameœ:œllmœ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
      },
      {
        "source": "ConversationChain-4RTN7",
        "sourceHandle": "{œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-4RTN7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-tZR4X",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-tZR4Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-tZR4X",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConversationChain",
            "id": "ConversationChain-4RTN7",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ConversationChain-4RTN7{œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-4RTN7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-tZR4X{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-tZR4Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-02bV7",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-02bV7œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConversationChain-4RTN7",
        "targetHandle": "{œfieldNameœ:œinput_value2œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value2",
            "id": "ConversationChain-4RTN7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-02bV7",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-02bV7{œdataTypeœ:œPromptœ,œidœ:œPrompt-02bV7œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ConversationChain-4RTN7{œfieldNameœ:œinput_value2œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "CustomComponent-n6mOQ",
        "sourceHandle": "{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConversationChain-4RTN7",
        "targetHandle": "{œfieldNameœ:œinput_value3œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value3",
            "id": "ConversationChain-4RTN7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "UserQuery",
            "id": "CustomComponent-n6mOQ",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-n6mOQ{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ConversationChain-4RTN7{œfieldNameœ:œinput_value3œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 89.14466365420412,
      "y": 539.7014736734033,
      "zoom": 0.5946035621074708
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "KeyLook": {
      "count": 1
    },
    "ParseData": {
      "count": 2
    },
    "Prompt": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "AzureOpenAIModel": {
      "count": 1
    },
    "PreProcessing": {
      "count": 1
    },
    "CustomComponent": {
      "count": 2
    },
    "ConversationChain": {
      "count": 1
    },
    "total": 11
  },
  "original": {
    "id": "795a15ae-4720-4e0f-9a36-11d6824d4a9b",
    "name": "[★] Summary with KeyLook (pre+multi)",
    "description": "",
    "is_component": false,
    "liked_by_count": "3",
    "downloads_count": "17",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "KeyLook": {
        "count": 1
      },
      "ParseData": {
        "count": 2
      },
      "Prompt": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "AzureOpenAIModel": {
        "count": 1
      },
      "PreProcessing": {
        "count": 1
      },
      "CustomComponent": {
        "count": 2
      },
      "ConversationChain": {
        "count": 1
      },
      "total": 11
    },
    "last_tested_version": "1.0.13",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatInput-32qip",
          "type": "genericNode",
          "position": {
            "x": 665.9264695363436,
            "y": -772.7496084064761
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{\"chat_id\":\"user1234\", \"user_query\":\"마라탕 레시피에 대해서도 알려줘\"}",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "combobox": false,
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "User Query (Chat)",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatInput-32qip",
            "description": "Get chat inputs from the Playground.",
            "display_name": "User Query (Chat)"
          },
          "selected": false,
          "width": 384,
          "height": 318,
          "dragging": true,
          "positionAbsolute": {
            "x": 665.9264695363436,
            "y": -772.7496084064761
          }
        },
        {
          "id": "KeyLook-GkuX2",
          "type": "genericNode",
          "position": {
            "x": 1548.4648172404695,
            "y": 632.6930667890246
          },
          "data": {
            "type": "KeyLook",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nimport warnings\r\nwarnings.filterwarnings('ignore')\r\nfrom typing import Optional\r\nfrom pydantic import BaseModel, Field\r\nimport aiohttp\r\nimport ssl\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"KeyLook\"\r\n    description = \"By using keylook, output selected documents list.\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"file-search\"\r\n    name = \"KeyLook\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", \r\n                         display_name=\"User Query\", \r\n                         value=\"User Query\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"output\",\r\n               display_name=\"Documents Contexts\",  \r\n               method=\"build_output\"),\r\n    ]\r\n\r\n    async def build_output(self) -> Data:\r\n\r\n        class Search(BaseModel):\r\n            class SearchArgs(BaseModel):\r\n                weight: dict = {\"sparse\": 1.0, \"dense\": 200, \"bm25\": 3}\r\n                return_doc: bool = False\r\n                title_weight: float = 1.0\r\n                meta_search_weight: float = 1.0\r\n                min_context_length: float = 0.0\r\n                min_score: float = 0.0\r\n                batch_size: int = 8\r\n                top_k: int = 8\r\n                multiprocess_num: int = 1\r\n                max_seq_len: int = 512\r\n                n_gram: list[int] = [1]\r\n                rm_pos_question: str = \"JS\"\r\n            \r\n            project_name: str\r\n            question: str\r\n            meta: dict = {}\r\n            search_args: SearchArgs = SearchArgs()\r\n\r\n        class Search_Result(BaseModel):\r\n            class Search_Detail(BaseModel):\r\n                title: str\r\n                context: str\r\n                document_id: str\r\n                doc_offset: int\r\n                doc_page_index: int\r\n                meta: dict\r\n                context_order: int\r\n                passage_len: int\r\n                passage_id: str\r\n                score: Optional[float] = None\r\n                index: Optional[str] = None\r\n                selector: Optional[bool] = True\r\n\r\n            message: str\r\n            result: list[Search_Detail] = []\r\n            groups: dict = {}\r\n\r\n        user_query = self.input_value\r\n        search_kwargs = {\r\n            \"project_name\": 'intern-jh',\r\n            \"question\": user_query\r\n            }\r\n        \r\n        async def post(url, data: dict = None, seconds: int = 20):\r\n            default_context = ssl.create_default_context()\r\n            default_context.check_hostname = False\r\n            default_context.verify_mode = ssl.CERT_NONE\r\n\r\n            async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=default_context)) as session:\r\n                async with session.post(url, json=data, timeout=seconds) as response:\r\n                    if response.status == 200:\r\n                        try:\r\n                            return await response.json()\r\n                        except aiohttp.ContentTypeError as e:\r\n                            return await response.text()\r\n                    else:\r\n                        return 'error'\r\n\r\n        url = \"http://34.64.200.21:32002/search\"\r\n        temp_result = await post(url, Search(**search_kwargs).model_dump())\r\n        if temp_result ==  'error':\r\n            data = Data(value = 'error')\r\n            self.status = data\r\n            return data\r\n\r\n        temp = Search_Result.model_validate(temp_result)\r\n        result_string = '\\n\\n\\n\\n'.join([item.context for item in Search_Result.model_validate(temp).result])\r\n        # result_string = result_string[:20]\r\n\r\n        data = Data(value = result_string)        \r\n        self.status = data\r\n        return data\r\n        ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "User Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "By using keylook, output selected documents list.",
              "icon": "file-search",
              "base_classes": [
                "Data"
              ],
              "display_name": "KeyLook",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "output",
                  "display_name": "Documents Contexts",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": true
            },
            "id": "KeyLook-GkuX2",
            "description": "By using keylook, output selected documents list.",
            "display_name": "KeyLook"
          },
          "selected": false,
          "width": 384,
          "height": 346,
          "positionAbsolute": {
            "x": 1548.4648172404695,
            "y": 632.6930667890246
          },
          "dragging": false
        },
        {
          "id": "ParseData-tDdT6",
          "type": "genericNode",
          "position": {
            "x": 1973.6664286437308,
            "y": 458.5117949918449
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "data",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "\n",
                  "name": "sep",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{data}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Convert Data into plain text following a specified template.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ParseData-tDdT6"
          },
          "selected": false,
          "width": 384,
          "height": 402,
          "positionAbsolute": {
            "x": 1973.6664286437308,
            "y": 458.5117949918449
          },
          "dragging": false
        },
        {
          "id": "Prompt-02bV7",
          "type": "genericNode",
          "position": {
            "x": 2416.889630337475,
            "y": -62.394010377937605
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "#### Context (DB)\n{context}\n\n#### User Question\n{user_query}\n\n#### Task\nYou are an expert who manages the business documents of LG affiliates. \nBased on the provided context related to LG Group's work documents, answer the customer's question in Korean. \nIf there is nothing related to the User Question in the context, please respond with '관련 내용 없음'. \nEnsure to maintain the flow of the conversation by considering the previous conversation history.\n",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt"
                },
                "context": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context",
                  "display_name": "context",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "user_query": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "user_query",
                  "display_name": "user_query",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "context",
                  "user_query"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": false,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false
            },
            "id": "Prompt-02bV7",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": true,
          "width": 384,
          "height": 527,
          "positionAbsolute": {
            "x": 2416.889630337475,
            "y": -62.394010377937605
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-tZR4X",
          "type": "genericNode",
          "position": {
            "x": 3525.4303356947235,
            "y": -402.03411622273927
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "data_template",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "combobox": false,
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "AI",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatOutput-tZR4X",
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output"
          },
          "selected": false,
          "width": 384,
          "height": 318,
          "positionAbsolute": {
            "x": 3525.4303356947235,
            "y": -402.03411622273927
          },
          "dragging": false
        },
        {
          "id": "AzureOpenAIModel-JwmEz",
          "type": "genericNode",
          "position": {
            "x": 2935.6500135524016,
            "y": 155.03070113645254
          },
          "data": {
            "type": "AzureOpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "api_version": {
                  "trace_as_metadata": true,
                  "options": [
                    "2023-03-15-preview",
                    "2023-05-15",
                    "2023-06-01-preview",
                    "2023-07-01-preview",
                    "2023-08-01-preview",
                    "2023-09-01-preview",
                    "2023-12-01-preview",
                    "2024-04-09",
                    "2024-05-13"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "2023-07-01-preview",
                  "name": "api_version",
                  "display_name": "API Version",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "load_from_db": false
                },
                "azure_deployment": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "genai_test_gpt4",
                  "name": "azure_deployment",
                  "display_name": "Deployment Name",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "azure_endpoint": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "https://genai-aoai-test.openai.azure.com/",
                  "name": "azure_endpoint",
                  "display_name": "Azure Endpoint",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Your Azure endpoint, including the resource. Example: `https://example-resource.azure.openai.com/`",
                  "title_case": false,
                  "type": "str"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_openai import AzureChatOpenAI\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import MessageTextInput\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, SecretStrInput\n\n\nclass AzureChatOpenAIComponent(LCModelComponent):\n    display_name: str = \"Azure OpenAI\"\n    description: str = \"Generate text using Azure OpenAI LLMs.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/llms/azure_openai\"\n    beta = False\n    icon = \"Azure\"\n    name = \"AzureOpenAIModel\"\n\n    AZURE_OPENAI_API_VERSIONS = [\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n        \"2023-09-01-preview\",\n        \"2023-12-01-preview\",\n        \"2024-04-09\",\n        \"2024-05-13\",\n    ]\n\n    inputs = LCModelComponent._base_inputs + [\n        MessageTextInput(\n            name=\"azure_endpoint\",\n            display_name=\"Azure Endpoint\",\n            info=\"Your Azure endpoint, including the resource. Example: `https://example-resource.azure.openai.com/`\",\n            required=True,\n        ),\n        MessageTextInput(name=\"azure_deployment\", display_name=\"Deployment Name\", required=True),\n        SecretStrInput(name=\"api_key\", display_name=\"API Key\"),\n        DropdownInput(\n            name=\"api_version\",\n            display_name=\"API Version\",\n            options=AZURE_OPENAI_API_VERSIONS,\n            value=AZURE_OPENAI_API_VERSIONS[-1],\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.7),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        azure_endpoint = self.azure_endpoint\n        azure_deployment = self.azure_deployment\n        api_version = self.api_version\n        api_key = self.api_key\n        temperature = self.temperature\n        max_tokens = self.max_tokens\n        stream = self.stream\n\n        try:\n            output = AzureChatOpenAI(\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=api_key,\n                temperature=temperature,\n                max_tokens=max_tokens or None,\n                streaming=stream,\n            )\n        except Exception as e:\n            raise ValueError(f\"Could not connect to AzureOpenAI API: {str(e)}\") from e\n\n        return output  # type: ignore\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0.7,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float"
                }
              },
              "description": "Generate text using Azure OpenAI LLMs.",
              "icon": "Azure",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Azure OpenAI",
              "documentation": "https://python.langchain.com/docs/integrations/llms/azure_openai",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "azure_endpoint",
                "azure_deployment",
                "api_key",
                "api_version",
                "temperature",
                "max_tokens"
              ],
              "beta": false,
              "edited": false
            },
            "id": "AzureOpenAIModel-JwmEz",
            "description": "Generate text using Azure OpenAI LLMs.",
            "display_name": "Azure OpenAI"
          },
          "selected": false,
          "width": 384,
          "height": 833,
          "positionAbsolute": {
            "x": 2935.6500135524016,
            "y": 155.03070113645254
          },
          "dragging": false
        },
        {
          "id": "PreProcessing-Ww1NG",
          "type": "genericNode",
          "position": {
            "x": 1304.8524927891228,
            "y": -169.62179904265912
          },
          "data": {
            "type": "PreProcessing",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom konlpy.tag import Okt\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"PreProcessing\"\r\n    description = \"For using keylook, extract keywords in user query.\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"air-vent\"\r\n    name = \"PreProcessing\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Data:\r\n        sentence = self.input_value\r\n        okt = Okt()\r\n        tokens = okt.morphs(sentence)\r\n\r\n        stopwords = ['그것', '이곳', '몇', '그런', '에서', '여기', '저것', '해서', '때문에', '가', '이런', '그렇게', '의', '이렇게', '으로', \r\n                    '하고', '에', '하지만', '수', '하다', '저곳', '즉', '되다', '어디', '이다', '을', '대해', '과', '를', '왜', '따라서', '있다', \r\n                    '는', '저때', '이때', '들', '저런', '할', '저렇게', '하여', '누구', '거기', '한', '어떻게', '무엇', '어느', '그때', '또한', \r\n                    '그', '저기', '저', '이것', '와', '그리고', '관련', '그러나', '것', '어떤', '은', '및', '없다', '이', '그곳', '등',\r\n                    '알려줘', '가르쳐줘', '말해줘', '될까', '어떨까', '말해', '줘']\r\n\r\n        filtered = [word for word in tokens if word not in stopwords]\r\n        important_words = ' '.join(filtered)\r\n        data = Data(value=important_words)\r\n        self.status = data\r\n        return data\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input Value",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "For using keylook, extract keywords in user query.",
              "icon": "air-vent",
              "base_classes": [
                "Data"
              ],
              "display_name": "PreProcessing",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "output",
                  "display_name": "Output",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": true
            },
            "id": "PreProcessing-Ww1NG"
          },
          "selected": false,
          "width": 384,
          "height": 346,
          "positionAbsolute": {
            "x": 1304.8524927891228,
            "y": -169.62179904265912
          },
          "dragging": false
        },
        {
          "id": "ParseData-yZLMb",
          "type": "genericNode",
          "position": {
            "x": 1411.674242741949,
            "y": 192.94390264153594
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "data",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "\n",
                  "name": "sep",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{value}",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Convert Data into plain text following a specified template.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": false
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ParseData-yZLMb"
          },
          "selected": false,
          "width": 384,
          "height": 402,
          "positionAbsolute": {
            "x": 1411.674242741949,
            "y": 192.94390264153594
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-QGNOD",
          "type": "genericNode",
          "position": {
            "x": 1530.5492960296024,
            "y": -948.4239742875126
          },
          "data": {
            "type": "ChatId",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"Chat Id\"\r\n    description = \"Chat id that allows to distinguish each chat\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"circle-slash-2\"\r\n    name = \"ChatId\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Message:\r\n        json_string = self.input_value\r\n        data = json.loads(json_string)\r\n        data = data['chat_id']\r\n\r\n        message = Message(text=data)\r\n        self.status = message\r\n        return message",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input Value",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Chat id that allows to distinguish each chat",
              "icon": "circle-slash-2",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Id",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "output",
                  "display_name": "Output",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-QGNOD"
          },
          "selected": false,
          "width": 384,
          "height": 318,
          "dragging": false,
          "positionAbsolute": {
            "x": 1530.5492960296024,
            "y": -948.4239742875126
          }
        },
        {
          "id": "CustomComponent-n6mOQ",
          "type": "genericNode",
          "position": {
            "x": 1158.609734474838,
            "y": -501.2015474503666
          },
          "data": {
            "type": "UserQuery",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema.message import Message\r\n\r\n\r\nclass CustomComponent(Component):\r\n    display_name = \"User Query\"\r\n    description = \"Questions from the user\"\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    icon = \"message-square\"\r\n    name = \"UserQuery\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Message:\r\n        json_string = self.input_value\r\n        data = json.loads(json_string)\r\n        data = data['user_query']\r\n        message = Message(text=data)\r\n        self.status = message\r\n        return message",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input Value",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Questions from the user",
              "icon": "message-square",
              "base_classes": [
                "Message"
              ],
              "display_name": "User Query",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "output",
                  "display_name": "Output",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-n6mOQ"
          },
          "selected": false,
          "width": 384,
          "height": 318,
          "positionAbsolute": {
            "x": 1158.609734474838,
            "y": -501.2015474503666
          },
          "dragging": false
        },
        {
          "id": "ConversationChain-4RTN7",
          "type": "genericNode",
          "position": {
            "x": 2965.779691523382,
            "y": -703.5732689790229
          },
          "data": {
            "type": "ConversationChain",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "llm",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import redis\r\n\r\nfrom langchain.chains import ConversationChain\r\n\r\nfrom axiestudio.base.chains.model import LCChainComponent\r\nfrom axiestudio.field_typing import Message\r\nfrom axiestudio.inputs import MultilineInput, HandleInput\r\n\r\n\r\nclass ConversationChainComponent(LCChainComponent):\r\n    display_name = \"Redis Conversation Chain\"\r\n    description = \"Conversion chain using Redis as chat memory\"\r\n    name = \"ConversationChain\"\r\n\r\n    inputs = [\r\n        MultilineInput(name=\"input_value1\", display_name=\"Chat Id\", value=\"1234\", required=True),\r\n        MultilineInput(name=\"input_value2\", display_name=\"Input\", value=\"hello\", info=\"The input value to pass to the chain.\", required=True),\r\n        MultilineInput(name=\"input_value3\", display_name=\"User Query\", value=\"hello\", info=\"Only User Query\", required=True),\r\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"]),\r\n    ]\r\n\r\n    redis_client = redis.Redis(host='outgoing-beagle-32703.upstash.io',\r\n                               port=6379,\r\n                               password='AX-_AAIjcDEzZjU0YmNhYzhkN2M0NDdjYWNmZDU0ZWY2MjZkNzE1M3AxMA',\r\n                               ssl=True)\r\n    \r\n    def get_conversation_history(self, user_id):\r\n        history = self.redis_client.get(user_id)\r\n        if history is None:\r\n            return []\r\n        return history.decode('utf-8').split('\\n')\r\n\r\n    def update_conversation_history(self, user_id, user_query, bot_response):\r\n        history = self.get_conversation_history(user_id)\r\n        history.append(f\"User: {user_query}\")\r\n        history.append(f\"Bot: {bot_response}\")\r\n        self.redis_client.set(user_id, '\\n'.join(history))\r\n\r\n    def chat(self, chain, user_id, user_input, user_query):\r\n        history = self.get_conversation_history(user_id)\r\n        conversation_history = \"\\n\".join(history)\r\n        conversation_input = f\"{conversation_history}\\nUser: {user_input}\"\r\n        response = chain.invoke(input=conversation_input)\r\n\r\n        bot_response = response['response']\r\n        self.update_conversation_history(user_id, user_query, bot_response)\r\n        \r\n        return bot_response\r\n\r\n    def invoke_chain(self) -> Message:\r\n        conversation_chain = ConversationChain(llm=self.llm)    \r\n        result = self.chat(chain=conversation_chain, \r\n                           user_id=self.input_value1, \r\n                           user_input=self.input_value2,\r\n                           user_query=self.input_value3)\r\n\r\n        self.status = result\r\n        return Message(text=result)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value1": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value1",
                  "display_name": "Chat Id",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "input_value2": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value2",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The input value to pass to the chain.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "input_value3": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value3",
                  "display_name": "User Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Only User Query",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Conversion chain using Redis as chat memory",
              "base_classes": [
                "Message"
              ],
              "display_name": "Redis Conversation Chain",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "invoke_chain",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value1",
                "input_value2",
                "input_value3",
                "llm"
              ],
              "beta": false,
              "edited": true
            },
            "id": "ConversationChain-4RTN7"
          },
          "selected": false,
          "width": 384,
          "height": 563,
          "dragging": false,
          "positionAbsolute": {
            "x": 2965.779691523382,
            "y": -703.5732689790229
          }
        }
      ],
      "edges": [
        {
          "source": "KeyLook-GkuX2",
          "sourceHandle": "{œdataTypeœ:œKeyLookœ,œidœ:œKeyLook-GkuX2œ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-tDdT6",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-tDdT6œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-tDdT6",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "KeyLook",
              "id": "KeyLook-GkuX2",
              "name": "output",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-KeyLook-GkuX2{œdataTypeœ:œKeyLookœ,œidœ:œKeyLook-GkuX2œ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-ParseData-tDdT6{œfieldNameœ:œdataœ,œidœ:œParseData-tDdT6œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ParseData-tDdT6",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-tDdT6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-02bV7",
          "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "context",
              "id": "Prompt-02bV7",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-tDdT6",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "className": "",
          "selected": false,
          "id": "reactflow__edge-ParseData-tDdT6{œdataTypeœ:œParseDataœ,œidœ:œParseData-tDdT6œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-02bV7{œfieldNameœ:œcontextœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "PreProcessing-Ww1NG",
          "sourceHandle": "{œdataTypeœ:œPreProcessingœ,œidœ:œPreProcessing-Ww1NGœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-yZLMb",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-yZLMbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-yZLMb",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "PreProcessing",
              "id": "PreProcessing-Ww1NG",
              "name": "output",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-PreProcessing-Ww1NG{œdataTypeœ:œPreProcessingœ,œidœ:œPreProcessing-Ww1NGœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-ParseData-yZLMb{œfieldNameœ:œdataœ,œidœ:œParseData-yZLMbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ParseData-yZLMb",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-yZLMbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "KeyLook-GkuX2",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œKeyLook-GkuX2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "KeyLook-GkuX2",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-yZLMb",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-yZLMb{œdataTypeœ:œParseDataœ,œidœ:œParseData-yZLMbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-KeyLook-GkuX2{œfieldNameœ:œinput_valueœ,œidœ:œKeyLook-GkuX2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "CustomComponent-n6mOQ",
          "sourceHandle": "{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "PreProcessing-Ww1NG",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œPreProcessing-Ww1NGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "PreProcessing-Ww1NG",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "UserQuery",
              "id": "CustomComponent-n6mOQ",
              "name": "output",
              "output_types": [
                "Message"
              ]
            }
          },
          "className": "",
          "id": "reactflow__edge-CustomComponent-n6mOQ{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-PreProcessing-Ww1NG{œfieldNameœ:œinput_valueœ,œidœ:œPreProcessing-Ww1NGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-n6mOQ",
          "sourceHandle": "{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-02bV7",
          "targetHandle": "{œfieldNameœ:œuser_queryœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "user_query",
              "id": "Prompt-02bV7",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "UserQuery",
              "id": "CustomComponent-n6mOQ",
              "name": "output",
              "output_types": [
                "Message"
              ]
            }
          },
          "className": "",
          "selected": false,
          "id": "reactflow__edge-CustomComponent-n6mOQ{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-Prompt-02bV7{œfieldNameœ:œuser_queryœ,œidœ:œPrompt-02bV7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "source": "ChatInput-32qip",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "CustomComponent-QGNOD",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-QGNODœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "CustomComponent-QGNOD",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-32qip",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-32qip{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-QGNOD{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-QGNODœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "ChatInput-32qip",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "CustomComponent-n6mOQ",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-n6mOQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "CustomComponent-n6mOQ",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-32qip",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-32qip{œdataTypeœ:œChatInputœ,œidœ:œChatInput-32qipœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-n6mOQ{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-n6mOQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-QGNOD",
          "sourceHandle": "{œdataTypeœ:œChatIdœ,œidœ:œCustomComponent-QGNODœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ConversationChain-4RTN7",
          "targetHandle": "{œfieldNameœ:œinput_value1œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value1",
              "id": "ConversationChain-4RTN7",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatId",
              "id": "CustomComponent-QGNOD",
              "name": "output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-QGNOD{œdataTypeœ:œChatIdœ,œidœ:œCustomComponent-QGNODœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ConversationChain-4RTN7{œfieldNameœ:œinput_value1œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "AzureOpenAIModel-JwmEz",
          "sourceHandle": "{œdataTypeœ:œAzureOpenAIModelœ,œidœ:œAzureOpenAIModel-JwmEzœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
          "target": "ConversationChain-4RTN7",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "ConversationChain-4RTN7",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AzureOpenAIModel",
              "id": "AzureOpenAIModel-JwmEz",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-AzureOpenAIModel-JwmEz{œdataTypeœ:œAzureOpenAIModelœ,œidœ:œAzureOpenAIModel-JwmEzœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ConversationChain-4RTN7{œfieldNameœ:œllmœ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
        },
        {
          "source": "ConversationChain-4RTN7",
          "sourceHandle": "{œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-4RTN7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-tZR4X",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-tZR4Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-tZR4X",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ConversationChain",
              "id": "ConversationChain-4RTN7",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ConversationChain-4RTN7{œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-4RTN7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-tZR4X{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-tZR4Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-02bV7",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-02bV7œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ConversationChain-4RTN7",
          "targetHandle": "{œfieldNameœ:œinput_value2œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value2",
              "id": "ConversationChain-4RTN7",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-02bV7",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-02bV7{œdataTypeœ:œPromptœ,œidœ:œPrompt-02bV7œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ConversationChain-4RTN7{œfieldNameœ:œinput_value2œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "CustomComponent-n6mOQ",
          "sourceHandle": "{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ConversationChain-4RTN7",
          "targetHandle": "{œfieldNameœ:œinput_value3œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value3",
              "id": "ConversationChain-4RTN7",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "UserQuery",
              "id": "CustomComponent-n6mOQ",
              "name": "output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-n6mOQ{œdataTypeœ:œUserQueryœ,œidœ:œCustomComponent-n6mOQœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ConversationChain-4RTN7{œfieldNameœ:œinput_value3œ,œidœ:œConversationChain-4RTN7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 89.14466365420412,
        "y": 539.7014736734033,
        "zoom": 0.5946035621074708
      }
    },
    "date_created": "2024-07-30T06:21:32.876Z",
    "date_updated": "2024-07-30T06:21:32.932Z",
    "status": "Public",
    "sort": null,
    "user_updated": "bf88549d-2afc-4b5a-81f8-31d0d357f467",
    "user_created": {
      "username": "leejaehyeok0802",
      "first_name": "재혁",
      "last_name": "이",
      "id": "bf88549d-2afc-4b5a-81f8-31d0d357f467"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:00.621Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 108,
    "converter_version": "1.0.0"
  }
}