#!/usr/bin/env python3
"""
Verifiering av prenumerationslogik f√∂r svenska versionen av Axie Studio.
Testar att utg√•ngna provperioder och ogiltiga prenumerationer blockeras korrekt.
"""

from datetime import datetime, timezone, timedelta
from typing import Dict, Any

class MockUser:
    """Mock anv√§ndarklass f√∂r testning."""
    def __init__(self, username: str, subscription_status: str, is_superuser: bool = False, 
                 trial_start=None, trial_end=None):
        self.username = username
        self.subscription_status = subscription_status
        self.is_superuser = is_superuser
        self.trial_start = trial_start
        self.trial_end = trial_end

def check_trial_status_logic(user: MockUser) -> Dict[str, Any]:
    """
    Replikerar prenumerationslogiken f√∂r att verifiera att den fungerar korrekt.
    """
    now = datetime.now(timezone.utc)
    trial_duration_days = 7
    
    # Superanv√§ndare kringg√•r alla prenumerationskontroller
    if user.is_superuser:
        return {
            "status": "admin",
            "trial_expired": False,
            "days_left": 0,
            "should_cleanup": False
        }
    
    # Om anv√§ndaren har aktiv prenumeration √§r de godk√§nda
    if user.subscription_status == "active":
        return {
            "status": "subscribed",
            "trial_expired": False,
            "days_left": 0,
            "should_cleanup": False
        }
    
    # Ber√§kna provperiodsdatum med tidszonskonsekvens
    trial_start = user.trial_start or now
    # F√∂r provanv√§ndare ska trial_end vara explicit satt - ber√§kna inte automatiskt f√∂r s√§kerhet
    if user.subscription_status == "trial" and not user.trial_end:
        # Detta √§r ett dataintegritetsfel - provanv√§ndare M√ÖSTE ha trial_end
        trial_end = None
    else:
        trial_end = user.trial_end or (trial_start + timedelta(days=trial_duration_days))
    
    # S√§kerst√§ll tidszonskonsekvens f√∂r j√§mf√∂relser
    if trial_start and trial_start.tzinfo is None:
        trial_start = trial_start.replace(tzinfo=timezone.utc)
    if trial_end and trial_end.tzinfo is None:
        trial_end = trial_end.replace(tzinfo=timezone.utc)
    
    # Kontrollera om provperioden har l√∂pt ut
    trial_expired = now > trial_end if trial_end else False
    days_left = max(0, (trial_end - now).days) if trial_end else 0
    
    # KRITISKT: Blockera √•tkomst f√∂r ALLA dessa fall:
    has_active_subscription = user.subscription_status == "active"
    has_valid_trial = trial_end and not trial_expired
    
    # Ska st√§da (blockera √•tkomst) om:
    should_cleanup = (
        # Provperiod utg√•ngen och ingen aktiv prenumeration
        (trial_expired and not has_active_subscription) or
        # Ingen prenumerationsstatus alls (null, tom eller ogiltig)
        (not user.subscription_status or user.subscription_status not in ["active", "trial"]) or
        # Prenumerationsstatus √§r inte aktiv och ingen giltig provperiod
        (user.subscription_status != "active" and not has_valid_trial) or
        # Saknar trial_end datum f√∂r provanv√§ndare (dataintegritetsfel)
        (user.subscription_status == "trial" and not trial_end)
    )
    
    return {
        "status": "trial" if not trial_expired else "expired",
        "trial_expired": trial_expired,
        "days_left": days_left,
        "should_cleanup": should_cleanup,
        "trial_end": trial_end
    }

def test_subscription_enforcement():
    """Testa alla prenumerationsscenarier."""
    print("üîí TESTAR PRENUMERATIONSLOGIK F√ñR SVENSKA VERSIONEN")
    print("=" * 70)
    
    test_cases = [
        # Test 1: Utg√•ngen provanv√§ndare (SKA BLOCKERAS)
        {
            "name": "Utg√•ngen Provanv√§ndare",
            "user": MockUser(
                username="utgangen_anvandare",
                subscription_status="trial",
                trial_start=datetime.now(timezone.utc) - timedelta(days=10),
                trial_end=datetime.now(timezone.utc) - timedelta(days=3)
            ),
            "should_block": True
        },
        
        # Test 2: Aktiv provanv√§ndare (SKA HA √ÖTKOMST)
        {
            "name": "Aktiv Provanv√§ndare",
            "user": MockUser(
                username="aktiv_provanvandare",
                subscription_status="trial",
                trial_start=datetime.now(timezone.utc) - timedelta(days=2),
                trial_end=datetime.now(timezone.utc) + timedelta(days=5)
            ),
            "should_block": False
        },
        
        # Test 3: Prenumerant (SKA HA √ÖTKOMST)
        {
            "name": "Prenumerant",
            "user": MockUser(
                username="prenumerant",
                subscription_status="active"
            ),
            "should_block": False
        },
        
        # Test 4: Admin (SKA HA √ÖTKOMST)
        {
            "name": "Admin",
            "user": MockUser(
                username="admin",
                subscription_status="trial",
                is_superuser=True,
                trial_start=datetime.now(timezone.utc) - timedelta(days=10),
                trial_end=datetime.now(timezone.utc) - timedelta(days=3)
            ),
            "should_block": False
        },
        
        # Test 5: Ingen prenumerationsstatus (SKA BLOCKERAS)
        {
            "name": "Ingen Prenumerationsstatus",
            "user": MockUser(
                username="ingen_status",
                subscription_status=None
            ),
            "should_block": True
        },
        
        # Test 6: Ogiltig prenumerationsstatus (SKA BLOCKERAS)
        {
            "name": "Ogiltig Prenumerationsstatus",
            "user": MockUser(
                username="ogiltig_status",
                subscription_status="cancelled"
            ),
            "should_block": True
        },
        
        # Test 7: Provanv√§ndare utan trial_end (SKA BLOCKERAS)
        {
            "name": "Provanv√§ndare Saknar Trial End",
            "user": MockUser(
                username="saknar_trial_end",
                subscription_status="trial",
                trial_start=datetime.now(timezone.utc) - timedelta(days=2),
                trial_end=None
            ),
            "should_block": True
        }
    ]
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã Test {i}: {test_case['name']}")
        
        user = test_case["user"]
        expected_block = test_case["should_block"]
        
        # K√∂r logiken
        result = check_trial_status_logic(user)
        actual_block = result["should_cleanup"]
        
        # Skriv ut detaljer
        print(f"   Anv√§ndare: {user.username}")
        print(f"   Prenumerationsstatus: {user.subscription_status}")
        print(f"   √Ñr Superanv√§ndare: {user.is_superuser}")
        print(f"   Provperiod Utg√•ngen: {result['trial_expired']}")
        print(f"   Dagar Kvar: {result['days_left']}")
        print(f"   Ska Blockera: {actual_block}")
        print(f"   F√∂rv√§ntat Blockera: {expected_block}")
        
        # Verifiera resultat
        if actual_block == expected_block:
            print(f"   ‚úÖ GODK√ÑND")
        else:
            print(f"   ‚ùå MISSLYCKAD - F√∂rv√§ntade {expected_block}, fick {actual_block}")
            all_passed = False
    
    print("\n" + "=" * 70)
    print("üìä SLUTRESULTAT")
    print("=" * 70)
    
    if all_passed:
        print("üéâ ALLA TESTER GODK√ÑNDA!")
        print("‚úÖ Prenumerationslogiken √§r STENS√ÑKER")
        print("‚úÖ Utg√•ngna anv√§ndare KOMMER ATT BLOCKERAS")
        print("‚úÖ Ogiltiga prenumerationsstatusar KOMMER ATT BLOCKERAS")
        print("‚úÖ Saknad data KOMMER ATT BLOCKERAS")
        print("‚úÖ Admin-anv√§ndare √§r korrekt undantagna")
        print("‚úÖ Giltiga prenumeranter och provanv√§ndare har √•tkomst")
        print("\nüîí PROVPERIODSBUGG √ÑR FIXAD!")
    else:
        print("‚ùå VISSA TESTER MISSLYCKADES!")
        print("V√§nligen granska logiken")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ VERIFIERING AV PRENUMERATIONSLOGIK - SVENSKA VERSIONEN")
    print("Testar den f√∂rb√§ttrade prenumerationslogiken...")
    print()
    
    success = test_subscription_enforcement()
    
    if success:
        print("\nüéØ VERIFIERING SLUTF√ñRD")
        print("Prenumerationskontrollen √§r skotts√§ker!")
    else:
        print("\n‚ö†Ô∏è VERIFIERING MISSLYCKADES")
        print("V√§nligen granska implementationen")
