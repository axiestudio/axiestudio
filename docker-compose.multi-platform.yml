version: '3.8'

# AxieStudio Multi-Platform Docker Compose Configuration
# This file demonstrates different deployment scenarios using the new multi-platform Docker images

services:
  # ===========================================
  # SCENARIO 1: Full-Stack Deployment (All-in-One)
  # ===========================================
  axiestudio-fullstack:
    image: axiestudio/swedish:latest
    container_name: axiestudio-fullstack
    ports:
      - "7860:7860"
    environment:
      - AXIESTUDIO_HOST=0.0.0.0
      - AXIESTUDIO_PORT=7860
      - AXIESTUDIO_DATABASE_URL=sqlite:///./axiestudio.db
    volumes:
      - axiestudio_data:/app/data
      - axiestudio_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - fullstack

  # ===========================================
  # SCENARIO 2: Microservices Deployment (Separate Frontend/Backend)
  # ===========================================
  
  # Backend API Server
  axiestudio-backend:
    image: axiestudio/swedish-backend:latest
    container_name: axiestudio-backend
    ports:
      - "7860:7860"
    environment:
      - AXIESTUDIO_HOST=0.0.0.0
      - AXIESTUDIO_PORT=7860
      - AXIESTUDIO_DATABASE_URL=sqlite:///./axiestudio.db
      - AXIESTUDIO_CORS_ALLOW_ORIGINS=["http://localhost:80", "http://localhost:3000"]
    volumes:
      - axiestudio_backend_data:/app/data
      - axiestudio_backend_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - microservices

  # Frontend Web Server
  axiestudio-frontend:
    image: axiestudio/swedish-frontend:latest
    container_name: axiestudio-frontend
    ports:
      - "80:80"
    environment:
      - BACKEND_URL=http://axiestudio-backend:7860
      - FRONTEND_PORT=80
      - AXIEFLOW_MAX_FILE_SIZE_UPLOAD=100
    depends_on:
      axiestudio-backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    profiles:
      - microservices

  # ===========================================
  # SCENARIO 3: Development Setup with External Database
  # ===========================================
  
  # PostgreSQL Database for production-like setup
  postgres:
    image: postgres:15-alpine
    container_name: axiestudio-postgres
    environment:
      - POSTGRES_DB=axiestudio
      - POSTGRES_USER=axiestudio
      - POSTGRES_PASSWORD=axiestudio_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U axiestudio"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - development
      - production

  # Backend with PostgreSQL
  axiestudio-backend-postgres:
    image: axiestudio/swedish-backend:latest
    container_name: axiestudio-backend-postgres
    ports:
      - "7861:7860"
    environment:
      - AXIESTUDIO_HOST=0.0.0.0
      - AXIESTUDIO_PORT=7860
      - AXIESTUDIO_DATABASE_URL=postgresql://axiestudio:axiestudio_password@postgres:5432/axiestudio
      - AXIESTUDIO_CORS_ALLOW_ORIGINS=["http://localhost:81", "http://localhost:3000"]
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - axiestudio_dev_logs:/app/logs
    restart: unless-stopped
    profiles:
      - development
      - production

  # Frontend for development
  axiestudio-frontend-dev:
    image: axiestudio/swedish-frontend:latest
    container_name: axiestudio-frontend-dev
    ports:
      - "81:80"
    environment:
      - BACKEND_URL=http://axiestudio-backend-postgres:7860
      - FRONTEND_PORT=80
      - AXIEFLOW_MAX_FILE_SIZE_UPLOAD=100
    depends_on:
      axiestudio-backend-postgres:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - development
      - production

volumes:
  # Full-stack volumes
  axiestudio_data:
    driver: local
  axiestudio_logs:
    driver: local
  
  # Microservices volumes
  axiestudio_backend_data:
    driver: local
  axiestudio_backend_logs:
    driver: local
  
  # Development volumes
  postgres_data:
    driver: local
  axiestudio_dev_logs:
    driver: local

networks:
  default:
    name: axiestudio-network
    driver: bridge

# ===========================================
# USAGE INSTRUCTIONS
# ===========================================
#
# 1. Full-stack deployment (single container):
#    docker-compose --profile fullstack up -d
#    Access: http://localhost:7860
#
# 2. Microservices deployment (separate containers):
#    docker-compose --profile microservices up -d
#    Frontend: http://localhost:80
#    Backend API: http://localhost:7860
#
# 3. Development setup with PostgreSQL:
#    docker-compose --profile development up -d
#    Frontend: http://localhost:81
#    Backend API: http://localhost:7861
#    Database: localhost:5432
#
# 4. Production setup:
#    docker-compose --profile production up -d
#
# 5. Stop all services:
#    docker-compose down
#
# 6. Clean up volumes:
#    docker-compose down -v
#
# ===========================================
