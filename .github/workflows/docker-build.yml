name: Docker Build and Push
run-name: Docker Build and Push @${{ inputs.release_type || 'auto' }} by @${{ github.actor }}
on:
  # Automatic trigger on push to master branch (main and Signup branches deprecated)
  push:
    branches:
      - master
      - master_1
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/docs_*.yml'
      - '.github/workflows/deploy-docs-*.yml'

  workflow_call:
    inputs:
      main_version:
        required: true
        type: string
        description: "Main version to tag images with. Required for both main and base releases."
      base_version:
        required: false
        type: string
        description: "Base version to tag images with. Required for base release type."
      release_type:
        required: true
        type: string
        description: "Release type. One of 'main', 'main-ep', 'base', 'nightly-main', 'nightly-base', 'main-all', 'nightly-main-all'."
      pre_release:
        required: false
        type: boolean
        default: false
      ref:
        required: false
        type: string
        description: "Ref to check out. If not specified, will default to the main version or current branch."

  workflow_dispatch:
    inputs:
      main_version:
        description: "Main version to tag images with. Required for both main and base releases."
        required: false
        type: string
      base_version:
        description: "Base version to tag images with. Required for base release type."
        required: false
        type: string
      release_type:
        description: "Type of release. One of 'main', 'main-ep', 'base', 'nightly-main', 'nightly-base', 'main-all', 'nightly-main-all'."
        required: false
        type: string
        default: "main"
      pre_release:
        description: "Whether this is a pre-release."
        required: false
        type: boolean
        default: false
      ref:
        required: false
        type: string
        description: "Ref to check out. If not specified, will default to the main version or current branch."


env:
  PYTHON_VERSION: "3.13"
  TEST_TAG: "axiestudio/swedish:test"

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version-input.outputs.version || steps.get-version-base.outputs.version || steps.get-version-main.outputs.version }}
      release_type: ${{ steps.set-release-type.outputs.release_type }}
    steps:
      - name: Set release type for automatic builds
        id: set-release-type
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "release_type=main" >> $GITHUB_OUTPUT
            echo "Automatic build triggered by push to master - using 'main' release type"
          else
            echo "release_type=${{ inputs.release_type || 'main' }}" >> $GITHUB_OUTPUT
            echo "Manual build - using specified release type: ${{ inputs.release_type || 'main' }}"
          fi

      - name: Verify a main version exists (skip for auto builds)
        if: ${{ github.event_name != 'push' && inputs.main_version == '' && inputs.release_type != '' }}
        run: |
          # due to our how we split packages, we need to have a main version to check out.
          echo "Must specify a main version to check out for manual builds."
          exit 1

      - name: Check out the code at a specific ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || inputs.main_version || github.ref }}
          persist-credentials: true

      - name: Get Version to Tag
        if: ${{ inputs.main_version != '' || github.event_name == 'push' }}
        id: get-version-input
        run: |
          # Produces the versions we will use to tag the docker images with.

          # For automatic builds, extract version from pyproject.toml
          if [[ "${{ github.event_name }}" == "push" ]]; then
            version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
            if [ -z "$version" ]; then
              echo "Failed to extract version from pyproject.toml"
              exit 1
            fi
            echo "Automatic build version: $version"
            echo version=$version >> $GITHUB_OUTPUT
            exit 0
          fi

          # Manual build validation
          release_type="${{ inputs.release_type || steps.set-release-type.outputs.release_type }}"

          if [[ "$release_type" == "base" && "${{ inputs.base_version }}" == '' ]]; then
            echo "Must specify a base version for base release type."
            exit 1
          fi

          if [[ "$release_type" == "nightly-base" && "${{ inputs.base_version }}" == '' ]]; then
            echo "Must specify a base version for nightly-base release type."
            exit 1
          fi

          if [[ ("$release_type" == "main" || "$release_type" == "main-all") && "${{ inputs.main_version }}" == '' ]]; then
            echo "Must specify a main version for main release type."
            exit 1
          fi

          if [[ "$release_type" == "main-ep" && "${{ inputs.main_version }}" == '' ]]; then
            echo "Must specify a main version for main-ep release type."
            exit 1
          fi

          if [[ ("$release_type" == "nightly-main" || "$release_type" == "nightly-main-all") && "${{ inputs.main_version }}" == '' ]]; then
            echo "Must specify a main version for nightly-main release type."
            exit 1
          fi

          if [[ "$release_type" == "base" || "$release_type" == "nightly-base" ]]; then
            version=${{ inputs.base_version }}
            echo "base version=${{ inputs.base_version }}"
            echo version=$version
            echo version=$version >> $GITHUB_OUTPUT
          elif [[ "$release_type" == "main" || "$release_type" == "main-ep"  || "$release_type" == "nightly-main" || "$release_type" == "nightly-main-all" ]]; then
            version=${{ inputs.main_version }}
            echo version=$version
            echo version=$version >> $GITHUB_OUTPUT
          else
            echo "No version or ref specified. Exiting the workflow."
            exit 1
          fi
      - name: Get Version Base
        if: ${{ inputs.base_version == '' && (inputs.release_type == 'base' || inputs.release_type == 'nightly-base') }}
        id: get-version-base
        run: |
          version=$(uv tree | grep 'axiestudio-base' | awk '{print $3}' | sed 's/^v//' | head -n 1)
          if [ -z "$version" ]; then
            echo "Failed to extract version from uv tree output"
            exit 1
          fi
          echo version=$version
          echo version=$version >> $GITHUB_OUTPUT
      - name: Get Version Main
        if: ${{ inputs.main_version == '' && (inputs.release_type == 'main' || inputs.release_type == 'main-ep' || inputs.release_type == 'nightly-main' || inputs.release_type == 'main-all' || inputs.release_type == 'nightly-main-all') }}
        id: get-version-main
        run: |
          version=$(uv tree | grep 'axiestudio' | grep -v 'axiestudio-base' | awk '{print $2}' | sed 's/^v//')
          echo version=$version
          echo version=$version >> $GITHUB_OUTPUT
  setup:
    runs-on: ubuntu-latest
    needs: get-version
    outputs:
      docker_tags: ${{ steps.set-vars.outputs.docker_tags }}
      file: ${{ steps.set-vars.outputs.file }}
    steps:
      - name: Set Dockerfile and Tags
        id: set-vars
        run: |
          release_type="${{ inputs.release_type || needs.get-version.outputs.release_type }}"
          echo "Using release type: $release_type"

          nightly_suffix=''
          if [[ "$release_type" == "nightly-base" || "$release_type" == "nightly-main" || "$release_type" == "nightly-main-all" ]]; then
            nightly_suffix="-nightly"
          fi

          if [[ "$release_type" == "base" || "$release_type" == "nightly-base" ]]; then
            # AXIESTUDIO-BASE RELEASE
            echo "docker_tags=axiestudio/swedish${nightly_suffix}:base-${{ needs.get-version.outputs.version }},axiestudio/swedish${nightly_suffix}:base-latest" >> $GITHUB_OUTPUT
            echo "file=./docker/build_and_push_base.Dockerfile" >> $GITHUB_OUTPUT
          else
            if [[ "${{ inputs.pre_release }}" == "true" ]]; then
              # AXIESTUDIO-MAIN PRE-RELEASE
              echo "docker_tags=axiestudio/swedish${nightly_suffix}:${{ needs.get-version.outputs.version }}" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push.Dockerfile" >> $GITHUB_OUTPUT
            elif [[ "$release_type" == "main-ep" ]]; then
              # AXIESTUDIO-MAIN (ENTRYPOINT) RELEASE
              echo "docker_tags=axiestudio/swedish-ep${nightly_suffix}:${{ needs.get-version.outputs.version }},axiestudio/swedish-ep${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push_ep.Dockerfile" >> $GITHUB_OUTPUT
            elif [[ "$release_type" == "main" || "$release_type" == "nightly-main" ]]; then
              # AXIESTUDIO-MAIN RELEASE
              echo "docker_tags=axiestudio/swedish${nightly_suffix}:${{ needs.get-version.outputs.version }},axiestudio/swedish${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push.Dockerfile" >> $GITHUB_OUTPUT
            elif [[ "$release_type" == "main-all" || "$release_type" == "nightly-main-all" ]]; then
              # AXIESTUDIO-MAIN (ALL OPTIONAL DEPS) RELEASE
              echo "docker_tags=axiestudio/swedish-all${nightly_suffix}:${{ needs.get-version.outputs.version }},axiestudio/swedish-all${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push_with_extras.Dockerfile" >> $GITHUB_OUTPUT
            else
              echo "Invalid release type. Exiting the workflow."
              exit 1
            fi
          fi
  build:
    runs-on: ubuntu-latest
    needs: [get-version, setup]
    steps:
      - name: Free up disk space
        run: |
          echo "Cleaning up disk space..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker system prune -af
          sudo apt-get clean
          df -h

      - name: Check out the code at a specific ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || inputs.main_version || github.ref }}
          persist-credentials: true
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install the project
        run: |
          release_type="${{ inputs.release_type || needs.get-version.outputs.release_type }}"
          if [[ "$release_type" == "base" || "$release_type" == "nightly-base" ]]; then
            uv sync --directory src/backend/base --no-dev --no-sources
          else
            uv sync --no-dev --no-sources
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:v0.22.0
            network=host
          install: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ${{ needs.setup.outputs.file }}
          tags: ${{ needs.setup.outputs.docker_tags }}
          platforms: linux/amd64,linux/arm64
          no-cache: true



  build_components:
    if: ${{ inputs.release_type == 'main' || needs.get-version.outputs.release_type == 'main' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: [build, get-version]
    strategy:
      matrix:
        component: [docker-backend, docker-frontend]
        include:
          - component: docker-backend
            dockerfile: ./docker/build_and_push_backend.Dockerfile
            tags: axiestudio/swedish-backend:${{ needs.get-version.outputs.version }},axiestudio/swedish-backend:latest
            axiestudio_image: axiestudio/swedish:${{ needs.get-version.outputs.version }}
          - component: docker-frontend
            dockerfile: ./docker/frontend/build_and_push_frontend.Dockerfile
            tags: axiestudio/swedish-frontend:${{ needs.get-version.outputs.version }},axiestudio/swedish-frontend:latest
            axiestudio_image: axiestudio/swedish:${{ needs.get-version.outputs.version }}
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || inputs.main_version || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:v0.22.0
            network=host
          install: true


      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Wait for propagation (for backend)
        run: sleep 120

      - name: Build and push ${{ matrix.component }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            AXIESTUDIO_IMAGE=${{ matrix.axiestudio_image }}
          file: ${{ matrix.dockerfile }}
          tags: ${{ matrix.tags }}
          # provenance: false will result in a single manifest for all platforms which makes the image pullable from arm64 machines via the emulation (e.g. Apple Silicon machines)
          provenance: false

  restart-space:
    name: Restart HuggingFace Spaces
    if: false  # Disabled - requires HUGGINGFACE_API_TOKEN secret
    runs-on: ubuntu-latest
    needs: [build, get-version]
    strategy:
      matrix:
        python-version:
          - "3.13"
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || inputs.main_version || github.ref }}
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          python-version: ${{ matrix.python-version }}

      - name: Restart HuggingFace Spaces Build
        run: |
          uv run ./scripts/factory_restart_space.py --space "AxieStudio/Swedish" --token ${{ secrets.HUGGINGFACE_API_TOKEN }}



