name: Build Multi-Platform Docker Images
run-name: Building Multi-Platform Docker Images by @${{ github.actor }}

on:
  # Trigger on push to master branch
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/docs_*.yml'
      - '.github/workflows/deploy-docs-*.yml'

  # Manual trigger
  workflow_dispatch:
    inputs:
      build_type:
        description: "Type of build to execute"
        required: true
        type: choice
        options:
          - "all"
          - "fullstack"
          - "frontend"
          - "backend"
        default: "all"
      tag_suffix:
        description: "Additional tag suffix (e.g., 'v1.0', 'beta')"
        required: false
        type: string
        default: "latest"

env:
  PYTHON_VERSION: "3.13"
  DOCKER_BASE_NAME: "axiestudio"

jobs:
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: master
          persist-credentials: true

      - name: Get version from pyproject.toml
        id: get-version
        run: |
          version=$(grep '^version = ' src/backend/base/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          if [ -z "$version" ]; then
            echo "Failed to extract version from backend pyproject.toml, using default"
            version="1.0.0"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Extracted version: $version"

      - name: Set build matrix
        id: set-matrix
        run: |
          build_type="${{ inputs.build_type || 'all' }}"

          if [[ "$build_type" == "all" ]]; then
            matrix='[
              {
                "name": "swedish",
                "dockerfile": "./docker/build_and_push.Dockerfile",
                "image_name": "swedish",
                "description": "Swedish full-stack application with frontend and backend",
                "ports": "7860:7860",
                "run_command": "docker run -p 7860:7860"
              },
              {
                "name": "swedish-frontend",
                "dockerfile": "./docker/frontend/build_and_push_frontend.Dockerfile",
                "image_name": "swedish-frontend",
                "description": "Swedish frontend-only application with nginx",
                "ports": "80:80",
                "run_command": "docker run -p 80:80 -e BACKEND_URL=http://your-backend:7860"
              },
              {
                "name": "swedish-backend",
                "dockerfile": "./docker/swedish-backend.Dockerfile",
                "image_name": "swedish-backend",
                "description": "Swedish backend-only API server",
                "ports": "7860:7860",
                "run_command": "docker run -p 7860:7860"
              }
            ]'
          elif [[ "$build_type" == "fullstack" ]]; then
            matrix='[
              {
                "name": "swedish",
                "dockerfile": "./docker/build_and_push.Dockerfile",
                "image_name": "swedish",
                "description": "Swedish full-stack application with frontend and backend",
                "ports": "7860:7860",
                "run_command": "docker run -p 7860:7860"
              }
            ]'
          elif [[ "$build_type" == "frontend" ]]; then
            matrix='[
              {
                "name": "swedish-frontend",
                "dockerfile": "./docker/frontend/build_and_push_frontend.Dockerfile",
                "image_name": "swedish-frontend",
                "description": "Swedish frontend-only application with nginx",
                "ports": "80:80",
                "run_command": "docker run -p 80:80 -e BACKEND_URL=http://your-backend:7860"
              }
            ]'
          elif [[ "$build_type" == "backend" ]]; then
            matrix='[
              {
                "name": "swedish-backend",
                "dockerfile": "./docker/swedish-backend.Dockerfile",
                "image_name": "swedish-backend",
                "description": "Swedish backend-only API server",
                "ports": "7860:7860",
                "run_command": "docker run -p 7860:7860"
              }
            ]'
          fi

          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Build matrix: $matrix"

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Free up disk space
        run: |
          echo "Cleaning up disk space..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker system prune -af
          sudo apt-get clean
          df -h

      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: master
          persist-credentials: true

      - name: Setup UV and Python (for backend builds)
        if: matrix.name == 'backend' || matrix.name == 'fullstack'
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies (for backend builds)
        if: matrix.name == 'backend' || matrix.name == 'fullstack'
        run: |
          uv sync --no-dev --no-sources

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:v0.22.0
            network=host
          install: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker tags
        id: set-tags
        run: |
          base_tag="${{ env.DOCKER_BASE_NAME }}/${{ matrix.image_name }}"
          version_tag="${base_tag}:${{ needs.setup.outputs.version }}"
          latest_tag="${base_tag}:latest"

          tags="${version_tag},${latest_tag}"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.tag_suffix }}" != "latest" ]]; then
            custom_tag="${base_tag}:${{ inputs.tag_suffix }}"
            tags="${tags},${custom_tag}"
          fi

          echo "tags=$tags" >> $GITHUB_OUTPUT
          echo "Docker tags for ${{ matrix.name }}: $tags"

      - name: Build and Push ${{ matrix.name }} Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ${{ matrix.dockerfile }}
          tags: ${{ steps.set-tags.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          no-cache: true

      - name: Image build summary
        run: |
          echo "‚úÖ Successfully built and pushed ${{ matrix.name }} Docker image!"
          echo "üìù Description: ${{ matrix.description }}"
          echo "üè∑Ô∏è  Tags: ${{ steps.set-tags.outputs.tags }}"
          echo "üåç Platforms: linux/amd64, linux/arm64"
          echo "üì¶ Image: ${{ env.DOCKER_BASE_NAME }}/${{ matrix.image_name }}"
          echo "üîå Ports: ${{ matrix.ports }}"
          echo ""
          echo "To use this image:"
          echo "docker pull ${{ env.DOCKER_BASE_NAME }}/${{ matrix.image_name }}:latest"
          echo "${{ matrix.run_command }} ${{ env.DOCKER_BASE_NAME }}/${{ matrix.image_name }}:latest"

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "üöÄ Multi-Platform Docker Build Complete!"
          echo ""
          echo "üìä Build Results:"
          echo "- Version: ${{ needs.setup.outputs.version }}"
          echo "- Branch: master"
          echo "- Build Type: ${{ inputs.build_type || 'all' }}"
          echo ""
          echo "üê≥ Available Swedish Images:"
          echo "- axiestudio/swedish:latest (Swedish full-stack app)"
          echo "- axiestudio/swedish-frontend:latest (Swedish frontend only)"
          echo "- axiestudio/swedish-backend:latest (Swedish backend only)"
          echo ""
          echo "üìö Usage Examples:"
          echo "# Swedish full-stack deployment (all-in-one)"
          echo "docker run -p 7860:7860 axiestudio/swedish:latest"
          echo ""
          echo "# Swedish microservices deployment (separate containers)"
          echo "docker run -d --name swedish-backend -p 7860:7860 axiestudio/swedish-backend:latest"
          echo "docker run -d --name swedish-frontend -p 80:80 -e BACKEND_URL=http://backend:7860 axiestudio/swedish-frontend:latest"
          echo ""
          echo "# Swedish Docker Compose deployment"
          echo "version: '3.8'"
          echo "services:"
          echo "  backend:"
          echo "    image: axiestudio/swedish-backend:latest"
          echo "    ports: ['7860:7860']"
          echo "  frontend:"
          echo "    image: axiestudio/swedish-frontend:latest"
          echo "    ports: ['80:80']"
          echo "    environment:"
          echo "      BACKEND_URL: http://backend:7860"
          echo "    depends_on: [backend]"
