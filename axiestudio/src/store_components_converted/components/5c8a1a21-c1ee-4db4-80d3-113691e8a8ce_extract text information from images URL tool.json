{
  "id": "5c8a1a21-c1ee-4db4-80d3-113691e8a8ce",
  "name": "extract text information from image's URL. (tool)",
  "description": "get the information from the image's URL.\n- Pytesseract & SERP API are needed.\n- You can modify the code to any language you prefer. ( ask chat GPT how to do )\n- Your feedback is highly appreciated!!!\n- Gmail: k20010928@gmail.com (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "KickCoco",
    "first_name": "ç«£å‡±",
    "last_name": "æ¶‚",
    "id": "19962c26-5118-45eb-8725-0ab7fc8761f2",
    "full_name": "ç«£å‡± æ¶‚"
  },
  "store_url": "https://www.langflow.store/store/component/5c8a1a21-c1ee-4db4-80d3-113691e8a8ce",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-03T08:57:58.851Z",
    "updated": "2024-09-03T08:57:58.873Z",
    "downloaded": "2025-08-19T17:50:05.517Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "ImageProcessing_URL",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "SerpAPI Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import requests\r\nfrom PIL import Image\r\nfrom io import BytesIO\r\nimport pytesseract\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\n\r\nclass ImageProcessingComponent(LCToolComponent):\r\n    display_name: str = \"Image Processing (OCR Mode)\"\r\n    description: str = \"[get the information from the image's URL.]\\\r\n> Pytesseract & SERP API are needed.\\\r\n> You can modify the code to any language you prefer. ( ask chat GPT how to do )\\\r\n> Your feedback is highly appreciated. Gmail: k20010928@gmail.com\"\r\n    name = \"ImageProcessing_URL\"\r\n    icon = \"ðŸŒŸ\"\r\n    documentation: str = \"https://tesseract-ocr.github.io/\"\r\n\r\n    inputs = [\r\n        SecretStrInput(name=\"api_key\", display_name=\"SerpAPI Key\", required=True),\r\n    ]\r\n\r\n    def run_model(self, url: str) -> Data:\r\n        if not url:\r\n            raise ValueError(\"URL input cannot be empty\")\r\n\r\n        # Download and process the image\r\n        processed_data = self._process_image_url(url)\r\n        \r\n        data = Data(data=processed_data, text=\"Processed image data with extracted content\")\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        return Tool(\r\n            name=\"process_image_url\",\r\n            description=\"Process an image URL and return relevant information, including OCR text.\",\r\n            func=lambda url: self.run_model(url),\r\n        )\r\n\r\n    def _process_image_url(self, url: str) -> dict:\r\n        response = requests.get(url)\r\n        if response.status_code != 200:\r\n            raise ValueError(f\"Failed to retrieve data from URL: {url}\")\r\n\r\n        # Open the image using PIL\r\n        image = Image.open(BytesIO(response.content))\r\n\r\n        # Perform OCR using Tesseract\r\n        ocr_text = pytesseract.image_to_string(image)\r\n        \r\n        print(decoded_text)\r\n        processed_data = {\r\n            \"tool_num\": 1,\r\n            \"ocr_text\": decoded_text,  # Extracted text from the image\r\n        }\r\n\r\n        return processed_data\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "get the information from the image's URL.\n- Pytesseract & SERP API are needed.\n- You can modify the code to any language you prefer. ( ask chat GPT how to do )\n- Your feedback is highly appreciated!!!\n- Gmail: k20010928@gmail.com",
            "icon": "ðŸŒŸ",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "extract text information from image's URL. (tool)",
            "documentation": "https://tesseract-ocr.github.io/",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "api_key"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "ImageProcessing_URL-gAw61"
        },
        "id": "ImageProcessing_URL-gAw61",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "ImageProcessing_URL": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "5c8a1a21-c1ee-4db4-80d3-113691e8a8ce",
    "name": "extract text information from image's URL. (tool)",
    "description": "get the information from the image's URL.\n- Pytesseract & SERP API are needed.\n- You can modify the code to any language you prefer. ( ask chat GPT how to do )\n- Your feedback is highly appreciated!!!\n- Gmail: k20010928@gmail.com",
    "is_component": true,
    "liked_by_count": "7",
    "downloads_count": "66",
    "metadata": {
      "ImageProcessing_URL": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "ImageProcessing_URL",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "SerpAPI Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import requests\r\nfrom PIL import Image\r\nfrom io import BytesIO\r\nimport pytesseract\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\n\r\nclass ImageProcessingComponent(LCToolComponent):\r\n    display_name: str = \"Image Processing (OCR Mode)\"\r\n    description: str = \"[get the information from the image's URL.]\\\r\n> Pytesseract & SERP API are needed.\\\r\n> You can modify the code to any language you prefer. ( ask chat GPT how to do )\\\r\n> Your feedback is highly appreciated. Gmail: k20010928@gmail.com\"\r\n    name = \"ImageProcessing_URL\"\r\n    icon = \"ðŸŒŸ\"\r\n    documentation: str = \"https://tesseract-ocr.github.io/\"\r\n\r\n    inputs = [\r\n        SecretStrInput(name=\"api_key\", display_name=\"SerpAPI Key\", required=True),\r\n    ]\r\n\r\n    def run_model(self, url: str) -> Data:\r\n        if not url:\r\n            raise ValueError(\"URL input cannot be empty\")\r\n\r\n        # Download and process the image\r\n        processed_data = self._process_image_url(url)\r\n        \r\n        data = Data(data=processed_data, text=\"Processed image data with extracted content\")\r\n        self.status = data\r\n        return data\r\n\r\n    def build_tool(self) -> Tool:\r\n        return Tool(\r\n            name=\"process_image_url\",\r\n            description=\"Process an image URL and return relevant information, including OCR text.\",\r\n            func=lambda url: self.run_model(url),\r\n        )\r\n\r\n    def _process_image_url(self, url: str) -> dict:\r\n        response = requests.get(url)\r\n        if response.status_code != 200:\r\n            raise ValueError(f\"Failed to retrieve data from URL: {url}\")\r\n\r\n        # Open the image using PIL\r\n        image = Image.open(BytesIO(response.content))\r\n\r\n        # Perform OCR using Tesseract\r\n        ocr_text = pytesseract.image_to_string(image)\r\n        \r\n        print(decoded_text)\r\n        processed_data = {\r\n            \"tool_num\": 1,\r\n            \"ocr_text\": decoded_text,  # Extracted text from the image\r\n        }\r\n\r\n        return processed_data\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                }
              },
              "description": "get the information from the image's URL.\n- Pytesseract & SERP API are needed.\n- You can modify the code to any language you prefer. ( ask chat GPT how to do )\n- Your feedback is highly appreciated!!!\n- Gmail: k20010928@gmail.com",
              "icon": "ðŸŒŸ",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "extract text information from image's URL. (tool)",
              "documentation": "https://tesseract-ocr.github.io/",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "api_key"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "ImageProcessing_URL-gAw61"
          },
          "id": "ImageProcessing_URL-gAw61",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-09-03T08:57:58.851Z",
    "date_updated": "2024-09-03T08:57:58.873Z",
    "status": "Public",
    "sort": null,
    "user_updated": "19962c26-5118-45eb-8725-0ab7fc8761f2",
    "user_created": {
      "username": "KickCoco",
      "first_name": "ç«£å‡±",
      "last_name": "æ¶‚",
      "id": "19962c26-5118-45eb-8725-0ab7fc8761f2"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:10.258Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}