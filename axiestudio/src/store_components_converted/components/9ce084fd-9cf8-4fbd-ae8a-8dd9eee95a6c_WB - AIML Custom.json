{
  "id": "9ce084fd-9cf8-4fbd-ae8a-8dd9eee95a6c",
  "name": "WB - AIML Custom",
  "description": "Generates text using AIML LLMs.  Acesse a documentação da AIML para melhor entendimento.  https://docs.aimlapi.com/api-reference/examples (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "wagner",
    "first_name": "Wagner",
    "last_name": "Bittencourt",
    "id": "00808143-7274-457d-a5b8-75c89231a3dd",
    "full_name": "Wagner Bittencourt"
  },
  "store_url": "https://www.langflow.store/store/component/9ce084fd-9cf8-4fbd-ae8a-8dd9eee95a6c",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-05T14:24:20.319Z",
    "updated": "2024-08-05T14:24:20.344Z",
    "downloaded": "2025-08-19T17:50:06.128Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "AIMLModel",
          "node": {
            "template": {
              "_type": "Component",
              "aiml_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "aiml_api_base",
                "display_name": "AIML API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs como JinaChat, LocalAI e Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "AIML API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "The AIML API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\r\nfrom functools import reduce\r\n\r\nfrom axiestudio.field_typing.range_spec import RangeSpec\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.models.aiml_constants import AIML_CHAT_MODELS\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\r\nfrom axiestudio.field_typing import LanguageModel\r\nfrom axiestudio.inputs import (\r\n    BoolInput,\r\n    DictInput,\r\n    DropdownInput,\r\n    FloatInput,\r\n    IntInput,\r\n    SecretStrInput,\r\n    StrInput,\r\n)\r\n\r\n\r\nclass AIMLModelComponent(LCModelComponent):\r\n    display_name = \"AIML\"\r\n    description = \"Generates text using AIML LLMs.\"\r\n    icon = \"AIML\"\r\n    name = \"AIMLModel\"\r\n\r\n    inputs = LCModelComponent._base_inputs + [\r\n        IntInput(\r\n            name=\"max_tokens\",\r\n            display_name=\"Max Tokens\",\r\n            advanced=True,\r\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\r\n            range_spec=RangeSpec(min=0, max=128000),\r\n        ),\r\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\r\n        BoolInput(\r\n            name=\"json_mode\",\r\n            display_name=\"JSON Mode\",\r\n            advanced=True,\r\n            info=\"If True, it will output JSON regardless of passing a schema.\",\r\n        ),\r\n        DictInput(\r\n            name=\"output_schema\",\r\n            is_list=True,\r\n            display_name=\"Schema\",\r\n            advanced=True,\r\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"model_name\",\r\n            display_name=\"Model Name\",\r\n            advanced=False,\r\n            options=AIML_CHAT_MODELS,\r\n            value=AIML_CHAT_MODELS[0],\r\n        ),\r\n        StrInput(\r\n            name=\"aiml_api_base\",\r\n            display_name=\"AIML API Base\",\r\n            advanced=True,\r\n            info=\"The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs como JinaChat, LocalAI e Prem.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"AIML API Key\",\r\n            info=\"The AIML API Key to use for the OpenAI model.\",\r\n            advanced=False,\r\n            value=\"AIML_API_KEY\",\r\n        ),\r\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\r\n        IntInput(\r\n            name=\"seed\",\r\n            display_name=\"Seed\",\r\n            info=\"The seed controls the reproducibility of the job.\",\r\n            advanced=True,\r\n            value=1,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\r\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\r\n        aiml_api_key = self.api_key\r\n        temperature = self.temperature\r\n        model_name: str = self.model_name\r\n        max_tokens = self.max_tokens\r\n        model_kwargs = self.model_kwargs or {}\r\n        aiml_api_base = self.aiml_api_base or \"https://api.aimlapi.com/v1\"\r\n        json_mode = bool(output_schema_dict) or self.json_mode\r\n        seed = self.seed\r\n\r\n        if isinstance(aiml_api_key, SecretStr):\r\n            openai_api_key = aiml_api_key.get_secret_value()\r\n        else:\r\n            openai_api_key = aiml_api_key\r\n\r\n        model = ChatOpenAI(\r\n            model=model_name,\r\n            temperature=temperature,\r\n            api_key=openai_api_key,\r\n            base_url=aiml_api_base,\r\n            max_tokens=max_tokens or None,\r\n            **model_kwargs\r\n        )\r\n\r\n        return model  # type: ignore\r\n\r\n    def _get_exception_message(self, e: Exception):\r\n        \"\"\"\r\n        Get a message from an OpenAI exception.\r\n\r\n        Args:\r\n            exception (Exception): The exception to get the message from.\r\n\r\n        Returns:\r\n            str: The message from the exception.\r\n        \"\"\"\r\n        try:\r\n            from openai.error import BadRequestError\r\n        except ImportError:\r\n            return None\r\n        if isinstance(e, BadRequestError):\r\n            message = e.json_body.get(\"error\", {}).get(\"message\", \"\")  # type: ignore\r\n            if message:\r\n                return message\r\n        return None\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "json_mode",
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "zero-one-ai/Yi-34B-Chat",
                  "allenai/OLMo-7B-Instruct",
                  "allenai/OLMo-7B-Twin-2T",
                  "allenai/OLMo-7B",
                  "Austism/chronos-hermes-13b",
                  "cognitivecomputations/dolphin-2.5-mixtral-8x7b",
                  "deepseek-ai/deepseek-coder-33b-instruct",
                  "deepseek-ai/deepseek-llm-67b-chat",
                  "garage-bAInd/Platypus2-70B-instruct",
                  "google/gemma-2b-it",
                  "google/gemma-7b-it",
                  "Gryphe/MythoMax-L2-13b",
                  "lmsys/vicuna-13b-v1.5",
                  "lmsys/vicuna-7b-v1.5",
                  "codellama/CodeLlama-13b-Instruct-hf",
                  "codellama/CodeLlama-34b-Instruct-hf",
                  "codellama/CodeLlama-70b-Instruct-hf",
                  "codellama/CodeLlama-7b-Instruct-hf",
                  "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
                  "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
                  "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                  "meta-llama/Llama-2-70b-chat-hf",
                  "meta-llama/Llama-2-13b-chat-hf",
                  "meta-llama/Llama-2-7b-chat-hf",
                  "mistralai/Mistral-7B-Instruct-v0.1",
                  "mistralai/Mistral-7B-Instruct-v0.2",
                  "mistralai/Mixtral-8x7B-Instruct-v0.1",
                  "NousResearch/Nous-Capybara-7B-V1p9",
                  "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
                  "NousResearch/Nous-Hermes-2-Mixtral-8x7B-SFT",
                  "NousResearch/Nous-Hermes-llama-2-7b",
                  "NousResearch/Nous-Hermes-Llama2-13b",
                  "NousResearch/Nous-Hermes-2-Yi-34B",
                  "openchat/openchat-3.5-1210",
                  "Open-Orca/Mistral-7B-OpenOrca",
                  "togethercomputer/Qwen-7B-Chat",
                  "Qwen/Qwen1.5-0.5B-Chat",
                  "Qwen/Qwen1.5-1.8B-Chat",
                  "Qwen/Qwen1.5-4B-Chat",
                  "Qwen/Qwen1.5-7B-Chat",
                  "Qwen/Qwen1.5-14B-Chat",
                  "Qwen/Qwen1.5-72B-Chat",
                  "snorkelai/Snorkel-Mistral-PairRM-DPO",
                  "togethercomputer/alpaca-7b",
                  "teknium/OpenHermes-2-Mistral-7B",
                  "teknium/OpenHermes-2p5-Mistral-7B",
                  "togethercomputer/falcon-40b-instruct",
                  "togethercomputer/falcon-7b-instruct",
                  "togethercomputer/Llama-2-7B-32K-Instruct",
                  "togethercomputer/RedPajama-INCITE-Chat-3B-v1",
                  "togethercomputer/RedPajama-INCITE-7B-Chat",
                  "togethercomputer/StripedHyena-Nous-7B",
                  "Undi95/ReMM-SLERP-L2-13B",
                  "Undi95/Toppy-M-7B",
                  "WizardLM/WizardLM-13B-V1.2",
                  "upstage/SOLAR-10.7B-Instruct-v1.0",
                  "gpt-4",
                  "gpt-4-turbo",
                  "gpt-4-0613",
                  "gpt-4-32k",
                  "gpt-4-32k-0613",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-1106",
                  "gpt-3.5-turbo-instruct",
                  "gpt-3.5-turbo-16k",
                  "gpt-3.5-turbo-0613",
                  "gpt-3.5-turbo-16k-0613",
                  "gpt-4o",
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "gpt-4-turbo",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "output_schema",
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 1,
                "name": "seed",
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.1,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using AIML LLMs.  Acesse a documentação da AIML para melhor entendimento.  https://docs.aimlapi.com/api-reference/examples",
            "icon": "AIML",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "WB - AIML Custom",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "aiml_api_base",
              "api_key",
              "temperature",
              "seed"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "AIMLModel-CqHki"
        },
        "id": "AIMLModel-CqHki",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "AIMLModel": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "9ce084fd-9cf8-4fbd-ae8a-8dd9eee95a6c",
    "name": "WB - AIML Custom",
    "description": "Generates text using AIML LLMs.  Acesse a documentação da AIML para melhor entendimento.  https://docs.aimlapi.com/api-reference/examples",
    "is_component": true,
    "liked_by_count": "10",
    "downloads_count": "41",
    "metadata": {
      "AIMLModel": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.14",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "AIMLModel",
            "node": {
              "template": {
                "_type": "Component",
                "aiml_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "aiml_api_base",
                  "display_name": "AIML API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs como JinaChat, LocalAI e Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "api_key",
                  "display_name": "AIML API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The AIML API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\r\nfrom functools import reduce\r\n\r\nfrom axiestudio.field_typing.range_spec import RangeSpec\r\nfrom langchain_openai import ChatOpenAI\r\nfrom pydantic.v1 import SecretStr\r\n\r\nfrom axiestudio.base.models.aiml_constants import AIML_CHAT_MODELS\r\nfrom axiestudio.base.models.model import LCModelComponent\r\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\r\nfrom axiestudio.field_typing import LanguageModel\r\nfrom axiestudio.inputs import (\r\n    BoolInput,\r\n    DictInput,\r\n    DropdownInput,\r\n    FloatInput,\r\n    IntInput,\r\n    SecretStrInput,\r\n    StrInput,\r\n)\r\n\r\n\r\nclass AIMLModelComponent(LCModelComponent):\r\n    display_name = \"AIML\"\r\n    description = \"Generates text using AIML LLMs.\"\r\n    icon = \"AIML\"\r\n    name = \"AIMLModel\"\r\n\r\n    inputs = LCModelComponent._base_inputs + [\r\n        IntInput(\r\n            name=\"max_tokens\",\r\n            display_name=\"Max Tokens\",\r\n            advanced=True,\r\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\r\n            range_spec=RangeSpec(min=0, max=128000),\r\n        ),\r\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\r\n        BoolInput(\r\n            name=\"json_mode\",\r\n            display_name=\"JSON Mode\",\r\n            advanced=True,\r\n            info=\"If True, it will output JSON regardless of passing a schema.\",\r\n        ),\r\n        DictInput(\r\n            name=\"output_schema\",\r\n            is_list=True,\r\n            display_name=\"Schema\",\r\n            advanced=True,\r\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"model_name\",\r\n            display_name=\"Model Name\",\r\n            advanced=False,\r\n            options=AIML_CHAT_MODELS,\r\n            value=AIML_CHAT_MODELS[0],\r\n        ),\r\n        StrInput(\r\n            name=\"aiml_api_base\",\r\n            display_name=\"AIML API Base\",\r\n            advanced=True,\r\n            info=\"The base URL of the OpenAI API. Defaults to https://api.aimlapi.com . You can change this to use other APIs como JinaChat, LocalAI e Prem.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"AIML API Key\",\r\n            info=\"The AIML API Key to use for the OpenAI model.\",\r\n            advanced=False,\r\n            value=\"AIML_API_KEY\",\r\n        ),\r\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\r\n        IntInput(\r\n            name=\"seed\",\r\n            display_name=\"Seed\",\r\n            info=\"The seed controls the reproducibility of the job.\",\r\n            advanced=True,\r\n            value=1,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\r\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\r\n        aiml_api_key = self.api_key\r\n        temperature = self.temperature\r\n        model_name: str = self.model_name\r\n        max_tokens = self.max_tokens\r\n        model_kwargs = self.model_kwargs or {}\r\n        aiml_api_base = self.aiml_api_base or \"https://api.aimlapi.com/v1\"\r\n        json_mode = bool(output_schema_dict) or self.json_mode\r\n        seed = self.seed\r\n\r\n        if isinstance(aiml_api_key, SecretStr):\r\n            openai_api_key = aiml_api_key.get_secret_value()\r\n        else:\r\n            openai_api_key = aiml_api_key\r\n\r\n        model = ChatOpenAI(\r\n            model=model_name,\r\n            temperature=temperature,\r\n            api_key=openai_api_key,\r\n            base_url=aiml_api_base,\r\n            max_tokens=max_tokens or None,\r\n            **model_kwargs\r\n        )\r\n\r\n        return model  # type: ignore\r\n\r\n    def _get_exception_message(self, e: Exception):\r\n        \"\"\"\r\n        Get a message from an OpenAI exception.\r\n\r\n        Args:\r\n            exception (Exception): The exception to get the message from.\r\n\r\n        Returns:\r\n            str: The message from the exception.\r\n        \"\"\"\r\n        try:\r\n            from openai.error import BadRequestError\r\n        except ImportError:\r\n            return None\r\n        if isinstance(e, BadRequestError):\r\n            message = e.json_body.get(\"error\", {}).get(\"message\", \"\")  # type: ignore\r\n            if message:\r\n                return message\r\n        return None\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "json_mode",
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "zero-one-ai/Yi-34B-Chat",
                    "allenai/OLMo-7B-Instruct",
                    "allenai/OLMo-7B-Twin-2T",
                    "allenai/OLMo-7B",
                    "Austism/chronos-hermes-13b",
                    "cognitivecomputations/dolphin-2.5-mixtral-8x7b",
                    "deepseek-ai/deepseek-coder-33b-instruct",
                    "deepseek-ai/deepseek-llm-67b-chat",
                    "garage-bAInd/Platypus2-70B-instruct",
                    "google/gemma-2b-it",
                    "google/gemma-7b-it",
                    "Gryphe/MythoMax-L2-13b",
                    "lmsys/vicuna-13b-v1.5",
                    "lmsys/vicuna-7b-v1.5",
                    "codellama/CodeLlama-13b-Instruct-hf",
                    "codellama/CodeLlama-34b-Instruct-hf",
                    "codellama/CodeLlama-70b-Instruct-hf",
                    "codellama/CodeLlama-7b-Instruct-hf",
                    "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
                    "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
                    "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                    "meta-llama/Llama-2-70b-chat-hf",
                    "meta-llama/Llama-2-13b-chat-hf",
                    "meta-llama/Llama-2-7b-chat-hf",
                    "mistralai/Mistral-7B-Instruct-v0.1",
                    "mistralai/Mistral-7B-Instruct-v0.2",
                    "mistralai/Mixtral-8x7B-Instruct-v0.1",
                    "NousResearch/Nous-Capybara-7B-V1p9",
                    "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
                    "NousResearch/Nous-Hermes-2-Mixtral-8x7B-SFT",
                    "NousResearch/Nous-Hermes-llama-2-7b",
                    "NousResearch/Nous-Hermes-Llama2-13b",
                    "NousResearch/Nous-Hermes-2-Yi-34B",
                    "openchat/openchat-3.5-1210",
                    "Open-Orca/Mistral-7B-OpenOrca",
                    "togethercomputer/Qwen-7B-Chat",
                    "Qwen/Qwen1.5-0.5B-Chat",
                    "Qwen/Qwen1.5-1.8B-Chat",
                    "Qwen/Qwen1.5-4B-Chat",
                    "Qwen/Qwen1.5-7B-Chat",
                    "Qwen/Qwen1.5-14B-Chat",
                    "Qwen/Qwen1.5-72B-Chat",
                    "snorkelai/Snorkel-Mistral-PairRM-DPO",
                    "togethercomputer/alpaca-7b",
                    "teknium/OpenHermes-2-Mistral-7B",
                    "teknium/OpenHermes-2p5-Mistral-7B",
                    "togethercomputer/falcon-40b-instruct",
                    "togethercomputer/falcon-7b-instruct",
                    "togethercomputer/Llama-2-7B-32K-Instruct",
                    "togethercomputer/RedPajama-INCITE-Chat-3B-v1",
                    "togethercomputer/RedPajama-INCITE-7B-Chat",
                    "togethercomputer/StripedHyena-Nous-7B",
                    "Undi95/ReMM-SLERP-L2-13B",
                    "Undi95/Toppy-M-7B",
                    "WizardLM/WizardLM-13B-V1.2",
                    "upstage/SOLAR-10.7B-Instruct-v1.0",
                    "gpt-4",
                    "gpt-4-turbo",
                    "gpt-4-0613",
                    "gpt-4-32k",
                    "gpt-4-32k-0613",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-1106",
                    "gpt-3.5-turbo-instruct",
                    "gpt-3.5-turbo-16k",
                    "gpt-3.5-turbo-0613",
                    "gpt-3.5-turbo-16k-0613",
                    "gpt-4o",
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "gpt-4-turbo",
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "output_schema",
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 1,
                  "name": "seed",
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0.1,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using AIML LLMs.  Acesse a documentação da AIML para melhor entendimento.  https://docs.aimlapi.com/api-reference/examples",
              "icon": "AIML",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "WB - AIML Custom",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "aiml_api_base",
                "api_key",
                "temperature",
                "seed"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "AIMLModel-CqHki"
          },
          "id": "AIMLModel-CqHki",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-05T14:24:20.319Z",
    "date_updated": "2024-08-05T14:24:20.344Z",
    "status": "Public",
    "sort": null,
    "user_updated": "00808143-7274-457d-a5b8-75c89231a3dd",
    "user_created": {
      "username": "wagner",
      "first_name": "Wagner",
      "last_name": "Bittencourt",
      "id": "00808143-7274-457d-a5b8-75c89231a3dd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.165Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 12,
    "converter_version": "1.0.0"
  }
}