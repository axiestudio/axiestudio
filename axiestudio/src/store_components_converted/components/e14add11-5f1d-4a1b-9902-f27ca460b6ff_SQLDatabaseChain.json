{
  "id": "e14add11-5f1d-4a1b-9902-f27ca460b6ff",
  "name": "SQLDatabaseChain",
  "description": "An example-included LLM chain for executing SQL queries v2 (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "yamon",
    "first_name": "YamonCompany",
    "last_name": "kim",
    "id": "23c5d1e9-66fe-4789-85da-d07be25ec3cc",
    "full_name": "YamonCompany kim"
  },
  "store_url": "https://www.langflow.store/store/component/e14add11-5f1d-4a1b-9902-f27ca460b6ff",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-03-20T15:34:27.876Z",
    "updated": "2024-03-28T10:04:55.365Z",
    "downloaded": "2025-08-19T17:50:05.712Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.9",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "id": "Data-BKI1G",
          "type": "Data",
          "node": {
            "output_types": [
              "Chain",
              "Callable",
              "SQLDatabaseChain"
            ],
            "display_name": "SQLDatabaseChain",
            "documentation": "",
            "base_classes": [
              "Chain",
              "Callable",
              "Chain",
              "SQLDatabaseChain"
            ],
            "description": "An example-included LLM chain for executing SQL queries v2",
            "template": {
              "output_parser_PromptTemplate-r4u5r": {
                "type": "BaseOutputParser",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "output_parser",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "output_parser",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "output_parser"
                }
              },
              "input_types_PromptTemplate-r4u5r": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_types",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "input_types",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "input_types"
                }
              },
              "input_variables_PromptTemplate-r4u5r": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "value": [
                  "dialect",
                  "table_info",
                  "exsql",
                  "input"
                ],
                "display_name": "input_variables",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "input_variables"
                }
              },
              "metadata_PromptTemplate-r4u5r": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "metadata",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "metadata",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "metadata"
                }
              },
              "name_PromptTemplate-r4u5r": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "name",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "name",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "name"
                }
              },
              "partial_variables_PromptTemplate-r4u5r": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "partial_variables",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "partial_variables",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "partial_variables"
                }
              },
              "tags_PromptTemplate-r4u5r": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "tags",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "tags",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "tags"
                }
              },
              "template_PromptTemplate-r4u5r": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "password": false,
                "name": "template",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "value": "Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\nUse the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly use the following tables:\n\n{table_info}\n\nIf someone asks for the table foobar, they really mean the employee table.\nExample:\n{exsql}\n\nQuestion: {input}\n",
                "display_name": "template",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "template"
                }
              },
              "template_format_PromptTemplate-r4u5r": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "f-string",
                "fileTypes": [],
                "password": false,
                "name": "template_format",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "template_format",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "template_format"
                }
              },
              "validate_template_PromptTemplate-r4u5r": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "password": false,
                "name": "validate_template",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "validate_template",
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "validate_template"
                }
              },
              "input_PromptTemplate-r4u5r": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input",
                "display_name": "input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true,
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "input"
                }
              },
              "table_info_PromptTemplate-r4u5r": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "table_info",
                "display_name": "table_info",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true,
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "table_info"
                }
              },
              "dialect_PromptTemplate-r4u5r": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "dialect",
                "display_name": "dialect",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true,
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "dialect"
                }
              },
              "exsql_PromptTemplate-r4u5r": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "\n\n### 1. 카테고리별 총 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CATEGORY\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 2. 지역별 제품 판매 분포\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    F.PRD, \n    SUM(F.QACTUAL) AS 판매수량\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, F.PRD\nORDER BY F.REGION1, 판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 3. 상품별 평균 판매 가격\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.PRD, \n    AVG(F.SACTUAL / NULLIF(F.QACTUAL, 0)) AS 평균판매가격\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD\nHAVING SUM(F.QACTUAL) > 0\nORDER BY 평균판매가격 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 4. 최고 판매 제품 및 해당 제품의 브랜드\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT TOP 1 WITH TIES\n    F.PRD AS 제품명,\n    DM.BRAND AS 브랜드명,\n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD, DM.BRAND\nORDER BY 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 5. 각 지역별로 가장 인기 있는 카테고리 찾기\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, DM.CATEGORY\nORDER BY F.REGION1, 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n각 쿼리에서 `@PageNumber`와 `@RowsPerPage` 변수를 설정하여, 원하는 페이지와 페이지 당 행의 수를 조정할 수 있습니다. 이를 통해 대규모 데이터셋에서 필요한 정보를 효율적으로 조회하고 관리할 수 있습니다. 다음은 나머지 쿼리들에 대한 예시입니다.\n\n### 6. 판매채널별 총 판매 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CHANNEL, \n   \n\nSUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CHN_CD = DM.CHN_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CHANNEL\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 7. 제품 구분별 평균 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    PRD_DIV, \n    AVG(QACTUAL) AS 평균판매수량, \n    AVG(SACTUAL) AS 평균판매금액\nFROM F_SIKOREA\nWHERE YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY PRD_DIV\nORDER BY 평균판매금액 DESC, 평균판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 8. 브랜드와 지역별 판매 현황\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.BRAND, \n    F.REGION1, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.BRAND, F.REGION1\nORDER BY DM.BRAND, 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "exsql",
                "display_name": "exsql",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true,
                "proxy": {
                  "id": "PromptTemplate-r4u5r",
                  "field": "exsql"
                }
              },
              "database_Data-7LOaX": {
                "type": "SQLDatabase",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "database",
                "display_name": "Database",
                "advanced": false,
                "dynamic": false,
                "info": "SQLDatabase instance to connect to.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "database"
                }
              },
              "query_checker_prompt_Data-7LOaX": {
                "type": "BasePromptTemplate",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "query_checker_prompt",
                "advanced": false,
                "dynamic": false,
                "info": "Optional prompt template for the query checker.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "query_checker_prompt"
                },
                "display_name": "Query Checker Prompt"
              },
              "code_Data-7LOaX": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": true,
                "value": "from typing import Any, Dict, List, Optional, Union, Callable\r\nfrom axiestudio import CustomComponent\r\nfrom langchain_experimental.sql import SQLDatabaseChain\r\nfrom langchain.chains.llm import LLMChain\r\nfrom langchain_community.utilities.sql_database import SQLDatabase\r\nfrom axiestudio.field_typing import Chain\r\nfrom langchain_core.prompts.base import BasePromptTemplate\r\nfrom langchain_core.language_models.base import BaseLanguageModel\r\nfrom axiestudio.field_typing import NestedDict\r\n\r\nclass SQLDatabaseChainComponent(CustomComponent):\r\n    \r\n    display_name = \"SQLDatabaseChain\"\r\n    description = \"This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.\"\r\n    icon = \"🗃️\"  # Database icon\r\n    \r\n    @classmethod\r\n    def build_config(self):\r\n        return {\r\n            \"database\": {\r\n                \"display_name\": \"Database\",\r\n                \"info\": \"SQLDatabase instance to connect to.\",\r\n                \"type\": \"SQLDatabase\",\r\n                \"required\": True,\r\n                \"field_order\": \"10\"\r\n            },\r\n            \"llm_chain\": {\r\n                \"info\": \"LLMChain instance to use for generating SQL queries.\",\r\n                \"type\": \"LLMChain\",\r\n                \"required\": True,\r\n                \"field_order\": \"9\"\r\n            },\r\n            \"metadata\": {\r\n                \"display_name\": \"Metadata\",\r\n                \"info\": \"Optional metadata associated with the chain.\",\r\n                \"type\": \"NestedDict\",\r\n                \"required\": False,\r\n                \"field_order\": \"8\"\r\n            },\r\n            \"prompt\": {\r\n                \"info\": \"[Deprecated] Prompt to use to translate natural language to SQL.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"7\"\r\n            },\r\n            \"query_checker_prompt\": {\r\n                \"info\": \"Optional prompt template for the query checker.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"6\"\r\n            },\r\n            \"return_direct\": {\r\n                \"info\": \"Whether to return the result of querying the SQL table directly.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"5\"\r\n            },\r\n            \"return_intermediate_steps\": {\r\n                \"info\": \"Whether to return the intermediate steps along with the final answer.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"4\"\r\n            },\r\n            \"return_sql\": {\r\n                \"info\": \"Will return SQL command directly without executing it.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"3\"\r\n            },\r\n            \"tags\": {\r\n                \"info\": \"Optional list of tags associated with the chain.\",\r\n                \"type\": \"List[str]\",\r\n                \"required\": False,\r\n                \"field_order\": \"2\"\r\n            },\r\n            \"top_k\": {\r\n                \"info\": \"Number of results to return from the query.\",\r\n                \"type\": \"int\",\r\n                \"default\": 5,\r\n                \"field_order\": \"1\"\r\n            },\r\n            \"use_query_checker\": {\r\n                \"info\": \"Whether to use the query checker tool.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"0\"\r\n            },\r\n            \"verbose\": {\r\n                \"info\": \"Run in verbose mode, printing intermediate logs.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"-1\"\r\n            }\r\n        }\r\n\r\n    def build(self, database: SQLDatabase, llm_chain: LLMChain, \r\n              query_checker_prompt: Optional[BasePromptTemplate] = None, \r\n              use_query_checker: bool = False, verbose: bool = False,\r\n              metadata: Optional[NestedDict] = None, tags: Optional[List[str]] = None,\r\n              return_direct: bool = False, return_intermediate_steps: bool = False,\r\n              return_sql: bool = False, top_k: int = 5) -> Union[Chain, Callable, SQLDatabaseChain]:\r\n                  \r\n        params = {\r\n            \"query_checker_prompt\": query_checker_prompt,\r\n            \"use_query_checker\": use_query_checker,\r\n            \"verbose\": verbose,\r\n            \"metadata\": metadata,\r\n            \"tags\": tags,\r\n            \"return_direct\": return_direct,\r\n            \"return_intermediate_steps\": return_intermediate_steps,\r\n            \"return_sql\": return_sql,\r\n            \"top_k\": top_k,\r\n        }                  \r\n                  \r\n        # Remove keys with None values\r\n        filtered_params = {k: v for k, v in params.items() if v is not None}\r\n        \r\n        # Create and return SQLDatabaseChain instance with the provided SQLDatabase and LLMChain\r\n        sql_database_chain = SQLDatabaseChain(database=database, llm_chain=llm_chain, **filtered_params)\r\n        \r\n        return sql_database_chain\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "code"
                },
                "display_name": "Code"
              },
              "metadata_Data-7LOaX": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Optional metadata associated with the chain.",
                "title_case": true,
                "value": {
                  "yourkey": "value"
                },
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "metadata"
                }
              },
              "return_direct_Data-7LOaX": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_direct",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to return the result of querying the SQL table directly.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "return_direct"
                },
                "display_name": "Return Direct"
              },
              "return_intermediate_steps_Data-7LOaX": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_intermediate_steps",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to return the intermediate steps along with the final answer.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "return_intermediate_steps"
                },
                "display_name": "Return Intermediate Steps"
              },
              "return_sql_Data-7LOaX": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_sql",
                "advanced": false,
                "dynamic": false,
                "info": "Will return SQL command directly without executing it.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "return_sql"
                },
                "display_name": "Return Sql"
              },
              "tags_Data-7LOaX": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tags",
                "advanced": true,
                "dynamic": false,
                "info": "Optional list of tags associated with the chain.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "tags"
                },
                "display_name": "Tags"
              },
              "top_k_Data-7LOaX": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_k",
                "advanced": false,
                "dynamic": false,
                "info": "Number of results to return from the query.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "top_k"
                },
                "display_name": "Top K"
              },
              "use_query_checker_Data-7LOaX": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "use_query_checker",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to use the query checker tool.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "use_query_checker"
                },
                "display_name": "Use Query Checker"
              },
              "verbose_Data-7LOaX": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Run in verbose mode, printing intermediate logs.",
                "title_case": true,
                "proxy": {
                  "id": "Data-7LOaX",
                  "field": "verbose"
                },
                "display_name": "Verbose"
              },
              "llm_LLMChain-CjVvM": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "proxy": {
                  "id": "LLMChain-CjVvM",
                  "field": "llm"
                }
              },
              "memory_LLMChain-CjVvM": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "proxy": {
                  "id": "LLMChain-CjVvM",
                  "field": "memory"
                }
              },
              "code_LLMChain-CjVvM": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": true,
                "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "display_name": "code",
                "proxy": {
                  "id": "LLMChain-CjVvM",
                  "field": "code"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "width": 384,
                    "height": 654,
                    "id": "PromptTemplate-r4u5r",
                    "type": "genericNode",
                    "position": {
                      "x": 899.1344294373012,
                      "y": 1968.277100409176
                    },
                    "data": {
                      "type": "PromptTemplate",
                      "node": {
                        "template": {
                          "output_parser": {
                            "type": "BaseOutputParser",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": false,
                            "multiline": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "output_parser",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "output_parser"
                          },
                          "input_types": {
                            "type": "dict",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": false,
                            "multiline": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "input_types",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "input_types"
                          },
                          "input_variables": {
                            "type": "str",
                            "required": true,
                            "placeholder": "",
                            "list": true,
                            "show": false,
                            "multiline": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "input_variables",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "value": [
                              "dialect",
                              "table_info",
                              "exsql",
                              "input"
                            ],
                            "display_name": "input_variables"
                          },
                          "metadata": {
                            "type": "dict",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": false,
                            "multiline": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "metadata",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "metadata"
                          },
                          "name": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": false,
                            "multiline": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "name",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "name"
                          },
                          "partial_variables": {
                            "type": "dict",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": false,
                            "multiline": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "partial_variables",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "partial_variables"
                          },
                          "tags": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": true,
                            "show": false,
                            "multiline": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "tags",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "tags"
                          },
                          "template": {
                            "type": "prompt",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "fileTypes": [],
                            "password": false,
                            "name": "template",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "value": "Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\nUse the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly use the following tables:\n\n{table_info}\n\nIf someone asks for the table foobar, they really mean the employee table.\nExample:\n{exsql}\n\nQuestion: {input}\n",
                            "display_name": "template"
                          },
                          "template_format": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": false,
                            "multiline": false,
                            "value": "f-string",
                            "fileTypes": [],
                            "password": false,
                            "name": "template_format",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "template_format"
                          },
                          "validate_template": {
                            "type": "bool",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": false,
                            "multiline": false,
                            "value": false,
                            "fileTypes": [],
                            "password": false,
                            "name": "validate_template",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "validate_template"
                          },
                          "_type": "PromptTemplate",
                          "input": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "input",
                            "display_name": "input",
                            "advanced": false,
                            "input_types": [
                              "Document",
                              "BaseOutputParser"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": true
                          },
                          "table_info": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "table_info",
                            "display_name": "table_info",
                            "advanced": false,
                            "input_types": [
                              "Document",
                              "BaseOutputParser"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": true
                          },
                          "dialect": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "dialect",
                            "display_name": "dialect",
                            "advanced": false,
                            "input_types": [
                              "Document",
                              "BaseOutputParser"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": true
                          },
                          "exsql": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "\n\n### 1. 카테고리별 총 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CATEGORY\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 2. 지역별 제품 판매 분포\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    F.PRD, \n    SUM(F.QACTUAL) AS 판매수량\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, F.PRD\nORDER BY F.REGION1, 판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 3. 상품별 평균 판매 가격\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.PRD, \n    AVG(F.SACTUAL / NULLIF(F.QACTUAL, 0)) AS 평균판매가격\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD\nHAVING SUM(F.QACTUAL) > 0\nORDER BY 평균판매가격 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 4. 최고 판매 제품 및 해당 제품의 브랜드\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT TOP 1 WITH TIES\n    F.PRD AS 제품명,\n    DM.BRAND AS 브랜드명,\n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD, DM.BRAND\nORDER BY 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 5. 각 지역별로 가장 인기 있는 카테고리 찾기\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, DM.CATEGORY\nORDER BY F.REGION1, 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n각 쿼리에서 `@PageNumber`와 `@RowsPerPage` 변수를 설정하여, 원하는 페이지와 페이지 당 행의 수를 조정할 수 있습니다. 이를 통해 대규모 데이터셋에서 필요한 정보를 효율적으로 조회하고 관리할 수 있습니다. 다음은 나머지 쿼리들에 대한 예시입니다.\n\n### 6. 판매채널별 총 판매 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CHANNEL, \n   \n\nSUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CHN_CD = DM.CHN_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CHANNEL\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 7. 제품 구분별 평균 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    PRD_DIV, \n    AVG(QACTUAL) AS 평균판매수량, \n    AVG(SACTUAL) AS 평균판매금액\nFROM F_SIKOREA\nWHERE YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY PRD_DIV\nORDER BY 평균판매금액 DESC, 평균판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 8. 브랜드와 지역별 판매 현황\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.BRAND, \n    F.REGION1, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.BRAND, F.REGION1\nORDER BY DM.BRAND, 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "exsql",
                            "display_name": "exsql",
                            "advanced": false,
                            "input_types": [
                              "Document",
                              "BaseOutputParser"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": true
                          }
                        },
                        "description": "A prompt template for a language model.",
                        "icon": null,
                        "base_classes": [
                          "BasePromptTemplate",
                          "StringPromptTemplate",
                          "PromptTemplate"
                        ],
                        "name": "",
                        "display_name": "PromptTemplate",
                        "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
                        "custom_fields": {
                          "": [
                            "dialect",
                            "table_info",
                            "exsql",
                            "input"
                          ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "field_formatters": {},
                        "beta": false,
                        "error": null
                      },
                      "id": "PromptTemplate-r4u5r",
                      "description": "A prompt template for a language model.",
                      "display_name": "PromptTemplate"
                    },
                    "selected": true,
                    "positionAbsolute": {
                      "x": 899.1344294373012,
                      "y": 1968.277100409176
                    },
                    "dragging": false
                  },
                  {
                    "width": 384,
                    "height": 1087,
                    "id": "Data-7LOaX",
                    "type": "genericNode",
                    "position": {
                      "x": 1457.6465619137339,
                      "y": 1459.7446248076478
                    },
                    "data": {
                      "type": "Data",
                      "node": {
                        "template": {
                          "database": {
                            "type": "SQLDatabase",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "database",
                            "display_name": "Database",
                            "advanced": false,
                            "dynamic": false,
                            "info": "SQLDatabase instance to connect to.",
                            "title_case": true
                          },
                          "llm_chain": {
                            "type": "LLMChain",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "llm_chain",
                            "advanced": false,
                            "dynamic": false,
                            "info": "LLMChain instance to use for generating SQL queries.",
                            "title_case": true
                          },
                          "query_checker_prompt": {
                            "type": "BasePromptTemplate",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "query_checker_prompt",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Optional prompt template for the query checker.",
                            "title_case": true
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from typing import Any, Dict, List, Optional, Union, Callable\r\nfrom axiestudio import CustomComponent\r\nfrom langchain_experimental.sql import SQLDatabaseChain\r\nfrom langchain.chains.llm import LLMChain\r\nfrom langchain_community.utilities.sql_database import SQLDatabase\r\nfrom axiestudio.field_typing import Chain\r\nfrom langchain_core.prompts.base import BasePromptTemplate\r\nfrom langchain_core.language_models.base import BaseLanguageModel\r\nfrom axiestudio.field_typing import NestedDict\r\n\r\nclass SQLDatabaseChainComponent(CustomComponent):\r\n    \r\n    display_name = \"SQLDatabaseChain\"\r\n    description = \"This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.\"\r\n    icon = \"🗃️\"  # Database icon\r\n    \r\n    @classmethod\r\n    def build_config(self):\r\n        return {\r\n            \"database\": {\r\n                \"display_name\": \"Database\",\r\n                \"info\": \"SQLDatabase instance to connect to.\",\r\n                \"type\": \"SQLDatabase\",\r\n                \"required\": True,\r\n                \"field_order\": \"10\"\r\n            },\r\n            \"llm_chain\": {\r\n                \"info\": \"LLMChain instance to use for generating SQL queries.\",\r\n                \"type\": \"LLMChain\",\r\n                \"required\": True,\r\n                \"field_order\": \"9\"\r\n            },\r\n            \"metadata\": {\r\n                \"display_name\": \"Metadata\",\r\n                \"info\": \"Optional metadata associated with the chain.\",\r\n                \"type\": \"NestedDict\",\r\n                \"required\": False,\r\n                \"field_order\": \"8\"\r\n            },\r\n            \"prompt\": {\r\n                \"info\": \"[Deprecated] Prompt to use to translate natural language to SQL.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"7\"\r\n            },\r\n            \"query_checker_prompt\": {\r\n                \"info\": \"Optional prompt template for the query checker.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"6\"\r\n            },\r\n            \"return_direct\": {\r\n                \"info\": \"Whether to return the result of querying the SQL table directly.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"5\"\r\n            },\r\n            \"return_intermediate_steps\": {\r\n                \"info\": \"Whether to return the intermediate steps along with the final answer.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"4\"\r\n            },\r\n            \"return_sql\": {\r\n                \"info\": \"Will return SQL command directly without executing it.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"3\"\r\n            },\r\n            \"tags\": {\r\n                \"info\": \"Optional list of tags associated with the chain.\",\r\n                \"type\": \"List[str]\",\r\n                \"required\": False,\r\n                \"field_order\": \"2\"\r\n            },\r\n            \"top_k\": {\r\n                \"info\": \"Number of results to return from the query.\",\r\n                \"type\": \"int\",\r\n                \"default\": 5,\r\n                \"field_order\": \"1\"\r\n            },\r\n            \"use_query_checker\": {\r\n                \"info\": \"Whether to use the query checker tool.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"0\"\r\n            },\r\n            \"verbose\": {\r\n                \"info\": \"Run in verbose mode, printing intermediate logs.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"-1\"\r\n            }\r\n        }\r\n\r\n    def build(self, database: SQLDatabase, llm_chain: LLMChain, \r\n              query_checker_prompt: Optional[BasePromptTemplate] = None, \r\n              use_query_checker: bool = False, verbose: bool = False,\r\n              metadata: Optional[NestedDict] = None, tags: Optional[List[str]] = None,\r\n              return_direct: bool = False, return_intermediate_steps: bool = False,\r\n              return_sql: bool = False, top_k: int = 5) -> Union[Chain, Callable, SQLDatabaseChain]:\r\n                  \r\n        params = {\r\n            \"query_checker_prompt\": query_checker_prompt,\r\n            \"use_query_checker\": use_query_checker,\r\n            \"verbose\": verbose,\r\n            \"metadata\": metadata,\r\n            \"tags\": tags,\r\n            \"return_direct\": return_direct,\r\n            \"return_intermediate_steps\": return_intermediate_steps,\r\n            \"return_sql\": return_sql,\r\n            \"top_k\": top_k,\r\n        }                  \r\n                  \r\n        # Remove keys with None values\r\n        filtered_params = {k: v for k, v in params.items() if v is not None}\r\n        \r\n        # Create and return SQLDatabaseChain instance with the provided SQLDatabase and LLMChain\r\n        sql_database_chain = SQLDatabaseChain(database=database, llm_chain=llm_chain, **filtered_params)\r\n        \r\n        return sql_database_chain\r\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true
                          },
                          "metadata": {
                            "type": "NestedDict",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "metadata",
                            "display_name": "Metadata",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Optional metadata associated with the chain.",
                            "title_case": true,
                            "value": {
                              "yourkey": "value"
                            }
                          },
                          "return_direct": {
                            "type": "bool",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "return_direct",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Whether to return the result of querying the SQL table directly.",
                            "title_case": true
                          },
                          "return_intermediate_steps": {
                            "type": "bool",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "return_intermediate_steps",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Whether to return the intermediate steps along with the final answer.",
                            "title_case": true
                          },
                          "return_sql": {
                            "type": "bool",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "return_sql",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Will return SQL command directly without executing it.",
                            "title_case": true
                          },
                          "tags": {
                            "type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": true,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "tags",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Optional list of tags associated with the chain.",
                            "title_case": true
                          },
                          "top_k": {
                            "type": "int",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": 5,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "top_k",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Number of results to return from the query.",
                            "title_case": true
                          },
                          "use_query_checker": {
                            "type": "bool",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": true,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "use_query_checker",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Whether to use the query checker tool.",
                            "title_case": true
                          },
                          "verbose": {
                            "type": "bool",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "value": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "verbose",
                            "advanced": false,
                            "dynamic": false,
                            "info": "Run in verbose mode, printing intermediate logs.",
                            "title_case": true
                          },
                          "_type": "CustomComponent"
                        },
                        "description": "This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.",
                        "icon": "🗃️",
                        "base_classes": [
                          "Chain",
                          "Callable",
                          "Chain",
                          "SQLDatabaseChain"
                        ],
                        "display_name": "SQLDatabaseChain",
                        "documentation": "",
                        "custom_fields": {
                          "database": null,
                          "llm_chain": null,
                          "query_checker_prompt": null,
                          "use_query_checker": null,
                          "verbose": null,
                          "metadata": null,
                          "tags": null,
                          "return_direct": null,
                          "return_intermediate_steps": null,
                          "return_sql": null,
                          "top_k": null
                        },
                        "output_types": [
                          "Chain",
                          "Callable",
                          "SQLDatabaseChain"
                        ],
                        "field_formatters": {},
                        "beta": true
                      },
                      "id": "Data-7LOaX",
                      "description": "This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.",
                      "display_name": "SQLDatabaseChain"
                    },
                    "selected": true,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": 1457.6465619137339,
                      "y": 1459.7446248076478
                    }
                  },
                  {
                    "width": 384,
                    "height": 424,
                    "id": "LLMChain-CjVvM",
                    "type": "genericNode",
                    "position": {
                      "x": 915.2863268454837,
                      "y": 1457.9467145581293
                    },
                    "data": {
                      "type": "LLMChain",
                      "node": {
                        "template": {
                          "llm": {
                            "type": "BaseLanguageModel",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "llm",
                            "display_name": "LLM",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": true
                          },
                          "memory": {
                            "type": "BaseMemory",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "memory",
                            "display_name": "Memory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": true
                          },
                          "prompt": {
                            "type": "BasePromptTemplate",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": false,
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "prompt",
                            "display_name": "Prompt",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": true
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": false,
                            "dynamic": true,
                            "info": "",
                            "title_case": true,
                            "display_name": "code"
                          },
                          "_type": "CustomComponent"
                        },
                        "description": "Chain to run queries against LLMs",
                        "base_classes": [
                          "Chain",
                          "Callable",
                          "LLMChain",
                          "Chain"
                        ],
                        "display_name": "LLMChain",
                        "documentation": "",
                        "custom_fields": {
                          "prompt": null,
                          "llm": null,
                          "memory": null
                        },
                        "output_types": [
                          "Chain",
                          "Callable",
                          "LLMChain"
                        ],
                        "field_formatters": {},
                        "beta": true
                      },
                      "id": "LLMChain-CjVvM"
                    },
                    "selected": true,
                    "positionAbsolute": {
                      "x": 915.2863268454837,
                      "y": 1457.9467145581293
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "LLMChain-CjVvM",
                    "sourceHandle": "{œbaseClassesœ:[œChainœ,œCallableœ,œLLMChainœ,œChainœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-CjVvMœ}",
                    "target": "Data-7LOaX",
                    "targetHandle": "{œfieldNameœ:œllm_chainœ,œidœ:œData-7LOaXœ,œinputTypesœ:null,œtypeœ:œLLMChainœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "llm_chain",
                        "id": "Data-7LOaX",
                        "inputTypes": null,
                        "type": "LLMChain"
                      },
                      "sourceHandle": {
                        "baseClasses": [
                          "Chain",
                          "Callable",
                          "LLMChain",
                          "Chain"
                        ],
                        "dataType": "LLMChain",
                        "id": "LLMChain-CjVvM"
                      }
                    },
                    "style": {
                      "stroke": "#555"
                    },
                    "className": "stroke-foreground  stroke-connection",
                    "animated": false,
                    "id": "reactflow__edge-LLMChain-CjVvM{œbaseClassesœ:[œChainœ,œCallableœ,œLLMChainœ,œChainœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-CjVvMœ}-Data-7LOaX{œfieldNameœ:œllm_chainœ,œidœ:œData-7LOaXœ,œinputTypesœ:null,œtypeœ:œLLMChainœ}"
                  },
                  {
                    "source": "PromptTemplate-r4u5r",
                    "sourceHandle": "{œbaseClassesœ:[œBasePromptTemplateœ,œStringPromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-r4u5rœ}",
                    "target": "LLMChain-CjVvM",
                    "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-CjVvMœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "prompt",
                        "id": "LLMChain-CjVvM",
                        "inputTypes": null,
                        "type": "BasePromptTemplate"
                      },
                      "sourceHandle": {
                        "baseClasses": [
                          "BasePromptTemplate",
                          "StringPromptTemplate",
                          "PromptTemplate"
                        ],
                        "dataType": "PromptTemplate",
                        "id": "PromptTemplate-r4u5r"
                      }
                    },
                    "style": {
                      "stroke": "#555"
                    },
                    "className": "stroke-foreground  stroke-connection",
                    "animated": false,
                    "id": "reactflow__edge-PromptTemplate-r4u5r{œbaseClassesœ:[œBasePromptTemplateœ,œStringPromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-r4u5rœ}-LLMChain-CjVvM{œfieldNameœ:œpromptœ,œidœ:œLLMChain-CjVvMœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Mischievous Meitner",
              "description": "",
              "id": "iGjkH"
            },
            "official": false
          }
        },
        "id": "Data-BKI1G",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "Data": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "e14add11-5f1d-4a1b-9902-f27ca460b6ff",
    "name": "SQLDatabaseChain",
    "description": "An example-included LLM chain for executing SQL queries v2",
    "is_component": true,
    "liked_by_count": "58",
    "downloads_count": "660",
    "metadata": {
      "Data": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "0.6.9",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "id": "Data-BKI1G",
            "type": "Data",
            "node": {
              "output_types": [
                "Chain",
                "Callable",
                "SQLDatabaseChain"
              ],
              "display_name": "SQLDatabaseChain",
              "documentation": "",
              "base_classes": [
                "Chain",
                "Callable",
                "Chain",
                "SQLDatabaseChain"
              ],
              "description": "An example-included LLM chain for executing SQL queries v2",
              "template": {
                "output_parser_PromptTemplate-r4u5r": {
                  "type": "BaseOutputParser",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "output_parser",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "output_parser",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "output_parser"
                  }
                },
                "input_types_PromptTemplate-r4u5r": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_types",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "input_types",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "input_types"
                  }
                },
                "input_variables_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_variables",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "value": [
                    "dialect",
                    "table_info",
                    "exsql",
                    "input"
                  ],
                  "display_name": "input_variables",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "input_variables"
                  }
                },
                "metadata_PromptTemplate-r4u5r": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "metadata",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "metadata",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "metadata"
                  }
                },
                "name_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "name",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "name",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "name"
                  }
                },
                "partial_variables_PromptTemplate-r4u5r": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "partial_variables",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "partial_variables",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "partial_variables"
                  }
                },
                "tags_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "tags",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "tags",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "tags"
                  }
                },
                "template_PromptTemplate-r4u5r": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "password": false,
                  "name": "template",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "value": "Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\nUse the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly use the following tables:\n\n{table_info}\n\nIf someone asks for the table foobar, they really mean the employee table.\nExample:\n{exsql}\n\nQuestion: {input}\n",
                  "display_name": "template",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "template"
                  }
                },
                "template_format_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "f-string",
                  "fileTypes": [],
                  "password": false,
                  "name": "template_format",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "template_format",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "template_format"
                  }
                },
                "validate_template_PromptTemplate-r4u5r": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "validate_template",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "validate_template",
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "validate_template"
                  }
                },
                "input_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input",
                  "display_name": "input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "input"
                  }
                },
                "table_info_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "table_info",
                  "display_name": "table_info",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "table_info"
                  }
                },
                "dialect_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "dialect",
                  "display_name": "dialect",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "dialect"
                  }
                },
                "exsql_PromptTemplate-r4u5r": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "\n\n### 1. 카테고리별 총 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CATEGORY\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 2. 지역별 제품 판매 분포\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    F.PRD, \n    SUM(F.QACTUAL) AS 판매수량\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, F.PRD\nORDER BY F.REGION1, 판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 3. 상품별 평균 판매 가격\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.PRD, \n    AVG(F.SACTUAL / NULLIF(F.QACTUAL, 0)) AS 평균판매가격\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD\nHAVING SUM(F.QACTUAL) > 0\nORDER BY 평균판매가격 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 4. 최고 판매 제품 및 해당 제품의 브랜드\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT TOP 1 WITH TIES\n    F.PRD AS 제품명,\n    DM.BRAND AS 브랜드명,\n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD, DM.BRAND\nORDER BY 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 5. 각 지역별로 가장 인기 있는 카테고리 찾기\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, DM.CATEGORY\nORDER BY F.REGION1, 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n각 쿼리에서 `@PageNumber`와 `@RowsPerPage` 변수를 설정하여, 원하는 페이지와 페이지 당 행의 수를 조정할 수 있습니다. 이를 통해 대규모 데이터셋에서 필요한 정보를 효율적으로 조회하고 관리할 수 있습니다. 다음은 나머지 쿼리들에 대한 예시입니다.\n\n### 6. 판매채널별 총 판매 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CHANNEL, \n   \n\nSUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CHN_CD = DM.CHN_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CHANNEL\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 7. 제품 구분별 평균 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    PRD_DIV, \n    AVG(QACTUAL) AS 평균판매수량, \n    AVG(SACTUAL) AS 평균판매금액\nFROM F_SIKOREA\nWHERE YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY PRD_DIV\nORDER BY 평균판매금액 DESC, 평균판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 8. 브랜드와 지역별 판매 현황\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.BRAND, \n    F.REGION1, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.BRAND, F.REGION1\nORDER BY DM.BRAND, 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "exsql",
                  "display_name": "exsql",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "proxy": {
                    "id": "PromptTemplate-r4u5r",
                    "field": "exsql"
                  }
                },
                "database_Data-7LOaX": {
                  "type": "SQLDatabase",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "database",
                  "display_name": "Database",
                  "advanced": false,
                  "dynamic": false,
                  "info": "SQLDatabase instance to connect to.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "database"
                  }
                },
                "query_checker_prompt_Data-7LOaX": {
                  "type": "BasePromptTemplate",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "query_checker_prompt",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Optional prompt template for the query checker.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "query_checker_prompt"
                  },
                  "display_name": "Query Checker Prompt"
                },
                "code_Data-7LOaX": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": true,
                  "value": "from typing import Any, Dict, List, Optional, Union, Callable\r\nfrom axiestudio import CustomComponent\r\nfrom langchain_experimental.sql import SQLDatabaseChain\r\nfrom langchain.chains.llm import LLMChain\r\nfrom langchain_community.utilities.sql_database import SQLDatabase\r\nfrom axiestudio.field_typing import Chain\r\nfrom langchain_core.prompts.base import BasePromptTemplate\r\nfrom langchain_core.language_models.base import BaseLanguageModel\r\nfrom axiestudio.field_typing import NestedDict\r\n\r\nclass SQLDatabaseChainComponent(CustomComponent):\r\n    \r\n    display_name = \"SQLDatabaseChain\"\r\n    description = \"This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.\"\r\n    icon = \"🗃️\"  # Database icon\r\n    \r\n    @classmethod\r\n    def build_config(self):\r\n        return {\r\n            \"database\": {\r\n                \"display_name\": \"Database\",\r\n                \"info\": \"SQLDatabase instance to connect to.\",\r\n                \"type\": \"SQLDatabase\",\r\n                \"required\": True,\r\n                \"field_order\": \"10\"\r\n            },\r\n            \"llm_chain\": {\r\n                \"info\": \"LLMChain instance to use for generating SQL queries.\",\r\n                \"type\": \"LLMChain\",\r\n                \"required\": True,\r\n                \"field_order\": \"9\"\r\n            },\r\n            \"metadata\": {\r\n                \"display_name\": \"Metadata\",\r\n                \"info\": \"Optional metadata associated with the chain.\",\r\n                \"type\": \"NestedDict\",\r\n                \"required\": False,\r\n                \"field_order\": \"8\"\r\n            },\r\n            \"prompt\": {\r\n                \"info\": \"[Deprecated] Prompt to use to translate natural language to SQL.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"7\"\r\n            },\r\n            \"query_checker_prompt\": {\r\n                \"info\": \"Optional prompt template for the query checker.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"6\"\r\n            },\r\n            \"return_direct\": {\r\n                \"info\": \"Whether to return the result of querying the SQL table directly.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"5\"\r\n            },\r\n            \"return_intermediate_steps\": {\r\n                \"info\": \"Whether to return the intermediate steps along with the final answer.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"4\"\r\n            },\r\n            \"return_sql\": {\r\n                \"info\": \"Will return SQL command directly without executing it.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"3\"\r\n            },\r\n            \"tags\": {\r\n                \"info\": \"Optional list of tags associated with the chain.\",\r\n                \"type\": \"List[str]\",\r\n                \"required\": False,\r\n                \"field_order\": \"2\"\r\n            },\r\n            \"top_k\": {\r\n                \"info\": \"Number of results to return from the query.\",\r\n                \"type\": \"int\",\r\n                \"default\": 5,\r\n                \"field_order\": \"1\"\r\n            },\r\n            \"use_query_checker\": {\r\n                \"info\": \"Whether to use the query checker tool.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"0\"\r\n            },\r\n            \"verbose\": {\r\n                \"info\": \"Run in verbose mode, printing intermediate logs.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"-1\"\r\n            }\r\n        }\r\n\r\n    def build(self, database: SQLDatabase, llm_chain: LLMChain, \r\n              query_checker_prompt: Optional[BasePromptTemplate] = None, \r\n              use_query_checker: bool = False, verbose: bool = False,\r\n              metadata: Optional[NestedDict] = None, tags: Optional[List[str]] = None,\r\n              return_direct: bool = False, return_intermediate_steps: bool = False,\r\n              return_sql: bool = False, top_k: int = 5) -> Union[Chain, Callable, SQLDatabaseChain]:\r\n                  \r\n        params = {\r\n            \"query_checker_prompt\": query_checker_prompt,\r\n            \"use_query_checker\": use_query_checker,\r\n            \"verbose\": verbose,\r\n            \"metadata\": metadata,\r\n            \"tags\": tags,\r\n            \"return_direct\": return_direct,\r\n            \"return_intermediate_steps\": return_intermediate_steps,\r\n            \"return_sql\": return_sql,\r\n            \"top_k\": top_k,\r\n        }                  \r\n                  \r\n        # Remove keys with None values\r\n        filtered_params = {k: v for k, v in params.items() if v is not None}\r\n        \r\n        # Create and return SQLDatabaseChain instance with the provided SQLDatabase and LLMChain\r\n        sql_database_chain = SQLDatabaseChain(database=database, llm_chain=llm_chain, **filtered_params)\r\n        \r\n        return sql_database_chain\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "code"
                  },
                  "display_name": "Code"
                },
                "metadata_Data-7LOaX": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Optional metadata associated with the chain.",
                  "title_case": true,
                  "value": {
                    "yourkey": "value"
                  },
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "metadata"
                  }
                },
                "return_direct_Data-7LOaX": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_direct",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Whether to return the result of querying the SQL table directly.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "return_direct"
                  },
                  "display_name": "Return Direct"
                },
                "return_intermediate_steps_Data-7LOaX": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_intermediate_steps",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Whether to return the intermediate steps along with the final answer.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "return_intermediate_steps"
                  },
                  "display_name": "Return Intermediate Steps"
                },
                "return_sql_Data-7LOaX": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_sql",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Will return SQL command directly without executing it.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "return_sql"
                  },
                  "display_name": "Return Sql"
                },
                "tags_Data-7LOaX": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tags",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Optional list of tags associated with the chain.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "tags"
                  },
                  "display_name": "Tags"
                },
                "top_k_Data-7LOaX": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "top_k",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of results to return from the query.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "top_k"
                  },
                  "display_name": "Top K"
                },
                "use_query_checker_Data-7LOaX": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "use_query_checker",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Whether to use the query checker tool.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "use_query_checker"
                  },
                  "display_name": "Use Query Checker"
                },
                "verbose_Data-7LOaX": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "verbose",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Run in verbose mode, printing intermediate logs.",
                  "title_case": true,
                  "proxy": {
                    "id": "Data-7LOaX",
                    "field": "verbose"
                  },
                  "display_name": "Verbose"
                },
                "llm_LLMChain-CjVvM": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "proxy": {
                    "id": "LLMChain-CjVvM",
                    "field": "llm"
                  }
                },
                "memory_LLMChain-CjVvM": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "proxy": {
                    "id": "LLMChain-CjVvM",
                    "field": "memory"
                  }
                },
                "code_LLMChain-CjVvM": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": true,
                  "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "display_name": "code",
                  "proxy": {
                    "id": "LLMChain-CjVvM",
                    "field": "code"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "width": 384,
                      "height": 654,
                      "id": "PromptTemplate-r4u5r",
                      "type": "genericNode",
                      "position": {
                        "x": 899.1344294373012,
                        "y": 1968.277100409176
                      },
                      "data": {
                        "type": "PromptTemplate",
                        "node": {
                          "template": {
                            "output_parser": {
                              "type": "BaseOutputParser",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": false,
                              "multiline": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "output_parser",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "output_parser"
                            },
                            "input_types": {
                              "type": "dict",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": false,
                              "multiline": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "input_types",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "input_types"
                            },
                            "input_variables": {
                              "type": "str",
                              "required": true,
                              "placeholder": "",
                              "list": true,
                              "show": false,
                              "multiline": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "input_variables",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "value": [
                                "dialect",
                                "table_info",
                                "exsql",
                                "input"
                              ],
                              "display_name": "input_variables"
                            },
                            "metadata": {
                              "type": "dict",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": false,
                              "multiline": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "metadata",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "metadata"
                            },
                            "name": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": false,
                              "multiline": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "name",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "name"
                            },
                            "partial_variables": {
                              "type": "dict",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": false,
                              "multiline": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "partial_variables",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "partial_variables"
                            },
                            "tags": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": true,
                              "show": false,
                              "multiline": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "tags",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "tags"
                            },
                            "template": {
                              "type": "prompt",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "fileTypes": [],
                              "password": false,
                              "name": "template",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "value": "Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\nUse the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly use the following tables:\n\n{table_info}\n\nIf someone asks for the table foobar, they really mean the employee table.\nExample:\n{exsql}\n\nQuestion: {input}\n",
                              "display_name": "template"
                            },
                            "template_format": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": false,
                              "multiline": false,
                              "value": "f-string",
                              "fileTypes": [],
                              "password": false,
                              "name": "template_format",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "template_format"
                            },
                            "validate_template": {
                              "type": "bool",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": false,
                              "multiline": false,
                              "value": false,
                              "fileTypes": [],
                              "password": false,
                              "name": "validate_template",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "validate_template"
                            },
                            "_type": "PromptTemplate",
                            "input": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "input",
                              "display_name": "input",
                              "advanced": false,
                              "input_types": [
                                "Document",
                                "BaseOutputParser"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": true
                            },
                            "table_info": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "table_info",
                              "display_name": "table_info",
                              "advanced": false,
                              "input_types": [
                                "Document",
                                "BaseOutputParser"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": true
                            },
                            "dialect": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "dialect",
                              "display_name": "dialect",
                              "advanced": false,
                              "input_types": [
                                "Document",
                                "BaseOutputParser"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": true
                            },
                            "exsql": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "\n\n### 1. 카테고리별 총 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CATEGORY\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 2. 지역별 제품 판매 분포\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    F.PRD, \n    SUM(F.QACTUAL) AS 판매수량\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, F.PRD\nORDER BY F.REGION1, 판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 3. 상품별 평균 판매 가격\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.PRD, \n    AVG(F.SACTUAL / NULLIF(F.QACTUAL, 0)) AS 평균판매가격\nFROM F_SIKOREA F\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD\nHAVING SUM(F.QACTUAL) > 0\nORDER BY 평균판매가격 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 4. 최고 판매 제품 및 해당 제품의 브랜드\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT TOP 1 WITH TIES\n    F.PRD AS 제품명,\n    DM.BRAND AS 브랜드명,\n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.PRD, DM.BRAND\nORDER BY 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 5. 각 지역별로 가장 인기 있는 카테고리 찾기\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    F.REGION1, \n    DM.CATEGORY, \n    SUM(F.QACTUAL) AS 총판매수량\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CTG_CD = DM.CTG_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY F.REGION1, DM.CATEGORY\nORDER BY F.REGION1, 총판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n각 쿼리에서 `@PageNumber`와 `@RowsPerPage` 변수를 설정하여, 원하는 페이지와 페이지 당 행의 수를 조정할 수 있습니다. 이를 통해 대규모 데이터셋에서 필요한 정보를 효율적으로 조회하고 관리할 수 있습니다. 다음은 나머지 쿼리들에 대한 예시입니다.\n\n### 6. 판매채널별 총 판매 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.CHANNEL, \n   \n\nSUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.CHN_CD = DM.CHN_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.CHANNEL\nORDER BY 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 7. 제품 구분별 평균 판매 수량과 금액\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    PRD_DIV, \n    AVG(QACTUAL) AS 평균판매수량, \n    AVG(SACTUAL) AS 평균판매금액\nFROM F_SIKOREA\nWHERE YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY PRD_DIV\nORDER BY 평균판매금액 DESC, 평균판매수량 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n\n### 8. 브랜드와 지역별 판매 현황\n\n```sql\nDECLARE @PageNumber AS INT = 1;\nDECLARE @RowsPerPage AS INT = 10;\n\nSELECT \n    DM.BRAND, \n    F.REGION1, \n    SUM(F.QACTUAL) AS 총판매수량, \n    SUM(F.SACTUAL) AS 총판매금액\nFROM F_SIKOREA F\nJOIN D_SIKOREA_MASTER DM ON F.BRD_CD = DM.BRD_CD\nWHERE F.YYYYMM BETWEEN '201903' AND '202402'\nGROUP BY DM.BRAND, F.REGION1\nORDER BY DM.BRAND, 총판매금액 DESC\nOFFSET (@PageNumber - 1) * @RowsPerPage ROWS\nFETCH NEXT @RowsPerPage ROWS ONLY;\n```\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "exsql",
                              "display_name": "exsql",
                              "advanced": false,
                              "input_types": [
                                "Document",
                                "BaseOutputParser"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": true
                            }
                          },
                          "description": "A prompt template for a language model.",
                          "icon": null,
                          "base_classes": [
                            "BasePromptTemplate",
                            "StringPromptTemplate",
                            "PromptTemplate"
                          ],
                          "name": "",
                          "display_name": "PromptTemplate",
                          "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
                          "custom_fields": {
                            "": [
                              "dialect",
                              "table_info",
                              "exsql",
                              "input"
                            ]
                          },
                          "output_types": [],
                          "full_path": null,
                          "field_formatters": {},
                          "beta": false,
                          "error": null
                        },
                        "id": "PromptTemplate-r4u5r",
                        "description": "A prompt template for a language model.",
                        "display_name": "PromptTemplate"
                      },
                      "selected": true,
                      "positionAbsolute": {
                        "x": 899.1344294373012,
                        "y": 1968.277100409176
                      },
                      "dragging": false
                    },
                    {
                      "width": 384,
                      "height": 1087,
                      "id": "Data-7LOaX",
                      "type": "genericNode",
                      "position": {
                        "x": 1457.6465619137339,
                        "y": 1459.7446248076478
                      },
                      "data": {
                        "type": "Data",
                        "node": {
                          "template": {
                            "database": {
                              "type": "SQLDatabase",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "database",
                              "display_name": "Database",
                              "advanced": false,
                              "dynamic": false,
                              "info": "SQLDatabase instance to connect to.",
                              "title_case": true
                            },
                            "llm_chain": {
                              "type": "LLMChain",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "llm_chain",
                              "advanced": false,
                              "dynamic": false,
                              "info": "LLMChain instance to use for generating SQL queries.",
                              "title_case": true
                            },
                            "query_checker_prompt": {
                              "type": "BasePromptTemplate",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "query_checker_prompt",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Optional prompt template for the query checker.",
                              "title_case": true
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from typing import Any, Dict, List, Optional, Union, Callable\r\nfrom axiestudio import CustomComponent\r\nfrom langchain_experimental.sql import SQLDatabaseChain\r\nfrom langchain.chains.llm import LLMChain\r\nfrom langchain_community.utilities.sql_database import SQLDatabase\r\nfrom axiestudio.field_typing import Chain\r\nfrom langchain_core.prompts.base import BasePromptTemplate\r\nfrom langchain_core.language_models.base import BaseLanguageModel\r\nfrom axiestudio.field_typing import NestedDict\r\n\r\nclass SQLDatabaseChainComponent(CustomComponent):\r\n    \r\n    display_name = \"SQLDatabaseChain\"\r\n    description = \"This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.\"\r\n    icon = \"🗃️\"  # Database icon\r\n    \r\n    @classmethod\r\n    def build_config(self):\r\n        return {\r\n            \"database\": {\r\n                \"display_name\": \"Database\",\r\n                \"info\": \"SQLDatabase instance to connect to.\",\r\n                \"type\": \"SQLDatabase\",\r\n                \"required\": True,\r\n                \"field_order\": \"10\"\r\n            },\r\n            \"llm_chain\": {\r\n                \"info\": \"LLMChain instance to use for generating SQL queries.\",\r\n                \"type\": \"LLMChain\",\r\n                \"required\": True,\r\n                \"field_order\": \"9\"\r\n            },\r\n            \"metadata\": {\r\n                \"display_name\": \"Metadata\",\r\n                \"info\": \"Optional metadata associated with the chain.\",\r\n                \"type\": \"NestedDict\",\r\n                \"required\": False,\r\n                \"field_order\": \"8\"\r\n            },\r\n            \"prompt\": {\r\n                \"info\": \"[Deprecated] Prompt to use to translate natural language to SQL.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"7\"\r\n            },\r\n            \"query_checker_prompt\": {\r\n                \"info\": \"Optional prompt template for the query checker.\",\r\n                \"type\": \"BasePromptTemplate\",\r\n                \"required\": False,\r\n                \"field_order\": \"6\"\r\n            },\r\n            \"return_direct\": {\r\n                \"info\": \"Whether to return the result of querying the SQL table directly.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"5\"\r\n            },\r\n            \"return_intermediate_steps\": {\r\n                \"info\": \"Whether to return the intermediate steps along with the final answer.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"4\"\r\n            },\r\n            \"return_sql\": {\r\n                \"info\": \"Will return SQL command directly without executing it.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"3\"\r\n            },\r\n            \"tags\": {\r\n                \"info\": \"Optional list of tags associated with the chain.\",\r\n                \"type\": \"List[str]\",\r\n                \"required\": False,\r\n                \"field_order\": \"2\"\r\n            },\r\n            \"top_k\": {\r\n                \"info\": \"Number of results to return from the query.\",\r\n                \"type\": \"int\",\r\n                \"default\": 5,\r\n                \"field_order\": \"1\"\r\n            },\r\n            \"use_query_checker\": {\r\n                \"info\": \"Whether to use the query checker tool.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"0\"\r\n            },\r\n            \"verbose\": {\r\n                \"info\": \"Run in verbose mode, printing intermediate logs.\",\r\n                \"type\": \"bool\",\r\n                \"default\": False,\r\n                \"field_order\": \"-1\"\r\n            }\r\n        }\r\n\r\n    def build(self, database: SQLDatabase, llm_chain: LLMChain, \r\n              query_checker_prompt: Optional[BasePromptTemplate] = None, \r\n              use_query_checker: bool = False, verbose: bool = False,\r\n              metadata: Optional[NestedDict] = None, tags: Optional[List[str]] = None,\r\n              return_direct: bool = False, return_intermediate_steps: bool = False,\r\n              return_sql: bool = False, top_k: int = 5) -> Union[Chain, Callable, SQLDatabaseChain]:\r\n                  \r\n        params = {\r\n            \"query_checker_prompt\": query_checker_prompt,\r\n            \"use_query_checker\": use_query_checker,\r\n            \"verbose\": verbose,\r\n            \"metadata\": metadata,\r\n            \"tags\": tags,\r\n            \"return_direct\": return_direct,\r\n            \"return_intermediate_steps\": return_intermediate_steps,\r\n            \"return_sql\": return_sql,\r\n            \"top_k\": top_k,\r\n        }                  \r\n                  \r\n        # Remove keys with None values\r\n        filtered_params = {k: v for k, v in params.items() if v is not None}\r\n        \r\n        # Create and return SQLDatabaseChain instance with the provided SQLDatabase and LLMChain\r\n        sql_database_chain = SQLDatabaseChain(database=database, llm_chain=llm_chain, **filtered_params)\r\n        \r\n        return sql_database_chain\r\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true
                            },
                            "metadata": {
                              "type": "NestedDict",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "metadata",
                              "display_name": "Metadata",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Optional metadata associated with the chain.",
                              "title_case": true,
                              "value": {
                                "yourkey": "value"
                              }
                            },
                            "return_direct": {
                              "type": "bool",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "return_direct",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Whether to return the result of querying the SQL table directly.",
                              "title_case": true
                            },
                            "return_intermediate_steps": {
                              "type": "bool",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "return_intermediate_steps",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Whether to return the intermediate steps along with the final answer.",
                              "title_case": true
                            },
                            "return_sql": {
                              "type": "bool",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "return_sql",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Will return SQL command directly without executing it.",
                              "title_case": true
                            },
                            "tags": {
                              "type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": true,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "tags",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Optional list of tags associated with the chain.",
                              "title_case": true
                            },
                            "top_k": {
                              "type": "int",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": 5,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "top_k",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Number of results to return from the query.",
                              "title_case": true
                            },
                            "use_query_checker": {
                              "type": "bool",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": true,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "use_query_checker",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Whether to use the query checker tool.",
                              "title_case": true
                            },
                            "verbose": {
                              "type": "bool",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "value": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "verbose",
                              "advanced": false,
                              "dynamic": false,
                              "info": "Run in verbose mode, printing intermediate logs.",
                              "title_case": true
                            },
                            "_type": "CustomComponent"
                          },
                          "description": "This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.",
                          "icon": "🗃️",
                          "base_classes": [
                            "Chain",
                            "Callable",
                            "Chain",
                            "SQLDatabaseChain"
                          ],
                          "display_name": "SQLDatabaseChain",
                          "documentation": "",
                          "custom_fields": {
                            "database": null,
                            "llm_chain": null,
                            "query_checker_prompt": null,
                            "use_query_checker": null,
                            "verbose": null,
                            "metadata": null,
                            "tags": null,
                            "return_direct": null,
                            "return_intermediate_steps": null,
                            "return_sql": null,
                            "top_k": null
                          },
                          "output_types": [
                            "Chain",
                            "Callable",
                            "SQLDatabaseChain"
                          ],
                          "field_formatters": {},
                          "beta": true
                        },
                        "id": "Data-7LOaX",
                        "description": "This component enables seamless integration between LangChain's LLMChain and SQL databases, facilitating the generation and execution of SQL queries via natural language prompts. It supports query validation and correction with an optional query checker, allowing for enhanced reliability and security in database operations.",
                        "display_name": "SQLDatabaseChain"
                      },
                      "selected": true,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": 1457.6465619137339,
                        "y": 1459.7446248076478
                      }
                    },
                    {
                      "width": 384,
                      "height": 424,
                      "id": "LLMChain-CjVvM",
                      "type": "genericNode",
                      "position": {
                        "x": 915.2863268454837,
                        "y": 1457.9467145581293
                      },
                      "data": {
                        "type": "LLMChain",
                        "node": {
                          "template": {
                            "llm": {
                              "type": "BaseLanguageModel",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "llm",
                              "display_name": "LLM",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": true
                            },
                            "memory": {
                              "type": "BaseMemory",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "memory",
                              "display_name": "Memory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": true
                            },
                            "prompt": {
                              "type": "BasePromptTemplate",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": false,
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "prompt",
                              "display_name": "Prompt",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": true
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": false,
                              "dynamic": true,
                              "info": "",
                              "title_case": true,
                              "display_name": "code"
                            },
                            "_type": "CustomComponent"
                          },
                          "description": "Chain to run queries against LLMs",
                          "base_classes": [
                            "Chain",
                            "Callable",
                            "LLMChain",
                            "Chain"
                          ],
                          "display_name": "LLMChain",
                          "documentation": "",
                          "custom_fields": {
                            "prompt": null,
                            "llm": null,
                            "memory": null
                          },
                          "output_types": [
                            "Chain",
                            "Callable",
                            "LLMChain"
                          ],
                          "field_formatters": {},
                          "beta": true
                        },
                        "id": "LLMChain-CjVvM"
                      },
                      "selected": true,
                      "positionAbsolute": {
                        "x": 915.2863268454837,
                        "y": 1457.9467145581293
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "LLMChain-CjVvM",
                      "sourceHandle": "{œbaseClassesœ:[œChainœ,œCallableœ,œLLMChainœ,œChainœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-CjVvMœ}",
                      "target": "Data-7LOaX",
                      "targetHandle": "{œfieldNameœ:œllm_chainœ,œidœ:œData-7LOaXœ,œinputTypesœ:null,œtypeœ:œLLMChainœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "llm_chain",
                          "id": "Data-7LOaX",
                          "inputTypes": null,
                          "type": "LLMChain"
                        },
                        "sourceHandle": {
                          "baseClasses": [
                            "Chain",
                            "Callable",
                            "LLMChain",
                            "Chain"
                          ],
                          "dataType": "LLMChain",
                          "id": "LLMChain-CjVvM"
                        }
                      },
                      "style": {
                        "stroke": "#555"
                      },
                      "className": "stroke-foreground  stroke-connection",
                      "animated": false,
                      "id": "reactflow__edge-LLMChain-CjVvM{œbaseClassesœ:[œChainœ,œCallableœ,œLLMChainœ,œChainœ],œdataTypeœ:œLLMChainœ,œidœ:œLLMChain-CjVvMœ}-Data-7LOaX{œfieldNameœ:œllm_chainœ,œidœ:œData-7LOaXœ,œinputTypesœ:null,œtypeœ:œLLMChainœ}"
                    },
                    {
                      "source": "PromptTemplate-r4u5r",
                      "sourceHandle": "{œbaseClassesœ:[œBasePromptTemplateœ,œStringPromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-r4u5rœ}",
                      "target": "LLMChain-CjVvM",
                      "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-CjVvMœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "prompt",
                          "id": "LLMChain-CjVvM",
                          "inputTypes": null,
                          "type": "BasePromptTemplate"
                        },
                        "sourceHandle": {
                          "baseClasses": [
                            "BasePromptTemplate",
                            "StringPromptTemplate",
                            "PromptTemplate"
                          ],
                          "dataType": "PromptTemplate",
                          "id": "PromptTemplate-r4u5r"
                        }
                      },
                      "style": {
                        "stroke": "#555"
                      },
                      "className": "stroke-foreground  stroke-connection",
                      "animated": false,
                      "id": "reactflow__edge-PromptTemplate-r4u5r{œbaseClassesœ:[œBasePromptTemplateœ,œStringPromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-r4u5rœ}-LLMChain-CjVvM{œfieldNameœ:œpromptœ,œidœ:œLLMChain-CjVvMœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Mischievous Meitner",
                "description": "",
                "id": "iGjkH"
              },
              "official": false
            }
          },
          "id": "Data-BKI1G",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-03-20T15:34:27.876Z",
    "date_updated": "2024-03-28T10:04:55.365Z",
    "status": "Public",
    "sort": null,
    "user_updated": "23c5d1e9-66fe-4789-85da-d07be25ec3cc",
    "user_created": {
      "username": "yamon",
      "first_name": "YamonCompany",
      "last_name": "kim",
      "id": "23c5d1e9-66fe-4789-85da-d07be25ec3cc"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:12.179Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 20,
    "converter_version": "1.0.0"
  }
}