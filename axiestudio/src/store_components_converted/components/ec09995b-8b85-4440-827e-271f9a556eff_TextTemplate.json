{
  "id": "ec09995b-8b85-4440-827e-271f9a556eff",
  "name": "TextTemplate",
  "description": "Create a template to combine text inputs into one text output. Use {} to set an input handle. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "wiresky",
    "first_name": "Nguyen",
    "last_name": "Nam",
    "id": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "full_name": "Nguyen Nam"
  },
  "store_url": "https://www.langflow.store/store/component/ec09995b-8b85-4440-827e-271f9a556eff",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-25T09:31:10.418Z",
    "updated": "2024-05-25T09:31:10.447Z",
    "downloaded": "2025-08-19T17:50:05.406Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom langchain_core.prompts import PromptTemplate\r\nfrom axiestudio.field_typing import Prompt, TemplateField\r\nfrom typing import Any\r\n\r\n\r\nclass TextTemplate(CustomComponent):\r\n    display_name: str = \"TextTemplate\"\r\n    description: str = \"Create a template to combine text inputs into one text output. Use {} to set an input handle.\"\r\n    icon = \"prompts\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"template\": TemplateField(display_name=\"Template\"),\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        template: Prompt,\r\n        **kwargs,\r\n    ) -> Any:\r\n\r\n        prompt_template = PromptTemplate.from_template(str(template))\r\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\r\n        try:\r\n            formated_prompt = prompt_template.format(**kwargs)\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\r\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\r\n        return formated_prompt\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Create a template to combine text inputs into one text output. Use {} to set an input handle.",
            "icon": "prompts",
            "base_classes": [
              "Any"
            ],
            "display_name": "TextTemplate",
            "documentation": "",
            "custom_fields": {
              "template": null
            },
            "output_types": [
              "Any"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "CustomComponent-pvl8L"
        },
        "id": "CustomComponent-pvl8L",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "ec09995b-8b85-4440-827e-271f9a556eff",
    "name": "TextTemplate",
    "description": "Create a template to combine text inputs into one text output. Use {} to set an input handle.",
    "is_component": true,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "0.6.18",
    "private": true,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom langchain_core.prompts import PromptTemplate\r\nfrom axiestudio.field_typing import Prompt, TemplateField\r\nfrom typing import Any\r\n\r\n\r\nclass TextTemplate(CustomComponent):\r\n    display_name: str = \"TextTemplate\"\r\n    description: str = \"Create a template to combine text inputs into one text output. Use {} to set an input handle.\"\r\n    icon = \"prompts\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"template\": TemplateField(display_name=\"Template\"),\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        template: Prompt,\r\n        **kwargs,\r\n    ) -> Any:\r\n\r\n        prompt_template = PromptTemplate.from_template(str(template))\r\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\r\n        try:\r\n            formated_prompt = prompt_template.format(**kwargs)\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\r\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\r\n        return formated_prompt\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Create a template to combine text inputs into one text output. Use {} to set an input handle.",
              "icon": "prompts",
              "base_classes": [
                "Any"
              ],
              "display_name": "TextTemplate",
              "documentation": "",
              "custom_fields": {
                "template": null
              },
              "output_types": [
                "Any"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "CustomComponent-pvl8L"
          },
          "id": "CustomComponent-pvl8L",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-05-25T09:31:10.418Z",
    "date_updated": "2024-05-25T09:31:10.447Z",
    "status": "Public",
    "sort": null,
    "user_updated": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "user_created": {
      "username": "wiresky",
      "first_name": "Nguyen",
      "last_name": "Nam",
      "id": "dc599610-3065-4b5b-94ed-de108ec210dd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:12.427Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 4,
    "converter_version": "1.0.0"
  }
}