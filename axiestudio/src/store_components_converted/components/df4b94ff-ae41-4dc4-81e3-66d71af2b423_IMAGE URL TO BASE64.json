{
  "id": "df4b94ff-ae41-4dc4-81e3-66d71af2b423",
  "name": "IMAGE URL TO BASE64",
  "description": "This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "joaoguilhermeS",
    "first_name": "João",
    "last_name": "Oliveira",
    "id": "94b2e207-1a44-4905-856c-4f5a69c168ce",
    "full_name": "João Oliveira"
  },
  "store_url": "https://www.langflow.store/store/component/df4b94ff-ae41-4dc4-81e3-66d71af2b423",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-04-14T04:27:44.594Z",
    "updated": "2024-04-14T04:27:44.743Z",
    "downloaded": "2025-08-19T17:50:05.154Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n        return 1\n    \ninstall(\"Pillow\")\ninstall(\"requests\")\n\nimport requests\nimport base64\nfrom PIL import Image\nfrom io import BytesIO\nimport os\n\nclass FileUploadComponent(CustomComponent):\n    display_name = \"IMAGE URL TO BASE64\"\n    description = \"This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models.\"\n    \n    def build_config(self):\n        return {\n            \"url_raw_image\": {\n                \"display_name\": \"URL\",\n                \"advanced\": False,\n                \"required\": True,\n            },\n        }\n    \n    def build(self, url_raw_image: str) -> str:\n        \"\"\"\n        Converts an image given by a URL or a local path to a base64 string.\n        \n        Args:\n        image_path_or_url (str): The path or URL of the image.\n        \n        Returns:\n        str: Base64 encoded string of the image.\n        \"\"\"\n        \n        import requests\n        import base64\n        from PIL import Image\n        from io import BytesIO\n        import os\n        \n        if( len(list(url_raw_image) ) > 1):\n            markdown_images = []\n            for i, url in enumerate((list(url_raw_image) )):\n                if url.startswith(('http:', 'https:')):\n                    response = requests.get(url)\n                    image = Image.open(BytesIO(response.content))\n                    \n                \n                buffered = BytesIO()\n                image.save(buffered, format=image.format)\n                img_str = base64.b64encode(buffered.getvalue()).decode('utf-8')\n                \n                image_type = \"png\"  \n                \n                markdown_output = f\"![Image](data:image/{image_type};base64,{img_str})\"\n                markdown_images.append(markdown_output)\n            \n            return markdown_images\n            \n        \n        if url_raw_image.startswith(('http:', 'https:')):\n            response = requests.get(url_raw_image)\n            image = Image.open(BytesIO(response.content))\n        else:\n            image = Image.open(url_raw_image)\n        \n        buffered = BytesIO()\n        image.save(buffered, format=image.format)\n        img_str = base64.b64encode(buffered.getvalue()).decode('utf-8')\n        \n        image_type = \"png\"  \n        \n        markdown_output = f\"![Image](data:image/{image_type};base64,{img_str})\"\n        markdown_output.replace(\"['\", \"\")\n        markdown_output.replace(\"', '\",\"\")\n        markdown_output.replace(\"']\",\"\")\n\n        return markdown_output.replace(\"\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "url_raw_image": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "url_raw_image",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "IMAGE URL TO BASE64",
            "documentation": "",
            "custom_fields": {
              "url_raw_image": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "official": false
          },
          "id": "CustomComponent-wCKCR",
          "description": "This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models.",
          "display_name": "IMAGE URL TO BASE64"
        },
        "id": "CustomComponent-wCKCR",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "df4b94ff-ae41-4dc4-81e3-66d71af2b423",
    "name": "IMAGE URL TO BASE64",
    "description": "This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models.",
    "is_component": true,
    "liked_by_count": "34",
    "downloads_count": "289",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.0a18",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom axiestudio.field_typing import Data\nfrom axiestudio import CustomComponent\nimport subprocess\nimport sys\nimport base64\nfrom tempfile import NamedTemporaryFile\n\ndef install(package):\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n        return 1\n    \ninstall(\"Pillow\")\ninstall(\"requests\")\n\nimport requests\nimport base64\nfrom PIL import Image\nfrom io import BytesIO\nimport os\n\nclass FileUploadComponent(CustomComponent):\n    display_name = \"IMAGE URL TO BASE64\"\n    description = \"This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models.\"\n    \n    def build_config(self):\n        return {\n            \"url_raw_image\": {\n                \"display_name\": \"URL\",\n                \"advanced\": False,\n                \"required\": True,\n            },\n        }\n    \n    def build(self, url_raw_image: str) -> str:\n        \"\"\"\n        Converts an image given by a URL or a local path to a base64 string.\n        \n        Args:\n        image_path_or_url (str): The path or URL of the image.\n        \n        Returns:\n        str: Base64 encoded string of the image.\n        \"\"\"\n        \n        import requests\n        import base64\n        from PIL import Image\n        from io import BytesIO\n        import os\n        \n        if( len(list(url_raw_image) ) > 1):\n            markdown_images = []\n            for i, url in enumerate((list(url_raw_image) )):\n                if url.startswith(('http:', 'https:')):\n                    response = requests.get(url)\n                    image = Image.open(BytesIO(response.content))\n                    \n                \n                buffered = BytesIO()\n                image.save(buffered, format=image.format)\n                img_str = base64.b64encode(buffered.getvalue()).decode('utf-8')\n                \n                image_type = \"png\"  \n                \n                markdown_output = f\"![Image](data:image/{image_type};base64,{img_str})\"\n                markdown_images.append(markdown_output)\n            \n            return markdown_images\n            \n        \n        if url_raw_image.startswith(('http:', 'https:')):\n            response = requests.get(url_raw_image)\n            image = Image.open(BytesIO(response.content))\n        else:\n            image = Image.open(url_raw_image)\n        \n        buffered = BytesIO()\n        image.save(buffered, format=image.format)\n        img_str = base64.b64encode(buffered.getvalue()).decode('utf-8')\n        \n        image_type = \"png\"  \n        \n        markdown_output = f\"![Image](data:image/{image_type};base64,{img_str})\"\n        markdown_output.replace(\"['\", \"\")\n        markdown_output.replace(\"', '\",\"\")\n        markdown_output.replace(\"']\",\"\")\n\n        return markdown_output.replace(\"\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "url_raw_image": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "url_raw_image",
                  "display_name": "URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "IMAGE URL TO BASE64",
              "documentation": "",
              "custom_fields": {
                "url_raw_image": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "official": false
            },
            "id": "CustomComponent-wCKCR",
            "description": "This component converts an external image url in a base64 image (already formatted to markdown format), making possible connecting it to LLM models.",
            "display_name": "IMAGE URL TO BASE64"
          },
          "id": "CustomComponent-wCKCR",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-04-14T04:27:44.594Z",
    "date_updated": "2024-04-14T04:27:44.743Z",
    "status": "Public",
    "sort": null,
    "user_updated": "94b2e207-1a44-4905-856c-4f5a69c168ce",
    "user_created": {
      "username": "joaoguilhermeS",
      "first_name": "João",
      "last_name": "Oliveira",
      "id": "94b2e207-1a44-4905-856c-4f5a69c168ce"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:12.161Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 6,
    "converter_version": "1.0.0"
  }
}