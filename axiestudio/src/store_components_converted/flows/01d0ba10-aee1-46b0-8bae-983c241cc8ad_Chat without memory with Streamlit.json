{
  "id": "01d0ba10-aee1-46b0-8bae-983c241cc8ad",
  "name": "Chat without memory with Streamlit",
  "description": "An example of chat without memory with steamlit (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "joaoguilhermeS",
    "first_name": "João",
    "last_name": "Oliveira",
    "id": "94b2e207-1a44-4905-856c-4f5a69c168ce",
    "full_name": "João Oliveira"
  },
  "store_url": "https://www.langflow.store/store/component/01d0ba10-aee1-46b0-8bae-983c241cc8ad",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-22T20:13:03.795Z",
    "updated": "2024-08-06T20:54:39.164Z",
    "downloaded": "2025-08-19T17:50:06.216Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "StreamlitSendChatMessage-CRhEP",
        "type": "genericNode",
        "position": {
          "x": 1444.764250351425,
          "y": 499.2188738526247
        },
        "data": {
          "type": "StreamlitSendChatMessage",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.message import Message, Data\nfrom axiestudio.inputs import MessageTextInput, DropdownInput, MessageTextInput\nimport sys\nfrom json import loads, dumps\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass StreamlitSendChatMessage(Component):\n    display_name = \"StreamlitSendChatMessage\"\n    description = \"Send a Streamlit chat message (webhook).\"\n    icon = \"Streamlit\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            required=True\n        ),\n        DropdownInput(\n            name=\"role\",\n            display_name=\"Role\",\n            options=[\"ai\", \"user\"],\n            value=\"ai\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"message\",\n            display_name=\"Message\",\n            required=True,\n        )\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n\n    async def text_response(self) -> Message:\n        import requests\n        flow_id = self.vertex.graph.flow_id\n        resp = requests.post(f\"http://localhost:7881/api/v1/sessions/{self.session_id}/messages\", json={\"role\": self.role, \"content\": self.message})\n        if resp.status_code == 200:\n            await self.run_flow(\n                inputs={\"input_value\": \"\"}, flow_id=flow_id, tweaks={}\n            )\n            return Message(text=dumps(loads(resp.content)))\n        else:\n            raise Exception(\"Timeout exception\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "message",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "role": {
                "trace_as_metadata": true,
                "options": [
                  "ai",
                  "user"
                ],
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "ai",
                "name": "role",
                "display_name": "Role",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Send a Streamlit chat message (webhook).",
            "icon": "Streamlit",
            "base_classes": [
              "Message"
            ],
            "display_name": "Send",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "session_id",
              "role",
              "message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "StreamlitSendChatMessage-CRhEP",
          "description": "Send a Streamlit chat message (webhook).",
          "display_name": "Send"
        },
        "selected": false,
        "width": 384,
        "height": 466,
        "dragging": false,
        "positionAbsolute": {
          "x": 1444.764250351425,
          "y": 499.2188738526247
        }
      },
      {
        "id": "OpenAIModel-xdQck",
        "type": "genericNode",
        "position": {
          "x": 975.8463109584275,
          "y": 410.5496908447574
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        #model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=self.seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "json_mode",
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "gpt-4o",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "output_schema",
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 1,
                "name": "seed",
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool"
              },
              "system_message": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "aaaaa",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0.6",
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "load_from_db": false
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              }
            ],
            "field_order": [
              "input_value",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "stream",
              "system_message",
              "seed"
            ],
            "beta": false,
            "edited": true
          },
          "id": "OpenAIModel-xdQck",
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "OpenAI"
        },
        "selected": false,
        "width": 384,
        "height": 551,
        "dragging": false,
        "positionAbsolute": {
          "x": 975.8463109584275,
          "y": 410.5496908447574
        }
      },
      {
        "id": "TextInput-KGgiI",
        "type": "genericNode",
        "position": {
          "x": 103.48079780029991,
          "y": 218.1243132546839
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "You are a joker, make me laught!\\nInput:",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.14"
          },
          "id": "TextInput-KGgiI"
        },
        "selected": false,
        "width": 384,
        "height": 294,
        "positionAbsolute": {
          "x": 103.48079780029991,
          "y": 218.1243132546839
        },
        "dragging": false
      },
      {
        "id": "Listen-80LPs",
        "type": "genericNode",
        "position": {
          "x": 105.04200289944617,
          "y": 557.4328356914102
        },
        "data": {
          "type": "Listen",
          "node": {
            "template": {
              "_type": "Component",
              "ai_avatar": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ai_avatar",
                "value": "🤖",
                "display_name": "AI Avatar",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "It must be an emoji",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.message import Message, Data\nfrom axiestudio.inputs import MessageTextInput, IntInput\nimport sys\nfrom json import loads, dumps\n\nclass Listen(Component):\n    display_name = \"Listen\"\n    description = \"Retrieve the next Streamlit chat message (webhook).\"\n    icon = \"Streamlit\"\n    response = None\n\n    inputs = [\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout in seconds\",\n            value=120,\n            required=True\n        ),\n        IntInput(\n            name=\"port\",\n            display_name=\"Port\",\n            info=\"Port that Streamlit API is Running\",\n            advanced=True,\n            value=7881,\n            required=True\n        ),\n        StrInput(\n            name=\"title\",\n            display_name=\"Title\",\n            value=\"Welcome to My Streamlit Chat Application\",\n            info=\"The title of chat template\",\n            required=False,\n            advanced=True\n        ),\n        StrInput(\n            name=\"welcome_msg\",\n            display_name=\"Welcome Message\",\n            required=True,\n            advanced=True\n        ),\n        StrInput(\n            name=\"input_msg\",\n            display_name=\"Input Message\",\n            required=True,\n            value=\"A Text Input Placeholder\",\n            advanced=True\n        ),\n        FloatInput(\n            name=\"write_speed\",\n            display_name=\"Write Speed\",\n            value=0.2,\n            required=True,\n            advanced=True\n        ),\n        MessageTextInput(\n            name=\"ai_avatar\",\n            display_name=\"AI Avatar\",\n            value=\"🤖\",\n            info=\"It must be an emoji\",\n            required=False,\n            advanced=True\n        ),\n        MessageTextInput(\n            name=\"user_avatar\",\n            display_name=\"User Avatar\",\n            value=\"\",\n            required=False,\n            advanced=True\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Session ID\", name=\"session_id\", method=\"session_id_response\"),\n        Output(display_name=\"Message Content\", name=\"message_content\", method=\"message_content_response\"),\n        Output(display_name=\"History\", name=\"chat history\", method=\"chat_history_response\"),\n    ]\n\n    def get_api_response(self):\n        import requests\n        body = {\n            \"title\": self.title,\n            \"welcome_msg\": self.welcome_msg,\n            \"input_msg\": self.input_msg,\n            \"write_speed\": self.write_speed,\n        }\n        if self.ai_avatar: body[\"ai_avatar\"] = self.ai_avatar\n        if self.user_avatar: body[\"user_avatar\"] = self.user_avatar\n        resp = requests.post(f\"http://localhost:{self.port}/api/v1/chats\", json=body)\n        resp = requests.get(f\"http://localhost:{self.port}/api/v1/listen/message?timeout={self.timeout}\")\n        if resp.status_code == 200:\n            self.response = loads(resp.content)\n            return self.response\n        else:\n            raise Exception(\"Timeout exception\")\n    \n    def session_id_response(self) -> Message:\n        if self.response is not None:\n            return Message(\n                text=self.response[\"session_id\"],\n            )\n        return Message(\n            text=self.get_api_response()[\"session_id\"],\n        )\n\n    def message_content_response(self) -> Message:\n        if self.response is not None:\n            return Message(\n                text=self.response[\"content\"],\n                sender=\"User\",\n            )\n        return Message(\n            text=self.get_api_response()[\"content\"],\n        )\n\n    def chat_history_response(self) -> Data:\n        if self.response is not None:\n            return self.response[\"history\"]\n        return self.get_api_response()[\"history\"]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_msg": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_msg",
                "value": "A Text Input Placeholder",
                "display_name": "Input Message",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "port": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "port",
                "value": 7881,
                "display_name": "Port",
                "advanced": true,
                "dynamic": false,
                "info": "Port that Streamlit API is Running",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 120,
                "display_name": "Timeout",
                "advanced": false,
                "dynamic": false,
                "info": "Timeout in seconds",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "title": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "title",
                "value": "Welcome to My Streamlit Chat Application",
                "display_name": "Title",
                "advanced": true,
                "dynamic": false,
                "info": "The title of chat template",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "user_avatar": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "user_avatar",
                "value": "",
                "display_name": "User Avatar",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "welcome_msg": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "welcome_msg",
                "value": "Welcome!",
                "display_name": "Welcome Message",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "write_speed": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "write_speed",
                "value": 0.2,
                "display_name": "Write Speed",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Retrieve the next Streamlit chat message (webhook).",
            "icon": "Streamlit",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Listen",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "session_id",
                "display_name": "Session ID",
                "method": "session_id_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message_content",
                "display_name": "Message Content",
                "method": "message_content_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "chat history",
                "display_name": "History",
                "method": "chat_history_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [],
            "beta": false,
            "edited": true
          },
          "id": "Listen-80LPs",
          "description": "Retrieve the next Streamlit chat message (webhook).",
          "display_name": "Listen"
        },
        "selected": false,
        "width": 384,
        "height": 405,
        "dragging": false,
        "positionAbsolute": {
          "x": 105.04200289944617,
          "y": 557.4328356914102
        }
      },
      {
        "id": "Prompt-FAKBV",
        "type": "genericNode",
        "position": {
          "x": 538.9541465866148,
          "y": 470.42795450180245
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "You should behavior like: {behavior_prompt}\\n\nYou should help the user with its input: {user_input}\\n\nYou are an Assistant!",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "load_from_db": false
              },
              "behavior_prompt": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "behavior_prompt",
                "display_name": "behavior_prompt",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "user_input": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "user_input",
                "display_name": "user_input",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "base_classes": [
              "Message"
            ],
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "behavior_prompt",
                "user_input"
              ]
            },
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.14"
          },
          "id": "Prompt-FAKBV",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 493,
        "positionAbsolute": {
          "x": 538.9541465866148,
          "y": 470.42795450180245
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Listen-80LPs",
        "sourceHandle": "{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œmessage_contentœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-FAKBV",
        "targetHandle": "{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "user_input",
            "id": "Prompt-FAKBV",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Listen",
            "id": "Listen-80LPs",
            "name": "message_content",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Listen-80LPs{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œmessage_contentœ,œoutput_typesœ:[œMessageœ]}-Prompt-FAKBV{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-KGgiI",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-KGgiIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-FAKBV",
        "targetHandle": "{œfieldNameœ:œbehavior_promptœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "behavior_prompt",
            "id": "Prompt-FAKBV",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-KGgiI",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-KGgiI{œdataTypeœ:œTextInputœ,œidœ:œTextInput-KGgiIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-FAKBV{œfieldNameœ:œbehavior_promptœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Prompt-FAKBV",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-FAKBVœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-xdQck",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-xdQckœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-xdQck",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-FAKBV",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-FAKBV{œdataTypeœ:œPromptœ,œidœ:œPrompt-FAKBVœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-xdQck{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-xdQckœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "OpenAIModel-xdQck",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xdQckœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StreamlitSendChatMessage-CRhEP",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "StreamlitSendChatMessage-CRhEP",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-xdQck",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-xdQck{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xdQckœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StreamlitSendChatMessage-CRhEP{œfieldNameœ:œmessageœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Listen-80LPs",
        "sourceHandle": "{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œsession_idœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StreamlitSendChatMessage-CRhEP",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "StreamlitSendChatMessage-CRhEP",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Listen",
            "id": "Listen-80LPs",
            "name": "session_id",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Listen-80LPs{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œsession_idœ,œoutput_typesœ:[œMessageœ]}-StreamlitSendChatMessage-CRhEP{œfieldNameœ:œsession_idœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 2.18679590178499,
      "y": -109.35837563074688,
      "zoom": 0.7833996836036875
    }
  },
  "metadata": {
    "StreamlitSendChatMessage": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "TextInput": {
      "count": 1
    },
    "Listen": {
      "count": 1
    },
    "Prompt": {
      "count": 1
    },
    "total": 5
  },
  "original": {
    "id": "01d0ba10-aee1-46b0-8bae-983c241cc8ad",
    "name": "Chat without memory with Streamlit",
    "description": "An example of chat without memory with steamlit",
    "is_component": false,
    "liked_by_count": "3",
    "downloads_count": "100",
    "metadata": {
      "StreamlitSendChatMessage": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "TextInput": {
        "count": 1
      },
      "Listen": {
        "count": 1
      },
      "Prompt": {
        "count": 1
      },
      "total": 5
    },
    "last_tested_version": "1.0.14",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "StreamlitSendChatMessage-CRhEP",
          "type": "genericNode",
          "position": {
            "x": 1444.764250351425,
            "y": 499.2188738526247
          },
          "data": {
            "type": "StreamlitSendChatMessage",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.message import Message, Data\nfrom axiestudio.inputs import MessageTextInput, DropdownInput, MessageTextInput\nimport sys\nfrom json import loads, dumps\n\ndef install(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    return 1\n\ninstall(\"requests\")\n\nclass StreamlitSendChatMessage(Component):\n    display_name = \"StreamlitSendChatMessage\"\n    description = \"Send a Streamlit chat message (webhook).\"\n    icon = \"Streamlit\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            required=True\n        ),\n        DropdownInput(\n            name=\"role\",\n            display_name=\"Role\",\n            options=[\"ai\", \"user\"],\n            value=\"ai\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"message\",\n            display_name=\"Message\",\n            required=True,\n        )\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n\n    async def text_response(self) -> Message:\n        import requests\n        flow_id = self.vertex.graph.flow_id\n        resp = requests.post(f\"http://localhost:7881/api/v1/sessions/{self.session_id}/messages\", json={\"role\": self.role, \"content\": self.message})\n        if resp.status_code == 200:\n            await self.run_flow(\n                inputs={\"input_value\": \"\"}, flow_id=flow_id, tweaks={}\n            )\n            return Message(text=dumps(loads(resp.content)))\n        else:\n            raise Exception(\"Timeout exception\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "message",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "role": {
                  "trace_as_metadata": true,
                  "options": [
                    "ai",
                    "user"
                  ],
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "ai",
                  "name": "role",
                  "display_name": "Role",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Send a Streamlit chat message (webhook).",
              "icon": "Streamlit",
              "base_classes": [
                "Message"
              ],
              "display_name": "Send",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "session_id",
                "role",
                "message"
              ],
              "beta": false,
              "edited": true
            },
            "id": "StreamlitSendChatMessage-CRhEP",
            "description": "Send a Streamlit chat message (webhook).",
            "display_name": "Send"
          },
          "selected": false,
          "width": 384,
          "height": 466,
          "dragging": false,
          "positionAbsolute": {
            "x": 1444.764250351425,
            "y": 499.2188738526247
          }
        },
        {
          "id": "OpenAIModel-xdQck",
          "type": "genericNode",
          "position": {
            "x": 975.8463109584275,
            "y": 410.5496908447574
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        #model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=self.seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "json_mode",
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-4",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "gpt-4o",
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str"
                },
                "openai_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": {},
                  "name": "output_schema",
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 1,
                  "name": "seed",
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool"
                },
                "system_message": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "aaaaa",
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "0.6",
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "load_from_db": false
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                }
              ],
              "field_order": [
                "input_value",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "stream",
                "system_message",
                "seed"
              ],
              "beta": false,
              "edited": true
            },
            "id": "OpenAIModel-xdQck",
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI"
          },
          "selected": false,
          "width": 384,
          "height": 551,
          "dragging": false,
          "positionAbsolute": {
            "x": 975.8463109584275,
            "y": 410.5496908447574
          }
        },
        {
          "id": "TextInput-KGgiI",
          "type": "genericNode",
          "position": {
            "x": 103.48079780029991,
            "y": 218.1243132546839
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "You are a joker, make me laught!\\nInput:",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as input.",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.14"
            },
            "id": "TextInput-KGgiI"
          },
          "selected": false,
          "width": 384,
          "height": 294,
          "positionAbsolute": {
            "x": 103.48079780029991,
            "y": 218.1243132546839
          },
          "dragging": false
        },
        {
          "id": "Listen-80LPs",
          "type": "genericNode",
          "position": {
            "x": 105.04200289944617,
            "y": 557.4328356914102
          },
          "data": {
            "type": "Listen",
            "node": {
              "template": {
                "_type": "Component",
                "ai_avatar": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ai_avatar",
                  "value": "🤖",
                  "display_name": "AI Avatar",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "It must be an emoji",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\nfrom axiestudio.custom import Component\nfrom axiestudio.schema.message import Message, Data\nfrom axiestudio.inputs import MessageTextInput, IntInput\nimport sys\nfrom json import loads, dumps\n\nclass Listen(Component):\n    display_name = \"Listen\"\n    description = \"Retrieve the next Streamlit chat message (webhook).\"\n    icon = \"Streamlit\"\n    response = None\n\n    inputs = [\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout in seconds\",\n            value=120,\n            required=True\n        ),\n        IntInput(\n            name=\"port\",\n            display_name=\"Port\",\n            info=\"Port that Streamlit API is Running\",\n            advanced=True,\n            value=7881,\n            required=True\n        ),\n        StrInput(\n            name=\"title\",\n            display_name=\"Title\",\n            value=\"Welcome to My Streamlit Chat Application\",\n            info=\"The title of chat template\",\n            required=False,\n            advanced=True\n        ),\n        StrInput(\n            name=\"welcome_msg\",\n            display_name=\"Welcome Message\",\n            required=True,\n            advanced=True\n        ),\n        StrInput(\n            name=\"input_msg\",\n            display_name=\"Input Message\",\n            required=True,\n            value=\"A Text Input Placeholder\",\n            advanced=True\n        ),\n        FloatInput(\n            name=\"write_speed\",\n            display_name=\"Write Speed\",\n            value=0.2,\n            required=True,\n            advanced=True\n        ),\n        MessageTextInput(\n            name=\"ai_avatar\",\n            display_name=\"AI Avatar\",\n            value=\"🤖\",\n            info=\"It must be an emoji\",\n            required=False,\n            advanced=True\n        ),\n        MessageTextInput(\n            name=\"user_avatar\",\n            display_name=\"User Avatar\",\n            value=\"\",\n            required=False,\n            advanced=True\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Session ID\", name=\"session_id\", method=\"session_id_response\"),\n        Output(display_name=\"Message Content\", name=\"message_content\", method=\"message_content_response\"),\n        Output(display_name=\"History\", name=\"chat history\", method=\"chat_history_response\"),\n    ]\n\n    def get_api_response(self):\n        import requests\n        body = {\n            \"title\": self.title,\n            \"welcome_msg\": self.welcome_msg,\n            \"input_msg\": self.input_msg,\n            \"write_speed\": self.write_speed,\n        }\n        if self.ai_avatar: body[\"ai_avatar\"] = self.ai_avatar\n        if self.user_avatar: body[\"user_avatar\"] = self.user_avatar\n        resp = requests.post(f\"http://localhost:{self.port}/api/v1/chats\", json=body)\n        resp = requests.get(f\"http://localhost:{self.port}/api/v1/listen/message?timeout={self.timeout}\")\n        if resp.status_code == 200:\n            self.response = loads(resp.content)\n            return self.response\n        else:\n            raise Exception(\"Timeout exception\")\n    \n    def session_id_response(self) -> Message:\n        if self.response is not None:\n            return Message(\n                text=self.response[\"session_id\"],\n            )\n        return Message(\n            text=self.get_api_response()[\"session_id\"],\n        )\n\n    def message_content_response(self) -> Message:\n        if self.response is not None:\n            return Message(\n                text=self.response[\"content\"],\n                sender=\"User\",\n            )\n        return Message(\n            text=self.get_api_response()[\"content\"],\n        )\n\n    def chat_history_response(self) -> Data:\n        if self.response is not None:\n            return self.response[\"history\"]\n        return self.get_api_response()[\"history\"]",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_msg": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "input_msg",
                  "value": "A Text Input Placeholder",
                  "display_name": "Input Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "port",
                  "value": 7881,
                  "display_name": "Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Port that Streamlit API is Running",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "timeout",
                  "value": 120,
                  "display_name": "Timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Timeout in seconds",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "title": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "title",
                  "value": "Welcome to My Streamlit Chat Application",
                  "display_name": "Title",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The title of chat template",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "user_avatar": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "user_avatar",
                  "value": "",
                  "display_name": "User Avatar",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "welcome_msg": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "welcome_msg",
                  "value": "Welcome!",
                  "display_name": "Welcome Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "write_speed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "write_speed",
                  "value": 0.2,
                  "display_name": "Write Speed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Retrieve the next Streamlit chat message (webhook).",
              "icon": "Streamlit",
              "base_classes": [
                "Data",
                "Message"
              ],
              "display_name": "Listen",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "method": "session_id_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message_content",
                  "display_name": "Message Content",
                  "method": "message_content_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "chat history",
                  "display_name": "History",
                  "method": "chat_history_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [],
              "beta": false,
              "edited": true
            },
            "id": "Listen-80LPs",
            "description": "Retrieve the next Streamlit chat message (webhook).",
            "display_name": "Listen"
          },
          "selected": false,
          "width": 384,
          "height": 405,
          "dragging": false,
          "positionAbsolute": {
            "x": 105.04200289944617,
            "y": 557.4328356914102
          }
        },
        {
          "id": "Prompt-FAKBV",
          "type": "genericNode",
          "position": {
            "x": 538.9541465866148,
            "y": 470.42795450180245
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "You should behavior like: {behavior_prompt}\\n\nYou should help the user with its input: {user_input}\\n\nYou are an Assistant!",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "load_from_db": false
                },
                "behavior_prompt": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "behavior_prompt",
                  "display_name": "behavior_prompt",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "user_input": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "user_input",
                  "display_name": "user_input",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "base_classes": [
                "Message"
              ],
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "behavior_prompt",
                  "user_input"
                ]
              },
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.14"
            },
            "id": "Prompt-FAKBV",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 493,
          "positionAbsolute": {
            "x": 538.9541465866148,
            "y": 470.42795450180245
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "Listen-80LPs",
          "sourceHandle": "{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œmessage_contentœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-FAKBV",
          "targetHandle": "{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "user_input",
              "id": "Prompt-FAKBV",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Listen",
              "id": "Listen-80LPs",
              "name": "message_content",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Listen-80LPs{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œmessage_contentœ,œoutput_typesœ:[œMessageœ]}-Prompt-FAKBV{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "TextInput-KGgiI",
          "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-KGgiIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-FAKBV",
          "targetHandle": "{œfieldNameœ:œbehavior_promptœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "behavior_prompt",
              "id": "Prompt-FAKBV",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TextInput",
              "id": "TextInput-KGgiI",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-TextInput-KGgiI{œdataTypeœ:œTextInputœ,œidœ:œTextInput-KGgiIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-FAKBV{œfieldNameœ:œbehavior_promptœ,œidœ:œPrompt-FAKBVœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Prompt-FAKBV",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-FAKBVœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "OpenAIModel-xdQck",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-xdQckœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-xdQck",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-FAKBV",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-FAKBV{œdataTypeœ:œPromptœ,œidœ:œPrompt-FAKBVœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-xdQck{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-xdQckœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "OpenAIModel-xdQck",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xdQckœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "StreamlitSendChatMessage-CRhEP",
          "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "message",
              "id": "StreamlitSendChatMessage-CRhEP",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-xdQck",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-xdQck{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xdQckœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StreamlitSendChatMessage-CRhEP{œfieldNameœ:œmessageœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "Listen-80LPs",
          "sourceHandle": "{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œsession_idœ,œoutput_typesœ:[œMessageœ]}",
          "target": "StreamlitSendChatMessage-CRhEP",
          "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "StreamlitSendChatMessage-CRhEP",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Listen",
              "id": "Listen-80LPs",
              "name": "session_id",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Listen-80LPs{œdataTypeœ:œListenœ,œidœ:œListen-80LPsœ,œnameœ:œsession_idœ,œoutput_typesœ:[œMessageœ]}-StreamlitSendChatMessage-CRhEP{œfieldNameœ:œsession_idœ,œidœ:œStreamlitSendChatMessage-CRhEPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 2.18679590178499,
        "y": -109.35837563074688,
        "zoom": 0.7833996836036875
      }
    },
    "date_created": "2024-07-22T20:13:03.795Z",
    "date_updated": "2024-08-06T20:54:39.164Z",
    "status": "Public",
    "sort": null,
    "user_updated": "94b2e207-1a44-4905-856c-4f5a69c168ce",
    "user_created": {
      "username": "joaoguilhermeS",
      "first_name": "João",
      "last_name": "Oliveira",
      "id": "94b2e207-1a44-4905-856c-4f5a69c168ce"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:53.146Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 40,
    "converter_version": "1.0.0"
  }
}