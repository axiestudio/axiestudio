{
  "id": "4fe82f2c-f61b-4aca-8567-508caf13fe47",
  "name": "REST API - EXAMPLE",
  "description": "This flow showcases how to use the REST API Connector component to make REST API requests. It demonstrates configuring URLs, setting HTTP methods, adding custom headers, and including query parameters to fetch data from an API. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "viniciossilva3",
    "first_name": "Vinicios",
    "last_name": "Batista Da Silva",
    "id": "6a3a88e2-cc6b-4f37-aebb-a747c97c7489",
    "full_name": "Vinicios Batista Da Silva"
  },
  "store_url": "https://www.langflow.store/store/component/4fe82f2c-f61b-4aca-8567-508caf13fe47",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-24T14:56:58.149Z",
    "updated": "2024-09-13T19:39:51.554Z",
    "downloaded": "2025-08-19T17:50:07.118Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CreateData-7TbUD",
        "type": "genericNode",
        "position": {
          "x": 121.64171904500029,
          "y": 1208.156929687289
        },
        "data": {
          "type": "CreateData",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import IntInput, MessageTextInput, DictInput\nfrom axiestudio.io import Output\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(name=\"text_key\", display_name=\"Text Key\", info=\"Key to be used as text.\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > 15:\n                build_config[\"number_of_fields\"][\"value\"] = 15\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Data.\")\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Text\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict)\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        return return_data\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"number_of_fields\"][\"value\"], \"number_of_fields\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 2,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key to be used as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "field_1_key": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "HEADER_FIELD_1": "HEADER_VALUE_1"
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "HEADER_FIELD_2": "\"123456789\""
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "base_classes": [
              "Data"
            ],
            "display_name": "HEADER",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "CreateData-7TbUD"
        },
        "selected": false,
        "width": 384,
        "height": 502,
        "dragging": false,
        "positionAbsolute": {
          "x": 121.64171904500029,
          "y": 1208.156929687289
        }
      },
      {
        "id": "CreateData-ZdWS4",
        "type": "genericNode",
        "position": {
          "x": 121.64171904500029,
          "y": 1731.5966654051228
        },
        "data": {
          "type": "CreateData",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import IntInput, MessageTextInput, DictInput\nfrom axiestudio.io import Output\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(name=\"text_key\", display_name=\"Text Key\", info=\"Key to be used as text.\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > 15:\n                build_config[\"number_of_fields\"][\"value\"] = 15\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Data.\")\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Text\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict)\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        return return_data\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"number_of_fields\"][\"value\"], \"number_of_fields\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 2,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key to be used as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "field_1_key": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "BODY_DATA_FIELD_1": "BODY_DATA_VALUE"
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "BODY_DATA_FIELD_2": 123456789
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "base_classes": [
              "Data"
            ],
            "display_name": "BODY",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "CreateData-ZdWS4"
        },
        "selected": false,
        "width": 384,
        "height": 502,
        "positionAbsolute": {
          "x": 121.64171904500029,
          "y": 1731.5966654051228
        },
        "dragging": false
      },
      {
        "id": "CreateData-BHFCx",
        "type": "genericNode",
        "position": {
          "x": 121.64171904500029,
          "y": 2262.9730324948528
        },
        "data": {
          "type": "CreateData",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import IntInput, MessageTextInput, DictInput\nfrom axiestudio.io import Output\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(name=\"text_key\", display_name=\"Text Key\", info=\"Key to be used as text.\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > 15:\n                build_config[\"number_of_fields\"][\"value\"] = 15\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Data.\")\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Text\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict)\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        return return_data\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"number_of_fields\"][\"value\"], \"number_of_fields\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 2,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key to be used as text.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "field_1_key": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "QUERY_PARAM_FIELD_1": "QUERY_PARAM_VALUE"
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "QUERY_PARAM_FIELD_2": 123456789
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "base_classes": [
              "Data"
            ],
            "display_name": "QUERY PARAMS",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "CreateData-BHFCx"
        },
        "selected": false,
        "width": 384,
        "height": 502,
        "positionAbsolute": {
          "x": 121.64171904500029,
          "y": 2262.9730324948528
        },
        "dragging": false
      },
      {
        "id": "RESTAPIConnector-XGHd8",
        "type": "genericNode",
        "position": {
          "x": 800.0985601708094,
          "y": 1212.8363754352508
        },
        "data": {
          "type": "RESTAPIConnector",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "auth_type": {
                "trace_as_metadata": true,
                "options": [
                  "None",
                  "Basic",
                  "Bearer"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "auth_type",
                "value": "None",
                "display_name": "Authentication Type",
                "advanced": false,
                "dynamic": false,
                "info": "Choose the type of authentication for the request.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body",
                "value": {},
                "display_name": "Body Parameters",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Body parameters for POST, PUT, PATCH requests.",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\nfrom typing import Any, Dict, List, Optional\nfrom urllib.parse import parse_qsl, urlencode, urlparse, urlunparse\n\nimport requests\nfrom loguru import logger\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, DropdownInput, IntInput, MessageTextInput, MultilineInput, NestedDictInput, Output, SecretStrInput, StrInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\nclass RESTAPIConnector(Component):\n    display_name = \"REST API Connector\"\n    description = (\n        \"This component enables making advanced REST API requests to one or more URLs. \"\n        \"You can configure headers, body, and query parameters dynamically and externally, as well as manage \"\n        \"timeouts and choose from various HTTP methods. Additionally, you can parse a cURL command \"\n        \"to auto-fill these fields.\"\n    )\n    icon = \"Globe\"\n    name = \"RESTAPIConnector\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            info=\"Enter one or more URLs, separated by commas.\",\n        ),\n        DropdownInput(\n            name=\"method\",\n            display_name=\"HTTP Method\",\n            options=[\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"],\n            value=\"GET\",\n            info=\"Select the HTTP method for the request.\",\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout (seconds)\",\n            value=5,\n            info=\"Specify the timeout duration for the request.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            value=\"None\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"auth_type\",\n            display_name=\"Authentication Type\",\n            options=[\"None\", \"Basic\", \"Bearer\"],\n            value=\"None\",\n            advanced=True,\n            info=\"Choose the type of authentication for the request.\",\n        ),\n        StrInput(\n            name=\"username\",\n            display_name=\"Username (for Basic Auth)\",\n            advanced=True,\n            value=\"\",\n        ),\n        SecretStrInput(\n            name=\"password\",\n            display_name=\"Password (for Basic Auth)\",\n            advanced=True,\n            value=\"None\",\n        ),\n        NestedDictInput(\n            name=\"headers\",\n            display_name=\"Custom Headers\",\n            info=\"Headers to include with the request.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"body\",\n            display_name=\"Body Parameters\",\n            info=\"Body parameters for POST, PUT, PATCH requests.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"query_params\",\n            display_name=\"Query Parameters\",\n            info=\"Query parameters to append to the URL.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"curl\",\n            display_name=\"cURL Command\",\n            info=\"Paste a cURL command to auto-fill fields.\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response Data\", name=\"data\", method=\"make_requests\"),\n    ]\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            # Parse cURL command into components\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            if parsed.data:\n                try:\n                    json_data = json.loads(parsed.data)\n                    build_config[\"body\"][\"value\"] = json_data\n                except json.JSONDecodeError as e:\n                    logger.error(f\"Error decoding JSON data: {e}\")\n            else:\n                build_config[\"body\"][\"value\"] = {}\n        except Exception as exc:\n            logger.error(f\"Error parsing cURL: {exc}\")\n            raise ValueError(f\"Error parsing cURL: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: Optional[str] = None):\n        if field_name == \"curl\" and field_value:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    def make_request(\n        self,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n        auth: Optional[Any] = None,  # Adding auth parameter\n    ) -> Data:\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        try:\n            response = requests.request(\n                method, url, headers=headers, json=body, timeout=timeout, auth=auth\n            )\n            try:\n                result = response.json()\n            except json.JSONDecodeError:\n                result = response.text\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": response.status_code,\n                    \"result\": result,\n                },\n            )\n        except requests.exceptions.Timeout:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 408,\n                    \"error\": \"Request timed out\",\n                },\n            )\n        except requests.exceptions.RequestException as exc:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 500,\n                    \"error\": str(exc),\n                },\n            )\n\n    def add_query_params(self, url: str, params: dict) -> str:\n        url_parts = list(urlparse(url))\n        query = dict(parse_qsl(url_parts[4]))\n        query.update(params)\n        url_parts[4] = urlencode(query)\n        return urlunparse(url_parts)\n\n    def make_requests(self) -> List[Data]:\n        method = self.method or \"GET\"\n        urls = [url.strip() for url in self.urls if url.strip()] if self.urls else []\n        headers = self.headers.data if isinstance(self.headers, Data) else self.headers or {}\n        body = self.body.data if isinstance(self.body, Data) else self.body or {}\n        timeout = self.timeout or 5\n        query_params = self.query_params.data if isinstance(self.query_params, Data) else {}\n        auth = None\n        # Handling Authentication\n        if self.auth_type == \"Bearer\" and self.api_key:\n            headers[\"Authorization\"] = f\"Bearer {self.api_key}\"\n        elif self.auth_type == \"Basic\" and self.username and self.password:\n            from requests.auth import HTTPBasicAuth\n            auth = HTTPBasicAuth(self.username, self.password)\n        else:\n            auth = None\n\n        bodies = [body] * len(urls)\n        urls = [self.add_query_params(url, query_params) for url in urls]\n\n        if not urls:\n            logger.warning(\"No URLs provided; returning empty result set.\")\n            return []\n\n        results = [\n            self.make_request(method, url, headers, rec, timeout, auth=auth) for url, rec in zip(urls, bodies)\n        ]\n        self.status = results\n        return results",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "curl": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "curl",
                "value": "",
                "display_name": "cURL Command",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Paste a cURL command to auto-fill fields.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "headers": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers",
                "value": {},
                "display_name": "Custom Headers",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Headers to include with the request.",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput"
              },
              "method": {
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "GET",
                "display_name": "HTTP Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method for the request.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "password": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "password",
                "value": "",
                "display_name": "Password (for Basic Auth)",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "query_params": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "query_params",
                "value": {},
                "display_name": "Query Parameters",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Query parameters to append to the URL.",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 5,
                "display_name": "Timeout (seconds)",
                "advanced": false,
                "dynamic": false,
                "info": "Specify the timeout duration for the request.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "urls": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "urls",
                "value": [
                  "https://echo.hoppscotch.io",
                  "https://httpbin.org/get"
                ],
                "display_name": "URLs",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter one or more URLs, separated by commas.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "username": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "username",
                "value": "",
                "display_name": "Username (for Basic Auth)",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Perform REST API requests with multiple URLs, custom headers, parameters, HTTP methods, and authentication.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "REST API Connector",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Response Data",
                "method": "make_requests",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "urls",
              "method",
              "timeout",
              "api_key",
              "auth_type",
              "username",
              "password",
              "headers",
              "body",
              "query_params",
              "curl"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "RESTAPIConnector-XGHd8"
        },
        "selected": true,
        "width": 384,
        "height": 1182,
        "dragging": false,
        "positionAbsolute": {
          "x": 800.0985601708094,
          "y": 1212.8363754352508
        }
      },
      {
        "id": "ParseData-Qp5HQ",
        "type": "genericNode",
        "position": {
          "x": 1566.6039967978002,
          "y": 1770.4061245540775
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{data}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ParseData-Qp5HQ"
        },
        "selected": false,
        "width": 384,
        "height": 378,
        "positionAbsolute": {
          "x": 1566.6039967978002,
          "y": 1770.4061245540775
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-8ow9n",
        "type": "genericNode",
        "position": {
          "x": 2040.9122049753323,
          "y": 1878.1175503155089
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ChatOutput-8ow9n",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output"
        },
        "selected": false,
        "width": 384,
        "height": 302,
        "positionAbsolute": {
          "x": 2040.9122049753323,
          "y": 1878.1175503155089
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "CreateData-7TbUD",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-7TbUDœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "RESTAPIConnector-XGHd8",
        "targetHandle": "{œfieldNameœ:œheadersœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "headers",
            "id": "RESTAPIConnector-XGHd8",
            "inputTypes": [
              "Data"
            ],
            "type": "NestedDict"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-7TbUD",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-CreateData-7TbUD{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-7TbUDœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RESTAPIConnector-XGHd8{œfieldNameœ:œheadersœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
        "className": ""
      },
      {
        "source": "CreateData-ZdWS4",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-ZdWS4œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "RESTAPIConnector-XGHd8",
        "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body",
            "id": "RESTAPIConnector-XGHd8",
            "inputTypes": [
              "Data"
            ],
            "type": "NestedDict"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-ZdWS4",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-CreateData-ZdWS4{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-ZdWS4œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RESTAPIConnector-XGHd8{œfieldNameœ:œbodyœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
        "className": ""
      },
      {
        "source": "CreateData-BHFCx",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-BHFCxœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "RESTAPIConnector-XGHd8",
        "targetHandle": "{œfieldNameœ:œquery_paramsœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "query_params",
            "id": "RESTAPIConnector-XGHd8",
            "inputTypes": [
              "Data"
            ],
            "type": "NestedDict"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-BHFCx",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-CreateData-BHFCx{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-BHFCxœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RESTAPIConnector-XGHd8{œfieldNameœ:œquery_paramsœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
        "className": ""
      },
      {
        "source": "RESTAPIConnector-XGHd8",
        "sourceHandle": "{œdataTypeœ:œRESTAPIConnectorœ,œidœ:œRESTAPIConnector-XGHd8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-Qp5HQ",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Qp5HQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-Qp5HQ",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "RESTAPIConnector",
            "id": "RESTAPIConnector-XGHd8",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-RESTAPIConnector-XGHd8{œdataTypeœ:œRESTAPIConnectorœ,œidœ:œRESTAPIConnector-XGHd8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-Qp5HQ{œfieldNameœ:œdataœ,œidœ:œParseData-Qp5HQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ParseData-Qp5HQ",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Qp5HQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-8ow9n",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-8ow9nœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-8ow9n",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Qp5HQ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-Qp5HQ{œdataTypeœ:œParseDataœ,œidœ:œParseData-Qp5HQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-8ow9n{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-8ow9nœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 160.57030107659864,
      "y": -606.7493363247431,
      "zoom": 0.5367486566665334
    }
  },
  "metadata": {
    "CreateData": {
      "count": 3
    },
    "RESTAPIConnector": {
      "count": 1
    },
    "ParseData": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 6
  },
  "original": {
    "id": "4fe82f2c-f61b-4aca-8567-508caf13fe47",
    "name": "REST API - EXAMPLE",
    "description": "This flow showcases how to use the REST API Connector component to make REST API requests. It demonstrates configuring URLs, setting HTTP methods, adding custom headers, and including query parameters to fetch data from an API.",
    "is_component": false,
    "liked_by_count": "15",
    "downloads_count": "257",
    "metadata": {
      "CreateData": {
        "count": 3
      },
      "RESTAPIConnector": {
        "count": 1
      },
      "ParseData": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 6
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "CreateData-7TbUD",
          "type": "genericNode",
          "position": {
            "x": 121.64171904500029,
            "y": 1208.156929687289
          },
          "data": {
            "type": "CreateData",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any\n\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import IntInput, MessageTextInput, DictInput\nfrom axiestudio.io import Output\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(name=\"text_key\", display_name=\"Text Key\", info=\"Key to be used as text.\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > 15:\n                build_config[\"number_of_fields\"][\"value\"] = 15\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Data.\")\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Text\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict)\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        return return_data\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"number_of_fields\"][\"value\"], \"number_of_fields\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "number_of_fields": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "int",
                    "min": 1,
                    "max": 15,
                    "step": 1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_fields",
                  "value": 2,
                  "display_name": "Number of Fields",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of fields to be added to the record.",
                  "real_time_refresh": true,
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "text_key": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "",
                  "display_name": "Text Key",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Key to be used as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "field_1_key": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "field_1_key",
                  "value": {
                    "HEADER_FIELD_1": "HEADER_VALUE_1"
                  },
                  "display_name": "Field 1",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Key for field 1.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "field_2_key": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "field_2_key",
                  "value": {
                    "HEADER_FIELD_2": "\"123456789\""
                  },
                  "display_name": "Field 2",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Key for field 2.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                }
              },
              "description": "Dynamically create a Data with a specified number of fields.",
              "base_classes": [
                "Data"
              ],
              "display_name": "HEADER",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "build_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "number_of_fields",
                "text_key"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "CreateData-7TbUD"
          },
          "selected": false,
          "width": 384,
          "height": 502,
          "dragging": false,
          "positionAbsolute": {
            "x": 121.64171904500029,
            "y": 1208.156929687289
          }
        },
        {
          "id": "CreateData-ZdWS4",
          "type": "genericNode",
          "position": {
            "x": 121.64171904500029,
            "y": 1731.5966654051228
          },
          "data": {
            "type": "CreateData",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any\n\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import IntInput, MessageTextInput, DictInput\nfrom axiestudio.io import Output\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(name=\"text_key\", display_name=\"Text Key\", info=\"Key to be used as text.\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > 15:\n                build_config[\"number_of_fields\"][\"value\"] = 15\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Data.\")\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Text\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict)\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        return return_data\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"number_of_fields\"][\"value\"], \"number_of_fields\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "number_of_fields": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "int",
                    "min": 1,
                    "max": 15,
                    "step": 1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_fields",
                  "value": 2,
                  "display_name": "Number of Fields",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of fields to be added to the record.",
                  "real_time_refresh": true,
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "text_key": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "",
                  "display_name": "Text Key",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Key to be used as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "field_1_key": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "field_1_key",
                  "value": {
                    "BODY_DATA_FIELD_1": "BODY_DATA_VALUE"
                  },
                  "display_name": "Field 1",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Key for field 1.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "field_2_key": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "field_2_key",
                  "value": {
                    "BODY_DATA_FIELD_2": 123456789
                  },
                  "display_name": "Field 2",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Key for field 2.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                }
              },
              "description": "Dynamically create a Data with a specified number of fields.",
              "base_classes": [
                "Data"
              ],
              "display_name": "BODY",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "build_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "number_of_fields",
                "text_key"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "CreateData-ZdWS4"
          },
          "selected": false,
          "width": 384,
          "height": 502,
          "positionAbsolute": {
            "x": 121.64171904500029,
            "y": 1731.5966654051228
          },
          "dragging": false
        },
        {
          "id": "CreateData-BHFCx",
          "type": "genericNode",
          "position": {
            "x": 121.64171904500029,
            "y": 2262.9730324948528
          },
          "data": {
            "type": "CreateData",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any\n\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import IntInput, MessageTextInput, DictInput\nfrom axiestudio.io import Output\n\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=0,\n            range_spec=RangeSpec(min=1, max=15, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(name=\"text_key\", display_name=\"Text Key\", info=\"Key to be used as text.\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > 15:\n                build_config[\"number_of_fields\"][\"value\"] = 15\n                raise ValueError(\"Number of fields cannot exceed 15. Try using a Component to combine two Data.\")\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Text\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict)\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        return return_data\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        frontend_node[\"template\"] = self.update_build_config(\n            frontend_node[\"template\"], frontend_node[\"template\"][\"number_of_fields\"][\"value\"], \"number_of_fields\"\n        )\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "number_of_fields": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "int",
                    "min": 1,
                    "max": 15,
                    "step": 1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_fields",
                  "value": 2,
                  "display_name": "Number of Fields",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of fields to be added to the record.",
                  "real_time_refresh": true,
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "text_key": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "text_key",
                  "value": "",
                  "display_name": "Text Key",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Key to be used as text.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "field_1_key": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "field_1_key",
                  "value": {
                    "QUERY_PARAM_FIELD_1": "QUERY_PARAM_VALUE"
                  },
                  "display_name": "Field 1",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Key for field 1.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "field_2_key": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "field_2_key",
                  "value": {
                    "QUERY_PARAM_FIELD_2": 123456789
                  },
                  "display_name": "Field 2",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Key for field 2.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                }
              },
              "description": "Dynamically create a Data with a specified number of fields.",
              "base_classes": [
                "Data"
              ],
              "display_name": "QUERY PARAMS",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "build_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "number_of_fields",
                "text_key"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "CreateData-BHFCx"
          },
          "selected": false,
          "width": 384,
          "height": 502,
          "positionAbsolute": {
            "x": 121.64171904500029,
            "y": 2262.9730324948528
          },
          "dragging": false
        },
        {
          "id": "RESTAPIConnector-XGHd8",
          "type": "genericNode",
          "position": {
            "x": 800.0985601708094,
            "y": 1212.8363754352508
          },
          "data": {
            "type": "RESTAPIConnector",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "auth_type": {
                  "trace_as_metadata": true,
                  "options": [
                    "None",
                    "Basic",
                    "Bearer"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "auth_type",
                  "value": "None",
                  "display_name": "Authentication Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Choose the type of authentication for the request.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "body": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "body",
                  "value": {},
                  "display_name": "Body Parameters",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Body parameters for POST, PUT, PATCH requests.",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\nfrom typing import Any, Dict, List, Optional\nfrom urllib.parse import parse_qsl, urlencode, urlparse, urlunparse\n\nimport requests\nfrom loguru import logger\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, DropdownInput, IntInput, MessageTextInput, MultilineInput, NestedDictInput, Output, SecretStrInput, StrInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\nclass RESTAPIConnector(Component):\n    display_name = \"REST API Connector\"\n    description = (\n        \"This component enables making advanced REST API requests to one or more URLs. \"\n        \"You can configure headers, body, and query parameters dynamically and externally, as well as manage \"\n        \"timeouts and choose from various HTTP methods. Additionally, you can parse a cURL command \"\n        \"to auto-fill these fields.\"\n    )\n    icon = \"Globe\"\n    name = \"RESTAPIConnector\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            info=\"Enter one or more URLs, separated by commas.\",\n        ),\n        DropdownInput(\n            name=\"method\",\n            display_name=\"HTTP Method\",\n            options=[\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"],\n            value=\"GET\",\n            info=\"Select the HTTP method for the request.\",\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout (seconds)\",\n            value=5,\n            info=\"Specify the timeout duration for the request.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            value=\"None\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"auth_type\",\n            display_name=\"Authentication Type\",\n            options=[\"None\", \"Basic\", \"Bearer\"],\n            value=\"None\",\n            advanced=True,\n            info=\"Choose the type of authentication for the request.\",\n        ),\n        StrInput(\n            name=\"username\",\n            display_name=\"Username (for Basic Auth)\",\n            advanced=True,\n            value=\"\",\n        ),\n        SecretStrInput(\n            name=\"password\",\n            display_name=\"Password (for Basic Auth)\",\n            advanced=True,\n            value=\"None\",\n        ),\n        NestedDictInput(\n            name=\"headers\",\n            display_name=\"Custom Headers\",\n            info=\"Headers to include with the request.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"body\",\n            display_name=\"Body Parameters\",\n            info=\"Body parameters for POST, PUT, PATCH requests.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"query_params\",\n            display_name=\"Query Parameters\",\n            info=\"Query parameters to append to the URL.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"curl\",\n            display_name=\"cURL Command\",\n            info=\"Paste a cURL command to auto-fill fields.\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response Data\", name=\"data\", method=\"make_requests\"),\n    ]\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            # Parse cURL command into components\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            if parsed.data:\n                try:\n                    json_data = json.loads(parsed.data)\n                    build_config[\"body\"][\"value\"] = json_data\n                except json.JSONDecodeError as e:\n                    logger.error(f\"Error decoding JSON data: {e}\")\n            else:\n                build_config[\"body\"][\"value\"] = {}\n        except Exception as exc:\n            logger.error(f\"Error parsing cURL: {exc}\")\n            raise ValueError(f\"Error parsing cURL: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: Optional[str] = None):\n        if field_name == \"curl\" and field_value:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    def make_request(\n        self,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n        auth: Optional[Any] = None,  # Adding auth parameter\n    ) -> Data:\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        try:\n            response = requests.request(\n                method, url, headers=headers, json=body, timeout=timeout, auth=auth\n            )\n            try:\n                result = response.json()\n            except json.JSONDecodeError:\n                result = response.text\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": response.status_code,\n                    \"result\": result,\n                },\n            )\n        except requests.exceptions.Timeout:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 408,\n                    \"error\": \"Request timed out\",\n                },\n            )\n        except requests.exceptions.RequestException as exc:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 500,\n                    \"error\": str(exc),\n                },\n            )\n\n    def add_query_params(self, url: str, params: dict) -> str:\n        url_parts = list(urlparse(url))\n        query = dict(parse_qsl(url_parts[4]))\n        query.update(params)\n        url_parts[4] = urlencode(query)\n        return urlunparse(url_parts)\n\n    def make_requests(self) -> List[Data]:\n        method = self.method or \"GET\"\n        urls = [url.strip() for url in self.urls if url.strip()] if self.urls else []\n        headers = self.headers.data if isinstance(self.headers, Data) else self.headers or {}\n        body = self.body.data if isinstance(self.body, Data) else self.body or {}\n        timeout = self.timeout or 5\n        query_params = self.query_params.data if isinstance(self.query_params, Data) else {}\n        auth = None\n        # Handling Authentication\n        if self.auth_type == \"Bearer\" and self.api_key:\n            headers[\"Authorization\"] = f\"Bearer {self.api_key}\"\n        elif self.auth_type == \"Basic\" and self.username and self.password:\n            from requests.auth import HTTPBasicAuth\n            auth = HTTPBasicAuth(self.username, self.password)\n        else:\n            auth = None\n\n        bodies = [body] * len(urls)\n        urls = [self.add_query_params(url, query_params) for url in urls]\n\n        if not urls:\n            logger.warning(\"No URLs provided; returning empty result set.\")\n            return []\n\n        results = [\n            self.make_request(method, url, headers, rec, timeout, auth=auth) for url, rec in zip(urls, bodies)\n        ]\n        self.status = results\n        return results",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "curl": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "curl",
                  "value": "",
                  "display_name": "cURL Command",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Paste a cURL command to auto-fill fields.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "headers": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "headers",
                  "value": {},
                  "display_name": "Custom Headers",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Headers to include with the request.",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput"
                },
                "method": {
                  "trace_as_metadata": true,
                  "options": [
                    "GET",
                    "POST",
                    "PUT",
                    "PATCH",
                    "DELETE"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "method",
                  "value": "GET",
                  "display_name": "HTTP Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Select the HTTP method for the request.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "password": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "password",
                  "value": "",
                  "display_name": "Password (for Basic Auth)",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "query_params": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "query_params",
                  "value": {},
                  "display_name": "Query Parameters",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Query parameters to append to the URL.",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput"
                },
                "timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "timeout",
                  "value": 5,
                  "display_name": "Timeout (seconds)",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Specify the timeout duration for the request.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "urls": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "urls",
                  "value": [
                    "https://echo.hoppscotch.io",
                    "https://httpbin.org/get"
                  ],
                  "display_name": "URLs",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter one or more URLs, separated by commas.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "username": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "username",
                  "value": "",
                  "display_name": "Username (for Basic Auth)",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Perform REST API requests with multiple URLs, custom headers, parameters, HTTP methods, and authentication.",
              "icon": "Globe",
              "base_classes": [
                "Data"
              ],
              "display_name": "REST API Connector",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Response Data",
                  "method": "make_requests",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "urls",
                "method",
                "timeout",
                "api_key",
                "auth_type",
                "username",
                "password",
                "headers",
                "body",
                "query_params",
                "curl"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "RESTAPIConnector-XGHd8"
          },
          "selected": true,
          "width": 384,
          "height": 1182,
          "dragging": false,
          "positionAbsolute": {
            "x": 800.0985601708094,
            "y": 1212.8363754352508
          }
        },
        {
          "id": "ParseData-Qp5HQ",
          "type": "genericNode",
          "position": {
            "x": 1566.6039967978002,
            "y": 1770.4061245540775
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "value": "",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{data}",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Convert Data into plain text following a specified template.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ParseData-Qp5HQ"
          },
          "selected": false,
          "width": 384,
          "height": 378,
          "positionAbsolute": {
            "x": 1566.6039967978002,
            "y": 1770.4061245540775
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-8ow9n",
          "type": "genericNode",
          "position": {
            "x": 2040.9122049753323,
            "y": 1878.1175503155089
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_template",
                  "value": "{text}",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "AI",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ChatOutput-8ow9n",
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output"
          },
          "selected": false,
          "width": 384,
          "height": 302,
          "positionAbsolute": {
            "x": 2040.9122049753323,
            "y": 1878.1175503155089
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "CreateData-7TbUD",
          "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-7TbUDœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "RESTAPIConnector-XGHd8",
          "targetHandle": "{œfieldNameœ:œheadersœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
          "data": {
            "targetHandle": {
              "fieldName": "headers",
              "id": "RESTAPIConnector-XGHd8",
              "inputTypes": [
                "Data"
              ],
              "type": "NestedDict"
            },
            "sourceHandle": {
              "dataType": "CreateData",
              "id": "CreateData-7TbUD",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-CreateData-7TbUD{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-7TbUDœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RESTAPIConnector-XGHd8{œfieldNameœ:œheadersœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
          "className": ""
        },
        {
          "source": "CreateData-ZdWS4",
          "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-ZdWS4œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "RESTAPIConnector-XGHd8",
          "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
          "data": {
            "targetHandle": {
              "fieldName": "body",
              "id": "RESTAPIConnector-XGHd8",
              "inputTypes": [
                "Data"
              ],
              "type": "NestedDict"
            },
            "sourceHandle": {
              "dataType": "CreateData",
              "id": "CreateData-ZdWS4",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-CreateData-ZdWS4{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-ZdWS4œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RESTAPIConnector-XGHd8{œfieldNameœ:œbodyœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
          "className": ""
        },
        {
          "source": "CreateData-BHFCx",
          "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-BHFCxœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "RESTAPIConnector-XGHd8",
          "targetHandle": "{œfieldNameœ:œquery_paramsœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
          "data": {
            "targetHandle": {
              "fieldName": "query_params",
              "id": "RESTAPIConnector-XGHd8",
              "inputTypes": [
                "Data"
              ],
              "type": "NestedDict"
            },
            "sourceHandle": {
              "dataType": "CreateData",
              "id": "CreateData-BHFCx",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-CreateData-BHFCx{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-BHFCxœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RESTAPIConnector-XGHd8{œfieldNameœ:œquery_paramsœ,œidœ:œRESTAPIConnector-XGHd8œ,œinputTypesœ:[œDataœ],œtypeœ:œNestedDictœ}",
          "className": ""
        },
        {
          "source": "RESTAPIConnector-XGHd8",
          "sourceHandle": "{œdataTypeœ:œRESTAPIConnectorœ,œidœ:œRESTAPIConnector-XGHd8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-Qp5HQ",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Qp5HQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-Qp5HQ",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "RESTAPIConnector",
              "id": "RESTAPIConnector-XGHd8",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-RESTAPIConnector-XGHd8{œdataTypeœ:œRESTAPIConnectorœ,œidœ:œRESTAPIConnector-XGHd8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-Qp5HQ{œfieldNameœ:œdataœ,œidœ:œParseData-Qp5HQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ParseData-Qp5HQ",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Qp5HQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-8ow9n",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-8ow9nœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-8ow9n",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-Qp5HQ",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-Qp5HQ{œdataTypeœ:œParseDataœ,œidœ:œParseData-Qp5HQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-8ow9n{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-8ow9nœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 160.57030107659864,
        "y": -606.7493363247431,
        "zoom": 0.5367486566665334
      }
    },
    "date_created": "2024-08-24T14:56:58.149Z",
    "date_updated": "2024-09-13T19:39:51.554Z",
    "status": "Public",
    "sort": null,
    "user_updated": "6a3a88e2-cc6b-4f37-aebb-a747c97c7489",
    "user_created": {
      "username": "viniciossilva3",
      "first_name": "Vinicios",
      "last_name": "Batista Da Silva",
      "id": "6a3a88e2-cc6b-4f37-aebb-a747c97c7489"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:57.804Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 64,
    "converter_version": "1.0.0"
  }
}