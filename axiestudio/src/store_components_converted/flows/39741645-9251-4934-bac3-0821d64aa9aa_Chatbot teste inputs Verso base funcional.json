{
  "id": "39741645-9251-4934-bac3-0821d64aa9aa",
  "name": "Chatbot teste inputs (VersÃ£o base funcional)",
  "description": "This project can be used as a starting point for building a Chat experience with user specific memory. You can set a different Session ID to start a new message history. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "xelel",
    "first_name": "marcell",
    "last_name": "reis",
    "id": "896d41c6-1826-4abe-8f32-74bd1ed563ca",
    "full_name": "marcell reis"
  },
  "store_url": "https://www.langflow.store/store/component/39741645-9251-4934-bac3-0821d64aa9aa",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-10-06T23:11:59.945Z",
    "updated": "2024-10-06T23:11:59.989Z",
    "downloaded": "2025-08-19T17:50:07.463Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-JrOLL",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "frozen": false,
            "icon": "ChatOutput",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
              },
              "data_template": {
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "lf_version": "1.0.18"
          },
          "type": "ChatOutput"
        },
        "height": 302,
        "id": "ChatOutput-JrOLL",
        "position": {
          "x": 3601.881416385189,
          "y": 398.35960123816136
        },
        "selected": false,
        "type": "genericNode",
        "width": 384,
        "positionAbsolute": {
          "x": 3601.881416385189,
          "y": 398.35960123816136
        },
        "dragging": false
      },
      {
        "id": "AmazonBedrockModel-5N0fw",
        "type": "genericNode",
        "position": {
          "x": 1945.0023795522711,
          "y": -261.2460024381417
        },
        "data": {
          "type": "AmazonBedrockModel",
          "node": {
            "template": {
              "_type": "Component",
              "aws_access_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_access_key",
                "value": "",
                "display_name": "Access Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "aws_secret_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "aws_secret_key",
                "value": "",
                "display_name": "Secret Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import MessageTextInput, SecretStrInput\nfrom axiestudio.io import DictInput, DropdownInput\n\n\nclass AmazonBedrockComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock\"\n    description: str = \"Generate text using Amazon Bedrock LLMs.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=[\n                \"amazon.titan-text-express-v1\",\n                \"amazon.titan-text-lite-v1\",\n                \"amazon.titan-text-premier-v1:0\",\n                \"amazon.titan-embed-text-v1\",\n                \"amazon.titan-embed-text-v2:0\",\n                \"amazon.titan-embed-image-v1\",\n                \"amazon.titan-image-generator-v1\",\n                \"anthropic.claude-v2\",\n                \"anthropic.claude-v2:1\",\n                \"anthropic.claude-3-sonnet-20240229-v1:0\",\n                \"anthropic.claude-3-haiku-20240307-v1:0\",\n                \"anthropic.claude-3-opus-20240229-v1:0\",\n                \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n                \"anthropic.claude-instant-v1\",\n                \"ai21.j2-mid-v1\",\n                \"ai21.j2-ultra-v1\",\n                \"cohere.command-text-v14\",\n                \"cohere.command-light-text-v14\",\n                \"cohere.command-r-v1:0\",\n                \"cohere.command-r-plus-v1:0\",\n                \"cohere.embed-english-v3\",\n                \"cohere.embed-multilingual-v3\",\n                \"meta.llama2-13b-chat-v1\",\n                \"meta.llama2-70b-chat-v1\",\n                \"meta.llama3-8b-instruct-v1:0\",\n                \"meta.llama3-70b-instruct-v1:0\",\n                \"mistral.mistral-7b-instruct-v0:2\",\n                \"mistral.mixtral-8x7b-instruct-v0:1\",\n                \"mistral.mistral-large-2402-v1:0\",\n                \"mistral.mistral-small-2402-v1:0\",\n                \"stability.stable-diffusion-xl-v0\",\n                \"stability.stable-diffusion-xl-v1\",\n            ],\n            value=\"anthropic.claude-3-haiku-20240307-v1:0\",\n        ),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        MessageTextInput(name=\"credentials_profile_name\", display_name=\"Credentials Profile Name\", advanced=True),\n        MessageTextInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True, is_list=True),\n        MessageTextInput(name=\"endpoint_url\", display_name=\"Endpoint URL\", advanced=True),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_aws import ChatBedrock\n        except ImportError:\n            raise ImportError(\"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\")\n        if self.aws_access_key:\n            import boto3  # type: ignore\n\n            session = boto3.Session(\n                aws_access_key_id=self.aws_access_key,\n                aws_secret_access_key=self.aws_secret_key,\n            )\n        elif self.credentials_profile_name:\n            import boto3\n\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            import boto3\n\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        try:\n            output = ChatBedrock(  # type: ignore\n                client=boto3_client,\n                model_id=self.model_id,\n                region_name=self.region_name,\n                model_kwargs=self.model_kwargs,\n                endpoint_url=self.endpoint_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to AmazonBedrock API.\") from e\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "credentials_profile_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "credentials_profile_name",
                "value": "",
                "display_name": "Credentials Profile Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "endpoint_url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "endpoint_url",
                "value": "",
                "display_name": "Endpoint URL",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "model_id": {
                "trace_as_metadata": true,
                "options": [
                  "amazon.titan-text-express-v1",
                  "amazon.titan-text-lite-v1",
                  "amazon.titan-text-premier-v1:0",
                  "amazon.titan-embed-text-v1",
                  "amazon.titan-embed-text-v2:0",
                  "amazon.titan-embed-image-v1",
                  "amazon.titan-image-generator-v1",
                  "anthropic.claude-v2",
                  "anthropic.claude-v2:1",
                  "anthropic.claude-3-sonnet-20240229-v1:0",
                  "anthropic.claude-3-haiku-20240307-v1:0",
                  "anthropic.claude-3-opus-20240229-v1:0",
                  "anthropic.claude-3-5-sonnet-20240620-v1:0",
                  "anthropic.claude-instant-v1",
                  "ai21.j2-mid-v1",
                  "ai21.j2-ultra-v1",
                  "cohere.command-text-v14",
                  "cohere.command-light-text-v14",
                  "cohere.command-r-v1:0",
                  "cohere.command-r-plus-v1:0",
                  "cohere.embed-english-v3",
                  "cohere.embed-multilingual-v3",
                  "meta.llama2-13b-chat-v1",
                  "meta.llama2-70b-chat-v1",
                  "meta.llama3-8b-instruct-v1:0",
                  "meta.llama3-70b-instruct-v1:0",
                  "mistral.mistral-7b-instruct-v0:2",
                  "mistral.mixtral-8x7b-instruct-v0:1",
                  "mistral.mistral-large-2402-v1:0",
                  "mistral.mistral-small-2402-v1:0",
                  "stability.stable-diffusion-xl-v0",
                  "stability.stable-diffusion-xl-v1"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_id",
                "value": "anthropic.claude-3-5-sonnet-20240620-v1:0",
                "display_name": "Model ID",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "region_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "region_name",
                "value": "us-east-1",
                "display_name": "Region Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": true,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Generate text using Amazon Bedrock LLMs.",
            "icon": "Amazon",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Amazon Bedrock",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "model_id",
              "aws_access_key",
              "aws_secret_key",
              "credentials_profile_name",
              "region_name",
              "model_kwargs",
              "endpoint_url"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "AmazonBedrockModel-5N0fw"
        },
        "selected": true,
        "width": 384,
        "height": 763,
        "positionAbsolute": {
          "x": 1945.0023795522711,
          "y": -261.2460024381417
        },
        "dragging": false
      },
      {
        "id": "ChatInput-LMJqa",
        "type": "genericNode",
        "position": {
          "x": 2375.8000581308665,
          "y": -528.7943057234152
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "qual q quantidade de beneficiarios no mes de maio?",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ChatInput-LMJqa"
        },
        "selected": false,
        "width": 384,
        "height": 302,
        "positionAbsolute": {
          "x": 2375.8000581308665,
          "y": -528.7943057234152
        },
        "dragging": false
      },
      {
        "id": "SQLAgent-Lff7y",
        "type": "genericNode",
        "position": {
          "x": 2797.089887049184,
          "y": -0.8529786212245085
        },
        "data": {
          "type": "SQLAgent",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.agents import AgentExecutor\nfrom langchain_community.agent_toolkits import SQLDatabaseToolkit\nfrom langchain_community.agent_toolkits.sql.base import create_sql_agent\nfrom langchain_community.utilities import SQLDatabase\n\nfrom axiestudio.base.agents.agent import LCAgentComponent\nfrom axiestudio.inputs import MessageTextInput, HandleInput,PromptInput\n\n\nclass SQLAgentComponent(LCAgentComponent):\n    display_name = \"SQLAgent\"\n    description = \"Construct an SQL agent from an LLM and tools.\"\n    name = \"SQLAgent\"\n\n    inputs = LCAgentComponent._base_inputs + [\n        PromptInput(name=\"prefix\",display_name=\"prefix\",required=True),\n        PromptInput(name=\"suffix\",display_name=\"suffix\",required=True),\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MessageTextInput(name=\"database_uri\", display_name=\"Database URI\", required=True)\n    ]\n    \n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"message_response\")\n    ]\n\n\n    def build_agent(self) -> AgentExecutor:\n        db = SQLDatabase.from_uri(self.database_uri)\n        toolkit = SQLDatabaseToolkit(db=db, llm=self.llm)\n        agent_args = self.get_agent_kwargs()\n        agent_args[\"max_iterations\"] = agent_args[\"agent_executor_kwargs\"][\"max_iterations\"]\n        del agent_args[\"agent_executor_kwargs\"][\"max_iterations\"]\n        return create_sql_agent(llm=self.llm,\n                                toolkit=toolkit,\n                                input_variables=[\"input\", \"agent_scratchpad\"],\n                                prefix=self.prefix, suffix=self.suffix or [],\n                                **agent_args)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "database_uri": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "database_uri",
                "value": "awsathena+rest://@athena.us-east-1.amazonaws.com:443/uniodontodb?s3_staging_dir=s3://iknow-logs/",
                "display_name": "Database URI",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "handle_parsing_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "prefix": {
                "trace_as_input": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "prefix",
                "value": "You are an advanced AI agent specialized in SQL database interactions, data analysis. Your primary functions are:\n\n1. Execute SQL queries on the provided database\n2. Analyze the query results\n\n\nAlways ensure your response includes:\n- The direct answer to the user's question\n- An explanation of your approach\n\nRemember to handle potential errors gracefully, such as empty query results or not supported queries.",
                "display_name": "prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "load_from_db": false
              },
              "suffix": {
                "trace_as_input": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "suffix",
                "value": "Begin!\n\nQuestion: {input}\nThought Process: It is crucial to avoid generating information that is not present in the database or causing any misinterpretation. \nMaintaining accuracy and trustworthiness is a top priority. I will align the user's request with the appropriate data from the following tables:\n- 'vw_bi_clinico' for clinical data involving dental service providers (cooperados) and beneficiaries (pacientes).\n- 'vw_despesa_contrato' for details on billing and contract information related to cooperados and beneficiaries.\n- 'vw_mensalidade' to retrieve the current monthly fee for contracts, representing the amount charged to beneficiaries.\n- 'vw_mapeamento_cidade' for a geographical overview of cooperados and beneficiaries, categorized by city and state.\nYou are allowed to use only the 4 tables above.\n\nFirst, I will refer to the appropriate column descriptions for the relevant table.\nFor string or TEXT comparisons, I must use the `LIKE` operator for fuzzy matching. \nThe queries will return accurate and relevant data only from the database without speculative responses.\n\nIf the query relates to contract or billing information, I will refer to the `vw_despesa_contrato` table. \nFor monthly fees or subscription charges, I will consult the `vw_mensalidade` table. \nIf it involves clinical information or services rendered by cooperados, I will look into `vw_bi_clinico`. \nIf the user inquires about details related to cities or regions, the data will come from the `vw_mapeamento_cidade` table. \nWhen applicable, I will incorporate date filters to retrieve up-to-date information, ensuring the accuracy of the response.\n\n\nMy final answer will be delivered in the language of the user's query, using data from the corresponding tables, with a focus on reliability and factual correctness.\n{agent_scratchpad}\n",
                "display_name": "suffix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "load_from_db": false
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Construct an SQL agent from an LLM and tools.",
            "base_classes": [
              "Message"
            ],
            "display_name": "SQLAgent",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "prefix",
              "suffix",
              "llm",
              "database_uri"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18"
          },
          "id": "SQLAgent-Lff7y"
        },
        "selected": false,
        "width": 384,
        "height": 636,
        "positionAbsolute": {
          "x": 2797.089887049184,
          "y": -0.8529786212245085
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-jlB1X",
        "type": "genericNode",
        "position": {
          "x": 3027.2278548909017,
          "y": -715.7106196790176
        },
        "data": {
          "type": "CustomToolComponent",
          "node": {
            "template": {
              "_type": "Component",
              "tool_name": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_name",
                "value": "",
                "display_name": "Tool Name",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "Select the tool to use",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.inputs import MessageTextInput, HandleInput\nfrom axiestudio.template import Output\nfrom langchain.tools import Tool\nfrom typing import List\n\n# Define the functions from your custom tools\nimport json\nfrom datetime import datetime\n\n# Sample data descriptions\nVW_DESPESA_CONTRATO_COLUMNS_DESCRIPTIONS = {\"column1\": \"description1\", \"column2\": \"description2\"}\nVW_BI_CLINICO_COLUMNS_DESCRIPTIONS = {\"columnA\": \"descriptionA\", \"columnB\": \"descriptionB\"}\nVW_MENSALIDADE_COLUMNS_DESCRIPTIONS = {\"columnX\": \"descriptionX\", \"columnY\": \"descriptionY\"}\nVW_MAPEAMENTO_CIDADE_COLUMNS_DESCRIPTIONS = {\"columnM\": \"descriptionM\", \"columnN\": \"descriptionN\"}\n\ndef get_vw_despesa_contrato_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_DESPESA_CONTRATO_COLUMNS_DESCRIPTIONS)\n\ndef get_vw_mensalidade_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_MENSALIDADE_COLUMNS_DESCRIPTIONS)\n\ndef get_vw_mapeamento_cidade_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_MAPEAMENTO_CIDADE_COLUMNS_DESCRIPTIONS)\n\ndef get_vw_bi_clinico_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_BI_CLINICO_COLUMNS_DESCRIPTIONS)\n\ndef get_today_date(query: str) -> str:\n    return datetime.now().strftime(\"%Y-%m-%d\")\n\n# Create the component\nclass CustomToolComponent(Component):\n    display_name = \"Custom Tool Component\"\n    description = \"A component that uses custom tools to provide data descriptions and current date.\"\n    icon = \"tool-icon\"  # Replace with appropriate icon name\n\n    # Define inputs that the user can provide\n    inputs = [\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Query\",\n            info=\"Input query for the tool to process.\",\n        ),\n        HandleInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            input_types=[\"Tool\"],\n            info=\"Select the tool to use\",\n        ),\n    ]\n\n    # Define the output from the component\n    outputs = [\n        Output(\n            display_name=\"Response\",\n            name=\"response\",\n            method=\"process_tool\",\n        ),\n    ]\n\n    # Define available tools\n    def available_tools(self) -> List[Tool]:\n        return [\n            Tool.from_function(\n                func=get_vw_despesa_contrato_columns_descriptions,\n                name=\"get_vw_despesa_contrato_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_despesa_contrato table.\"\n            ),\n            Tool.from_function(\n                func=get_vw_mensalidade_columns_descriptions,\n                name=\"get_vw_mensalidade_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_mensalidade table.\"\n            ),\n            Tool.from_function(\n                func=get_vw_mapeamento_cidade_columns_descriptions,\n                name=\"get_vw_mapeamento_cidade_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_mapeamento_cidade table.\"\n            ),\n            Tool.from_function(\n                func=get_vw_bi_clinico_columns_descriptions,\n                name=\"get_vw_bi_clinico_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_bi_clinico table.\"\n            ),\n            Tool.from_function(\n                func=get_today_date,\n                name=\"get_today_date\",\n                description=\"Fetch the current date.\"\n            ),\n        ]\n\n    # Main processing method for the component\n    def process_tool(self) -> str:\n        query = self.query\n        selected_tool_name = self.tool_name\n        \n        # Find the selected tool\n        tools = {tool.name: tool for tool in self.available_tools()}\n        selected_tool = tools.get(selected_tool_name)\n\n        if selected_tool:\n            # Execute the selected tool with the provided query\n            return selected_tool.run(query)\n        else:\n            return \"Tool not found\"\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "query": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "query",
                "value": "",
                "display_name": "Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Input query for the tool to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A component that uses custom tools to provide data descriptions and current date.",
            "icon": "tool-icon",
            "base_classes": [
              "Text"
            ],
            "display_name": "Custom Component",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "response",
                "display_name": "Response",
                "method": "process_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "query",
              "tool_name"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-jlB1X"
        },
        "selected": false,
        "width": 384,
        "height": 378,
        "positionAbsolute": {
          "x": 3027.2278548909017,
          "y": -715.7106196790176
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "AmazonBedrockModel-5N0fw",
        "sourceHandle": "{ÅdataTypeÅ:ÅAmazonBedrockModelÅ,ÅidÅ:ÅAmazonBedrockModel-5N0fwÅ,ÅnameÅ:Åmodel_outputÅ,Åoutput_typesÅ:[ÅLanguageModelÅ]}",
        "target": "SQLAgent-Lff7y",
        "targetHandle": "{ÅfieldNameÅ:ÅllmÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅLanguageModelÅ],ÅtypeÅ:ÅotherÅ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "SQLAgent-Lff7y",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AmazonBedrockModel",
            "id": "AmazonBedrockModel-5N0fw",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-AmazonBedrockModel-5N0fw{ÅdataTypeÅ:ÅAmazonBedrockModelÅ,ÅidÅ:ÅAmazonBedrockModel-5N0fwÅ,ÅnameÅ:Åmodel_outputÅ,Åoutput_typesÅ:[ÅLanguageModelÅ]}-SQLAgent-Lff7y{ÅfieldNameÅ:ÅllmÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅLanguageModelÅ],ÅtypeÅ:ÅotherÅ}",
        "className": ""
      },
      {
        "source": "SQLAgent-Lff7y",
        "sourceHandle": "{ÅdataTypeÅ:ÅSQLAgentÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅnameÅ:ÅresponseÅ,Åoutput_typesÅ:[ÅMessageÅ]}",
        "target": "ChatOutput-JrOLL",
        "targetHandle": "{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅChatOutput-JrOLLÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-JrOLL",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "SQLAgent",
            "id": "SQLAgent-Lff7y",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-SQLAgent-Lff7y{ÅdataTypeÅ:ÅSQLAgentÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅnameÅ:ÅresponseÅ,Åoutput_typesÅ:[ÅMessageÅ]}-ChatOutput-JrOLL{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅChatOutput-JrOLLÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}",
        "className": ""
      },
      {
        "source": "ChatInput-LMJqa",
        "sourceHandle": "{ÅdataTypeÅ:ÅChatInputÅ,ÅidÅ:ÅChatInput-LMJqaÅ,ÅnameÅ:ÅmessageÅ,Åoutput_typesÅ:[ÅMessageÅ]}",
        "target": "SQLAgent-Lff7y",
        "targetHandle": "{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "SQLAgent-Lff7y",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-LMJqa",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-LMJqa{ÅdataTypeÅ:ÅChatInputÅ,ÅidÅ:ÅChatInput-LMJqaÅ,ÅnameÅ:ÅmessageÅ,Åoutput_typesÅ:[ÅMessageÅ]}-SQLAgent-Lff7y{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}"
      }
    ],
    "viewport": {
      "x": -815.4545489406439,
      "y": 334.4169626871166,
      "zoom": 0.44198602120997915
    }
  },
  "metadata": {
    "ChatOutput": {
      "count": 1
    },
    "AmazonBedrockModel": {
      "count": 1
    },
    "ChatInput": {
      "count": 1
    },
    "SQLAgent": {
      "count": 1
    },
    "CustomComponent": {
      "count": 1
    },
    "total": 5
  },
  "original": {
    "id": "39741645-9251-4934-bac3-0821d64aa9aa",
    "name": "Chatbot teste inputs (VersÃ£o base funcional)",
    "description": "This project can be used as a starting point for building a Chat experience with user specific memory. You can set a different Session ID to start a new message history.",
    "is_component": false,
    "liked_by_count": "1",
    "downloads_count": "4",
    "metadata": {
      "ChatOutput": {
        "count": 1
      },
      "AmazonBedrockModel": {
        "count": 1
      },
      "ChatInput": {
        "count": 1
      },
      "SQLAgent": {
        "count": 1
      },
      "CustomComponent": {
        "count": 1
      },
      "total": 5
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "id": "ChatOutput-JrOLL",
            "node": {
              "base_classes": [
                "Message"
              ],
              "beta": false,
              "conditional_paths": [],
              "custom_fields": {},
              "description": "Display a chat message in the Playground.",
              "display_name": "Chat Output",
              "documentation": "",
              "edited": false,
              "field_order": [
                "input_value",
                "store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "frozen": false,
              "icon": "ChatOutput",
              "output_types": [],
              "outputs": [
                {
                  "cache": true,
                  "display_name": "Message",
                  "method": "message_response",
                  "name": "message",
                  "selected": "Message",
                  "types": [
                    "Message"
                  ],
                  "value": "__UNDEFINED__"
                }
              ],
              "pinned": false,
              "template": {
                "_type": "Component",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
                },
                "data_template": {
                  "advanced": true,
                  "display_name": "Data Template",
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "data_template",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "{text}"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "input_value",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                },
                "sender": {
                  "advanced": true,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "info": "Type of sender.",
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "Machine"
                },
                "sender_name": {
                  "advanced": true,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "sender_name",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": "AI"
                },
                "session_id": {
                  "advanced": true,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "input_types": [
                    "Message"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "name": "session_id",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "type": "str",
                  "value": ""
                },
                "should_store_message": {
                  "_input_type": "BoolInput",
                  "advanced": true,
                  "display_name": "Store Messages",
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "list": false,
                  "name": "should_store_message",
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "trace_as_metadata": true,
                  "type": "bool",
                  "value": true
                }
              },
              "lf_version": "1.0.18"
            },
            "type": "ChatOutput"
          },
          "height": 302,
          "id": "ChatOutput-JrOLL",
          "position": {
            "x": 3601.881416385189,
            "y": 398.35960123816136
          },
          "selected": false,
          "type": "genericNode",
          "width": 384,
          "positionAbsolute": {
            "x": 3601.881416385189,
            "y": 398.35960123816136
          },
          "dragging": false
        },
        {
          "id": "AmazonBedrockModel-5N0fw",
          "type": "genericNode",
          "position": {
            "x": 1945.0023795522711,
            "y": -261.2460024381417
          },
          "data": {
            "type": "AmazonBedrockModel",
            "node": {
              "template": {
                "_type": "Component",
                "aws_access_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_access_key",
                  "value": "",
                  "display_name": "Access Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "aws_secret_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "aws_secret_key",
                  "value": "",
                  "display_name": "Secret Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.inputs import MessageTextInput, SecretStrInput\nfrom axiestudio.io import DictInput, DropdownInput\n\n\nclass AmazonBedrockComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock\"\n    description: str = \"Generate text using Amazon Bedrock LLMs.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=[\n                \"amazon.titan-text-express-v1\",\n                \"amazon.titan-text-lite-v1\",\n                \"amazon.titan-text-premier-v1:0\",\n                \"amazon.titan-embed-text-v1\",\n                \"amazon.titan-embed-text-v2:0\",\n                \"amazon.titan-embed-image-v1\",\n                \"amazon.titan-image-generator-v1\",\n                \"anthropic.claude-v2\",\n                \"anthropic.claude-v2:1\",\n                \"anthropic.claude-3-sonnet-20240229-v1:0\",\n                \"anthropic.claude-3-haiku-20240307-v1:0\",\n                \"anthropic.claude-3-opus-20240229-v1:0\",\n                \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n                \"anthropic.claude-instant-v1\",\n                \"ai21.j2-mid-v1\",\n                \"ai21.j2-ultra-v1\",\n                \"cohere.command-text-v14\",\n                \"cohere.command-light-text-v14\",\n                \"cohere.command-r-v1:0\",\n                \"cohere.command-r-plus-v1:0\",\n                \"cohere.embed-english-v3\",\n                \"cohere.embed-multilingual-v3\",\n                \"meta.llama2-13b-chat-v1\",\n                \"meta.llama2-70b-chat-v1\",\n                \"meta.llama3-8b-instruct-v1:0\",\n                \"meta.llama3-70b-instruct-v1:0\",\n                \"mistral.mistral-7b-instruct-v0:2\",\n                \"mistral.mixtral-8x7b-instruct-v0:1\",\n                \"mistral.mistral-large-2402-v1:0\",\n                \"mistral.mistral-small-2402-v1:0\",\n                \"stability.stable-diffusion-xl-v0\",\n                \"stability.stable-diffusion-xl-v1\",\n            ],\n            value=\"anthropic.claude-3-haiku-20240307-v1:0\",\n        ),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        MessageTextInput(name=\"credentials_profile_name\", display_name=\"Credentials Profile Name\", advanced=True),\n        MessageTextInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True, is_list=True),\n        MessageTextInput(name=\"endpoint_url\", display_name=\"Endpoint URL\", advanced=True),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_aws import ChatBedrock\n        except ImportError:\n            raise ImportError(\"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\")\n        if self.aws_access_key:\n            import boto3  # type: ignore\n\n            session = boto3.Session(\n                aws_access_key_id=self.aws_access_key,\n                aws_secret_access_key=self.aws_secret_key,\n            )\n        elif self.credentials_profile_name:\n            import boto3\n\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            import boto3\n\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        try:\n            output = ChatBedrock(  # type: ignore\n                client=boto3_client,\n                model_id=self.model_id,\n                region_name=self.region_name,\n                model_kwargs=self.model_kwargs,\n                endpoint_url=self.endpoint_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to AmazonBedrock API.\") from e\n        return output  # type: ignore\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "credentials_profile_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "credentials_profile_name",
                  "value": "",
                  "display_name": "Credentials Profile Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "endpoint_url": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "endpoint_url",
                  "value": "",
                  "display_name": "Endpoint URL",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "model_id": {
                  "trace_as_metadata": true,
                  "options": [
                    "amazon.titan-text-express-v1",
                    "amazon.titan-text-lite-v1",
                    "amazon.titan-text-premier-v1:0",
                    "amazon.titan-embed-text-v1",
                    "amazon.titan-embed-text-v2:0",
                    "amazon.titan-embed-image-v1",
                    "amazon.titan-image-generator-v1",
                    "anthropic.claude-v2",
                    "anthropic.claude-v2:1",
                    "anthropic.claude-3-sonnet-20240229-v1:0",
                    "anthropic.claude-3-haiku-20240307-v1:0",
                    "anthropic.claude-3-opus-20240229-v1:0",
                    "anthropic.claude-3-5-sonnet-20240620-v1:0",
                    "anthropic.claude-instant-v1",
                    "ai21.j2-mid-v1",
                    "ai21.j2-ultra-v1",
                    "cohere.command-text-v14",
                    "cohere.command-light-text-v14",
                    "cohere.command-r-v1:0",
                    "cohere.command-r-plus-v1:0",
                    "cohere.embed-english-v3",
                    "cohere.embed-multilingual-v3",
                    "meta.llama2-13b-chat-v1",
                    "meta.llama2-70b-chat-v1",
                    "meta.llama3-8b-instruct-v1:0",
                    "meta.llama3-70b-instruct-v1:0",
                    "mistral.mistral-7b-instruct-v0:2",
                    "mistral.mixtral-8x7b-instruct-v0:1",
                    "mistral.mistral-large-2402-v1:0",
                    "mistral.mistral-small-2402-v1:0",
                    "stability.stable-diffusion-xl-v0",
                    "stability.stable-diffusion-xl-v1"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_id",
                  "value": "anthropic.claude-3-5-sonnet-20240620-v1:0",
                  "display_name": "Model ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "load_from_db": false
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "region_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "region_name",
                  "value": "us-east-1",
                  "display_name": "Region Name",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": true,
                  "display_name": "Stream",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Generate text using Amazon Bedrock LLMs.",
              "icon": "Amazon",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Amazon Bedrock",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "model_id",
                "aws_access_key",
                "aws_secret_key",
                "credentials_profile_name",
                "region_name",
                "model_kwargs",
                "endpoint_url"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "AmazonBedrockModel-5N0fw"
          },
          "selected": true,
          "width": 384,
          "height": 763,
          "positionAbsolute": {
            "x": 1945.0023795522711,
            "y": -261.2460024381417
          },
          "dragging": false
        },
        {
          "id": "ChatInput-LMJqa",
          "type": "genericNode",
          "position": {
            "x": 2375.8000581308665,
            "y": -528.7943057234152
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "files",
                  "value": "",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "qual q quantidade de beneficiarios no mes de maio?",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "User",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "User",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ChatInput-LMJqa"
          },
          "selected": false,
          "width": 384,
          "height": 302,
          "positionAbsolute": {
            "x": 2375.8000581308665,
            "y": -528.7943057234152
          },
          "dragging": false
        },
        {
          "id": "SQLAgent-Lff7y",
          "type": "genericNode",
          "position": {
            "x": 2797.089887049184,
            "y": -0.8529786212245085
          },
          "data": {
            "type": "SQLAgent",
            "node": {
              "template": {
                "_type": "Component",
                "llm": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "llm",
                  "value": "",
                  "display_name": "Language Model",
                  "advanced": false,
                  "input_types": [
                    "LanguageModel"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain.agents import AgentExecutor\nfrom langchain_community.agent_toolkits import SQLDatabaseToolkit\nfrom langchain_community.agent_toolkits.sql.base import create_sql_agent\nfrom langchain_community.utilities import SQLDatabase\n\nfrom axiestudio.base.agents.agent import LCAgentComponent\nfrom axiestudio.inputs import MessageTextInput, HandleInput,PromptInput\n\n\nclass SQLAgentComponent(LCAgentComponent):\n    display_name = \"SQLAgent\"\n    description = \"Construct an SQL agent from an LLM and tools.\"\n    name = \"SQLAgent\"\n\n    inputs = LCAgentComponent._base_inputs + [\n        PromptInput(name=\"prefix\",display_name=\"prefix\",required=True),\n        PromptInput(name=\"suffix\",display_name=\"suffix\",required=True),\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MessageTextInput(name=\"database_uri\", display_name=\"Database URI\", required=True)\n    ]\n    \n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"message_response\")\n    ]\n\n\n    def build_agent(self) -> AgentExecutor:\n        db = SQLDatabase.from_uri(self.database_uri)\n        toolkit = SQLDatabaseToolkit(db=db, llm=self.llm)\n        agent_args = self.get_agent_kwargs()\n        agent_args[\"max_iterations\"] = agent_args[\"agent_executor_kwargs\"][\"max_iterations\"]\n        del agent_args[\"agent_executor_kwargs\"][\"max_iterations\"]\n        return create_sql_agent(llm=self.llm,\n                                toolkit=toolkit,\n                                input_variables=[\"input\", \"agent_scratchpad\"],\n                                prefix=self.prefix, suffix=self.suffix or [],\n                                **agent_args)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "database_uri": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "database_uri",
                  "value": "awsathena+rest://@athena.us-east-1.amazonaws.com:443/uniodontodb?s3_staging_dir=s3://iknow-logs/",
                  "display_name": "Database URI",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "handle_parsing_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "handle_parsing_errors",
                  "value": true,
                  "display_name": "Handle Parse Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "max_iterations": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_iterations",
                  "value": 15,
                  "display_name": "Max Iterations",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "prefix": {
                  "trace_as_input": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "prefix",
                  "value": "You are an advanced AI agent specialized in SQL database interactions, data analysis. Your primary functions are:\n\n1. Execute SQL queries on the provided database\n2. Analyze the query results\n\n\nAlways ensure your response includes:\n- The direct answer to the user's question\n- An explanation of your approach\n\nRemember to handle potential errors gracefully, such as empty query results or not supported queries.",
                  "display_name": "prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "load_from_db": false
                },
                "suffix": {
                  "trace_as_input": true,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "suffix",
                  "value": "Begin!\n\nQuestion: {input}\nThought Process: It is crucial to avoid generating information that is not present in the database or causing any misinterpretation. \nMaintaining accuracy and trustworthiness is a top priority. I will align the user's request with the appropriate data from the following tables:\n- 'vw_bi_clinico' for clinical data involving dental service providers (cooperados) and beneficiaries (pacientes).\n- 'vw_despesa_contrato' for details on billing and contract information related to cooperados and beneficiaries.\n- 'vw_mensalidade' to retrieve the current monthly fee for contracts, representing the amount charged to beneficiaries.\n- 'vw_mapeamento_cidade' for a geographical overview of cooperados and beneficiaries, categorized by city and state.\nYou are allowed to use only the 4 tables above.\n\nFirst, I will refer to the appropriate column descriptions for the relevant table.\nFor string or TEXT comparisons, I must use the `LIKE` operator for fuzzy matching. \nThe queries will return accurate and relevant data only from the database without speculative responses.\n\nIf the query relates to contract or billing information, I will refer to the `vw_despesa_contrato` table. \nFor monthly fees or subscription charges, I will consult the `vw_mensalidade` table. \nIf it involves clinical information or services rendered by cooperados, I will look into `vw_bi_clinico`. \nIf the user inquires about details related to cities or regions, the data will come from the `vw_mapeamento_cidade` table. \nWhen applicable, I will incorporate date filters to retrieve up-to-date information, ensuring the accuracy of the response.\n\n\nMy final answer will be delivered in the language of the user's query, using data from the corresponding tables, with a focus on reliability and factual correctness.\n{agent_scratchpad}\n",
                  "display_name": "suffix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "load_from_db": false
                },
                "verbose": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "verbose",
                  "value": true,
                  "display_name": "Verbose",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Construct an SQL agent from an LLM and tools.",
              "base_classes": [
                "Message"
              ],
              "display_name": "SQLAgent",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "response",
                  "display_name": "Response",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "handle_parsing_errors",
                "verbose",
                "max_iterations",
                "prefix",
                "suffix",
                "llm",
                "database_uri"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18"
            },
            "id": "SQLAgent-Lff7y"
          },
          "selected": false,
          "width": 384,
          "height": 636,
          "positionAbsolute": {
            "x": 2797.089887049184,
            "y": -0.8529786212245085
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-jlB1X",
          "type": "genericNode",
          "position": {
            "x": 3027.2278548909017,
            "y": -715.7106196790176
          },
          "data": {
            "type": "CustomToolComponent",
            "node": {
              "template": {
                "_type": "Component",
                "tool_name": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tool_name",
                  "value": "",
                  "display_name": "Tool Name",
                  "advanced": false,
                  "input_types": [
                    "Tool"
                  ],
                  "dynamic": false,
                  "info": "Select the tool to use",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.inputs import MessageTextInput, HandleInput\nfrom axiestudio.template import Output\nfrom langchain.tools import Tool\nfrom typing import List\n\n# Define the functions from your custom tools\nimport json\nfrom datetime import datetime\n\n# Sample data descriptions\nVW_DESPESA_CONTRATO_COLUMNS_DESCRIPTIONS = {\"column1\": \"description1\", \"column2\": \"description2\"}\nVW_BI_CLINICO_COLUMNS_DESCRIPTIONS = {\"columnA\": \"descriptionA\", \"columnB\": \"descriptionB\"}\nVW_MENSALIDADE_COLUMNS_DESCRIPTIONS = {\"columnX\": \"descriptionX\", \"columnY\": \"descriptionY\"}\nVW_MAPEAMENTO_CIDADE_COLUMNS_DESCRIPTIONS = {\"columnM\": \"descriptionM\", \"columnN\": \"descriptionN\"}\n\ndef get_vw_despesa_contrato_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_DESPESA_CONTRATO_COLUMNS_DESCRIPTIONS)\n\ndef get_vw_mensalidade_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_MENSALIDADE_COLUMNS_DESCRIPTIONS)\n\ndef get_vw_mapeamento_cidade_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_MAPEAMENTO_CIDADE_COLUMNS_DESCRIPTIONS)\n\ndef get_vw_bi_clinico_columns_descriptions(query: str) -> str:\n    return json.dumps(VW_BI_CLINICO_COLUMNS_DESCRIPTIONS)\n\ndef get_today_date(query: str) -> str:\n    return datetime.now().strftime(\"%Y-%m-%d\")\n\n# Create the component\nclass CustomToolComponent(Component):\n    display_name = \"Custom Tool Component\"\n    description = \"A component that uses custom tools to provide data descriptions and current date.\"\n    icon = \"tool-icon\"  # Replace with appropriate icon name\n\n    # Define inputs that the user can provide\n    inputs = [\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Query\",\n            info=\"Input query for the tool to process.\",\n        ),\n        HandleInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            input_types=[\"Tool\"],\n            info=\"Select the tool to use\",\n        ),\n    ]\n\n    # Define the output from the component\n    outputs = [\n        Output(\n            display_name=\"Response\",\n            name=\"response\",\n            method=\"process_tool\",\n        ),\n    ]\n\n    # Define available tools\n    def available_tools(self) -> List[Tool]:\n        return [\n            Tool.from_function(\n                func=get_vw_despesa_contrato_columns_descriptions,\n                name=\"get_vw_despesa_contrato_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_despesa_contrato table.\"\n            ),\n            Tool.from_function(\n                func=get_vw_mensalidade_columns_descriptions,\n                name=\"get_vw_mensalidade_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_mensalidade table.\"\n            ),\n            Tool.from_function(\n                func=get_vw_mapeamento_cidade_columns_descriptions,\n                name=\"get_vw_mapeamento_cidade_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_mapeamento_cidade table.\"\n            ),\n            Tool.from_function(\n                func=get_vw_bi_clinico_columns_descriptions,\n                name=\"get_vw_bi_clinico_columns_descriptions\",\n                description=\"Fetch description of columns in the vw_bi_clinico table.\"\n            ),\n            Tool.from_function(\n                func=get_today_date,\n                name=\"get_today_date\",\n                description=\"Fetch the current date.\"\n            ),\n        ]\n\n    # Main processing method for the component\n    def process_tool(self) -> str:\n        query = self.query\n        selected_tool_name = self.tool_name\n        \n        # Find the selected tool\n        tools = {tool.name: tool for tool in self.available_tools()}\n        selected_tool = tools.get(selected_tool_name)\n\n        if selected_tool:\n            # Execute the selected tool with the provided query\n            return selected_tool.run(query)\n        else:\n            return \"Tool not found\"\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "query": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "query",
                  "value": "",
                  "display_name": "Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Input query for the tool to process.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "A component that uses custom tools to provide data descriptions and current date.",
              "icon": "tool-icon",
              "base_classes": [
                "Text"
              ],
              "display_name": "Custom Component",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "response",
                  "display_name": "Response",
                  "method": "process_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "query",
                "tool_name"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-jlB1X"
          },
          "selected": false,
          "width": 384,
          "height": 378,
          "positionAbsolute": {
            "x": 3027.2278548909017,
            "y": -715.7106196790176
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "AmazonBedrockModel-5N0fw",
          "sourceHandle": "{ÅdataTypeÅ:ÅAmazonBedrockModelÅ,ÅidÅ:ÅAmazonBedrockModel-5N0fwÅ,ÅnameÅ:Åmodel_outputÅ,Åoutput_typesÅ:[ÅLanguageModelÅ]}",
          "target": "SQLAgent-Lff7y",
          "targetHandle": "{ÅfieldNameÅ:ÅllmÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅLanguageModelÅ],ÅtypeÅ:ÅotherÅ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "SQLAgent-Lff7y",
              "inputTypes": [
                "LanguageModel"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AmazonBedrockModel",
              "id": "AmazonBedrockModel-5N0fw",
              "name": "model_output",
              "output_types": [
                "LanguageModel"
              ]
            }
          },
          "id": "reactflow__edge-AmazonBedrockModel-5N0fw{ÅdataTypeÅ:ÅAmazonBedrockModelÅ,ÅidÅ:ÅAmazonBedrockModel-5N0fwÅ,ÅnameÅ:Åmodel_outputÅ,Åoutput_typesÅ:[ÅLanguageModelÅ]}-SQLAgent-Lff7y{ÅfieldNameÅ:ÅllmÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅLanguageModelÅ],ÅtypeÅ:ÅotherÅ}",
          "className": ""
        },
        {
          "source": "SQLAgent-Lff7y",
          "sourceHandle": "{ÅdataTypeÅ:ÅSQLAgentÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅnameÅ:ÅresponseÅ,Åoutput_typesÅ:[ÅMessageÅ]}",
          "target": "ChatOutput-JrOLL",
          "targetHandle": "{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅChatOutput-JrOLLÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-JrOLL",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "SQLAgent",
              "id": "SQLAgent-Lff7y",
              "name": "response",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-SQLAgent-Lff7y{ÅdataTypeÅ:ÅSQLAgentÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅnameÅ:ÅresponseÅ,Åoutput_typesÅ:[ÅMessageÅ]}-ChatOutput-JrOLL{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅChatOutput-JrOLLÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}",
          "className": ""
        },
        {
          "source": "ChatInput-LMJqa",
          "sourceHandle": "{ÅdataTypeÅ:ÅChatInputÅ,ÅidÅ:ÅChatInput-LMJqaÅ,ÅnameÅ:ÅmessageÅ,Åoutput_typesÅ:[ÅMessageÅ]}",
          "target": "SQLAgent-Lff7y",
          "targetHandle": "{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "SQLAgent-Lff7y",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-LMJqa",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-LMJqa{ÅdataTypeÅ:ÅChatInputÅ,ÅidÅ:ÅChatInput-LMJqaÅ,ÅnameÅ:ÅmessageÅ,Åoutput_typesÅ:[ÅMessageÅ]}-SQLAgent-Lff7y{ÅfieldNameÅ:Åinput_valueÅ,ÅidÅ:ÅSQLAgent-Lff7yÅ,ÅinputTypesÅ:[ÅMessageÅ],ÅtypeÅ:ÅstrÅ}"
        }
      ],
      "viewport": {
        "x": -815.4545489406439,
        "y": 334.4169626871166,
        "zoom": 0.44198602120997915
      }
    },
    "date_created": "2024-10-06T23:11:59.945Z",
    "date_updated": "2024-10-06T23:11:59.989Z",
    "status": "Public",
    "sort": null,
    "user_updated": "896d41c6-1826-4abe-8f32-74bd1ed563ca",
    "user_created": {
      "username": "xelel",
      "first_name": "marcell",
      "last_name": "reis",
      "id": "896d41c6-1826-4abe-8f32-74bd1ed563ca"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:56.361Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 44,
    "converter_version": "1.0.0"
  }
}